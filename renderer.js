(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["VpaidCreativeGlobalScope"] = factory();
	else
		root["VpaidCreativeGlobalScope"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/clsx/dist/clsx.m.js":
/*!******************************************!*\
  !*** ./node_modules/clsx/dist/clsx.m.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clsx: () => (/* binding */ clsx),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clsx);

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
  var loggedTypeFailures = {};
  var has = __webpack_require__(/*! ./lib/has */ "./node_modules/prop-types/lib/has.js");

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) { /**/ }
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (true) {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;


/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
var assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
var has = __webpack_require__(/*! ./lib/has */ "./node_modules/prop-types/lib/has.js");
var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var printWarning = function() {};

if (true) {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bigint: createPrimitiveTypeChecker('bigint'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message, data) {
    this.message = message;
    this.data = data && typeof data === 'object' ? data: {};
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at https://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError(
          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
          {expectedType: expectedType}
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (true) {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      var expectedTypes = [];
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
        if (checkerResult == null) {
          return null;
        }
        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
          expectedTypes.push(checkerResult.data.expectedType);
        }
      }
      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function invalidValidatorError(componentName, location, propFullName, key, type) {
    return new PropTypeError(
      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
    );
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (has(shapeTypes, key) && typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (true) {
  var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

  // By explicitly using `prop-types` you are opting into new development behavior.
  // https://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
} else // removed by dead control flow
{}


/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "./node_modules/prop-types/lib/has.js":
/*!********************************************!*\
  !*** ./node_modules/prop-types/lib/has.js ***!
  \********************************************/
/***/ ((module) => {

module.exports = Function.call.bind(Object.prototype.hasOwnProperty);


/***/ }),

/***/ "./node_modules/re-resizable/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/re-resizable/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Resizable: () => (/* binding */ Resizable)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var _resizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resizer */ "./node_modules/re-resizable/lib/resizer.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};




var DEFAULT_SIZE = {
    width: 'auto',
    height: 'auto',
};
var clamp = function (n, min, max) { return Math.max(Math.min(n, max), min); };
var snap = function (n, size, gridGap) {
    var v = Math.round(n / size);
    return v * size + gridGap * (v - 1);
};
var hasDirection = function (dir, target) {
    return new RegExp(dir, 'i').test(target);
};
// INFO: In case of window is a Proxy and does not porxy Events correctly, use isTouchEvent & isMouseEvent to distinguish event type instead of `instanceof`.
var isTouchEvent = function (event) {
    return Boolean(event.touches && event.touches.length);
};
var isMouseEvent = function (event) {
    return Boolean((event.clientX || event.clientX === 0) &&
        (event.clientY || event.clientY === 0));
};
var findClosestSnap = function (n, snapArray, snapGap) {
    if (snapGap === void 0) { snapGap = 0; }
    var closestGapIndex = snapArray.reduce(function (prev, curr, index) { return (Math.abs(curr - n) < Math.abs(snapArray[prev] - n) ? index : prev); }, 0);
    var gap = Math.abs(snapArray[closestGapIndex] - n);
    return snapGap === 0 || gap < snapGap ? snapArray[closestGapIndex] : n;
};
var getStringSize = function (n) {
    n = n.toString();
    if (n === 'auto') {
        return n;
    }
    if (n.endsWith('px')) {
        return n;
    }
    if (n.endsWith('%')) {
        return n;
    }
    if (n.endsWith('vh')) {
        return n;
    }
    if (n.endsWith('vw')) {
        return n;
    }
    if (n.endsWith('vmax')) {
        return n;
    }
    if (n.endsWith('vmin')) {
        return n;
    }
    return "".concat(n, "px");
};
var getPixelSize = function (size, parentSize, innerWidth, innerHeight) {
    if (size && typeof size === 'string') {
        if (size.endsWith('px')) {
            return Number(size.replace('px', ''));
        }
        if (size.endsWith('%')) {
            var ratio = Number(size.replace('%', '')) / 100;
            return parentSize * ratio;
        }
        if (size.endsWith('vw')) {
            var ratio = Number(size.replace('vw', '')) / 100;
            return innerWidth * ratio;
        }
        if (size.endsWith('vh')) {
            var ratio = Number(size.replace('vh', '')) / 100;
            return innerHeight * ratio;
        }
    }
    return size;
};
var calculateNewMax = function (parentSize, innerWidth, innerHeight, maxWidth, maxHeight, minWidth, minHeight) {
    maxWidth = getPixelSize(maxWidth, parentSize.width, innerWidth, innerHeight);
    maxHeight = getPixelSize(maxHeight, parentSize.height, innerWidth, innerHeight);
    minWidth = getPixelSize(minWidth, parentSize.width, innerWidth, innerHeight);
    minHeight = getPixelSize(minHeight, parentSize.height, innerWidth, innerHeight);
    return {
        maxWidth: typeof maxWidth === 'undefined' ? undefined : Number(maxWidth),
        maxHeight: typeof maxHeight === 'undefined' ? undefined : Number(maxHeight),
        minWidth: typeof minWidth === 'undefined' ? undefined : Number(minWidth),
        minHeight: typeof minHeight === 'undefined' ? undefined : Number(minHeight),
    };
};
/**
 * transform T | [T, T] to [T, T]
 * @param val
 * @returns
 */
// tslint:disable-next-line
var normalizeToPair = function (val) { return (Array.isArray(val) ? val : [val, val]); };
var definedProps = [
    'as',
    'ref',
    'style',
    'className',
    'grid',
    'gridGap',
    'snap',
    'bounds',
    'boundsByDirection',
    'size',
    'defaultSize',
    'minWidth',
    'minHeight',
    'maxWidth',
    'maxHeight',
    'lockAspectRatio',
    'lockAspectRatioExtraWidth',
    'lockAspectRatioExtraHeight',
    'enable',
    'handleStyles',
    'handleClasses',
    'handleWrapperStyle',
    'handleWrapperClass',
    'children',
    'onResizeStart',
    'onResize',
    'onResizeStop',
    'handleComponent',
    'scale',
    'resizeRatio',
    'snapGap',
];
// HACK: This class is used to calculate % size.
var baseClassName = '__resizable_base__';
var Resizable = /** @class */ (function (_super) {
    __extends(Resizable, _super);
    function Resizable(props) {
        var _a, _b, _c, _d;
        var _this = _super.call(this, props) || this;
        _this.ratio = 1;
        _this.resizable = null;
        // For parent boundary
        _this.parentLeft = 0;
        _this.parentTop = 0;
        // For boundary
        _this.resizableLeft = 0;
        _this.resizableRight = 0;
        _this.resizableTop = 0;
        _this.resizableBottom = 0;
        // For target boundary
        _this.targetLeft = 0;
        _this.targetTop = 0;
        _this.delta = {
            width: 0,
            height: 0,
        };
        _this.appendBase = function () {
            if (!_this.resizable || !_this.window) {
                return null;
            }
            var parent = _this.parentNode;
            if (!parent) {
                return null;
            }
            var element = _this.window.document.createElement('div');
            element.style.width = '100%';
            element.style.height = '100%';
            element.style.position = 'absolute';
            element.style.transform = 'scale(0, 0)';
            element.style.left = '0';
            element.style.flex = '0 0 100%';
            if (element.classList) {
                element.classList.add(baseClassName);
            }
            else {
                element.className += baseClassName;
            }
            parent.appendChild(element);
            return element;
        };
        _this.removeBase = function (base) {
            var parent = _this.parentNode;
            if (!parent) {
                return;
            }
            parent.removeChild(base);
        };
        _this.state = {
            isResizing: false,
            width: (_b = (_a = _this.propsSize) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 'auto',
            height: (_d = (_c = _this.propsSize) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : 'auto',
            direction: 'right',
            original: {
                x: 0,
                y: 0,
                width: 0,
                height: 0,
            },
            backgroundStyle: {
                height: '100%',
                width: '100%',
                backgroundColor: 'rgba(0,0,0,0)',
                cursor: 'auto',
                opacity: 0,
                position: 'fixed',
                zIndex: 9999,
                top: '0',
                left: '0',
                bottom: '0',
                right: '0',
            },
            flexBasis: undefined,
        };
        _this.onResizeStart = _this.onResizeStart.bind(_this);
        _this.onMouseMove = _this.onMouseMove.bind(_this);
        _this.onMouseUp = _this.onMouseUp.bind(_this);
        return _this;
    }
    Object.defineProperty(Resizable.prototype, "parentNode", {
        get: function () {
            if (!this.resizable) {
                return null;
            }
            return this.resizable.parentNode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resizable.prototype, "window", {
        get: function () {
            if (!this.resizable) {
                return null;
            }
            if (!this.resizable.ownerDocument) {
                return null;
            }
            return this.resizable.ownerDocument.defaultView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resizable.prototype, "propsSize", {
        get: function () {
            return this.props.size || this.props.defaultSize || DEFAULT_SIZE;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resizable.prototype, "size", {
        get: function () {
            var width = 0;
            var height = 0;
            if (this.resizable && this.window) {
                var orgWidth = this.resizable.offsetWidth;
                var orgHeight = this.resizable.offsetHeight;
                // HACK: Set position `relative` to get parent size.
                //       This is because when re-resizable set `absolute`, I can not get base width correctly.
                var orgPosition = this.resizable.style.position;
                if (orgPosition !== 'relative') {
                    this.resizable.style.position = 'relative';
                }
                // INFO: Use original width or height if set auto.
                width = this.resizable.style.width !== 'auto' ? this.resizable.offsetWidth : orgWidth;
                height = this.resizable.style.height !== 'auto' ? this.resizable.offsetHeight : orgHeight;
                // Restore original position
                this.resizable.style.position = orgPosition;
            }
            return { width: width, height: height };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resizable.prototype, "sizeStyle", {
        get: function () {
            var _this = this;
            var size = this.props.size;
            var getSize = function (key) {
                var _a;
                if (typeof _this.state[key] === 'undefined' || _this.state[key] === 'auto') {
                    return 'auto';
                }
                if (_this.propsSize && _this.propsSize[key] && ((_a = _this.propsSize[key]) === null || _a === void 0 ? void 0 : _a.toString().endsWith('%'))) {
                    if (_this.state[key].toString().endsWith('%')) {
                        return _this.state[key].toString();
                    }
                    var parentSize = _this.getParentSize();
                    var value = Number(_this.state[key].toString().replace('px', ''));
                    var percent = (value / parentSize[key]) * 100;
                    return "".concat(percent, "%");
                }
                return getStringSize(_this.state[key]);
            };
            var width = size && typeof size.width !== 'undefined' && !this.state.isResizing
                ? getStringSize(size.width)
                : getSize('width');
            var height = size && typeof size.height !== 'undefined' && !this.state.isResizing
                ? getStringSize(size.height)
                : getSize('height');
            return { width: width, height: height };
        },
        enumerable: false,
        configurable: true
    });
    Resizable.prototype.getParentSize = function () {
        if (!this.parentNode) {
            if (!this.window) {
                return { width: 0, height: 0 };
            }
            return { width: this.window.innerWidth, height: this.window.innerHeight };
        }
        var base = this.appendBase();
        if (!base) {
            return { width: 0, height: 0 };
        }
        // INFO: To calculate parent width with flex layout
        var wrapChanged = false;
        var wrap = this.parentNode.style.flexWrap;
        if (wrap !== 'wrap') {
            wrapChanged = true;
            this.parentNode.style.flexWrap = 'wrap';
            // HACK: Use relative to get parent padding size
        }
        base.style.position = 'relative';
        base.style.minWidth = '100%';
        base.style.minHeight = '100%';
        var size = {
            width: base.offsetWidth,
            height: base.offsetHeight,
        };
        if (wrapChanged) {
            this.parentNode.style.flexWrap = wrap;
        }
        this.removeBase(base);
        return size;
    };
    Resizable.prototype.bindEvents = function () {
        if (this.window) {
            this.window.addEventListener('mouseup', this.onMouseUp);
            this.window.addEventListener('mousemove', this.onMouseMove);
            this.window.addEventListener('mouseleave', this.onMouseUp);
            this.window.addEventListener('touchmove', this.onMouseMove, {
                capture: true,
                passive: false,
            });
            this.window.addEventListener('touchend', this.onMouseUp);
        }
    };
    Resizable.prototype.unbindEvents = function () {
        if (this.window) {
            this.window.removeEventListener('mouseup', this.onMouseUp);
            this.window.removeEventListener('mousemove', this.onMouseMove);
            this.window.removeEventListener('mouseleave', this.onMouseUp);
            this.window.removeEventListener('touchmove', this.onMouseMove, true);
            this.window.removeEventListener('touchend', this.onMouseUp);
        }
    };
    Resizable.prototype.componentDidMount = function () {
        if (!this.resizable || !this.window) {
            return;
        }
        var computedStyle = this.window.getComputedStyle(this.resizable);
        this.setState({
            width: this.state.width || this.size.width,
            height: this.state.height || this.size.height,
            flexBasis: computedStyle.flexBasis !== 'auto' ? computedStyle.flexBasis : undefined,
        });
    };
    Resizable.prototype.componentWillUnmount = function () {
        if (this.window) {
            this.unbindEvents();
        }
    };
    Resizable.prototype.createSizeForCssProperty = function (newSize, kind) {
        var propsSize = this.propsSize && this.propsSize[kind];
        return this.state[kind] === 'auto' &&
            this.state.original[kind] === newSize &&
            (typeof propsSize === 'undefined' || propsSize === 'auto')
            ? 'auto'
            : newSize;
    };
    Resizable.prototype.calculateNewMaxFromBoundary = function (maxWidth, maxHeight) {
        var boundsByDirection = this.props.boundsByDirection;
        var direction = this.state.direction;
        var widthByDirection = boundsByDirection && hasDirection('left', direction);
        var heightByDirection = boundsByDirection && hasDirection('top', direction);
        var boundWidth;
        var boundHeight;
        if (this.props.bounds === 'parent') {
            var parent_1 = this.parentNode;
            if (parent_1) {
                boundWidth = widthByDirection
                    ? this.resizableRight - this.parentLeft
                    : parent_1.offsetWidth + (this.parentLeft - this.resizableLeft);
                boundHeight = heightByDirection
                    ? this.resizableBottom - this.parentTop
                    : parent_1.offsetHeight + (this.parentTop - this.resizableTop);
            }
        }
        else if (this.props.bounds === 'window') {
            if (this.window) {
                boundWidth = widthByDirection ? this.resizableRight : this.window.innerWidth - this.resizableLeft;
                boundHeight = heightByDirection ? this.resizableBottom : this.window.innerHeight - this.resizableTop;
            }
        }
        else if (this.props.bounds) {
            boundWidth = widthByDirection
                ? this.resizableRight - this.targetLeft
                : this.props.bounds.offsetWidth + (this.targetLeft - this.resizableLeft);
            boundHeight = heightByDirection
                ? this.resizableBottom - this.targetTop
                : this.props.bounds.offsetHeight + (this.targetTop - this.resizableTop);
        }
        if (boundWidth && Number.isFinite(boundWidth)) {
            maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
        }
        if (boundHeight && Number.isFinite(boundHeight)) {
            maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
        }
        return { maxWidth: maxWidth, maxHeight: maxHeight };
    };
    Resizable.prototype.calculateNewSizeFromDirection = function (clientX, clientY) {
        var scale = this.props.scale || 1;
        var _a = normalizeToPair(this.props.resizeRatio || 1), resizeRatioX = _a[0], resizeRatioY = _a[1];
        var _b = this.state, direction = _b.direction, original = _b.original;
        var _c = this.props, lockAspectRatio = _c.lockAspectRatio, lockAspectRatioExtraHeight = _c.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _c.lockAspectRatioExtraWidth;
        var newWidth = original.width;
        var newHeight = original.height;
        var extraHeight = lockAspectRatioExtraHeight || 0;
        var extraWidth = lockAspectRatioExtraWidth || 0;
        if (hasDirection('right', direction)) {
            newWidth = original.width + ((clientX - original.x) * resizeRatioX) / scale;
            if (lockAspectRatio) {
                newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
            }
        }
        if (hasDirection('left', direction)) {
            newWidth = original.width - ((clientX - original.x) * resizeRatioX) / scale;
            if (lockAspectRatio) {
                newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
            }
        }
        if (hasDirection('bottom', direction)) {
            newHeight = original.height + ((clientY - original.y) * resizeRatioY) / scale;
            if (lockAspectRatio) {
                newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
            }
        }
        if (hasDirection('top', direction)) {
            newHeight = original.height - ((clientY - original.y) * resizeRatioY) / scale;
            if (lockAspectRatio) {
                newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
            }
        }
        return { newWidth: newWidth, newHeight: newHeight };
    };
    Resizable.prototype.calculateNewSizeFromAspectRatio = function (newWidth, newHeight, max, min) {
        var _a = this.props, lockAspectRatio = _a.lockAspectRatio, lockAspectRatioExtraHeight = _a.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _a.lockAspectRatioExtraWidth;
        var computedMinWidth = typeof min.width === 'undefined' ? 10 : min.width;
        var computedMaxWidth = typeof max.width === 'undefined' || max.width < 0 ? newWidth : max.width;
        var computedMinHeight = typeof min.height === 'undefined' ? 10 : min.height;
        var computedMaxHeight = typeof max.height === 'undefined' || max.height < 0 ? newHeight : max.height;
        var extraHeight = lockAspectRatioExtraHeight || 0;
        var extraWidth = lockAspectRatioExtraWidth || 0;
        if (lockAspectRatio) {
            var extraMinWidth = (computedMinHeight - extraHeight) * this.ratio + extraWidth;
            var extraMaxWidth = (computedMaxHeight - extraHeight) * this.ratio + extraWidth;
            var extraMinHeight = (computedMinWidth - extraWidth) / this.ratio + extraHeight;
            var extraMaxHeight = (computedMaxWidth - extraWidth) / this.ratio + extraHeight;
            var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);
            var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);
            var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);
            var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);
            newWidth = clamp(newWidth, lockedMinWidth, lockedMaxWidth);
            newHeight = clamp(newHeight, lockedMinHeight, lockedMaxHeight);
        }
        else {
            newWidth = clamp(newWidth, computedMinWidth, computedMaxWidth);
            newHeight = clamp(newHeight, computedMinHeight, computedMaxHeight);
        }
        return { newWidth: newWidth, newHeight: newHeight };
    };
    Resizable.prototype.setBoundingClientRect = function () {
        var adjustedScale = 1 / (this.props.scale || 1);
        // For parent boundary
        if (this.props.bounds === 'parent') {
            var parent_2 = this.parentNode;
            if (parent_2) {
                var parentRect = parent_2.getBoundingClientRect();
                this.parentLeft = parentRect.left * adjustedScale;
                this.parentTop = parentRect.top * adjustedScale;
            }
        }
        // For target(html element) boundary
        if (this.props.bounds && typeof this.props.bounds !== 'string') {
            var targetRect = this.props.bounds.getBoundingClientRect();
            this.targetLeft = targetRect.left * adjustedScale;
            this.targetTop = targetRect.top * adjustedScale;
        }
        // For boundary
        if (this.resizable) {
            var _a = this.resizable.getBoundingClientRect(), left = _a.left, top_1 = _a.top, right = _a.right, bottom = _a.bottom;
            this.resizableLeft = left * adjustedScale;
            this.resizableRight = right * adjustedScale;
            this.resizableTop = top_1 * adjustedScale;
            this.resizableBottom = bottom * adjustedScale;
        }
    };
    Resizable.prototype.onResizeStart = function (event, direction) {
        if (!this.resizable || !this.window) {
            return;
        }
        var clientX = 0;
        var clientY = 0;
        if (event.nativeEvent && isMouseEvent(event.nativeEvent)) {
            clientX = event.nativeEvent.clientX;
            clientY = event.nativeEvent.clientY;
        }
        else if (event.nativeEvent && isTouchEvent(event.nativeEvent)) {
            clientX = event.nativeEvent.touches[0].clientX;
            clientY = event.nativeEvent.touches[0].clientY;
        }
        if (this.props.onResizeStart) {
            if (this.resizable) {
                var startResize = this.props.onResizeStart(event, direction, this.resizable);
                if (startResize === false) {
                    return;
                }
            }
        }
        // Fix #168
        if (this.props.size) {
            if (typeof this.props.size.height !== 'undefined' && this.props.size.height !== this.state.height) {
                this.setState({ height: this.props.size.height });
            }
            if (typeof this.props.size.width !== 'undefined' && this.props.size.width !== this.state.width) {
                this.setState({ width: this.props.size.width });
            }
        }
        // For lockAspectRatio case
        this.ratio =
            typeof this.props.lockAspectRatio === 'number' ? this.props.lockAspectRatio : this.size.width / this.size.height;
        var flexBasis;
        var computedStyle = this.window.getComputedStyle(this.resizable);
        if (computedStyle.flexBasis !== 'auto') {
            var parent_3 = this.parentNode;
            if (parent_3) {
                var dir = this.window.getComputedStyle(parent_3).flexDirection;
                this.flexDir = dir.startsWith('row') ? 'row' : 'column';
                flexBasis = computedStyle.flexBasis;
            }
        }
        // For boundary
        this.setBoundingClientRect();
        this.bindEvents();
        var state = {
            original: {
                x: clientX,
                y: clientY,
                width: this.size.width,
                height: this.size.height,
            },
            isResizing: true,
            backgroundStyle: __assign(__assign({}, this.state.backgroundStyle), { cursor: this.window.getComputedStyle(event.target).cursor || 'auto' }),
            direction: direction,
            flexBasis: flexBasis,
        };
        this.setState(state);
    };
    Resizable.prototype.onMouseMove = function (event) {
        var _this = this;
        if (!this.state.isResizing || !this.resizable || !this.window) {
            return;
        }
        if (this.window.TouchEvent && isTouchEvent(event)) {
            try {
                event.preventDefault();
                event.stopPropagation();
            }
            catch (e) {
                // Ignore on fail
            }
        }
        var _a = this.props, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, minWidth = _a.minWidth, minHeight = _a.minHeight;
        var clientX = isTouchEvent(event) ? event.touches[0].clientX : event.clientX;
        var clientY = isTouchEvent(event) ? event.touches[0].clientY : event.clientY;
        var _b = this.state, direction = _b.direction, original = _b.original, width = _b.width, height = _b.height;
        var parentSize = this.getParentSize();
        var max = calculateNewMax(parentSize, this.window.innerWidth, this.window.innerHeight, maxWidth, maxHeight, minWidth, minHeight);
        maxWidth = max.maxWidth;
        maxHeight = max.maxHeight;
        minWidth = max.minWidth;
        minHeight = max.minHeight;
        // Calculate new size
        var _c = this.calculateNewSizeFromDirection(clientX, clientY), newHeight = _c.newHeight, newWidth = _c.newWidth;
        // Calculate max size from boundary settings
        var boundaryMax = this.calculateNewMaxFromBoundary(maxWidth, maxHeight);
        if (this.props.snap && this.props.snap.x) {
            newWidth = findClosestSnap(newWidth, this.props.snap.x, this.props.snapGap);
        }
        if (this.props.snap && this.props.snap.y) {
            newHeight = findClosestSnap(newHeight, this.props.snap.y, this.props.snapGap);
        }
        // Calculate new size from aspect ratio
        var newSize = this.calculateNewSizeFromAspectRatio(newWidth, newHeight, { width: boundaryMax.maxWidth, height: boundaryMax.maxHeight }, { width: minWidth, height: minHeight });
        newWidth = newSize.newWidth;
        newHeight = newSize.newHeight;
        if (this.props.grid) {
            var newGridWidth = snap(newWidth, this.props.grid[0], this.props.gridGap ? this.props.gridGap[0] : 0);
            var newGridHeight = snap(newHeight, this.props.grid[1], this.props.gridGap ? this.props.gridGap[1] : 0);
            var gap = this.props.snapGap || 0;
            var w = gap === 0 || Math.abs(newGridWidth - newWidth) <= gap ? newGridWidth : newWidth;
            var h = gap === 0 || Math.abs(newGridHeight - newHeight) <= gap ? newGridHeight : newHeight;
            newWidth = w;
            newHeight = h;
        }
        var delta = {
            width: newWidth - original.width,
            height: newHeight - original.height,
        };
        this.delta = delta;
        if (width && typeof width === 'string') {
            if (width.endsWith('%')) {
                var percent = (newWidth / parentSize.width) * 100;
                newWidth = "".concat(percent, "%");
            }
            else if (width.endsWith('vw')) {
                var vw = (newWidth / this.window.innerWidth) * 100;
                newWidth = "".concat(vw, "vw");
            }
            else if (width.endsWith('vh')) {
                var vh = (newWidth / this.window.innerHeight) * 100;
                newWidth = "".concat(vh, "vh");
            }
        }
        if (height && typeof height === 'string') {
            if (height.endsWith('%')) {
                var percent = (newHeight / parentSize.height) * 100;
                newHeight = "".concat(percent, "%");
            }
            else if (height.endsWith('vw')) {
                var vw = (newHeight / this.window.innerWidth) * 100;
                newHeight = "".concat(vw, "vw");
            }
            else if (height.endsWith('vh')) {
                var vh = (newHeight / this.window.innerHeight) * 100;
                newHeight = "".concat(vh, "vh");
            }
        }
        var newState = {
            width: this.createSizeForCssProperty(newWidth, 'width'),
            height: this.createSizeForCssProperty(newHeight, 'height'),
        };
        if (this.flexDir === 'row') {
            newState.flexBasis = newState.width;
        }
        else if (this.flexDir === 'column') {
            newState.flexBasis = newState.height;
        }
        var widthChanged = this.state.width !== newState.width;
        var heightChanged = this.state.height !== newState.height;
        var flexBaseChanged = this.state.flexBasis !== newState.flexBasis;
        var changed = widthChanged || heightChanged || flexBaseChanged;
        if (changed) {
            // For v18, update state sync
            (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.flushSync)(function () {
                _this.setState(newState);
            });
        }
        if (this.props.onResize) {
            if (changed) {
                this.props.onResize(event, direction, this.resizable, delta);
            }
        }
    };
    Resizable.prototype.onMouseUp = function (event) {
        var _a, _b;
        var _c = this.state, isResizing = _c.isResizing, direction = _c.direction, original = _c.original;
        if (!isResizing || !this.resizable) {
            return;
        }
        if (this.props.onResizeStop) {
            this.props.onResizeStop(event, direction, this.resizable, this.delta);
        }
        if (this.props.size) {
            this.setState({ width: (_a = this.props.size.width) !== null && _a !== void 0 ? _a : 'auto', height: (_b = this.props.size.height) !== null && _b !== void 0 ? _b : 'auto' });
        }
        this.unbindEvents();
        this.setState({
            isResizing: false,
            backgroundStyle: __assign(__assign({}, this.state.backgroundStyle), { cursor: 'auto' }),
        });
    };
    Resizable.prototype.updateSize = function (size) {
        var _a, _b;
        this.setState({ width: (_a = size.width) !== null && _a !== void 0 ? _a : 'auto', height: (_b = size.height) !== null && _b !== void 0 ? _b : 'auto' });
    };
    Resizable.prototype.renderResizer = function () {
        var _this = this;
        var _a = this.props, enable = _a.enable, handleStyles = _a.handleStyles, handleClasses = _a.handleClasses, handleWrapperStyle = _a.handleWrapperStyle, handleWrapperClass = _a.handleWrapperClass, handleComponent = _a.handleComponent;
        if (!enable) {
            return null;
        }
        var resizers = Object.keys(enable).map(function (dir) {
            if (enable[dir] !== false) {
                return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_resizer__WEBPACK_IMPORTED_MODULE_3__.Resizer, { direction: dir, onResizeStart: _this.onResizeStart, replaceStyles: handleStyles && handleStyles[dir], className: handleClasses && handleClasses[dir], children: handleComponent && handleComponent[dir] ? handleComponent[dir] : null }, dir));
            }
            return null;
        });
        // #93 Wrap the resize box in span (will not break 100% width/height)
        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: handleWrapperClass, style: handleWrapperStyle, children: resizers }));
    };
    Resizable.prototype.render = function () {
        var _this = this;
        var extendsProps = Object.keys(this.props).reduce(function (acc, key) {
            if (definedProps.indexOf(key) !== -1) {
                return acc;
            }
            acc[key] = _this.props[key];
            return acc;
        }, {});
        var style = __assign(__assign(__assign({ position: 'relative', userSelect: this.state.isResizing ? 'none' : 'auto' }, this.props.style), this.sizeStyle), { maxWidth: this.props.maxWidth, maxHeight: this.props.maxHeight, minWidth: this.props.minWidth, minHeight: this.props.minHeight, boxSizing: 'border-box', flexShrink: 0 });
        if (this.state.flexBasis) {
            style.flexBasis = this.state.flexBasis;
        }
        var Wrapper = this.props.as || 'div';
        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Wrapper, __assign({ style: style, className: this.props.className }, extendsProps, { 
            // `ref` is after `extendsProps` to ensure this one wins over a version
            // passed in
            ref: function (c) {
                if (c) {
                    _this.resizable = c;
                }
            }, children: [this.state.isResizing && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: this.state.backgroundStyle }), this.props.children, this.renderResizer()] })));
    };
    Resizable.defaultProps = {
        as: 'div',
        onResizeStart: function () { },
        onResize: function () { },
        onResizeStop: function () { },
        enable: {
            top: true,
            right: true,
            bottom: true,
            left: true,
            topRight: true,
            bottomRight: true,
            bottomLeft: true,
            topLeft: true,
        },
        style: {},
        grid: [1, 1],
        gridGap: [0, 0],
        lockAspectRatio: false,
        lockAspectRatioExtraWidth: 0,
        lockAspectRatioExtraHeight: 0,
        scale: 1,
        resizeRatio: 1,
        snapGap: 0,
    };
    return Resizable;
}(react__WEBPACK_IMPORTED_MODULE_1__.PureComponent));



/***/ }),

/***/ "./node_modules/re-resizable/lib/resizer.js":
/*!**************************************************!*\
  !*** ./node_modules/re-resizable/lib/resizer.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Resizer: () => (/* binding */ Resizer)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};


var rowSizeBase = {
    width: '100%',
    height: '10px',
    top: '0px',
    left: '0px',
    cursor: 'row-resize',
};
var colSizeBase = {
    width: '10px',
    height: '100%',
    top: '0px',
    left: '0px',
    cursor: 'col-resize',
};
var edgeBase = {
    width: '20px',
    height: '20px',
    position: 'absolute',
    zIndex: 1,
};
var styles = {
    top: __assign(__assign({}, rowSizeBase), { top: '-5px' }),
    right: __assign(__assign({}, colSizeBase), { left: undefined, right: '-5px' }),
    bottom: __assign(__assign({}, rowSizeBase), { top: undefined, bottom: '-5px' }),
    left: __assign(__assign({}, colSizeBase), { left: '-5px' }),
    topRight: __assign(__assign({}, edgeBase), { right: '-10px', top: '-10px', cursor: 'ne-resize' }),
    bottomRight: __assign(__assign({}, edgeBase), { right: '-10px', bottom: '-10px', cursor: 'se-resize' }),
    bottomLeft: __assign(__assign({}, edgeBase), { left: '-10px', bottom: '-10px', cursor: 'sw-resize' }),
    topLeft: __assign(__assign({}, edgeBase), { left: '-10px', top: '-10px', cursor: 'nw-resize' }),
};
var Resizer = (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(function (props) {
    var onResizeStart = props.onResizeStart, direction = props.direction, children = props.children, replaceStyles = props.replaceStyles, className = props.className;
    var onMouseDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (e) {
        onResizeStart(e, direction);
    }, [onResizeStart, direction]);
    var onTouchStart = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (e) {
        onResizeStart(e, direction);
    }, [onResizeStart, direction]);
    var style = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function () {
        return __assign(__assign({ position: 'absolute', userSelect: 'none' }, styles[direction]), (replaceStyles !== null && replaceStyles !== void 0 ? replaceStyles : {}));
    }, [replaceStyles, direction]);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: className || undefined, style: style, onMouseDown: onMouseDown, onTouchStart: onTouchStart, children: children }));
});


/***/ }),

/***/ "./node_modules/react-dom/cjs/react-dom-client.development.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom-client.development.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/**
 * @license React
 * react-dom-client.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

 true &&
  (function () {
    function findHook(fiber, id) {
      for (fiber = fiber.memoizedState; null !== fiber && 0 < id; )
        (fiber = fiber.next), id--;
      return fiber;
    }
    function copyWithSetImpl(obj, path, index, value) {
      if (index >= path.length) return value;
      var key = path[index],
        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
      updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
      return updated;
    }
    function copyWithRename(obj, oldPath, newPath) {
      if (oldPath.length !== newPath.length)
        console.warn("copyWithRename() expects paths of the same length");
      else {
        for (var i = 0; i < newPath.length - 1; i++)
          if (oldPath[i] !== newPath[i]) {
            console.warn(
              "copyWithRename() expects paths to be the same except for the deepest key"
            );
            return;
          }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
      }
    }
    function copyWithRenameImpl(obj, oldPath, newPath, index) {
      var oldKey = oldPath[index],
        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
      index + 1 === oldPath.length
        ? ((updated[newPath[index]] = updated[oldKey]),
          isArrayImpl(updated)
            ? updated.splice(oldKey, 1)
            : delete updated[oldKey])
        : (updated[oldKey] = copyWithRenameImpl(
            obj[oldKey],
            oldPath,
            newPath,
            index + 1
          ));
      return updated;
    }
    function copyWithDeleteImpl(obj, path, index) {
      var key = path[index],
        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
      if (index + 1 === path.length)
        return (
          isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key],
          updated
        );
      updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
      return updated;
    }
    function shouldSuspendImpl() {
      return !1;
    }
    function shouldErrorImpl() {
      return null;
    }
    function warnForMissingKey() {}
    function warnInvalidHookAccess() {
      console.error(
        "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks"
      );
    }
    function warnInvalidContextAccess() {
      console.error(
        "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
      );
    }
    function noop$2() {}
    function setToSortedString(set) {
      var array = [];
      set.forEach(function (value) {
        array.push(value);
      });
      return array.sort().join(", ");
    }
    function createFiber(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    }
    function scheduleRoot(root, element) {
      root.context === emptyContextObject &&
        (updateContainerImpl(root.current, 2, element, root, null, null),
        flushSyncWork$1());
    }
    function scheduleRefresh(root, update) {
      if (null !== resolveFamily) {
        var staleFamilies = update.staleFamilies;
        update = update.updatedFamilies;
        flushPendingEffects();
        scheduleFibersWithFamiliesRecursively(
          root.current,
          update,
          staleFamilies
        );
        flushSyncWork$1();
      }
    }
    function setRefreshHandler(handler) {
      resolveFamily = handler;
    }
    function isValidContainer(node) {
      return !(
        !node ||
        (1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType)
      );
    }
    function getNearestMountedFiber(fiber) {
      var node = fiber,
        nearestMounted = fiber;
      if (fiber.alternate) for (; node.return; ) node = node.return;
      else {
        fiber = node;
        do
          (node = fiber),
            0 !== (node.flags & 4098) && (nearestMounted = node.return),
            (fiber = node.return);
        while (fiber);
      }
      return 3 === node.tag ? nearestMounted : null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (13 === fiber.tag) {
        var suspenseState = fiber.memoizedState;
        null === suspenseState &&
          ((fiber = fiber.alternate),
          null !== fiber && (suspenseState = fiber.memoizedState));
        if (null !== suspenseState) return suspenseState.dehydrated;
      }
      return null;
    }
    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber)
        throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        alternate = getNearestMountedFiber(fiber);
        if (null === alternate)
          throw Error("Unable to find node on an unmounted component.");
        return alternate !== fiber ? null : fiber;
      }
      for (var a = fiber, b = alternate; ; ) {
        var parentA = a.return;
        if (null === parentA) break;
        var parentB = parentA.alternate;
        if (null === parentB) {
          b = parentA.return;
          if (null !== b) {
            a = b;
            continue;
          }
          break;
        }
        if (parentA.child === parentB.child) {
          for (parentB = parentA.child; parentB; ) {
            if (parentB === a) return assertIsMounted(parentA), fiber;
            if (parentB === b) return assertIsMounted(parentA), alternate;
            parentB = parentB.sibling;
          }
          throw Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) (a = parentA), (b = parentB);
        else {
          for (var didFindChild = !1, _child = parentA.child; _child; ) {
            if (_child === a) {
              didFindChild = !0;
              a = parentA;
              b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = !0;
              b = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            for (_child = parentB.child; _child; ) {
              if (_child === a) {
                didFindChild = !0;
                a = parentB;
                b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = !0;
                b = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild)
              throw Error(
                "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
              );
          }
        }
        if (a.alternate !== b)
          throw Error(
            "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
          );
      }
      if (3 !== a.tag)
        throw Error("Unable to find node on an unmounted component.");
      return a.stateNode.current === a ? fiber : alternate;
    }
    function findCurrentHostFiberImpl(node) {
      var tag = node.tag;
      if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
      for (node = node.child; null !== node; ) {
        tag = findCurrentHostFiberImpl(node);
        if (null !== tag) return tag;
        node = node.sibling;
      }
      return null;
    }
    function getIteratorFn(maybeIterable) {
      if (null === maybeIterable || "object" !== typeof maybeIterable)
        return null;
      maybeIterable =
        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
        maybeIterable["@@iterator"];
      return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    function getComponentNameFromType(type) {
      if (null == type) return null;
      if ("function" === typeof type)
        return type.$$typeof === REACT_CLIENT_REFERENCE
          ? null
          : type.displayName || type.name || null;
      if ("string" === typeof type) return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
        case REACT_ACTIVITY_TYPE:
          return "Activity";
      }
      if ("object" === typeof type)
        switch (
          ("number" === typeof type.tag &&
            console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ),
          type.$$typeof)
        ) {
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type ||
              ((type = innerType.displayName || innerType.name || ""),
              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
            return type;
          case REACT_MEMO_TYPE:
            return (
              (innerType = type.displayName || null),
              null !== innerType
                ? innerType
                : getComponentNameFromType(type.type) || "Memo"
            );
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {}
        }
      return null;
    }
    function getComponentNameFromOwner(owner) {
      return "number" === typeof owner.tag
        ? getComponentNameFromFiber(owner)
        : "string" === typeof owner.name
          ? owner.name
          : null;
    }
    function getComponentNameFromFiber(fiber) {
      var type = fiber.type;
      switch (fiber.tag) {
        case 31:
          return "Activity";
        case 24:
          return "Cache";
        case 9:
          return (type._context.displayName || "Context") + ".Consumer";
        case 10:
          return (type.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return (
            (fiber = type.render),
            (fiber = fiber.displayName || fiber.name || ""),
            type.displayName ||
              ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef")
          );
        case 7:
          return "Fragment";
        case 26:
        case 27:
        case 5:
          return type;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return getComponentNameFromType(type);
        case 8:
          return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 14:
        case 15:
          if ("function" === typeof type)
            return type.displayName || type.name || null;
          if ("string" === typeof type) return type;
          break;
        case 29:
          type = fiber._debugInfo;
          if (null != type)
            for (var i = type.length - 1; 0 <= i; i--)
              if ("string" === typeof type[i].name) return type[i].name;
          if (null !== fiber.return)
            return getComponentNameFromFiber(fiber.return);
      }
      return null;
    }
    function createCursor(defaultValue) {
      return { current: defaultValue };
    }
    function pop(cursor, fiber) {
      0 > index$jscomp$0
        ? console.error("Unexpected pop.")
        : (fiber !== fiberStack[index$jscomp$0] &&
            console.error("Unexpected Fiber popped."),
          (cursor.current = valueStack[index$jscomp$0]),
          (valueStack[index$jscomp$0] = null),
          (fiberStack[index$jscomp$0] = null),
          index$jscomp$0--);
    }
    function push(cursor, value, fiber) {
      index$jscomp$0++;
      valueStack[index$jscomp$0] = cursor.current;
      fiberStack[index$jscomp$0] = fiber;
      cursor.current = value;
    }
    function requiredContext(c) {
      null === c &&
        console.error(
          "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
        );
      return c;
    }
    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor, null, fiber);
      var nextRootContext = nextRootInstance.nodeType;
      switch (nextRootContext) {
        case 9:
        case 11:
          nextRootContext = 9 === nextRootContext ? "#document" : "#fragment";
          nextRootInstance = (nextRootInstance =
            nextRootInstance.documentElement)
            ? (nextRootInstance = nextRootInstance.namespaceURI)
              ? getOwnHostContext(nextRootInstance)
              : HostContextNamespaceNone
            : HostContextNamespaceNone;
          break;
        default:
          if (
            ((nextRootContext = nextRootInstance.tagName),
            (nextRootInstance = nextRootInstance.namespaceURI))
          )
            (nextRootInstance = getOwnHostContext(nextRootInstance)),
              (nextRootInstance = getChildHostContextProd(
                nextRootInstance,
                nextRootContext
              ));
          else
            switch (nextRootContext) {
              case "svg":
                nextRootInstance = HostContextNamespaceSvg;
                break;
              case "math":
                nextRootInstance = HostContextNamespaceMath;
                break;
              default:
                nextRootInstance = HostContextNamespaceNone;
            }
      }
      nextRootContext = nextRootContext.toLowerCase();
      nextRootContext = updatedAncestorInfoDev(null, nextRootContext);
      nextRootContext = {
        context: nextRootInstance,
        ancestorInfo: nextRootContext
      };
      pop(contextStackCursor, fiber);
      push(contextStackCursor, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
      pop(contextStackCursor, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
      return requiredContext(contextStackCursor.current);
    }
    function pushHostContext(fiber) {
      null !== fiber.memoizedState &&
        push(hostTransitionProviderCursor, fiber, fiber);
      var context = requiredContext(contextStackCursor.current);
      var type = fiber.type;
      var nextContext = getChildHostContextProd(context.context, type);
      type = updatedAncestorInfoDev(context.ancestorInfo, type);
      nextContext = { context: nextContext, ancestorInfo: type };
      context !== nextContext &&
        (push(contextFiberStackCursor, fiber, fiber),
        push(contextStackCursor, nextContext, fiber));
    }
    function popHostContext(fiber) {
      contextFiberStackCursor.current === fiber &&
        (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
      hostTransitionProviderCursor.current === fiber &&
        (pop(hostTransitionProviderCursor, fiber),
        (HostTransitionContext._currentValue = NotPendingTransition));
    }
    function typeName(value) {
      return (
        ("function" === typeof Symbol &&
          Symbol.toStringTag &&
          value[Symbol.toStringTag]) ||
        value.constructor.name ||
        "Object"
      );
    }
    function willCoercionThrow(value) {
      try {
        return testStringCoercion(value), !1;
      } catch (e) {
        return !0;
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
      if (willCoercionThrow(value))
        return (
          console.error(
            "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",
            attributeName,
            typeName(value)
          ),
          testStringCoercion(value)
        );
    }
    function checkCSSPropertyStringCoercion(value, propName) {
      if (willCoercionThrow(value))
        return (
          console.error(
            "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",
            propName,
            typeName(value)
          ),
          testStringCoercion(value)
        );
    }
    function checkFormFieldValueStringCoercion(value) {
      if (willCoercionThrow(value))
        return (
          console.error(
            "Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",
            typeName(value)
          ),
          testStringCoercion(value)
        );
    }
    function injectInternals(internals) {
      if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled) return !0;
      if (!hook.supportsFiber)
        return (
          console.error(
            "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"
          ),
          !0
        );
      try {
        (rendererID = hook.inject(internals)), (injectedHook = hook);
      } catch (err) {
        console.error("React instrumentation encountered an error: %s.", err);
      }
      return hook.checkDCE ? !0 : !1;
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
      "function" === typeof log$1 &&
        unstable_setDisableYieldValue(newIsStrictMode);
      if (injectedHook && "function" === typeof injectedHook.setStrictMode)
        try {
          injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
          hasLoggedError ||
            ((hasLoggedError = !0),
            console.error(
              "React instrumentation encountered an error: %s",
              err
            ));
        }
    }
    function injectProfilingHooks(profilingHooks) {
      injectedProfilingHooks = profilingHooks;
    }
    function markCommitStopped() {
      null !== injectedProfilingHooks &&
        "function" === typeof injectedProfilingHooks.markCommitStopped &&
        injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
      null !== injectedProfilingHooks &&
        "function" ===
          typeof injectedProfilingHooks.markComponentRenderStarted &&
        injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
      null !== injectedProfilingHooks &&
        "function" ===
          typeof injectedProfilingHooks.markComponentRenderStopped &&
        injectedProfilingHooks.markComponentRenderStopped();
    }
    function markRenderStarted(lanes) {
      null !== injectedProfilingHooks &&
        "function" === typeof injectedProfilingHooks.markRenderStarted &&
        injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderStopped() {
      null !== injectedProfilingHooks &&
        "function" === typeof injectedProfilingHooks.markRenderStopped &&
        injectedProfilingHooks.markRenderStopped();
    }
    function markStateUpdateScheduled(fiber, lane) {
      null !== injectedProfilingHooks &&
        "function" === typeof injectedProfilingHooks.markStateUpdateScheduled &&
        injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    function clz32Fallback(x) {
      x >>>= 0;
      return 0 === x ? 32 : (31 - ((log(x) / LN2) | 0)) | 0;
    }
    function getLabelForLane(lane) {
      if (lane & 1) return "SyncHydrationLane";
      if (lane & 2) return "Sync";
      if (lane & 4) return "InputContinuousHydration";
      if (lane & 8) return "InputContinuous";
      if (lane & 16) return "DefaultHydration";
      if (lane & 32) return "Default";
      if (lane & 128) return "TransitionHydration";
      if (lane & 4194048) return "Transition";
      if (lane & 62914560) return "Retry";
      if (lane & 67108864) return "SelectiveHydration";
      if (lane & 134217728) return "IdleHydration";
      if (lane & 268435456) return "Idle";
      if (lane & 536870912) return "Offscreen";
      if (lane & 1073741824) return "Deferred";
    }
    function getHighestPriorityLanes(lanes) {
      var pendingSyncLanes = lanes & 42;
      if (0 !== pendingSyncLanes) return pendingSyncLanes;
      switch (lanes & -lanes) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
          return 64;
        case 128:
          return 128;
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return lanes & 4194048;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          return lanes & 62914560;
        case 67108864:
          return 67108864;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 0;
        default:
          return (
            console.error(
              "Should have found matching lanes. This is a bug in React."
            ),
            lanes
          );
      }
    }
    function getNextLanes(root, wipLanes, rootHasPendingCommit) {
      var pendingLanes = root.pendingLanes;
      if (0 === pendingLanes) return 0;
      var nextLanes = 0,
        suspendedLanes = root.suspendedLanes,
        pingedLanes = root.pingedLanes;
      root = root.warmLanes;
      var nonIdlePendingLanes = pendingLanes & 134217727;
      0 !== nonIdlePendingLanes
        ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),
          0 !== pendingLanes
            ? (nextLanes = getHighestPriorityLanes(pendingLanes))
            : ((pingedLanes &= nonIdlePendingLanes),
              0 !== pingedLanes
                ? (nextLanes = getHighestPriorityLanes(pingedLanes))
                : rootHasPendingCommit ||
                  ((rootHasPendingCommit = nonIdlePendingLanes & ~root),
                  0 !== rootHasPendingCommit &&
                    (nextLanes =
                      getHighestPriorityLanes(rootHasPendingCommit)))))
        : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
          0 !== nonIdlePendingLanes
            ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
            : 0 !== pingedLanes
              ? (nextLanes = getHighestPriorityLanes(pingedLanes))
              : rootHasPendingCommit ||
                ((rootHasPendingCommit = pendingLanes & ~root),
                0 !== rootHasPendingCommit &&
                  (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
      return 0 === nextLanes
        ? 0
        : 0 !== wipLanes &&
            wipLanes !== nextLanes &&
            0 === (wipLanes & suspendedLanes) &&
            ((suspendedLanes = nextLanes & -nextLanes),
            (rootHasPendingCommit = wipLanes & -wipLanes),
            suspendedLanes >= rootHasPendingCommit ||
              (32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)))
          ? wipLanes
          : nextLanes;
    }
    function checkIfRootIsPrerendering(root, renderLanes) {
      return (
        0 ===
        (root.pendingLanes &
          ~(root.suspendedLanes & ~root.pingedLanes) &
          renderLanes)
      );
    }
    function computeExpirationTime(lane, currentTime) {
      switch (lane) {
        case 1:
        case 2:
        case 4:
        case 8:
        case 64:
          return currentTime + 250;
        case 16:
        case 32:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return currentTime + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          return -1;
        case 67108864:
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return (
            console.error(
              "Should have found matching lanes. This is a bug in React."
            ),
            -1
          );
      }
    }
    function claimNextTransitionLane() {
      var lane = nextTransitionLane;
      nextTransitionLane <<= 1;
      0 === (nextTransitionLane & 4194048) && (nextTransitionLane = 256);
      return lane;
    }
    function claimNextRetryLane() {
      var lane = nextRetryLane;
      nextRetryLane <<= 1;
      0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
      return lane;
    }
    function createLaneMap(initial) {
      for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
      return laneMap;
    }
    function markRootUpdated$1(root, updateLane) {
      root.pendingLanes |= updateLane;
      268435456 !== updateLane &&
        ((root.suspendedLanes = 0),
        (root.pingedLanes = 0),
        (root.warmLanes = 0));
    }
    function markRootFinished(
      root,
      finishedLanes,
      remainingLanes,
      spawnedLane,
      updatedLanes,
      suspendedRetryLanes
    ) {
      var previouslyPendingLanes = root.pendingLanes;
      root.pendingLanes = remainingLanes;
      root.suspendedLanes = 0;
      root.pingedLanes = 0;
      root.warmLanes = 0;
      root.expiredLanes &= remainingLanes;
      root.entangledLanes &= remainingLanes;
      root.errorRecoveryDisabledLanes &= remainingLanes;
      root.shellSuspendCounter = 0;
      var entanglements = root.entanglements,
        expirationTimes = root.expirationTimes,
        hiddenUpdates = root.hiddenUpdates;
      for (
        remainingLanes = previouslyPendingLanes & ~remainingLanes;
        0 < remainingLanes;

      ) {
        var index = 31 - clz32(remainingLanes),
          lane = 1 << index;
        entanglements[index] = 0;
        expirationTimes[index] = -1;
        var hiddenUpdatesForLane = hiddenUpdates[index];
        if (null !== hiddenUpdatesForLane)
          for (
            hiddenUpdates[index] = null, index = 0;
            index < hiddenUpdatesForLane.length;
            index++
          ) {
            var update = hiddenUpdatesForLane[index];
            null !== update && (update.lane &= -536870913);
          }
        remainingLanes &= ~lane;
      }
      0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
      0 !== suspendedRetryLanes &&
        0 === updatedLanes &&
        0 !== root.tag &&
        (root.suspendedLanes |=
          suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
    }
    function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
      root.pendingLanes |= spawnedLane;
      root.suspendedLanes &= ~spawnedLane;
      var spawnedLaneIndex = 31 - clz32(spawnedLane);
      root.entangledLanes |= spawnedLane;
      root.entanglements[spawnedLaneIndex] =
        root.entanglements[spawnedLaneIndex] |
        1073741824 |
        (entangledLanes & 4194090);
    }
    function markRootEntangled(root, entangledLanes) {
      var rootEntangledLanes = (root.entangledLanes |= entangledLanes);
      for (root = root.entanglements; rootEntangledLanes; ) {
        var index = 31 - clz32(rootEntangledLanes),
          lane = 1 << index;
        (lane & entangledLanes) | (root[index] & entangledLanes) &&
          (root[index] |= entangledLanes);
        rootEntangledLanes &= ~lane;
      }
    }
    function getBumpedLaneForHydrationByLane(lane) {
      switch (lane) {
        case 2:
          lane = 1;
          break;
        case 8:
          lane = 4;
          break;
        case 32:
          lane = 16;
          break;
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
          lane = 128;
          break;
        case 268435456:
          lane = 134217728;
          break;
        default:
          lane = 0;
      }
      return lane;
    }
    function addFiberToLanesMap(root, fiber, lanes) {
      if (isDevToolsPresent)
        for (root = root.pendingUpdatersLaneMap; 0 < lanes; ) {
          var index = 31 - clz32(lanes),
            lane = 1 << index;
          root[index].add(fiber);
          lanes &= ~lane;
        }
    }
    function movePendingFibersToMemoized(root, lanes) {
      if (isDevToolsPresent)
        for (
          var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap,
            memoizedUpdaters = root.memoizedUpdaters;
          0 < lanes;

        ) {
          var index = 31 - clz32(lanes);
          root = 1 << index;
          index = pendingUpdatersLaneMap[index];
          0 < index.size &&
            (index.forEach(function (fiber) {
              var alternate = fiber.alternate;
              (null !== alternate && memoizedUpdaters.has(alternate)) ||
                memoizedUpdaters.add(fiber);
            }),
            index.clear());
          lanes &= ~root;
        }
    }
    function lanesToEventPriority(lanes) {
      lanes &= -lanes;
      return 0 !== DiscreteEventPriority && DiscreteEventPriority < lanes
        ? 0 !== ContinuousEventPriority && ContinuousEventPriority < lanes
          ? 0 !== (lanes & 134217727)
            ? DefaultEventPriority
            : IdleEventPriority
          : ContinuousEventPriority
        : DiscreteEventPriority;
    }
    function resolveUpdatePriority() {
      var updatePriority = ReactDOMSharedInternals.p;
      if (0 !== updatePriority) return updatePriority;
      updatePriority = window.event;
      return void 0 === updatePriority
        ? DefaultEventPriority
        : getEventPriority(updatePriority.type);
    }
    function runWithPriority(priority, fn) {
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        return (ReactDOMSharedInternals.p = priority), fn();
      } finally {
        ReactDOMSharedInternals.p = previousPriority;
      }
    }
    function detachDeletedInstance(node) {
      delete node[internalInstanceKey];
      delete node[internalPropsKey];
      delete node[internalEventHandlersKey];
      delete node[internalEventHandlerListenersKey];
      delete node[internalEventHandlesSetKey];
    }
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst) return targetInst;
      for (var parentNode = targetNode.parentNode; parentNode; ) {
        if (
          (targetInst =
            parentNode[internalContainerInstanceKey] ||
            parentNode[internalInstanceKey])
        ) {
          parentNode = targetInst.alternate;
          if (
            null !== targetInst.child ||
            (null !== parentNode && null !== parentNode.child)
          )
            for (
              targetNode = getParentSuspenseInstance(targetNode);
              null !== targetNode;

            ) {
              if ((parentNode = targetNode[internalInstanceKey]))
                return parentNode;
              targetNode = getParentSuspenseInstance(targetNode);
            }
          return targetInst;
        }
        targetNode = parentNode;
        parentNode = targetNode.parentNode;
      }
      return null;
    }
    function getInstanceFromNode(node) {
      if (
        (node = node[internalInstanceKey] || node[internalContainerInstanceKey])
      ) {
        var tag = node.tag;
        if (
          5 === tag ||
          6 === tag ||
          13 === tag ||
          26 === tag ||
          27 === tag ||
          3 === tag
        )
          return node;
      }
      return null;
    }
    function getNodeFromInstance(inst) {
      var tag = inst.tag;
      if (5 === tag || 26 === tag || 27 === tag || 6 === tag)
        return inst.stateNode;
      throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getResourcesFromRoot(root) {
      var resources = root[internalRootNodeResourcesKey];
      resources ||
        (resources = root[internalRootNodeResourcesKey] =
          { hoistableStyles: new Map(), hoistableScripts: new Map() });
      return resources;
    }
    function markNodeAsHoistable(node) {
      node[internalHoistableMarker] = !0;
    }
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies);
      registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      registrationNameDependencies[registrationName] &&
        console.error(
          "EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",
          registrationName
        );
      registrationNameDependencies[registrationName] = dependencies;
      var lowerCasedName = registrationName.toLowerCase();
      possibleRegistrationNames[lowerCasedName] = registrationName;
      "onDoubleClick" === registrationName &&
        (possibleRegistrationNames.ondblclick = registrationName);
      for (
        registrationName = 0;
        registrationName < dependencies.length;
        registrationName++
      )
        allNativeEvents.add(dependencies[registrationName]);
    }
    function checkControlledValueProps(tagName, props) {
      hasReadOnlyValue[props.type] ||
        props.onChange ||
        props.onInput ||
        props.readOnly ||
        props.disabled ||
        null == props.value ||
        ("select" === tagName
          ? console.error(
              "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."
            )
          : console.error(
              "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
            ));
      props.onChange ||
        props.readOnly ||
        props.disabled ||
        null == props.checked ||
        console.error(
          "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
        );
    }
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
        return !0;
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
        return !1;
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
        return (validatedAttributeNameCache[attributeName] = !0);
      illegalAttributeNameCache[attributeName] = !0;
      console.error("Invalid attribute name: `%s`", attributeName);
      return !1;
    }
    function getValueForAttributeOnCustomComponent(node, name, expected) {
      if (isAttributeNameSafe(name)) {
        if (!node.hasAttribute(name)) {
          switch (typeof expected) {
            case "symbol":
            case "object":
              return expected;
            case "function":
              return expected;
            case "boolean":
              if (!1 === expected) return expected;
          }
          return void 0 === expected ? void 0 : null;
        }
        node = node.getAttribute(name);
        if ("" === node && !0 === expected) return !0;
        checkAttributeStringCoercion(expected, name);
        return node === "" + expected ? expected : node;
      }
    }
    function setValueForAttribute(node, name, value) {
      if (isAttributeNameSafe(name))
        if (null === value) node.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
              node.removeAttribute(name);
              return;
            case "boolean":
              var prefix = name.toLowerCase().slice(0, 5);
              if ("data-" !== prefix && "aria-" !== prefix) {
                node.removeAttribute(name);
                return;
              }
          }
          checkAttributeStringCoercion(value, name);
          node.setAttribute(name, "" + value);
        }
    }
    function setValueForKnownAttribute(node, name, value) {
      if (null === value) node.removeAttribute(name);
      else {
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            node.removeAttribute(name);
            return;
        }
        checkAttributeStringCoercion(value, name);
        node.setAttribute(name, "" + value);
      }
    }
    function setValueForNamespacedAttribute(node, namespace, name, value) {
      if (null === value) node.removeAttribute(name);
      else {
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            node.removeAttribute(name);
            return;
        }
        checkAttributeStringCoercion(value, name);
        node.setAttributeNS(namespace, name, "" + value);
      }
    }
    function disabledLog() {}
    function disableLogs() {
      if (0 === disabledDepth) {
        prevLog = console.log;
        prevInfo = console.info;
        prevWarn = console.warn;
        prevError = console.error;
        prevGroup = console.group;
        prevGroupCollapsed = console.groupCollapsed;
        prevGroupEnd = console.groupEnd;
        var props = {
          configurable: !0,
          enumerable: !0,
          value: disabledLog,
          writable: !0
        };
        Object.defineProperties(console, {
          info: props,
          log: props,
          warn: props,
          error: props,
          group: props,
          groupCollapsed: props,
          groupEnd: props
        });
      }
      disabledDepth++;
    }
    function reenableLogs() {
      disabledDepth--;
      if (0 === disabledDepth) {
        var props = { configurable: !0, enumerable: !0, writable: !0 };
        Object.defineProperties(console, {
          log: assign({}, props, { value: prevLog }),
          info: assign({}, props, { value: prevInfo }),
          warn: assign({}, props, { value: prevWarn }),
          error: assign({}, props, { value: prevError }),
          group: assign({}, props, { value: prevGroup }),
          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
          groupEnd: assign({}, props, { value: prevGroupEnd })
        });
      }
      0 > disabledDepth &&
        console.error(
          "disabledDepth fell below zero. This is a bug in React. Please file an issue."
        );
    }
    function describeBuiltInComponentFrame(name) {
      if (void 0 === prefix)
        try {
          throw Error();
        } catch (x) {
          var match = x.stack.trim().match(/\n( *(at )?)/);
          prefix = (match && match[1]) || "";
          suffix =
            -1 < x.stack.indexOf("\n    at")
              ? " (<anonymous>)"
              : -1 < x.stack.indexOf("@")
                ? "@unknown:0:0"
                : "";
        }
      return "\n" + prefix + name + suffix;
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) return "";
      var frame = componentFrameCache.get(fn);
      if (void 0 !== frame) return frame;
      reentry = !0;
      frame = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher = null;
      previousDispatcher = ReactSharedInternals.H;
      ReactSharedInternals.H = null;
      disableLogs();
      try {
        var RunInRootFrame = {
          DetermineComponentFrameRoot: function () {
            try {
              if (construct) {
                var Fake = function () {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function () {
                    throw Error();
                  }
                });
                if ("object" === typeof Reflect && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    var control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x$0) {
                    control = x$0;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x$1) {
                  control = x$1;
                }
                (Fake = fn()) &&
                  "function" === typeof Fake.catch &&
                  Fake.catch(function () {});
              }
            } catch (sample) {
              if (sample && control && "string" === typeof sample.stack)
                return [sample.stack, control.stack];
            }
            return [null, null];
          }
        };
        RunInRootFrame.DetermineComponentFrameRoot.displayName =
          "DetermineComponentFrameRoot";
        var namePropDescriptor = Object.getOwnPropertyDescriptor(
          RunInRootFrame.DetermineComponentFrameRoot,
          "name"
        );
        namePropDescriptor &&
          namePropDescriptor.configurable &&
          Object.defineProperty(
            RunInRootFrame.DetermineComponentFrameRoot,
            "name",
            { value: "DetermineComponentFrameRoot" }
          );
        var _RunInRootFrame$Deter =
            RunInRootFrame.DetermineComponentFrameRoot(),
          sampleStack = _RunInRootFrame$Deter[0],
          controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
          var sampleLines = sampleStack.split("\n"),
            controlLines = controlStack.split("\n");
          for (
            _RunInRootFrame$Deter = namePropDescriptor = 0;
            namePropDescriptor < sampleLines.length &&
            !sampleLines[namePropDescriptor].includes(
              "DetermineComponentFrameRoot"
            );

          )
            namePropDescriptor++;
          for (
            ;
            _RunInRootFrame$Deter < controlLines.length &&
            !controlLines[_RunInRootFrame$Deter].includes(
              "DetermineComponentFrameRoot"
            );

          )
            _RunInRootFrame$Deter++;
          if (
            namePropDescriptor === sampleLines.length ||
            _RunInRootFrame$Deter === controlLines.length
          )
            for (
              namePropDescriptor = sampleLines.length - 1,
                _RunInRootFrame$Deter = controlLines.length - 1;
              1 <= namePropDescriptor &&
              0 <= _RunInRootFrame$Deter &&
              sampleLines[namePropDescriptor] !==
                controlLines[_RunInRootFrame$Deter];

            )
              _RunInRootFrame$Deter--;
          for (
            ;
            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;
            namePropDescriptor--, _RunInRootFrame$Deter--
          )
            if (
              sampleLines[namePropDescriptor] !==
              controlLines[_RunInRootFrame$Deter]
            ) {
              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                do
                  if (
                    (namePropDescriptor--,
                    _RunInRootFrame$Deter--,
                    0 > _RunInRootFrame$Deter ||
                      sampleLines[namePropDescriptor] !==
                        controlLines[_RunInRootFrame$Deter])
                  ) {
                    var _frame =
                      "\n" +
                      sampleLines[namePropDescriptor].replace(
                        " at new ",
                        " at "
                      );
                    fn.displayName &&
                      _frame.includes("<anonymous>") &&
                      (_frame = _frame.replace("<anonymous>", fn.displayName));
                    "function" === typeof fn &&
                      componentFrameCache.set(fn, _frame);
                    return _frame;
                  }
                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
              }
              break;
            }
        }
      } finally {
        (reentry = !1),
          (ReactSharedInternals.H = previousDispatcher),
          reenableLogs(),
          (Error.prepareStackTrace = frame);
      }
      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "")
        ? describeBuiltInComponentFrame(sampleLines)
        : "";
      "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
      return sampleLines;
    }
    function formatOwnerStack(error) {
      var prevPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      error = error.stack;
      Error.prepareStackTrace = prevPrepareStackTrace;
      error.startsWith("Error: react-stack-top-frame\n") &&
        (error = error.slice(29));
      prevPrepareStackTrace = error.indexOf("\n");
      -1 !== prevPrepareStackTrace &&
        (error = error.slice(prevPrepareStackTrace + 1));
      prevPrepareStackTrace = error.indexOf("react-stack-bottom-frame");
      -1 !== prevPrepareStackTrace &&
        (prevPrepareStackTrace = error.lastIndexOf(
          "\n",
          prevPrepareStackTrace
        ));
      if (-1 !== prevPrepareStackTrace)
        error = error.slice(0, prevPrepareStackTrace);
      else return "";
      return error;
    }
    function describeFiber(fiber) {
      switch (fiber.tag) {
        case 26:
        case 27:
        case 5:
          return describeBuiltInComponentFrame(fiber.type);
        case 16:
          return describeBuiltInComponentFrame("Lazy");
        case 13:
          return describeBuiltInComponentFrame("Suspense");
        case 19:
          return describeBuiltInComponentFrame("SuspenseList");
        case 0:
        case 15:
          return describeNativeComponentFrame(fiber.type, !1);
        case 11:
          return describeNativeComponentFrame(fiber.type.render, !1);
        case 1:
          return describeNativeComponentFrame(fiber.type, !0);
        case 31:
          return describeBuiltInComponentFrame("Activity");
        default:
          return "";
      }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
      try {
        var info = "";
        do {
          info += describeFiber(workInProgress);
          var debugInfo = workInProgress._debugInfo;
          if (debugInfo)
            for (var i = debugInfo.length - 1; 0 <= i; i--) {
              var entry = debugInfo[i];
              if ("string" === typeof entry.name) {
                var JSCompiler_temp_const = info,
                  env = entry.env;
                var JSCompiler_inline_result = describeBuiltInComponentFrame(
                  entry.name + (env ? " [" + env + "]" : "")
                );
                info = JSCompiler_temp_const + JSCompiler_inline_result;
              }
            }
          workInProgress = workInProgress.return;
        } while (workInProgress);
        return info;
      } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
      }
    }
    function describeFunctionComponentFrameWithoutLineNumber(fn) {
      return (fn = fn ? fn.displayName || fn.name : "")
        ? describeBuiltInComponentFrame(fn)
        : "";
    }
    function getCurrentFiberOwnerNameInDevOrNull() {
      if (null === current) return null;
      var owner = current._debugOwner;
      return null != owner ? getComponentNameFromOwner(owner) : null;
    }
    function getCurrentFiberStackInDev() {
      if (null === current) return "";
      var workInProgress = current;
      try {
        var info = "";
        6 === workInProgress.tag && (workInProgress = workInProgress.return);
        switch (workInProgress.tag) {
          case 26:
          case 27:
          case 5:
            info += describeBuiltInComponentFrame(workInProgress.type);
            break;
          case 13:
            info += describeBuiltInComponentFrame("Suspense");
            break;
          case 19:
            info += describeBuiltInComponentFrame("SuspenseList");
            break;
          case 31:
            info += describeBuiltInComponentFrame("Activity");
            break;
          case 30:
          case 0:
          case 15:
          case 1:
            workInProgress._debugOwner ||
              "" !== info ||
              (info += describeFunctionComponentFrameWithoutLineNumber(
                workInProgress.type
              ));
            break;
          case 11:
            workInProgress._debugOwner ||
              "" !== info ||
              (info += describeFunctionComponentFrameWithoutLineNumber(
                workInProgress.type.render
              ));
        }
        for (; workInProgress; )
          if ("number" === typeof workInProgress.tag) {
            var fiber = workInProgress;
            workInProgress = fiber._debugOwner;
            var debugStack = fiber._debugStack;
            workInProgress &&
              debugStack &&
              ("string" !== typeof debugStack &&
                (fiber._debugStack = debugStack = formatOwnerStack(debugStack)),
              "" !== debugStack && (info += "\n" + debugStack));
          } else if (null != workInProgress.debugStack) {
            var ownerStack = workInProgress.debugStack;
            (workInProgress = workInProgress.owner) &&
              ownerStack &&
              (info += "\n" + formatOwnerStack(ownerStack));
          } else break;
        var JSCompiler_inline_result = info;
      } catch (x) {
        JSCompiler_inline_result =
          "\nError generating stack: " + x.message + "\n" + x.stack;
      }
      return JSCompiler_inline_result;
    }
    function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
      var previousFiber = current;
      setCurrentFiber(fiber);
      try {
        return null !== fiber && fiber._debugTask
          ? fiber._debugTask.run(
              callback.bind(null, arg0, arg1, arg2, arg3, arg4)
            )
          : callback(arg0, arg1, arg2, arg3, arg4);
      } finally {
        setCurrentFiber(previousFiber);
      }
      // removed by dead control flow
{}
    }
    function setCurrentFiber(fiber) {
      ReactSharedInternals.getCurrentStack =
        null === fiber ? null : getCurrentFiberStackInDev;
      isRendering = !1;
      current = fiber;
    }
    function getToStringValue(value) {
      switch (typeof value) {
        case "bigint":
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return value;
        case "object":
          return checkFormFieldValueStringCoercion(value), value;
        default:
          return "";
      }
    }
    function isCheckable(elem) {
      var type = elem.type;
      return (
        (elem = elem.nodeName) &&
        "input" === elem.toLowerCase() &&
        ("checkbox" === type || "radio" === type)
      );
    }
    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? "checked" : "value",
        descriptor = Object.getOwnPropertyDescriptor(
          node.constructor.prototype,
          valueField
        );
      checkFormFieldValueStringCoercion(node[valueField]);
      var currentValue = "" + node[valueField];
      if (
        !node.hasOwnProperty(valueField) &&
        "undefined" !== typeof descriptor &&
        "function" === typeof descriptor.get &&
        "function" === typeof descriptor.set
      ) {
        var get = descriptor.get,
          set = descriptor.set;
        Object.defineProperty(node, valueField, {
          configurable: !0,
          get: function () {
            return get.call(this);
          },
          set: function (value) {
            checkFormFieldValueStringCoercion(value);
            currentValue = "" + value;
            set.call(this, value);
          }
        });
        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable
        });
        return {
          getValue: function () {
            return currentValue;
          },
          setValue: function (value) {
            checkFormFieldValueStringCoercion(value);
            currentValue = "" + value;
          },
          stopTracking: function () {
            node._valueTracker = null;
            delete node[valueField];
          }
        };
      }
    }
    function track(node) {
      node._valueTracker || (node._valueTracker = trackValueOnNode(node));
    }
    function updateValueIfChanged(node) {
      if (!node) return !1;
      var tracker = node._valueTracker;
      if (!tracker) return !0;
      var lastValue = tracker.getValue();
      var value = "";
      node &&
        (value = isCheckable(node)
          ? node.checked
            ? "true"
            : "false"
          : node.value);
      node = value;
      return node !== lastValue ? (tracker.setValue(node), !0) : !1;
    }
    function getActiveElement(doc) {
      doc = doc || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof doc) return null;
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
      return value.replace(
        escapeSelectorAttributeValueInsideDoubleQuotesRegex,
        function (ch) {
          return "\\" + ch.charCodeAt(0).toString(16) + " ";
        }
      );
    }
    function validateInputProps(element, props) {
      void 0 === props.checked ||
        void 0 === props.defaultChecked ||
        didWarnCheckedDefaultChecked ||
        (console.error(
          "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
          getCurrentFiberOwnerNameInDevOrNull() || "A component",
          props.type
        ),
        (didWarnCheckedDefaultChecked = !0));
      void 0 === props.value ||
        void 0 === props.defaultValue ||
        didWarnValueDefaultValue$1 ||
        (console.error(
          "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
          getCurrentFiberOwnerNameInDevOrNull() || "A component",
          props.type
        ),
        (didWarnValueDefaultValue$1 = !0));
    }
    function updateInput(
      element,
      value,
      defaultValue,
      lastDefaultValue,
      checked,
      defaultChecked,
      type,
      name
    ) {
      element.name = "";
      null != type &&
      "function" !== typeof type &&
      "symbol" !== typeof type &&
      "boolean" !== typeof type
        ? (checkAttributeStringCoercion(type, "type"), (element.type = type))
        : element.removeAttribute("type");
      if (null != value)
        if ("number" === type) {
          if ((0 === value && "" === element.value) || element.value != value)
            element.value = "" + getToStringValue(value);
        } else
          element.value !== "" + getToStringValue(value) &&
            (element.value = "" + getToStringValue(value));
      else
        ("submit" !== type && "reset" !== type) ||
          element.removeAttribute("value");
      null != value
        ? setDefaultValue(element, type, getToStringValue(value))
        : null != defaultValue
          ? setDefaultValue(element, type, getToStringValue(defaultValue))
          : null != lastDefaultValue && element.removeAttribute("value");
      null == checked &&
        null != defaultChecked &&
        (element.defaultChecked = !!defaultChecked);
      null != checked &&
        (element.checked =
          checked &&
          "function" !== typeof checked &&
          "symbol" !== typeof checked);
      null != name &&
      "function" !== typeof name &&
      "symbol" !== typeof name &&
      "boolean" !== typeof name
        ? (checkAttributeStringCoercion(name, "name"),
          (element.name = "" + getToStringValue(name)))
        : element.removeAttribute("name");
    }
    function initInput(
      element,
      value,
      defaultValue,
      checked,
      defaultChecked,
      type,
      name,
      isHydrating
    ) {
      null != type &&
        "function" !== typeof type &&
        "symbol" !== typeof type &&
        "boolean" !== typeof type &&
        (checkAttributeStringCoercion(type, "type"), (element.type = type));
      if (null != value || null != defaultValue) {
        if (
          !(
            ("submit" !== type && "reset" !== type) ||
            (void 0 !== value && null !== value)
          )
        )
          return;
        defaultValue =
          null != defaultValue ? "" + getToStringValue(defaultValue) : "";
        value = null != value ? "" + getToStringValue(value) : defaultValue;
        isHydrating || value === element.value || (element.value = value);
        element.defaultValue = value;
      }
      checked = null != checked ? checked : defaultChecked;
      checked =
        "function" !== typeof checked &&
        "symbol" !== typeof checked &&
        !!checked;
      element.checked = isHydrating ? element.checked : !!checked;
      element.defaultChecked = !!checked;
      null != name &&
        "function" !== typeof name &&
        "symbol" !== typeof name &&
        "boolean" !== typeof name &&
        (checkAttributeStringCoercion(name, "name"), (element.name = name));
    }
    function setDefaultValue(node, type, value) {
      ("number" === type && getActiveElement(node.ownerDocument) === node) ||
        node.defaultValue === "" + value ||
        (node.defaultValue = "" + value);
    }
    function validateOptionProps(element, props) {
      null == props.value &&
        ("object" === typeof props.children && null !== props.children
          ? React.Children.forEach(props.children, function (child) {
              null == child ||
                "string" === typeof child ||
                "number" === typeof child ||
                "bigint" === typeof child ||
                didWarnInvalidChild ||
                ((didWarnInvalidChild = !0),
                console.error(
                  "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
                ));
            })
          : null == props.dangerouslySetInnerHTML ||
            didWarnInvalidInnerHTML ||
            ((didWarnInvalidInnerHTML = !0),
            console.error(
              "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
            )));
      null == props.selected ||
        didWarnSelectedSetOnOption ||
        (console.error(
          "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
        ),
        (didWarnSelectedSetOnOption = !0));
    }
    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      return ownerName
        ? "\n\nCheck the render method of `" + ownerName + "`."
        : "";
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      node = node.options;
      if (multiple) {
        multiple = {};
        for (var i = 0; i < propValue.length; i++)
          multiple["$" + propValue[i]] = !0;
        for (propValue = 0; propValue < node.length; propValue++)
          (i = multiple.hasOwnProperty("$" + node[propValue].value)),
            node[propValue].selected !== i && (node[propValue].selected = i),
            i && setDefaultSelected && (node[propValue].defaultSelected = !0);
      } else {
        propValue = "" + getToStringValue(propValue);
        multiple = null;
        for (i = 0; i < node.length; i++) {
          if (node[i].value === propValue) {
            node[i].selected = !0;
            setDefaultSelected && (node[i].defaultSelected = !0);
            return;
          }
          null !== multiple || node[i].disabled || (multiple = node[i]);
        }
        null !== multiple && (multiple.selected = !0);
      }
    }
    function validateSelectProps(element, props) {
      for (element = 0; element < valuePropNames.length; element++) {
        var propName = valuePropNames[element];
        if (null != props[propName]) {
          var propNameIsArray = isArrayImpl(props[propName]);
          props.multiple && !propNameIsArray
            ? console.error(
                "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",
                propName,
                getDeclarationErrorAddendum()
              )
            : !props.multiple &&
              propNameIsArray &&
              console.error(
                "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",
                propName,
                getDeclarationErrorAddendum()
              );
        }
      }
      void 0 === props.value ||
        void 0 === props.defaultValue ||
        didWarnValueDefaultValue ||
        (console.error(
          "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"
        ),
        (didWarnValueDefaultValue = !0));
    }
    function validateTextareaProps(element, props) {
      void 0 === props.value ||
        void 0 === props.defaultValue ||
        didWarnValDefaultVal ||
        (console.error(
          "%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",
          getCurrentFiberOwnerNameInDevOrNull() || "A component"
        ),
        (didWarnValDefaultVal = !0));
      null != props.children &&
        null == props.value &&
        console.error(
          "Use the `defaultValue` or `value` props instead of setting children on <textarea>."
        );
    }
    function updateTextarea(element, value, defaultValue) {
      if (
        null != value &&
        ((value = "" + getToStringValue(value)),
        value !== element.value && (element.value = value),
        null == defaultValue)
      ) {
        element.defaultValue !== value && (element.defaultValue = value);
        return;
      }
      element.defaultValue =
        null != defaultValue ? "" + getToStringValue(defaultValue) : "";
    }
    function initTextarea(element, value, defaultValue, children) {
      if (null == value) {
        if (null != children) {
          if (null != defaultValue)
            throw Error(
              "If you supply `defaultValue` on a <textarea>, do not pass children."
            );
          if (isArrayImpl(children)) {
            if (1 < children.length)
              throw Error("<textarea> can only have at most one child.");
            children = children[0];
          }
          defaultValue = children;
        }
        null == defaultValue && (defaultValue = "");
        value = defaultValue;
      }
      defaultValue = getToStringValue(value);
      element.defaultValue = defaultValue;
      children = element.textContent;
      children === defaultValue &&
        "" !== children &&
        null !== children &&
        (element.value = children);
    }
    function findNotableNode(node, indent) {
      return void 0 === node.serverProps &&
        0 === node.serverTail.length &&
        1 === node.children.length &&
        3 < node.distanceFromLeaf &&
        node.distanceFromLeaf > 15 - indent
        ? findNotableNode(node.children[0], indent)
        : node;
    }
    function indentation(indent) {
      return "  " + "  ".repeat(indent);
    }
    function added(indent) {
      return "+ " + "  ".repeat(indent);
    }
    function removed(indent) {
      return "- " + "  ".repeat(indent);
    }
    function describeFiberType(fiber) {
      switch (fiber.tag) {
        case 26:
        case 27:
        case 5:
          return fiber.type;
        case 16:
          return "Lazy";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 0:
        case 15:
          return (fiber = fiber.type), fiber.displayName || fiber.name || null;
        case 11:
          return (
            (fiber = fiber.type.render), fiber.displayName || fiber.name || null
          );
        case 1:
          return (fiber = fiber.type), fiber.displayName || fiber.name || null;
        default:
          return null;
      }
    }
    function describeTextNode(content, maxLength) {
      return needsEscaping.test(content)
        ? ((content = JSON.stringify(content)),
          content.length > maxLength - 2
            ? 8 > maxLength
              ? '{"..."}'
              : "{" + content.slice(0, maxLength - 7) + '..."}'
            : "{" + content + "}")
        : content.length > maxLength
          ? 5 > maxLength
            ? '{"..."}'
            : content.slice(0, maxLength - 3) + "..."
          : content;
    }
    function describeTextDiff(clientText, serverProps, indent) {
      var maxLength = 120 - 2 * indent;
      if (null === serverProps)
        return added(indent) + describeTextNode(clientText, maxLength) + "\n";
      if ("string" === typeof serverProps) {
        for (
          var firstDiff = 0;
          firstDiff < serverProps.length &&
          firstDiff < clientText.length &&
          serverProps.charCodeAt(firstDiff) ===
            clientText.charCodeAt(firstDiff);
          firstDiff++
        );
        firstDiff > maxLength - 8 &&
          10 < firstDiff &&
          ((clientText = "..." + clientText.slice(firstDiff - 8)),
          (serverProps = "..." + serverProps.slice(firstDiff - 8)));
        return (
          added(indent) +
          describeTextNode(clientText, maxLength) +
          "\n" +
          removed(indent) +
          describeTextNode(serverProps, maxLength) +
          "\n"
        );
      }
      return (
        indentation(indent) + describeTextNode(clientText, maxLength) + "\n"
      );
    }
    function objectName(object) {
      return Object.prototype.toString
        .call(object)
        .replace(/^\[object (.*)\]$/, function (m, p0) {
          return p0;
        });
    }
    function describeValue(value, maxLength) {
      switch (typeof value) {
        case "string":
          return (
            (value = JSON.stringify(value)),
            value.length > maxLength
              ? 5 > maxLength
                ? '"..."'
                : value.slice(0, maxLength - 4) + '..."'
              : value
          );
        case "object":
          if (null === value) return "null";
          if (isArrayImpl(value)) return "[...]";
          if (value.$$typeof === REACT_ELEMENT_TYPE)
            return (maxLength = getComponentNameFromType(value.type))
              ? "<" + maxLength + ">"
              : "<...>";
          var name = objectName(value);
          if ("Object" === name) {
            name = "";
            maxLength -= 2;
            for (var propName in value)
              if (value.hasOwnProperty(propName)) {
                var jsonPropName = JSON.stringify(propName);
                jsonPropName !== '"' + propName + '"' &&
                  (propName = jsonPropName);
                maxLength -= propName.length - 2;
                jsonPropName = describeValue(
                  value[propName],
                  15 > maxLength ? maxLength : 15
                );
                maxLength -= jsonPropName.length;
                if (0 > maxLength) {
                  name += "" === name ? "..." : ", ...";
                  break;
                }
                name +=
                  ("" === name ? "" : ",") + propName + ":" + jsonPropName;
              }
            return "{" + name + "}";
          }
          return name;
        case "function":
          return (maxLength = value.displayName || value.name)
            ? "function " + maxLength
            : "function";
        default:
          return String(value);
      }
    }
    function describePropValue(value, maxLength) {
      return "string" !== typeof value || needsEscaping.test(value)
        ? "{" + describeValue(value, maxLength - 2) + "}"
        : value.length > maxLength - 2
          ? 5 > maxLength
            ? '"..."'
            : '"' + value.slice(0, maxLength - 5) + '..."'
          : '"' + value + '"';
    }
    function describeExpandedElement(type, props, rowPrefix) {
      var remainingRowLength = 120 - rowPrefix.length - type.length,
        properties = [],
        propName;
      for (propName in props)
        if (props.hasOwnProperty(propName) && "children" !== propName) {
          var propValue = describePropValue(
            props[propName],
            120 - rowPrefix.length - propName.length - 1
          );
          remainingRowLength -= propName.length + propValue.length + 2;
          properties.push(propName + "=" + propValue);
        }
      return 0 === properties.length
        ? rowPrefix + "<" + type + ">\n"
        : 0 < remainingRowLength
          ? rowPrefix + "<" + type + " " + properties.join(" ") + ">\n"
          : rowPrefix +
            "<" +
            type +
            "\n" +
            rowPrefix +
            "  " +
            properties.join("\n" + rowPrefix + "  ") +
            "\n" +
            rowPrefix +
            ">\n";
    }
    function describePropertiesDiff(clientObject, serverObject, indent) {
      var properties = "",
        remainingServerProperties = assign({}, serverObject),
        propName;
      for (propName in clientObject)
        if (clientObject.hasOwnProperty(propName)) {
          delete remainingServerProperties[propName];
          var maxLength = 120 - 2 * indent - propName.length - 2,
            clientPropValue = describeValue(clientObject[propName], maxLength);
          serverObject.hasOwnProperty(propName)
            ? ((maxLength = describeValue(serverObject[propName], maxLength)),
              (properties +=
                added(indent) + propName + ": " + clientPropValue + "\n"),
              (properties +=
                removed(indent) + propName + ": " + maxLength + "\n"))
            : (properties +=
                added(indent) + propName + ": " + clientPropValue + "\n");
        }
      for (var _propName in remainingServerProperties)
        remainingServerProperties.hasOwnProperty(_propName) &&
          ((clientObject = describeValue(
            remainingServerProperties[_propName],
            120 - 2 * indent - _propName.length - 2
          )),
          (properties +=
            removed(indent) + _propName + ": " + clientObject + "\n"));
      return properties;
    }
    function describeElementDiff(type, clientProps, serverProps, indent) {
      var content = "",
        serverPropNames = new Map();
      for (propName$jscomp$0 in serverProps)
        serverProps.hasOwnProperty(propName$jscomp$0) &&
          serverPropNames.set(
            propName$jscomp$0.toLowerCase(),
            propName$jscomp$0
          );
      if (1 === serverPropNames.size && serverPropNames.has("children"))
        content += describeExpandedElement(
          type,
          clientProps,
          indentation(indent)
        );
      else {
        for (var _propName2 in clientProps)
          if (
            clientProps.hasOwnProperty(_propName2) &&
            "children" !== _propName2
          ) {
            var maxLength$jscomp$0 =
                120 - 2 * (indent + 1) - _propName2.length - 1,
              serverPropName = serverPropNames.get(_propName2.toLowerCase());
            if (void 0 !== serverPropName) {
              serverPropNames.delete(_propName2.toLowerCase());
              var propName$jscomp$0 = clientProps[_propName2];
              serverPropName = serverProps[serverPropName];
              var clientPropValue = describePropValue(
                propName$jscomp$0,
                maxLength$jscomp$0
              );
              maxLength$jscomp$0 = describePropValue(
                serverPropName,
                maxLength$jscomp$0
              );
              "object" === typeof propName$jscomp$0 &&
              null !== propName$jscomp$0 &&
              "object" === typeof serverPropName &&
              null !== serverPropName &&
              "Object" === objectName(propName$jscomp$0) &&
              "Object" === objectName(serverPropName) &&
              (2 < Object.keys(propName$jscomp$0).length ||
                2 < Object.keys(serverPropName).length ||
                -1 < clientPropValue.indexOf("...") ||
                -1 < maxLength$jscomp$0.indexOf("..."))
                ? (content +=
                    indentation(indent + 1) +
                    _propName2 +
                    "={{\n" +
                    describePropertiesDiff(
                      propName$jscomp$0,
                      serverPropName,
                      indent + 2
                    ) +
                    indentation(indent + 1) +
                    "}}\n")
                : ((content +=
                    added(indent + 1) +
                    _propName2 +
                    "=" +
                    clientPropValue +
                    "\n"),
                  (content +=
                    removed(indent + 1) +
                    _propName2 +
                    "=" +
                    maxLength$jscomp$0 +
                    "\n"));
            } else
              content +=
                indentation(indent + 1) +
                _propName2 +
                "=" +
                describePropValue(clientProps[_propName2], maxLength$jscomp$0) +
                "\n";
          }
        serverPropNames.forEach(function (propName) {
          if ("children" !== propName) {
            var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;
            content +=
              removed(indent + 1) +
              propName +
              "=" +
              describePropValue(serverProps[propName], maxLength) +
              "\n";
          }
        });
        content =
          "" === content
            ? indentation(indent) + "<" + type + ">\n"
            : indentation(indent) +
              "<" +
              type +
              "\n" +
              content +
              indentation(indent) +
              ">\n";
      }
      type = serverProps.children;
      clientProps = clientProps.children;
      if (
        "string" === typeof type ||
        "number" === typeof type ||
        "bigint" === typeof type
      ) {
        serverPropNames = "";
        if (
          "string" === typeof clientProps ||
          "number" === typeof clientProps ||
          "bigint" === typeof clientProps
        )
          serverPropNames = "" + clientProps;
        content += describeTextDiff(serverPropNames, "" + type, indent + 1);
      } else if (
        "string" === typeof clientProps ||
        "number" === typeof clientProps ||
        "bigint" === typeof clientProps
      )
        content =
          null == type
            ? content + describeTextDiff("" + clientProps, null, indent + 1)
            : content + describeTextDiff("" + clientProps, void 0, indent + 1);
      return content;
    }
    function describeSiblingFiber(fiber, indent) {
      var type = describeFiberType(fiber);
      if (null === type) {
        type = "";
        for (fiber = fiber.child; fiber; )
          (type += describeSiblingFiber(fiber, indent)),
            (fiber = fiber.sibling);
        return type;
      }
      return indentation(indent) + "<" + type + ">\n";
    }
    function describeNode(node, indent) {
      var skipToNode = findNotableNode(node, indent);
      if (
        skipToNode !== node &&
        (1 !== node.children.length || node.children[0] !== skipToNode)
      )
        return (
          indentation(indent) + "...\n" + describeNode(skipToNode, indent + 1)
        );
      skipToNode = "";
      var debugInfo = node.fiber._debugInfo;
      if (debugInfo)
        for (var i = 0; i < debugInfo.length; i++) {
          var serverComponentName = debugInfo[i].name;
          "string" === typeof serverComponentName &&
            ((skipToNode +=
              indentation(indent) + "<" + serverComponentName + ">\n"),
            indent++);
        }
      debugInfo = "";
      i = node.fiber.pendingProps;
      if (6 === node.fiber.tag)
        (debugInfo = describeTextDiff(i, node.serverProps, indent)), indent++;
      else if (
        ((serverComponentName = describeFiberType(node.fiber)),
        null !== serverComponentName)
      )
        if (void 0 === node.serverProps) {
          debugInfo = indent;
          var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2,
            content = "";
          for (propName in i)
            if (i.hasOwnProperty(propName) && "children" !== propName) {
              var propValue = describePropValue(i[propName], 15);
              maxLength -= propName.length + propValue.length + 2;
              if (0 > maxLength) {
                content += " ...";
                break;
              }
              content += " " + propName + "=" + propValue;
            }
          debugInfo =
            indentation(debugInfo) +
            "<" +
            serverComponentName +
            content +
            ">\n";
          indent++;
        } else
          null === node.serverProps
            ? ((debugInfo = describeExpandedElement(
                serverComponentName,
                i,
                added(indent)
              )),
              indent++)
            : "string" === typeof node.serverProps
              ? console.error(
                  "Should not have matched a non HostText fiber to a Text node. This is a bug in React."
                )
              : ((debugInfo = describeElementDiff(
                  serverComponentName,
                  i,
                  node.serverProps,
                  indent
                )),
                indent++);
      var propName = "";
      i = node.fiber.child;
      for (
        serverComponentName = 0;
        i && serverComponentName < node.children.length;

      )
        (maxLength = node.children[serverComponentName]),
          maxLength.fiber === i
            ? ((propName += describeNode(maxLength, indent)),
              serverComponentName++)
            : (propName += describeSiblingFiber(i, indent)),
          (i = i.sibling);
      i &&
        0 < node.children.length &&
        (propName += indentation(indent) + "...\n");
      i = node.serverTail;
      null === node.serverProps && indent--;
      for (node = 0; node < i.length; node++)
        (serverComponentName = i[node]),
          (propName =
            "string" === typeof serverComponentName
              ? propName +
                (removed(indent) +
                  describeTextNode(serverComponentName, 120 - 2 * indent) +
                  "\n")
              : propName +
                describeExpandedElement(
                  serverComponentName.type,
                  serverComponentName.props,
                  removed(indent)
                ));
      return skipToNode + debugInfo + propName;
    }
    function describeDiff(rootNode) {
      try {
        return "\n\n" + describeNode(rootNode, 0);
      } catch (x) {
        return "";
      }
    }
    function describeAncestors(ancestor, child, props) {
      for (var fiber = child, node = null, distanceFromLeaf = 0; fiber; )
        fiber === ancestor && (distanceFromLeaf = 0),
          (node = {
            fiber: fiber,
            children: null !== node ? [node] : [],
            serverProps:
              fiber === child ? props : fiber === ancestor ? null : void 0,
            serverTail: [],
            distanceFromLeaf: distanceFromLeaf
          }),
          distanceFromLeaf++,
          (fiber = fiber.return);
      return null !== node ? describeDiff(node).replaceAll(/^[+-]/gm, ">") : "";
    }
    function updatedAncestorInfoDev(oldInfo, tag) {
      var ancestorInfo = assign({}, oldInfo || emptyAncestorInfoDev),
        info = { tag: tag };
      -1 !== inScopeTags.indexOf(tag) &&
        ((ancestorInfo.aTagInScope = null),
        (ancestorInfo.buttonTagInScope = null),
        (ancestorInfo.nobrTagInScope = null));
      -1 !== buttonScopeTags.indexOf(tag) &&
        (ancestorInfo.pTagInButtonScope = null);
      -1 !== specialTags.indexOf(tag) &&
        "address" !== tag &&
        "div" !== tag &&
        "p" !== tag &&
        ((ancestorInfo.listItemTagAutoclosing = null),
        (ancestorInfo.dlItemTagAutoclosing = null));
      ancestorInfo.current = info;
      "form" === tag && (ancestorInfo.formTag = info);
      "a" === tag && (ancestorInfo.aTagInScope = info);
      "button" === tag && (ancestorInfo.buttonTagInScope = info);
      "nobr" === tag && (ancestorInfo.nobrTagInScope = info);
      "p" === tag && (ancestorInfo.pTagInButtonScope = info);
      "li" === tag && (ancestorInfo.listItemTagAutoclosing = info);
      if ("dd" === tag || "dt" === tag)
        ancestorInfo.dlItemTagAutoclosing = info;
      "#document" === tag || "html" === tag
        ? (ancestorInfo.containerTagInScope = null)
        : ancestorInfo.containerTagInScope ||
          (ancestorInfo.containerTagInScope = info);
      null !== oldInfo ||
      ("#document" !== tag && "html" !== tag && "body" !== tag)
        ? !0 === ancestorInfo.implicitRootScope &&
          (ancestorInfo.implicitRootScope = !1)
        : (ancestorInfo.implicitRootScope = !0);
      return ancestorInfo;
    }
    function isTagValidWithParent(tag, parentTag, implicitRootScope) {
      switch (parentTag) {
        case "select":
          return (
            "hr" === tag ||
            "option" === tag ||
            "optgroup" === tag ||
            "script" === tag ||
            "template" === tag ||
            "#text" === tag
          );
        case "optgroup":
          return "option" === tag || "#text" === tag;
        case "option":
          return "#text" === tag;
        case "tr":
          return (
            "th" === tag ||
            "td" === tag ||
            "style" === tag ||
            "script" === tag ||
            "template" === tag
          );
        case "tbody":
        case "thead":
        case "tfoot":
          return (
            "tr" === tag ||
            "style" === tag ||
            "script" === tag ||
            "template" === tag
          );
        case "colgroup":
          return "col" === tag || "template" === tag;
        case "table":
          return (
            "caption" === tag ||
            "colgroup" === tag ||
            "tbody" === tag ||
            "tfoot" === tag ||
            "thead" === tag ||
            "style" === tag ||
            "script" === tag ||
            "template" === tag
          );
        case "head":
          return (
            "base" === tag ||
            "basefont" === tag ||
            "bgsound" === tag ||
            "link" === tag ||
            "meta" === tag ||
            "title" === tag ||
            "noscript" === tag ||
            "noframes" === tag ||
            "style" === tag ||
            "script" === tag ||
            "template" === tag
          );
        case "html":
          if (implicitRootScope) break;
          return "head" === tag || "body" === tag || "frameset" === tag;
        case "frameset":
          return "frame" === tag;
        case "#document":
          if (!implicitRootScope) return "html" === tag;
      }
      switch (tag) {
        case "h1":
        case "h2":
        case "h3":
        case "h4":
        case "h5":
        case "h6":
          return (
            "h1" !== parentTag &&
            "h2" !== parentTag &&
            "h3" !== parentTag &&
            "h4" !== parentTag &&
            "h5" !== parentTag &&
            "h6" !== parentTag
          );
        case "rp":
        case "rt":
          return -1 === impliedEndTags.indexOf(parentTag);
        case "caption":
        case "col":
        case "colgroup":
        case "frameset":
        case "frame":
        case "tbody":
        case "td":
        case "tfoot":
        case "th":
        case "thead":
        case "tr":
          return null == parentTag;
        case "head":
          return implicitRootScope || null === parentTag;
        case "html":
          return (
            (implicitRootScope && "#document" === parentTag) ||
            null === parentTag
          );
        case "body":
          return (
            (implicitRootScope &&
              ("#document" === parentTag || "html" === parentTag)) ||
            null === parentTag
          );
      }
      return !0;
    }
    function findInvalidAncestorForTag(tag, ancestorInfo) {
      switch (tag) {
        case "address":
        case "article":
        case "aside":
        case "blockquote":
        case "center":
        case "details":
        case "dialog":
        case "dir":
        case "div":
        case "dl":
        case "fieldset":
        case "figcaption":
        case "figure":
        case "footer":
        case "header":
        case "hgroup":
        case "main":
        case "menu":
        case "nav":
        case "ol":
        case "p":
        case "section":
        case "summary":
        case "ul":
        case "pre":
        case "listing":
        case "table":
        case "hr":
        case "xmp":
        case "h1":
        case "h2":
        case "h3":
        case "h4":
        case "h5":
        case "h6":
          return ancestorInfo.pTagInButtonScope;
        case "form":
          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
        case "li":
          return ancestorInfo.listItemTagAutoclosing;
        case "dd":
        case "dt":
          return ancestorInfo.dlItemTagAutoclosing;
        case "button":
          return ancestorInfo.buttonTagInScope;
        case "a":
          return ancestorInfo.aTagInScope;
        case "nobr":
          return ancestorInfo.nobrTagInScope;
      }
      return null;
    }
    function findAncestor(parent, tagName) {
      for (; parent; ) {
        switch (parent.tag) {
          case 5:
          case 26:
          case 27:
            if (parent.type === tagName) return parent;
        }
        parent = parent.return;
      }
      return null;
    }
    function validateDOMNesting(childTag, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
      var parentInfo = ancestorInfo.current;
      ancestorInfo = (parentInfo = isTagValidWithParent(
        childTag,
        parentInfo && parentInfo.tag,
        ancestorInfo.implicitRootScope
      )
        ? null
        : parentInfo)
        ? null
        : findInvalidAncestorForTag(childTag, ancestorInfo);
      ancestorInfo = parentInfo || ancestorInfo;
      if (!ancestorInfo) return !0;
      var ancestorTag = ancestorInfo.tag;
      ancestorInfo = String(!!parentInfo) + "|" + childTag + "|" + ancestorTag;
      if (didWarn[ancestorInfo]) return !1;
      didWarn[ancestorInfo] = !0;
      var ancestor = (ancestorInfo = current)
          ? findAncestor(ancestorInfo.return, ancestorTag)
          : null,
        ancestorDescription =
          null !== ancestorInfo && null !== ancestor
            ? describeAncestors(ancestor, ancestorInfo, null)
            : "",
        tagDisplayName = "<" + childTag + ">";
      parentInfo
        ? ((parentInfo = ""),
          "table" === ancestorTag &&
            "tr" === childTag &&
            (parentInfo +=
              " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."),
          console.error(
            "In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",
            tagDisplayName,
            ancestorTag,
            parentInfo,
            ancestorDescription
          ))
        : console.error(
            "In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",
            tagDisplayName,
            ancestorTag,
            ancestorDescription
          );
      ancestorInfo &&
        ((childTag = ancestorInfo.return),
        null === ancestor ||
          null === childTag ||
          (ancestor === childTag &&
            childTag._debugOwner === ancestorInfo._debugOwner) ||
          runWithFiberInDEV(ancestor, function () {
            console.error(
              "<%s> cannot contain a nested %s.\nSee this log for the ancestor stack trace.",
              ancestorTag,
              tagDisplayName
            );
          }));
      return !1;
    }
    function validateTextNesting(childText, parentTag, implicitRootScope) {
      if (implicitRootScope || isTagValidWithParent("#text", parentTag, !1))
        return !0;
      implicitRootScope = "#text|" + parentTag;
      if (didWarn[implicitRootScope]) return !1;
      didWarn[implicitRootScope] = !0;
      var ancestor = (implicitRootScope = current)
        ? findAncestor(implicitRootScope, parentTag)
        : null;
      implicitRootScope =
        null !== implicitRootScope && null !== ancestor
          ? describeAncestors(
              ancestor,
              implicitRootScope,
              6 !== implicitRootScope.tag ? { children: null } : null
            )
          : "";
      /\S/.test(childText)
        ? console.error(
            "In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",
            parentTag,
            implicitRootScope
          )
        : console.error(
            "In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",
            parentTag,
            implicitRootScope
          );
      return !1;
    }
    function setTextContent(node, text) {
      if (text) {
        var firstChild = node.firstChild;
        if (
          firstChild &&
          firstChild === node.lastChild &&
          3 === firstChild.nodeType
        ) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node.textContent = text;
    }
    function camelize(string) {
      return string.replace(hyphenPattern, function (_, character) {
        return character.toUpperCase();
      });
    }
    function setValueForStyle(style, styleName, value) {
      var isCustomProperty = 0 === styleName.indexOf("--");
      isCustomProperty ||
        (-1 < styleName.indexOf("-")
          ? (warnedStyleNames.hasOwnProperty(styleName) &&
              warnedStyleNames[styleName]) ||
            ((warnedStyleNames[styleName] = !0),
            console.error(
              "Unsupported style property %s. Did you mean %s?",
              styleName,
              camelize(styleName.replace(msPattern, "ms-"))
            ))
          : badVendoredStyleNamePattern.test(styleName)
            ? (warnedStyleNames.hasOwnProperty(styleName) &&
                warnedStyleNames[styleName]) ||
              ((warnedStyleNames[styleName] = !0),
              console.error(
                "Unsupported vendor-prefixed style property %s. Did you mean %s?",
                styleName,
                styleName.charAt(0).toUpperCase() + styleName.slice(1)
              ))
            : !badStyleValueWithSemicolonPattern.test(value) ||
              (warnedStyleValues.hasOwnProperty(value) &&
                warnedStyleValues[value]) ||
              ((warnedStyleValues[value] = !0),
              console.error(
                'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',
                styleName,
                value.replace(badStyleValueWithSemicolonPattern, "")
              )),
        "number" === typeof value &&
          (isNaN(value)
            ? warnedForNaNValue ||
              ((warnedForNaNValue = !0),
              console.error(
                "`NaN` is an invalid value for the `%s` css style property.",
                styleName
              ))
            : isFinite(value) ||
              warnedForInfinityValue ||
              ((warnedForInfinityValue = !0),
              console.error(
                "`Infinity` is an invalid value for the `%s` css style property.",
                styleName
              ))));
      null == value || "boolean" === typeof value || "" === value
        ? isCustomProperty
          ? style.setProperty(styleName, "")
          : "float" === styleName
            ? (style.cssFloat = "")
            : (style[styleName] = "")
        : isCustomProperty
          ? style.setProperty(styleName, value)
          : "number" !== typeof value ||
              0 === value ||
              unitlessNumbers.has(styleName)
            ? "float" === styleName
              ? (style.cssFloat = value)
              : (checkCSSPropertyStringCoercion(value, styleName),
                (style[styleName] = ("" + value).trim()))
            : (style[styleName] = value + "px");
    }
    function setValueForStyles(node, styles, prevStyles) {
      if (null != styles && "object" !== typeof styles)
        throw Error(
          "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
        );
      styles && Object.freeze(styles);
      node = node.style;
      if (null != prevStyles) {
        if (styles) {
          var expandedUpdates = {};
          if (prevStyles)
            for (var key in prevStyles)
              if (prevStyles.hasOwnProperty(key) && !styles.hasOwnProperty(key))
                for (
                  var longhands = shorthandToLonghand[key] || [key], i = 0;
                  i < longhands.length;
                  i++
                )
                  expandedUpdates[longhands[i]] = key;
          for (var _key in styles)
            if (
              styles.hasOwnProperty(_key) &&
              (!prevStyles || prevStyles[_key] !== styles[_key])
            )
              for (
                key = shorthandToLonghand[_key] || [_key], longhands = 0;
                longhands < key.length;
                longhands++
              )
                expandedUpdates[key[longhands]] = _key;
          _key = {};
          for (var key$jscomp$0 in styles)
            for (
              key = shorthandToLonghand[key$jscomp$0] || [key$jscomp$0],
                longhands = 0;
              longhands < key.length;
              longhands++
            )
              _key[key[longhands]] = key$jscomp$0;
          key$jscomp$0 = {};
          for (var _key2 in expandedUpdates)
            if (
              ((key = expandedUpdates[_key2]),
              (longhands = _key[_key2]) &&
                key !== longhands &&
                ((i = key + "," + longhands), !key$jscomp$0[i]))
            ) {
              key$jscomp$0[i] = !0;
              i = console;
              var value = styles[key];
              i.error.call(
                i,
                "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
                null == value || "boolean" === typeof value || "" === value
                  ? "Removing"
                  : "Updating",
                key,
                longhands
              );
            }
        }
        for (var styleName in prevStyles)
          !prevStyles.hasOwnProperty(styleName) ||
            (null != styles && styles.hasOwnProperty(styleName)) ||
            (0 === styleName.indexOf("--")
              ? node.setProperty(styleName, "")
              : "float" === styleName
                ? (node.cssFloat = "")
                : (node[styleName] = ""));
        for (var _styleName in styles)
          (_key2 = styles[_styleName]),
            styles.hasOwnProperty(_styleName) &&
              prevStyles[_styleName] !== _key2 &&
              setValueForStyle(node, _styleName, _key2);
      } else
        for (expandedUpdates in styles)
          styles.hasOwnProperty(expandedUpdates) &&
            setValueForStyle(node, expandedUpdates, styles[expandedUpdates]);
    }
    function isCustomElement(tagName) {
      if (-1 === tagName.indexOf("-")) return !1;
      switch (tagName) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return !1;
        default:
          return !0;
      }
    }
    function getAttributeAlias(name) {
      return aliases.get(name) || name;
    }
    function validateProperty$1(tagName, name) {
      if (
        hasOwnProperty.call(warnedProperties$1, name) &&
        warnedProperties$1[name]
      )
        return !0;
      if (rARIACamel$1.test(name)) {
        tagName = "aria-" + name.slice(4).toLowerCase();
        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
        if (null == tagName)
          return (
            console.error(
              "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
              name
            ),
            (warnedProperties$1[name] = !0)
          );
        if (name !== tagName)
          return (
            console.error(
              "Invalid ARIA attribute `%s`. Did you mean `%s`?",
              name,
              tagName
            ),
            (warnedProperties$1[name] = !0)
          );
      }
      if (rARIA$1.test(name)) {
        tagName = name.toLowerCase();
        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
        if (null == tagName) return (warnedProperties$1[name] = !0), !1;
        name !== tagName &&
          (console.error(
            "Unknown ARIA attribute `%s`. Did you mean `%s`?",
            name,
            tagName
          ),
          (warnedProperties$1[name] = !0));
      }
      return !0;
    }
    function validateProperties$2(type, props) {
      var invalidProps = [],
        key;
      for (key in props)
        validateProperty$1(type, key) || invalidProps.push(key);
      props = invalidProps
        .map(function (prop) {
          return "`" + prop + "`";
        })
        .join(", ");
      1 === invalidProps.length
        ? console.error(
            "Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
            props,
            type
          )
        : 1 < invalidProps.length &&
          console.error(
            "Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
            props,
            type
          );
    }
    function validateProperty(tagName, name, value, eventRegistry) {
      if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
        return !0;
      var lowerCasedName = name.toLowerCase();
      if ("onfocusin" === lowerCasedName || "onfocusout" === lowerCasedName)
        return (
          console.error(
            "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
          ),
          (warnedProperties[name] = !0)
        );
      if (
        "function" === typeof value &&
        (("form" === tagName && "action" === name) ||
          ("input" === tagName && "formAction" === name) ||
          ("button" === tagName && "formAction" === name))
      )
        return !0;
      if (null != eventRegistry) {
        tagName = eventRegistry.possibleRegistrationNames;
        if (eventRegistry.registrationNameDependencies.hasOwnProperty(name))
          return !0;
        eventRegistry = tagName.hasOwnProperty(lowerCasedName)
          ? tagName[lowerCasedName]
          : null;
        if (null != eventRegistry)
          return (
            console.error(
              "Invalid event handler property `%s`. Did you mean `%s`?",
              name,
              eventRegistry
            ),
            (warnedProperties[name] = !0)
          );
        if (EVENT_NAME_REGEX.test(name))
          return (
            console.error(
              "Unknown event handler property `%s`. It will be ignored.",
              name
            ),
            (warnedProperties[name] = !0)
          );
      } else if (EVENT_NAME_REGEX.test(name))
        return (
          INVALID_EVENT_NAME_REGEX.test(name) &&
            console.error(
              "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
              name
            ),
          (warnedProperties[name] = !0)
        );
      if (rARIA.test(name) || rARIACamel.test(name)) return !0;
      if ("innerhtml" === lowerCasedName)
        return (
          console.error(
            "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
          ),
          (warnedProperties[name] = !0)
        );
      if ("aria" === lowerCasedName)
        return (
          console.error(
            "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
          ),
          (warnedProperties[name] = !0)
        );
      if (
        "is" === lowerCasedName &&
        null !== value &&
        void 0 !== value &&
        "string" !== typeof value
      )
        return (
          console.error(
            "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
            typeof value
          ),
          (warnedProperties[name] = !0)
        );
      if ("number" === typeof value && isNaN(value))
        return (
          console.error(
            "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
            name
          ),
          (warnedProperties[name] = !0)
        );
      if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
        if (
          ((lowerCasedName = possibleStandardNames[lowerCasedName]),
          lowerCasedName !== name)
        )
          return (
            console.error(
              "Invalid DOM property `%s`. Did you mean `%s`?",
              name,
              lowerCasedName
            ),
            (warnedProperties[name] = !0)
          );
      } else if (name !== lowerCasedName)
        return (
          console.error(
            "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
            name,
            lowerCasedName
          ),
          (warnedProperties[name] = !0)
        );
      switch (name) {
        case "dangerouslySetInnerHTML":
        case "children":
        case "style":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "ref":
          return !0;
        case "innerText":
        case "textContent":
          return !0;
      }
      switch (typeof value) {
        case "boolean":
          switch (name) {
            case "autoFocus":
            case "checked":
            case "multiple":
            case "muted":
            case "selected":
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha":
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope":
            case "capture":
            case "download":
            case "inert":
              return !0;
            default:
              lowerCasedName = name.toLowerCase().slice(0, 5);
              if ("data-" === lowerCasedName || "aria-" === lowerCasedName)
                return !0;
              value
                ? console.error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                    value,
                    name,
                    name,
                    value,
                    name
                  )
                : console.error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                    value,
                    name,
                    name,
                    value,
                    name,
                    name,
                    name
                  );
              return (warnedProperties[name] = !0);
          }
        case "function":
        case "symbol":
          return (warnedProperties[name] = !0), !1;
        case "string":
          if ("false" === value || "true" === value) {
            switch (name) {
              case "checked":
              case "selected":
              case "multiple":
              case "muted":
              case "allowFullScreen":
              case "async":
              case "autoPlay":
              case "controls":
              case "default":
              case "defer":
              case "disabled":
              case "disablePictureInPicture":
              case "disableRemotePlayback":
              case "formNoValidate":
              case "hidden":
              case "loop":
              case "noModule":
              case "noValidate":
              case "open":
              case "playsInline":
              case "readOnly":
              case "required":
              case "reversed":
              case "scoped":
              case "seamless":
              case "itemScope":
              case "inert":
                break;
              default:
                return !0;
            }
            console.error(
              "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
              value,
              name,
              "false" === value
                ? "The browser will interpret it as a truthy value."
                : 'Although this works, it will not work as expected if you pass the string "false".',
              name,
              value
            );
            warnedProperties[name] = !0;
          }
      }
      return !0;
    }
    function warnUnknownProperties(type, props, eventRegistry) {
      var unknownProps = [],
        key;
      for (key in props)
        validateProperty(type, key, props[key], eventRegistry) ||
          unknownProps.push(key);
      props = unknownProps
        .map(function (prop) {
          return "`" + prop + "`";
        })
        .join(", ");
      1 === unknownProps.length
        ? console.error(
            "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",
            props,
            type
          )
        : 1 < unknownProps.length &&
          console.error(
            "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",
            props,
            type
          );
    }
    function sanitizeURL(url) {
      return isJavaScriptProtocol.test("" + url)
        ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')"
        : url;
    }
    function getEventTarget(nativeEvent) {
      nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
      nativeEvent.correspondingUseElement &&
        (nativeEvent = nativeEvent.correspondingUseElement);
      return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
    }
    function restoreStateOfTarget(target) {
      var internalInstance = getInstanceFromNode(target);
      if (internalInstance && (target = internalInstance.stateNode)) {
        var props = target[internalPropsKey] || null;
        a: switch (
          ((target = internalInstance.stateNode), internalInstance.type)
        ) {
          case "input":
            updateInput(
              target,
              props.value,
              props.defaultValue,
              props.defaultValue,
              props.checked,
              props.defaultChecked,
              props.type,
              props.name
            );
            internalInstance = props.name;
            if ("radio" === props.type && null != internalInstance) {
              for (props = target; props.parentNode; ) props = props.parentNode;
              checkAttributeStringCoercion(internalInstance, "name");
              props = props.querySelectorAll(
                'input[name="' +
                  escapeSelectorAttributeValueInsideDoubleQuotes(
                    "" + internalInstance
                  ) +
                  '"][type="radio"]'
              );
              for (
                internalInstance = 0;
                internalInstance < props.length;
                internalInstance++
              ) {
                var otherNode = props[internalInstance];
                if (otherNode !== target && otherNode.form === target.form) {
                  var otherProps = otherNode[internalPropsKey] || null;
                  if (!otherProps)
                    throw Error(
                      "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."
                    );
                  updateInput(
                    otherNode,
                    otherProps.value,
                    otherProps.defaultValue,
                    otherProps.defaultValue,
                    otherProps.checked,
                    otherProps.defaultChecked,
                    otherProps.type,
                    otherProps.name
                  );
                }
              }
              for (
                internalInstance = 0;
                internalInstance < props.length;
                internalInstance++
              )
                (otherNode = props[internalInstance]),
                  otherNode.form === target.form &&
                    updateValueIfChanged(otherNode);
            }
            break a;
          case "textarea":
            updateTextarea(target, props.value, props.defaultValue);
            break a;
          case "select":
            (internalInstance = props.value),
              null != internalInstance &&
                updateOptions(target, !!props.multiple, internalInstance, !1);
        }
      }
    }
    function batchedUpdates$1(fn, a, b) {
      if (isInsideEventHandler) return fn(a, b);
      isInsideEventHandler = !0;
      try {
        var JSCompiler_inline_result = fn(a);
        return JSCompiler_inline_result;
      } finally {
        if (
          ((isInsideEventHandler = !1),
          null !== restoreTarget || null !== restoreQueue)
        )
          if (
            (flushSyncWork$1(),
            restoreTarget &&
              ((a = restoreTarget),
              (fn = restoreQueue),
              (restoreQueue = restoreTarget = null),
              restoreStateOfTarget(a),
              fn))
          )
            for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
      }
    }
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (null === stateNode) return null;
      var props = stateNode[internalPropsKey] || null;
      if (null === props) return null;
      stateNode = props[registrationName];
      a: switch (registrationName) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (props = !props.disabled) ||
            ((inst = inst.type),
            (props = !(
              "button" === inst ||
              "input" === inst ||
              "select" === inst ||
              "textarea" === inst
            )));
          inst = !props;
          break a;
        default:
          inst = !1;
      }
      if (inst) return null;
      if (stateNode && "function" !== typeof stateNode)
        throw Error(
          "Expected `" +
            registrationName +
            "` listener to be a function, instead got a value of `" +
            typeof stateNode +
            "` type."
        );
      return stateNode;
    }
    function getData() {
      if (fallbackText) return fallbackText;
      var start,
        startValue = startText,
        startLength = startValue.length,
        end,
        endValue = "value" in root ? root.value : root.textContent,
        endLength = endValue.length;
      for (
        start = 0;
        start < startLength && startValue[start] === endValue[start];
        start++
      );
      var minEnd = startLength - start;
      for (
        end = 1;
        end <= minEnd &&
        startValue[startLength - end] === endValue[endLength - end];
        end++
      );
      return (fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0));
    }
    function getEventCharCode(nativeEvent) {
      var keyCode = nativeEvent.keyCode;
      "charCode" in nativeEvent
        ? ((nativeEvent = nativeEvent.charCode),
          0 === nativeEvent && 13 === keyCode && (nativeEvent = 13))
        : (nativeEvent = keyCode);
      10 === nativeEvent && (nativeEvent = 13);
      return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
    }
    function functionThatReturnsTrue() {
      return !0;
    }
    function functionThatReturnsFalse() {
      return !1;
    }
    function createSyntheticEvent(Interface) {
      function SyntheticBaseEvent(
        reactName,
        reactEventType,
        targetInst,
        nativeEvent,
        nativeEventTarget
      ) {
        this._reactName = reactName;
        this._targetInst = targetInst;
        this.type = reactEventType;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = null;
        for (var propName in Interface)
          Interface.hasOwnProperty(propName) &&
            ((reactName = Interface[propName]),
            (this[propName] = reactName
              ? reactName(nativeEvent)
              : nativeEvent[propName]));
        this.isDefaultPrevented = (
          null != nativeEvent.defaultPrevented
            ? nativeEvent.defaultPrevented
            : !1 === nativeEvent.returnValue
        )
          ? functionThatReturnsTrue
          : functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      assign(SyntheticBaseEvent.prototype, {
        preventDefault: function () {
          this.defaultPrevented = !0;
          var event = this.nativeEvent;
          event &&
            (event.preventDefault
              ? event.preventDefault()
              : "unknown" !== typeof event.returnValue &&
                (event.returnValue = !1),
            (this.isDefaultPrevented = functionThatReturnsTrue));
        },
        stopPropagation: function () {
          var event = this.nativeEvent;
          event &&
            (event.stopPropagation
              ? event.stopPropagation()
              : "unknown" !== typeof event.cancelBubble &&
                (event.cancelBubble = !0),
            (this.isPropagationStopped = functionThatReturnsTrue));
        },
        persist: function () {},
        isPersistent: functionThatReturnsTrue
      });
      return SyntheticBaseEvent;
    }
    function modifierStateGetter(keyArg) {
      var nativeEvent = this.nativeEvent;
      return nativeEvent.getModifierState
        ? nativeEvent.getModifierState(keyArg)
        : (keyArg = modifierKeyToProp[keyArg])
          ? !!nativeEvent[keyArg]
          : !1;
    }
    function getEventModifierState() {
      return modifierStateGetter;
    }
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch (domEventName) {
        case "keyup":
          return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
        case "keydown":
          return nativeEvent.keyCode !== START_KEYCODE;
        case "keypress":
        case "mousedown":
        case "focusout":
          return !0;
        default:
          return !1;
      }
    }
    function getDataFromCustomEvent(nativeEvent) {
      nativeEvent = nativeEvent.detail;
      return "object" === typeof nativeEvent && "data" in nativeEvent
        ? nativeEvent.data
        : null;
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch (domEventName) {
        case "compositionend":
          return getDataFromCustomEvent(nativeEvent);
        case "keypress":
          if (nativeEvent.which !== SPACEBAR_CODE) return null;
          hasSpaceKeypress = !0;
          return SPACEBAR_CHAR;
        case "textInput":
          return (
            (domEventName = nativeEvent.data),
            domEventName === SPACEBAR_CHAR && hasSpaceKeypress
              ? null
              : domEventName
          );
        default:
          return null;
      }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      if (isComposing)
        return "compositionend" === domEventName ||
          (!canUseCompositionEvent &&
            isFallbackCompositionEnd(domEventName, nativeEvent))
          ? ((domEventName = getData()),
            (fallbackText = startText = root = null),
            (isComposing = !1),
            domEventName)
          : null;
      switch (domEventName) {
        case "paste":
          return null;
        case "keypress":
          if (
            !(
              nativeEvent.ctrlKey ||
              nativeEvent.altKey ||
              nativeEvent.metaKey
            ) ||
            (nativeEvent.ctrlKey && nativeEvent.altKey)
          ) {
            if (nativeEvent.char && 1 < nativeEvent.char.length)
              return nativeEvent.char;
            if (nativeEvent.which)
              return String.fromCharCode(nativeEvent.which);
          }
          return null;
        case "compositionend":
          return useFallbackCompositionData && "ko" !== nativeEvent.locale
            ? null
            : nativeEvent.data;
        default:
          return null;
      }
    }
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return "input" === nodeName
        ? !!supportedInputTypes[elem.type]
        : "textarea" === nodeName
          ? !0
          : !1;
    }
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) return !1;
      eventNameSuffix = "on" + eventNameSuffix;
      var isSupported = eventNameSuffix in document;
      isSupported ||
        ((isSupported = document.createElement("div")),
        isSupported.setAttribute(eventNameSuffix, "return;"),
        (isSupported = "function" === typeof isSupported[eventNameSuffix]));
      return isSupported;
    }
    function createAndAccumulateChangeEvent(
      dispatchQueue,
      inst,
      nativeEvent,
      target
    ) {
      restoreTarget
        ? restoreQueue
          ? restoreQueue.push(target)
          : (restoreQueue = [target])
        : (restoreTarget = target);
      inst = accumulateTwoPhaseListeners(inst, "onChange");
      0 < inst.length &&
        ((nativeEvent = new SyntheticEvent(
          "onChange",
          "change",
          null,
          nativeEvent,
          target
        )),
        dispatchQueue.push({ event: nativeEvent, listeners: inst }));
    }
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if ("change" === domEventName) return targetInst;
    }
    function stopWatchingForValueChange() {
      activeElement$1 &&
        (activeElement$1.detachEvent("onpropertychange", handlePropertyChange),
        (activeElementInst$1 = activeElement$1 = null));
    }
    function handlePropertyChange(nativeEvent) {
      if (
        "value" === nativeEvent.propertyName &&
        getInstIfValueChanged(activeElementInst$1)
      ) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(
          dispatchQueue,
          activeElementInst$1,
          nativeEvent,
          getEventTarget(nativeEvent)
        );
        batchedUpdates$1(runEventInBatch, dispatchQueue);
      }
    }
    function handleEventsForInputEventPolyfill(
      domEventName,
      target,
      targetInst
    ) {
      "focusin" === domEventName
        ? (stopWatchingForValueChange(),
          (activeElement$1 = target),
          (activeElementInst$1 = targetInst),
          activeElement$1.attachEvent("onpropertychange", handlePropertyChange))
        : "focusout" === domEventName && stopWatchingForValueChange();
    }
    function getTargetInstForInputEventPolyfill(domEventName) {
      if (
        "selectionchange" === domEventName ||
        "keyup" === domEventName ||
        "keydown" === domEventName
      )
        return getInstIfValueChanged(activeElementInst$1);
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if ("click" === domEventName) return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if ("input" === domEventName || "change" === domEventName)
        return getInstIfValueChanged(targetInst);
    }
    function is(x, y) {
      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
    }
    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB)) return !0;
      if (
        "object" !== typeof objA ||
        null === objA ||
        "object" !== typeof objB ||
        null === objB
      )
        return !1;
      var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) return !1;
      for (keysB = 0; keysB < keysA.length; keysB++) {
        var currentKey = keysA[keysB];
        if (
          !hasOwnProperty.call(objB, currentKey) ||
          !objectIs(objA[currentKey], objB[currentKey])
        )
          return !1;
      }
      return !0;
    }
    function getLeafNode(node) {
      for (; node && node.firstChild; ) node = node.firstChild;
      return node;
    }
    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      root = 0;
      for (var nodeEnd; node; ) {
        if (3 === node.nodeType) {
          nodeEnd = root + node.textContent.length;
          if (root <= offset && nodeEnd >= offset)
            return { node: node, offset: offset - root };
          root = nodeEnd;
        }
        a: {
          for (; node; ) {
            if (node.nextSibling) {
              node = node.nextSibling;
              break a;
            }
            node = node.parentNode;
          }
          node = void 0;
        }
        node = getLeafNode(node);
      }
    }
    function containsNode(outerNode, innerNode) {
      return outerNode && innerNode
        ? outerNode === innerNode
          ? !0
          : outerNode && 3 === outerNode.nodeType
            ? !1
            : innerNode && 3 === innerNode.nodeType
              ? containsNode(outerNode, innerNode.parentNode)
              : "contains" in outerNode
                ? outerNode.contains(innerNode)
                : outerNode.compareDocumentPosition
                  ? !!(outerNode.compareDocumentPosition(innerNode) & 16)
                  : !1
        : !1;
    }
    function getActiveElementDeep(containerInfo) {
      containerInfo =
        null != containerInfo &&
        null != containerInfo.ownerDocument &&
        null != containerInfo.ownerDocument.defaultView
          ? containerInfo.ownerDocument.defaultView
          : window;
      for (
        var element = getActiveElement(containerInfo.document);
        element instanceof containerInfo.HTMLIFrameElement;

      ) {
        try {
          var JSCompiler_inline_result =
            "string" === typeof element.contentWindow.location.href;
        } catch (err) {
          JSCompiler_inline_result = !1;
        }
        if (JSCompiler_inline_result) containerInfo = element.contentWindow;
        else break;
        element = getActiveElement(containerInfo.document);
      }
      return element;
    }
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return (
        nodeName &&
        (("input" === nodeName &&
          ("text" === elem.type ||
            "search" === elem.type ||
            "tel" === elem.type ||
            "url" === elem.type ||
            "password" === elem.type)) ||
          "textarea" === nodeName ||
          "true" === elem.contentEditable)
      );
    }
    function constructSelectEvent(
      dispatchQueue,
      nativeEvent,
      nativeEventTarget
    ) {
      var doc =
        nativeEventTarget.window === nativeEventTarget
          ? nativeEventTarget.document
          : 9 === nativeEventTarget.nodeType
            ? nativeEventTarget
            : nativeEventTarget.ownerDocument;
      mouseDown ||
        null == activeElement ||
        activeElement !== getActiveElement(doc) ||
        ((doc = activeElement),
        "selectionStart" in doc && hasSelectionCapabilities(doc)
          ? (doc = { start: doc.selectionStart, end: doc.selectionEnd })
          : ((doc = (
              (doc.ownerDocument && doc.ownerDocument.defaultView) ||
              window
            ).getSelection()),
            (doc = {
              anchorNode: doc.anchorNode,
              anchorOffset: doc.anchorOffset,
              focusNode: doc.focusNode,
              focusOffset: doc.focusOffset
            })),
        (lastSelection && shallowEqual(lastSelection, doc)) ||
          ((lastSelection = doc),
          (doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect")),
          0 < doc.length &&
            ((nativeEvent = new SyntheticEvent(
              "onSelect",
              "select",
              null,
              nativeEvent,
              nativeEventTarget
            )),
            dispatchQueue.push({ event: nativeEvent, listeners: doc }),
            (nativeEvent.target = activeElement))));
    }
    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};
      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes["Webkit" + styleProp] = "webkit" + eventName;
      prefixes["Moz" + styleProp] = "moz" + eventName;
      return prefixes;
    }
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
      if (!vendorPrefixes[eventName]) return eventName;
      var prefixMap = vendorPrefixes[eventName],
        styleProp;
      for (styleProp in prefixMap)
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
          return (prefixedEventNames[eventName] = prefixMap[styleProp]);
      return eventName;
    }
    function registerSimpleEvent(domEventName, reactName) {
      topLevelEventsToReactNames.set(domEventName, reactName);
      registerTwoPhaseEvent(reactName, [domEventName]);
    }
    function createCapturedValueAtFiber(value, source) {
      if ("object" === typeof value && null !== value) {
        var existing = CapturedStacks.get(value);
        if (void 0 !== existing) return existing;
        source = {
          value: value,
          source: source,
          stack: getStackByFiberInDevAndProd(source)
        };
        CapturedStacks.set(value, source);
        return source;
      }
      return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }
    function finishQueueingConcurrentUpdates() {
      for (
        var endIndex = concurrentQueuesIndex,
          i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);
        i < endIndex;

      ) {
        var fiber = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var queue = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var update = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var lane = concurrentQueues[i];
        concurrentQueues[i++] = null;
        if (null !== queue && null !== update) {
          var pending = queue.pending;
          null === pending
            ? (update.next = update)
            : ((update.next = pending.next), (pending.next = update));
          queue.pending = update;
        }
        0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
      }
    }
    function enqueueUpdate$1(fiber, queue, update, lane) {
      concurrentQueues[concurrentQueuesIndex++] = fiber;
      concurrentQueues[concurrentQueuesIndex++] = queue;
      concurrentQueues[concurrentQueuesIndex++] = update;
      concurrentQueues[concurrentQueuesIndex++] = lane;
      concurrentlyUpdatedLanes |= lane;
      fiber.lanes |= lane;
      fiber = fiber.alternate;
      null !== fiber && (fiber.lanes |= lane);
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
      enqueueUpdate$1(fiber, queue, update, lane);
      return getRootForUpdatedFiber(fiber);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
      enqueueUpdate$1(fiber, null, null, lane);
      return getRootForUpdatedFiber(fiber);
    }
    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
      sourceFiber.lanes |= lane;
      var alternate = sourceFiber.alternate;
      null !== alternate && (alternate.lanes |= lane);
      for (var isHidden = !1, parent = sourceFiber.return; null !== parent; )
        (parent.childLanes |= lane),
          (alternate = parent.alternate),
          null !== alternate && (alternate.childLanes |= lane),
          22 === parent.tag &&
            ((sourceFiber = parent.stateNode),
            null === sourceFiber ||
              sourceFiber._visibility & OffscreenVisible ||
              (isHidden = !0)),
          (sourceFiber = parent),
          (parent = parent.return);
      return 3 === sourceFiber.tag
        ? ((parent = sourceFiber.stateNode),
          isHidden &&
            null !== update &&
            ((isHidden = 31 - clz32(lane)),
            (sourceFiber = parent.hiddenUpdates),
            (alternate = sourceFiber[isHidden]),
            null === alternate
              ? (sourceFiber[isHidden] = [update])
              : alternate.push(update),
            (update.lane = lane | 536870912)),
          parent)
        : null;
    }
    function getRootForUpdatedFiber(sourceFiber) {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
        throw (
          ((nestedPassiveUpdateCount = nestedUpdateCount = 0),
          (rootWithPassiveNestedUpdates = rootWithNestedUpdates = null),
          Error(
            "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
          ))
        );
      nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT &&
        ((nestedPassiveUpdateCount = 0),
        (rootWithPassiveNestedUpdates = null),
        console.error(
          "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
        ));
      null === sourceFiber.alternate &&
        0 !== (sourceFiber.flags & 4098) &&
        warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
      for (var node = sourceFiber, parent = node.return; null !== parent; )
        null === node.alternate &&
          0 !== (node.flags & 4098) &&
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber),
          (node = parent),
          (parent = node.return);
      return 3 === node.tag ? node.stateNode : null;
    }
    function resolveFunctionForHotReloading(type) {
      if (null === resolveFamily) return type;
      var family = resolveFamily(type);
      return void 0 === family ? type : family.current;
    }
    function resolveForwardRefForHotReloading(type) {
      if (null === resolveFamily) return type;
      var family = resolveFamily(type);
      return void 0 === family
        ? null !== type &&
          void 0 !== type &&
          "function" === typeof type.render &&
          ((family = resolveFunctionForHotReloading(type.render)),
          type.render !== family)
          ? ((family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }),
            void 0 !== type.displayName &&
              (family.displayName = type.displayName),
            family)
          : type
        : family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
      if (null === resolveFamily) return !1;
      var prevType = fiber.elementType;
      element = element.type;
      var needsCompareFamilies = !1,
        $$typeofNextType =
          "object" === typeof element && null !== element
            ? element.$$typeof
            : null;
      switch (fiber.tag) {
        case 1:
          "function" === typeof element && (needsCompareFamilies = !0);
          break;
        case 0:
          "function" === typeof element
            ? (needsCompareFamilies = !0)
            : $$typeofNextType === REACT_LAZY_TYPE &&
              (needsCompareFamilies = !0);
          break;
        case 11:
          $$typeofNextType === REACT_FORWARD_REF_TYPE
            ? (needsCompareFamilies = !0)
            : $$typeofNextType === REACT_LAZY_TYPE &&
              (needsCompareFamilies = !0);
          break;
        case 14:
        case 15:
          $$typeofNextType === REACT_MEMO_TYPE
            ? (needsCompareFamilies = !0)
            : $$typeofNextType === REACT_LAZY_TYPE &&
              (needsCompareFamilies = !0);
          break;
        default:
          return !1;
      }
      return needsCompareFamilies &&
        ((fiber = resolveFamily(prevType)),
        void 0 !== fiber && fiber === resolveFamily(element))
        ? !0
        : !1;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
      null !== resolveFamily &&
        "function" === typeof WeakSet &&
        (null === failedBoundaries && (failedBoundaries = new WeakSet()),
        failedBoundaries.add(fiber));
    }
    function scheduleFibersWithFamiliesRecursively(
      fiber,
      updatedFamilies,
      staleFamilies
    ) {
      var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type,
        candidateType = null;
      switch (tag) {
        case 0:
        case 15:
        case 1:
          candidateType = type;
          break;
        case 11:
          candidateType = type.render;
      }
      if (null === resolveFamily)
        throw Error("Expected resolveFamily to be set during hot reload.");
      var needsRender = !1;
      type = !1;
      null !== candidateType &&
        ((candidateType = resolveFamily(candidateType)),
        void 0 !== candidateType &&
          (staleFamilies.has(candidateType)
            ? (type = !0)
            : updatedFamilies.has(candidateType) &&
              (1 === tag ? (type = !0) : (needsRender = !0))));
      null !== failedBoundaries &&
        (failedBoundaries.has(fiber) ||
          (null !== alternate && failedBoundaries.has(alternate))) &&
        (type = !0);
      type && (fiber._debugNeedsRemount = !0);
      if (type || needsRender)
        (alternate = enqueueConcurrentRenderForLane(fiber, 2)),
          null !== alternate && scheduleUpdateOnFiber(alternate, fiber, 2);
      null === child ||
        type ||
        scheduleFibersWithFamiliesRecursively(
          child,
          updatedFamilies,
          staleFamilies
        );
      null !== sibling &&
        scheduleFibersWithFamiliesRecursively(
          sibling,
          updatedFamilies,
          staleFamilies
        );
    }
    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.sibling =
        this.child =
        this.return =
        this.stateNode =
        this.type =
        this.elementType =
          null;
      this.index = 0;
      this.refCleanup = this.ref = null;
      this.pendingProps = pendingProps;
      this.dependencies =
        this.memoizedState =
        this.updateQueue =
        this.memoizedProps =
          null;
      this.mode = mode;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
      this.actualDuration = -0;
      this.actualStartTime = -1.1;
      this.treeBaseDuration = this.selfBaseDuration = -0;
      this._debugTask =
        this._debugStack =
        this._debugOwner =
        this._debugInfo =
          null;
      this._debugNeedsRemount = !1;
      this._debugHookTypes = null;
      hasBadMapPolyfill ||
        "function" !== typeof Object.preventExtensions ||
        Object.preventExtensions(this);
    }
    function shouldConstruct(Component) {
      Component = Component.prototype;
      return !(!Component || !Component.isReactComponent);
    }
    function createWorkInProgress(current, pendingProps) {
      var workInProgress = current.alternate;
      null === workInProgress
        ? ((workInProgress = createFiber(
            current.tag,
            pendingProps,
            current.key,
            current.mode
          )),
          (workInProgress.elementType = current.elementType),
          (workInProgress.type = current.type),
          (workInProgress.stateNode = current.stateNode),
          (workInProgress._debugOwner = current._debugOwner),
          (workInProgress._debugStack = current._debugStack),
          (workInProgress._debugTask = current._debugTask),
          (workInProgress._debugHookTypes = current._debugHookTypes),
          (workInProgress.alternate = current),
          (current.alternate = workInProgress))
        : ((workInProgress.pendingProps = pendingProps),
          (workInProgress.type = current.type),
          (workInProgress.flags = 0),
          (workInProgress.subtreeFlags = 0),
          (workInProgress.deletions = null),
          (workInProgress.actualDuration = -0),
          (workInProgress.actualStartTime = -1.1));
      workInProgress.flags = current.flags & 65011712;
      workInProgress.childLanes = current.childLanes;
      workInProgress.lanes = current.lanes;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      pendingProps = current.dependencies;
      workInProgress.dependencies =
        null === pendingProps
          ? null
          : {
              lanes: pendingProps.lanes,
              firstContext: pendingProps.firstContext,
              _debugThenableState: pendingProps._debugThenableState
            };
      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;
      workInProgress.refCleanup = current.refCleanup;
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
      workInProgress._debugInfo = current._debugInfo;
      workInProgress._debugNeedsRemount = current._debugNeedsRemount;
      switch (workInProgress.tag) {
        case 0:
        case 15:
          workInProgress.type = resolveFunctionForHotReloading(current.type);
          break;
        case 1:
          workInProgress.type = resolveFunctionForHotReloading(current.type);
          break;
        case 11:
          workInProgress.type = resolveForwardRefForHotReloading(current.type);
      }
      return workInProgress;
    }
    function resetWorkInProgress(workInProgress, renderLanes) {
      workInProgress.flags &= 65011714;
      var current = workInProgress.alternate;
      null === current
        ? ((workInProgress.childLanes = 0),
          (workInProgress.lanes = renderLanes),
          (workInProgress.child = null),
          (workInProgress.subtreeFlags = 0),
          (workInProgress.memoizedProps = null),
          (workInProgress.memoizedState = null),
          (workInProgress.updateQueue = null),
          (workInProgress.dependencies = null),
          (workInProgress.stateNode = null),
          (workInProgress.selfBaseDuration = 0),
          (workInProgress.treeBaseDuration = 0))
        : ((workInProgress.childLanes = current.childLanes),
          (workInProgress.lanes = current.lanes),
          (workInProgress.child = current.child),
          (workInProgress.subtreeFlags = 0),
          (workInProgress.deletions = null),
          (workInProgress.memoizedProps = current.memoizedProps),
          (workInProgress.memoizedState = current.memoizedState),
          (workInProgress.updateQueue = current.updateQueue),
          (workInProgress.type = current.type),
          (renderLanes = current.dependencies),
          (workInProgress.dependencies =
            null === renderLanes
              ? null
              : {
                  lanes: renderLanes.lanes,
                  firstContext: renderLanes.firstContext,
                  _debugThenableState: renderLanes._debugThenableState
                }),
          (workInProgress.selfBaseDuration = current.selfBaseDuration),
          (workInProgress.treeBaseDuration = current.treeBaseDuration));
      return workInProgress;
    }
    function createFiberFromTypeAndProps(
      type,
      key,
      pendingProps,
      owner,
      mode,
      lanes
    ) {
      var fiberTag = 0,
        resolvedType = type;
      if ("function" === typeof type)
        shouldConstruct(type) && (fiberTag = 1),
          (resolvedType = resolveFunctionForHotReloading(resolvedType));
      else if ("string" === typeof type)
        (fiberTag = getHostContext()),
          (fiberTag = isHostHoistableType(type, pendingProps, fiberTag)
            ? 26
            : "html" === type || "head" === type || "body" === type
              ? 27
              : 5);
      else
        a: switch (type) {
          case REACT_ACTIVITY_TYPE:
            return (
              (key = createFiber(31, pendingProps, key, mode)),
              (key.elementType = REACT_ACTIVITY_TYPE),
              (key.lanes = lanes),
              key
            );
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(
              pendingProps.children,
              mode,
              lanes,
              key
            );
          case REACT_STRICT_MODE_TYPE:
            fiberTag = 8;
            mode |= StrictLegacyMode;
            mode |= StrictEffectsMode;
            break;
          case REACT_PROFILER_TYPE:
            return (
              (type = pendingProps),
              (owner = mode),
              "string" !== typeof type.id &&
                console.error(
                  'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
                  typeof type.id
                ),
              (key = createFiber(12, type, key, owner | ProfileMode)),
              (key.elementType = REACT_PROFILER_TYPE),
              (key.lanes = lanes),
              (key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }),
              key
            );
          case REACT_SUSPENSE_TYPE:
            return (
              (key = createFiber(13, pendingProps, key, mode)),
              (key.elementType = REACT_SUSPENSE_TYPE),
              (key.lanes = lanes),
              key
            );
          case REACT_SUSPENSE_LIST_TYPE:
            return (
              (key = createFiber(19, pendingProps, key, mode)),
              (key.elementType = REACT_SUSPENSE_LIST_TYPE),
              (key.lanes = lanes),
              key
            );
          default:
            if ("object" === typeof type && null !== type)
              switch (type.$$typeof) {
                case REACT_PROVIDER_TYPE:
                case REACT_CONTEXT_TYPE:
                  fiberTag = 10;
                  break a;
                case REACT_CONSUMER_TYPE:
                  fiberTag = 9;
                  break a;
                case REACT_FORWARD_REF_TYPE:
                  fiberTag = 11;
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                  break a;
                case REACT_MEMO_TYPE:
                  fiberTag = 14;
                  break a;
                case REACT_LAZY_TYPE:
                  fiberTag = 16;
                  resolvedType = null;
                  break a;
              }
            resolvedType = "";
            if (
              void 0 === type ||
              ("object" === typeof type &&
                null !== type &&
                0 === Object.keys(type).length)
            )
              resolvedType +=
                " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            null === type
              ? (pendingProps = "null")
              : isArrayImpl(type)
                ? (pendingProps = "array")
                : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE
                  ? ((pendingProps =
                      "<" +
                      (getComponentNameFromType(type.type) || "Unknown") +
                      " />"),
                    (resolvedType =
                      " Did you accidentally export a JSX literal instead of a component?"))
                  : (pendingProps = typeof type);
            (fiberTag = owner ? getComponentNameFromOwner(owner) : null) &&
              (resolvedType +=
                "\n\nCheck the render method of `" + fiberTag + "`.");
            fiberTag = 29;
            pendingProps = Error(
              "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " +
                (pendingProps + "." + resolvedType)
            );
            resolvedType = null;
        }
      key = createFiber(fiberTag, pendingProps, key, mode);
      key.elementType = type;
      key.type = resolvedType;
      key.lanes = lanes;
      key._debugOwner = owner;
      return key;
    }
    function createFiberFromElement(element, mode, lanes) {
      mode = createFiberFromTypeAndProps(
        element.type,
        element.key,
        element.props,
        element._owner,
        mode,
        lanes
      );
      mode._debugOwner = element._owner;
      mode._debugStack = element._debugStack;
      mode._debugTask = element._debugTask;
      return mode;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      elements = createFiber(7, elements, key, mode);
      elements.lanes = lanes;
      return elements;
    }
    function createFiberFromText(content, mode, lanes) {
      content = createFiber(6, content, null, mode);
      content.lanes = lanes;
      return content;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      mode = createFiber(
        4,
        null !== portal.children ? portal.children : [],
        portal.key,
        mode
      );
      mode.lanes = lanes;
      mode.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation
      };
      return mode;
    }
    function pushTreeFork(workInProgress, totalChildren) {
      warnIfNotHydrating();
      forkStack[forkStackIndex++] = treeForkCount;
      forkStack[forkStackIndex++] = treeForkProvider;
      treeForkProvider = workInProgress;
      treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress, totalChildren, index) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextProvider = workInProgress;
      var baseIdWithLeadingBit = treeContextId;
      workInProgress = treeContextOverflow;
      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
      baseIdWithLeadingBit &= ~(1 << baseLength);
      index += 1;
      var length = 32 - clz32(totalChildren) + baseLength;
      if (30 < length) {
        var numberOfOverflowBits = baseLength - (baseLength % 5);
        length = (
          baseIdWithLeadingBit &
          ((1 << numberOfOverflowBits) - 1)
        ).toString(32);
        baseIdWithLeadingBit >>= numberOfOverflowBits;
        baseLength -= numberOfOverflowBits;
        treeContextId =
          (1 << (32 - clz32(totalChildren) + baseLength)) |
          (index << baseLength) |
          baseIdWithLeadingBit;
        treeContextOverflow = length + workInProgress;
      } else
        (treeContextId =
          (1 << length) | (index << baseLength) | baseIdWithLeadingBit),
          (treeContextOverflow = workInProgress);
    }
    function pushMaterializedTreeId(workInProgress) {
      warnIfNotHydrating();
      null !== workInProgress.return &&
        (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
    }
    function popTreeContext(workInProgress) {
      for (; workInProgress === treeForkProvider; )
        (treeForkProvider = forkStack[--forkStackIndex]),
          (forkStack[forkStackIndex] = null),
          (treeForkCount = forkStack[--forkStackIndex]),
          (forkStack[forkStackIndex] = null);
      for (; workInProgress === treeContextProvider; )
        (treeContextProvider = idStack[--idStackIndex]),
          (idStack[idStackIndex] = null),
          (treeContextOverflow = idStack[--idStackIndex]),
          (idStack[idStackIndex] = null),
          (treeContextId = idStack[--idStackIndex]),
          (idStack[idStackIndex] = null);
    }
    function warnIfNotHydrating() {
      isHydrating ||
        console.error(
          "Expected to be hydrating. This is a bug in React. Please file an issue."
        );
    }
    function buildHydrationDiffNode(fiber, distanceFromLeaf) {
      if (null === fiber.return) {
        if (null === hydrationDiffRootDEV)
          hydrationDiffRootDEV = {
            fiber: fiber,
            children: [],
            serverProps: void 0,
            serverTail: [],
            distanceFromLeaf: distanceFromLeaf
          };
        else {
          if (hydrationDiffRootDEV.fiber !== fiber)
            throw Error(
              "Saw multiple hydration diff roots in a pass. This is a bug in React."
            );
          hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf &&
            (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
        }
        return hydrationDiffRootDEV;
      }
      var siblings = buildHydrationDiffNode(
        fiber.return,
        distanceFromLeaf + 1
      ).children;
      if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)
        return (
          (siblings = siblings[siblings.length - 1]),
          siblings.distanceFromLeaf > distanceFromLeaf &&
            (siblings.distanceFromLeaf = distanceFromLeaf),
          siblings
        );
      distanceFromLeaf = {
        fiber: fiber,
        children: [],
        serverProps: void 0,
        serverTail: [],
        distanceFromLeaf: distanceFromLeaf
      };
      siblings.push(distanceFromLeaf);
      return distanceFromLeaf;
    }
    function warnNonHydratedInstance(fiber, rejectedCandidate) {
      didSuspendOrErrorDEV ||
        ((fiber = buildHydrationDiffNode(fiber, 0)),
        (fiber.serverProps = null),
        null !== rejectedCandidate &&
          ((rejectedCandidate =
            describeHydratableInstanceForDevWarnings(rejectedCandidate)),
          fiber.serverTail.push(rejectedCandidate)));
    }
    function throwOnHydrationMismatch(fiber) {
      var diff = "",
        diffRoot = hydrationDiffRootDEV;
      null !== diffRoot &&
        ((hydrationDiffRootDEV = null), (diff = describeDiff(diffRoot)));
      queueHydrationError(
        createCapturedValueAtFiber(
          Error(
            "Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch" +
              diff
          ),
          fiber
        )
      );
      throw HydrationMismatchException;
    }
    function prepareToHydrateHostInstance(fiber) {
      var didHydrate = fiber.stateNode;
      var type = fiber.type,
        props = fiber.memoizedProps;
      didHydrate[internalInstanceKey] = fiber;
      didHydrate[internalPropsKey] = props;
      validatePropertiesInDevelopment(type, props);
      switch (type) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", didHydrate);
          listenToNonDelegatedEvent("close", didHydrate);
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", didHydrate);
          break;
        case "video":
        case "audio":
          for (type = 0; type < mediaEventTypes.length; type++)
            listenToNonDelegatedEvent(mediaEventTypes[type], didHydrate);
          break;
        case "source":
          listenToNonDelegatedEvent("error", didHydrate);
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", didHydrate);
          listenToNonDelegatedEvent("load", didHydrate);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", didHydrate);
          break;
        case "input":
          checkControlledValueProps("input", props);
          listenToNonDelegatedEvent("invalid", didHydrate);
          validateInputProps(didHydrate, props);
          initInput(
            didHydrate,
            props.value,
            props.defaultValue,
            props.checked,
            props.defaultChecked,
            props.type,
            props.name,
            !0
          );
          track(didHydrate);
          break;
        case "option":
          validateOptionProps(didHydrate, props);
          break;
        case "select":
          checkControlledValueProps("select", props);
          listenToNonDelegatedEvent("invalid", didHydrate);
          validateSelectProps(didHydrate, props);
          break;
        case "textarea":
          checkControlledValueProps("textarea", props),
            listenToNonDelegatedEvent("invalid", didHydrate),
            validateTextareaProps(didHydrate, props),
            initTextarea(
              didHydrate,
              props.value,
              props.defaultValue,
              props.children
            ),
            track(didHydrate);
      }
      type = props.children;
      ("string" !== typeof type &&
        "number" !== typeof type &&
        "bigint" !== typeof type) ||
      didHydrate.textContent === "" + type ||
      !0 === props.suppressHydrationWarning ||
      checkForUnmatchedText(didHydrate.textContent, type)
        ? (null != props.popover &&
            (listenToNonDelegatedEvent("beforetoggle", didHydrate),
            listenToNonDelegatedEvent("toggle", didHydrate)),
          null != props.onScroll &&
            listenToNonDelegatedEvent("scroll", didHydrate),
          null != props.onScrollEnd &&
            listenToNonDelegatedEvent("scrollend", didHydrate),
          null != props.onClick && (didHydrate.onclick = noop$1),
          (didHydrate = !0))
        : (didHydrate = !1);
      didHydrate || throwOnHydrationMismatch(fiber);
    }
    function popToNextHostParent(fiber) {
      for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
        switch (hydrationParentFiber.tag) {
          case 5:
          case 13:
            rootOrSingletonContext = !1;
            return;
          case 27:
          case 3:
            rootOrSingletonContext = !0;
            return;
          default:
            hydrationParentFiber = hydrationParentFiber.return;
        }
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber) return !1;
      if (!isHydrating)
        return popToNextHostParent(fiber), (isHydrating = !0), !1;
      var tag = fiber.tag,
        JSCompiler_temp;
      if ((JSCompiler_temp = 3 !== tag && 27 !== tag)) {
        if ((JSCompiler_temp = 5 === tag))
          (JSCompiler_temp = fiber.type),
            (JSCompiler_temp =
              !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) ||
              shouldSetTextContent(fiber.type, fiber.memoizedProps));
        JSCompiler_temp = !JSCompiler_temp;
      }
      if (JSCompiler_temp && nextHydratableInstance) {
        for (JSCompiler_temp = nextHydratableInstance; JSCompiler_temp; ) {
          var diffNode = buildHydrationDiffNode(fiber, 0),
            description =
              describeHydratableInstanceForDevWarnings(JSCompiler_temp);
          diffNode.serverTail.push(description);
          JSCompiler_temp =
            "Suspense" === description.type
              ? getNextHydratableInstanceAfterSuspenseInstance(JSCompiler_temp)
              : getNextHydratable(JSCompiler_temp.nextSibling);
        }
        throwOnHydrationMismatch(fiber);
      }
      popToNextHostParent(fiber);
      if (13 === tag) {
        fiber = fiber.memoizedState;
        fiber = null !== fiber ? fiber.dehydrated : null;
        if (!fiber)
          throw Error(
            "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
          );
        nextHydratableInstance =
          getNextHydratableInstanceAfterSuspenseInstance(fiber);
      } else
        27 === tag
          ? ((tag = nextHydratableInstance),
            isSingletonScope(fiber.type)
              ? ((fiber = previousHydratableOnEnteringScopedSingleton),
                (previousHydratableOnEnteringScopedSingleton = null),
                (nextHydratableInstance = fiber))
              : (nextHydratableInstance = tag))
          : (nextHydratableInstance = hydrationParentFiber
              ? getNextHydratable(fiber.stateNode.nextSibling)
              : null);
      return !0;
    }
    function resetHydrationState() {
      nextHydratableInstance = hydrationParentFiber = null;
      didSuspendOrErrorDEV = isHydrating = !1;
    }
    function upgradeHydrationErrorsToRecoverable() {
      var queuedErrors = hydrationErrors;
      null !== queuedErrors &&
        (null === workInProgressRootRecoverableErrors
          ? (workInProgressRootRecoverableErrors = queuedErrors)
          : workInProgressRootRecoverableErrors.push.apply(
              workInProgressRootRecoverableErrors,
              queuedErrors
            ),
        (hydrationErrors = null));
      return queuedErrors;
    }
    function queueHydrationError(error) {
      null === hydrationErrors
        ? (hydrationErrors = [error])
        : hydrationErrors.push(error);
    }
    function emitPendingHydrationWarnings() {
      var diffRoot = hydrationDiffRootDEV;
      if (null !== diffRoot) {
        hydrationDiffRootDEV = null;
        for (var diff = describeDiff(diffRoot); 0 < diffRoot.children.length; )
          diffRoot = diffRoot.children[0];
        runWithFiberInDEV(diffRoot.fiber, function () {
          console.error(
            "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s",
            "https://react.dev/link/hydration-mismatch",
            diff
          );
        });
      }
    }
    function resetContextDependencies() {
      lastContextDependency = currentlyRenderingFiber$1 = null;
      isDisallowedContextReadInDEV = !1;
    }
    function pushProvider(providerFiber, context, nextValue) {
      push(valueCursor, context._currentValue, providerFiber);
      context._currentValue = nextValue;
      push(rendererCursorDEV, context._currentRenderer, providerFiber);
      void 0 !== context._currentRenderer &&
        null !== context._currentRenderer &&
        context._currentRenderer !== rendererSigil &&
        console.error(
          "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
        );
      context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
      context._currentValue = valueCursor.current;
      var currentRenderer = rendererCursorDEV.current;
      pop(rendererCursorDEV, providerFiber);
      context._currentRenderer = currentRenderer;
      pop(valueCursor, providerFiber);
    }
    function scheduleContextWorkOnParentPath(
      parent,
      renderLanes,
      propagationRoot
    ) {
      for (; null !== parent; ) {
        var alternate = parent.alternate;
        (parent.childLanes & renderLanes) !== renderLanes
          ? ((parent.childLanes |= renderLanes),
            null !== alternate && (alternate.childLanes |= renderLanes))
          : null !== alternate &&
            (alternate.childLanes & renderLanes) !== renderLanes &&
            (alternate.childLanes |= renderLanes);
        if (parent === propagationRoot) break;
        parent = parent.return;
      }
      parent !== propagationRoot &&
        console.error(
          "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
        );
    }
    function propagateContextChanges(
      workInProgress,
      contexts,
      renderLanes,
      forcePropagateEntireTree
    ) {
      var fiber = workInProgress.child;
      null !== fiber && (fiber.return = workInProgress);
      for (; null !== fiber; ) {
        var list = fiber.dependencies;
        if (null !== list) {
          var nextFiber = fiber.child;
          list = list.firstContext;
          a: for (; null !== list; ) {
            var dependency = list;
            list = fiber;
            for (var i = 0; i < contexts.length; i++)
              if (dependency.context === contexts[i]) {
                list.lanes |= renderLanes;
                dependency = list.alternate;
                null !== dependency && (dependency.lanes |= renderLanes);
                scheduleContextWorkOnParentPath(
                  list.return,
                  renderLanes,
                  workInProgress
                );
                forcePropagateEntireTree || (nextFiber = null);
                break a;
              }
            list = dependency.next;
          }
        } else if (18 === fiber.tag) {
          nextFiber = fiber.return;
          if (null === nextFiber)
            throw Error(
              "We just came from a parent so we must have had a parent. This is a bug in React."
            );
          nextFiber.lanes |= renderLanes;
          list = nextFiber.alternate;
          null !== list && (list.lanes |= renderLanes);
          scheduleContextWorkOnParentPath(
            nextFiber,
            renderLanes,
            workInProgress
          );
          nextFiber = null;
        } else nextFiber = fiber.child;
        if (null !== nextFiber) nextFiber.return = fiber;
        else
          for (nextFiber = fiber; null !== nextFiber; ) {
            if (nextFiber === workInProgress) {
              nextFiber = null;
              break;
            }
            fiber = nextFiber.sibling;
            if (null !== fiber) {
              fiber.return = nextFiber.return;
              nextFiber = fiber;
              break;
            }
            nextFiber = nextFiber.return;
          }
        fiber = nextFiber;
      }
    }
    function propagateParentContextChanges(
      current,
      workInProgress,
      renderLanes,
      forcePropagateEntireTree
    ) {
      current = null;
      for (
        var parent = workInProgress, isInsidePropagationBailout = !1;
        null !== parent;

      ) {
        if (!isInsidePropagationBailout)
          if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;
          else if (0 !== (parent.flags & 262144)) break;
        if (10 === parent.tag) {
          var currentParent = parent.alternate;
          if (null === currentParent)
            throw Error("Should have a current fiber. This is a bug in React.");
          currentParent = currentParent.memoizedProps;
          if (null !== currentParent) {
            var context = parent.type;
            objectIs(parent.pendingProps.value, currentParent.value) ||
              (null !== current
                ? current.push(context)
                : (current = [context]));
          }
        } else if (parent === hostTransitionProviderCursor.current) {
          currentParent = parent.alternate;
          if (null === currentParent)
            throw Error("Should have a current fiber. This is a bug in React.");
          currentParent.memoizedState.memoizedState !==
            parent.memoizedState.memoizedState &&
            (null !== current
              ? current.push(HostTransitionContext)
              : (current = [HostTransitionContext]));
        }
        parent = parent.return;
      }
      null !== current &&
        propagateContextChanges(
          workInProgress,
          current,
          renderLanes,
          forcePropagateEntireTree
        );
      workInProgress.flags |= 262144;
    }
    function checkIfContextChanged(currentDependencies) {
      for (
        currentDependencies = currentDependencies.firstContext;
        null !== currentDependencies;

      ) {
        if (
          !objectIs(
            currentDependencies.context._currentValue,
            currentDependencies.memoizedValue
          )
        )
          return !0;
        currentDependencies = currentDependencies.next;
      }
      return !1;
    }
    function prepareToReadContext(workInProgress) {
      currentlyRenderingFiber$1 = workInProgress;
      lastContextDependency = null;
      workInProgress = workInProgress.dependencies;
      null !== workInProgress && (workInProgress.firstContext = null);
    }
    function readContext(context) {
      isDisallowedContextReadInDEV &&
        console.error(
          "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
        );
      return readContextForConsumer(currentlyRenderingFiber$1, context);
    }
    function readContextDuringReconciliation(consumer, context) {
      null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
      return readContextForConsumer(consumer, context);
    }
    function readContextForConsumer(consumer, context) {
      var value = context._currentValue;
      context = { context: context, memoizedValue: value, next: null };
      if (null === lastContextDependency) {
        if (null === consumer)
          throw Error(
            "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
          );
        lastContextDependency = context;
        consumer.dependencies = {
          lanes: 0,
          firstContext: context,
          _debugThenableState: null
        };
        consumer.flags |= 524288;
      } else lastContextDependency = lastContextDependency.next = context;
      return value;
    }
    function createCache() {
      return {
        controller: new AbortControllerLocal(),
        data: new Map(),
        refCount: 0
      };
    }
    function retainCache(cache) {
      cache.controller.signal.aborted &&
        console.warn(
          "A cache instance was retained after it was already freed. This likely indicates a bug in React."
        );
      cache.refCount++;
    }
    function releaseCache(cache) {
      cache.refCount--;
      0 > cache.refCount &&
        console.warn(
          "A cache instance was released after it was already freed. This likely indicates a bug in React."
        );
      0 === cache.refCount &&
        scheduleCallback$2(NormalPriority, function () {
          cache.controller.abort();
        });
    }
    function pushNestedEffectDurations() {
      var prevEffectDuration = profilerEffectDuration;
      profilerEffectDuration = 0;
      return prevEffectDuration;
    }
    function popNestedEffectDurations(prevEffectDuration) {
      var elapsedTime = profilerEffectDuration;
      profilerEffectDuration = prevEffectDuration;
      return elapsedTime;
    }
    function bubbleNestedEffectDurations(prevEffectDuration) {
      var elapsedTime = profilerEffectDuration;
      profilerEffectDuration += prevEffectDuration;
      return elapsedTime;
    }
    function startProfilerTimer(fiber) {
      profilerStartTime = now();
      0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);
    }
    function stopProfilerTimerIfRunningAndRecordDuration(fiber) {
      if (0 <= profilerStartTime) {
        var elapsedTime = now() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        fiber.selfBaseDuration = elapsedTime;
        profilerStartTime = -1;
      }
    }
    function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {
      if (0 <= profilerStartTime) {
        var elapsedTime = now() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        profilerStartTime = -1;
      }
    }
    function recordEffectDuration() {
      if (0 <= profilerStartTime) {
        var elapsedTime = now() - profilerStartTime;
        profilerStartTime = -1;
        profilerEffectDuration += elapsedTime;
      }
    }
    function startEffectTimer() {
      profilerStartTime = now();
    }
    function transferActualDuration(fiber) {
      for (var child = fiber.child; child; )
        (fiber.actualDuration += child.actualDuration), (child = child.sibling);
    }
    function entangleAsyncAction(transition, thenable) {
      if (null === currentEntangledListeners) {
        var entangledListeners = (currentEntangledListeners = []);
        currentEntangledPendingCount = 0;
        currentEntangledLane = requestTransitionLane();
        currentEntangledActionThenable = {
          status: "pending",
          value: void 0,
          then: function (resolve) {
            entangledListeners.push(resolve);
          }
        };
      }
      currentEntangledPendingCount++;
      thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
      return thenable;
    }
    function pingEngtangledActionScope() {
      if (
        0 === --currentEntangledPendingCount &&
        null !== currentEntangledListeners
      ) {
        null !== currentEntangledActionThenable &&
          (currentEntangledActionThenable.status = "fulfilled");
        var listeners = currentEntangledListeners;
        currentEntangledListeners = null;
        currentEntangledLane = 0;
        currentEntangledActionThenable = null;
        for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
      }
    }
    function chainThenableValue(thenable, result) {
      var listeners = [],
        thenableWithOverride = {
          status: "pending",
          value: null,
          reason: null,
          then: function (resolve) {
            listeners.push(resolve);
          }
        };
      thenable.then(
        function () {
          thenableWithOverride.status = "fulfilled";
          thenableWithOverride.value = result;
          for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
        },
        function (error) {
          thenableWithOverride.status = "rejected";
          thenableWithOverride.reason = error;
          for (error = 0; error < listeners.length; error++)
            (0, listeners[error])(void 0);
        }
      );
      return thenableWithOverride;
    }
    function peekCacheFromPool() {
      var cacheResumedFromPreviousRender = resumedCache.current;
      return null !== cacheResumedFromPreviousRender
        ? cacheResumedFromPreviousRender
        : workInProgressRoot.pooledCache;
    }
    function pushTransition(offscreenWorkInProgress, prevCachePool) {
      null === prevCachePool
        ? push(resumedCache, resumedCache.current, offscreenWorkInProgress)
        : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
    }
    function getSuspendedCache() {
      var cacheFromPool = peekCacheFromPool();
      return null === cacheFromPool
        ? null
        : { parent: CacheContext._currentValue, pool: cacheFromPool };
    }
    function createThenableState() {
      return { didWarnAboutUncachedPromise: !1, thenables: [] };
    }
    function isThenableResolved(thenable) {
      thenable = thenable.status;
      return "fulfilled" === thenable || "rejected" === thenable;
    }
    function noop$3() {}
    function trackUsedThenable(thenableState, thenable, index) {
      null !== ReactSharedInternals.actQueue &&
        (ReactSharedInternals.didUsePromise = !0);
      var trackedThenables = thenableState.thenables;
      index = trackedThenables[index];
      void 0 === index
        ? trackedThenables.push(thenable)
        : index !== thenable &&
          (thenableState.didWarnAboutUncachedPromise ||
            ((thenableState.didWarnAboutUncachedPromise = !0),
            console.error(
              "A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework."
            )),
          thenable.then(noop$3, noop$3),
          (thenable = index));
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw (
            ((thenableState = thenable.reason),
            checkIfUseWrappedInAsyncCatch(thenableState),
            thenableState)
          );
        default:
          if ("string" === typeof thenable.status)
            thenable.then(noop$3, noop$3);
          else {
            thenableState = workInProgressRoot;
            if (
              null !== thenableState &&
              100 < thenableState.shellSuspendCounter
            )
              throw Error(
                "An unknown Component is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
              );
            thenableState = thenable;
            thenableState.status = "pending";
            thenableState.then(
              function (fulfilledValue) {
                if ("pending" === thenable.status) {
                  var fulfilledThenable = thenable;
                  fulfilledThenable.status = "fulfilled";
                  fulfilledThenable.value = fulfilledValue;
                }
              },
              function (error) {
                if ("pending" === thenable.status) {
                  var rejectedThenable = thenable;
                  rejectedThenable.status = "rejected";
                  rejectedThenable.reason = error;
                }
              }
            );
          }
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw (
                ((thenableState = thenable.reason),
                checkIfUseWrappedInAsyncCatch(thenableState),
                thenableState)
              );
          }
          suspendedThenable = thenable;
          needsToResetSuspendedThenableDEV = !0;
          throw SuspenseException;
      }
    }
    function getSuspendedThenable() {
      if (null === suspendedThenable)
        throw Error(
          "Expected a suspended thenable. This is a bug in React. Please file an issue."
        );
      var thenable = suspendedThenable;
      suspendedThenable = null;
      needsToResetSuspendedThenableDEV = !1;
      return thenable;
    }
    function checkIfUseWrappedInAsyncCatch(rejectedReason) {
      if (
        rejectedReason === SuspenseException ||
        rejectedReason === SuspenseActionException
      )
        throw Error(
          "Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
        );
    }
    function initializeUpdateQueue(fiber) {
      fiber.updateQueue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: { pending: null, lanes: 0, hiddenCallbacks: null },
        callbacks: null
      };
    }
    function cloneUpdateQueue(current, workInProgress) {
      current = current.updateQueue;
      workInProgress.updateQueue === current &&
        (workInProgress.updateQueue = {
          baseState: current.baseState,
          firstBaseUpdate: current.firstBaseUpdate,
          lastBaseUpdate: current.lastBaseUpdate,
          shared: current.shared,
          callbacks: null
        });
    }
    function createUpdate(lane) {
      return {
        lane: lane,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null
      };
    }
    function enqueueUpdate(fiber, update, lane) {
      var updateQueue = fiber.updateQueue;
      if (null === updateQueue) return null;
      updateQueue = updateQueue.shared;
      if (
        currentlyProcessingQueue === updateQueue &&
        !didWarnUpdateInsideUpdate
      ) {
        var componentName = getComponentNameFromFiber(fiber);
        console.error(
          "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",
          componentName
        );
        didWarnUpdateInsideUpdate = !0;
      }
      if ((executionContext & RenderContext) !== NoContext)
        return (
          (componentName = updateQueue.pending),
          null === componentName
            ? (update.next = update)
            : ((update.next = componentName.next),
              (componentName.next = update)),
          (updateQueue.pending = update),
          (update = getRootForUpdatedFiber(fiber)),
          markUpdateLaneFromFiberToRoot(fiber, null, lane),
          update
        );
      enqueueUpdate$1(fiber, updateQueue, update, lane);
      return getRootForUpdatedFiber(fiber);
    }
    function entangleTransitions(root, fiber, lane) {
      fiber = fiber.updateQueue;
      if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194048))) {
        var queueLanes = fiber.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        fiber.lanes = lane;
        markRootEntangled(root, lane);
      }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
      var queue = workInProgress.updateQueue,
        current = workInProgress.alternate;
      if (
        null !== current &&
        ((current = current.updateQueue), queue === current)
      ) {
        var newFirst = null,
          newLast = null;
        queue = queue.firstBaseUpdate;
        if (null !== queue) {
          do {
            var clone = {
              lane: queue.lane,
              tag: queue.tag,
              payload: queue.payload,
              callback: null,
              next: null
            };
            null === newLast
              ? (newFirst = newLast = clone)
              : (newLast = newLast.next = clone);
            queue = queue.next;
          } while (null !== queue);
          null === newLast
            ? (newFirst = newLast = capturedUpdate)
            : (newLast = newLast.next = capturedUpdate);
        } else newFirst = newLast = capturedUpdate;
        queue = {
          baseState: current.baseState,
          firstBaseUpdate: newFirst,
          lastBaseUpdate: newLast,
          shared: current.shared,
          callbacks: current.callbacks
        };
        workInProgress.updateQueue = queue;
        return;
      }
      workInProgress = queue.lastBaseUpdate;
      null === workInProgress
        ? (queue.firstBaseUpdate = capturedUpdate)
        : (workInProgress.next = capturedUpdate);
      queue.lastBaseUpdate = capturedUpdate;
    }
    function suspendIfUpdateReadFromEntangledAsyncAction() {
      if (didReadFromEntangledAsyncAction) {
        var entangledActionThenable = currentEntangledActionThenable;
        if (null !== entangledActionThenable) throw entangledActionThenable;
      }
    }
    function processUpdateQueue(
      workInProgress,
      props,
      instance$jscomp$0,
      renderLanes
    ) {
      didReadFromEntangledAsyncAction = !1;
      var queue = workInProgress.updateQueue;
      hasForceUpdate = !1;
      currentlyProcessingQueue = queue.shared;
      var firstBaseUpdate = queue.firstBaseUpdate,
        lastBaseUpdate = queue.lastBaseUpdate,
        pendingQueue = queue.shared.pending;
      if (null !== pendingQueue) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue,
          firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        null === lastBaseUpdate
          ? (firstBaseUpdate = firstPendingUpdate)
          : (lastBaseUpdate.next = firstPendingUpdate);
        lastBaseUpdate = lastPendingUpdate;
        var current = workInProgress.alternate;
        null !== current &&
          ((current = current.updateQueue),
          (pendingQueue = current.lastBaseUpdate),
          pendingQueue !== lastBaseUpdate &&
            (null === pendingQueue
              ? (current.firstBaseUpdate = firstPendingUpdate)
              : (pendingQueue.next = firstPendingUpdate),
            (current.lastBaseUpdate = lastPendingUpdate)));
      }
      if (null !== firstBaseUpdate) {
        var newState = queue.baseState;
        lastBaseUpdate = 0;
        current = firstPendingUpdate = lastPendingUpdate = null;
        pendingQueue = firstBaseUpdate;
        do {
          var updateLane = pendingQueue.lane & -536870913,
            isHiddenUpdate = updateLane !== pendingQueue.lane;
          if (
            isHiddenUpdate
              ? (workInProgressRootRenderLanes & updateLane) === updateLane
              : (renderLanes & updateLane) === updateLane
          ) {
            0 !== updateLane &&
              updateLane === currentEntangledLane &&
              (didReadFromEntangledAsyncAction = !0);
            null !== current &&
              (current = current.next =
                {
                  lane: 0,
                  tag: pendingQueue.tag,
                  payload: pendingQueue.payload,
                  callback: null,
                  next: null
                });
            a: {
              updateLane = workInProgress;
              var partialState = pendingQueue;
              var nextProps = props,
                instance = instance$jscomp$0;
              switch (partialState.tag) {
                case ReplaceState:
                  partialState = partialState.payload;
                  if ("function" === typeof partialState) {
                    isDisallowedContextReadInDEV = !0;
                    var nextState = partialState.call(
                      instance,
                      newState,
                      nextProps
                    );
                    if (updateLane.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(!0);
                      try {
                        partialState.call(instance, newState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(!1);
                      }
                    }
                    isDisallowedContextReadInDEV = !1;
                    newState = nextState;
                    break a;
                  }
                  newState = partialState;
                  break a;
                case CaptureUpdate:
                  updateLane.flags = (updateLane.flags & -65537) | 128;
                case UpdateState:
                  nextState = partialState.payload;
                  if ("function" === typeof nextState) {
                    isDisallowedContextReadInDEV = !0;
                    partialState = nextState.call(
                      instance,
                      newState,
                      nextProps
                    );
                    if (updateLane.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(!0);
                      try {
                        nextState.call(instance, newState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(!1);
                      }
                    }
                    isDisallowedContextReadInDEV = !1;
                  } else partialState = nextState;
                  if (null === partialState || void 0 === partialState) break a;
                  newState = assign({}, newState, partialState);
                  break a;
                case ForceUpdate:
                  hasForceUpdate = !0;
              }
            }
            updateLane = pendingQueue.callback;
            null !== updateLane &&
              ((workInProgress.flags |= 64),
              isHiddenUpdate && (workInProgress.flags |= 8192),
              (isHiddenUpdate = queue.callbacks),
              null === isHiddenUpdate
                ? (queue.callbacks = [updateLane])
                : isHiddenUpdate.push(updateLane));
          } else
            (isHiddenUpdate = {
              lane: updateLane,
              tag: pendingQueue.tag,
              payload: pendingQueue.payload,
              callback: pendingQueue.callback,
              next: null
            }),
              null === current
                ? ((firstPendingUpdate = current = isHiddenUpdate),
                  (lastPendingUpdate = newState))
                : (current = current.next = isHiddenUpdate),
              (lastBaseUpdate |= updateLane);
          pendingQueue = pendingQueue.next;
          if (null === pendingQueue)
            if (((pendingQueue = queue.shared.pending), null === pendingQueue))
              break;
            else
              (isHiddenUpdate = pendingQueue),
                (pendingQueue = isHiddenUpdate.next),
                (isHiddenUpdate.next = null),
                (queue.lastBaseUpdate = isHiddenUpdate),
                (queue.shared.pending = null);
        } while (1);
        null === current && (lastPendingUpdate = newState);
        queue.baseState = lastPendingUpdate;
        queue.firstBaseUpdate = firstPendingUpdate;
        queue.lastBaseUpdate = current;
        null === firstBaseUpdate && (queue.shared.lanes = 0);
        workInProgressRootSkippedLanes |= lastBaseUpdate;
        workInProgress.lanes = lastBaseUpdate;
        workInProgress.memoizedState = newState;
      }
      currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
      if ("function" !== typeof callback)
        throw Error(
          "Invalid argument passed as callback. Expected a function. Instead received: " +
            callback
        );
      callback.call(context);
    }
    function commitHiddenCallbacks(updateQueue, context) {
      var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
      if (null !== hiddenCallbacks)
        for (
          updateQueue.shared.hiddenCallbacks = null, updateQueue = 0;
          updateQueue < hiddenCallbacks.length;
          updateQueue++
        )
          callCallback(hiddenCallbacks[updateQueue], context);
    }
    function commitCallbacks(updateQueue, context) {
      var callbacks = updateQueue.callbacks;
      if (null !== callbacks)
        for (
          updateQueue.callbacks = null, updateQueue = 0;
          updateQueue < callbacks.length;
          updateQueue++
        )
          callCallback(callbacks[updateQueue], context);
    }
    function pushHiddenContext(fiber, context) {
      var prevEntangledRenderLanes = entangledRenderLanes;
      push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
      push(currentTreeHiddenStackCursor, context, fiber);
      entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
    }
    function reuseHiddenContextOnStack(fiber) {
      push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
      push(
        currentTreeHiddenStackCursor,
        currentTreeHiddenStackCursor.current,
        fiber
      );
    }
    function popHiddenContext(fiber) {
      entangledRenderLanes = prevEntangledRenderLanesCursor.current;
      pop(currentTreeHiddenStackCursor, fiber);
      pop(prevEntangledRenderLanesCursor, fiber);
    }
    function mountHookTypesDev() {
      var hookName = currentHookNameInDev;
      null === hookTypesDev
        ? (hookTypesDev = [hookName])
        : hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
      var hookName = currentHookNameInDev;
      if (
        null !== hookTypesDev &&
        (hookTypesUpdateIndexDev++,
        hookTypesDev[hookTypesUpdateIndexDev] !== hookName)
      ) {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber);
        if (
          !didWarnAboutMismatchedHooksForComponent.has(componentName) &&
          (didWarnAboutMismatchedHooksForComponent.add(componentName),
          null !== hookTypesDev)
        ) {
          for (var table = "", i = 0; i <= hookTypesUpdateIndexDev; i++) {
            var oldHookName = hookTypesDev[i],
              newHookName =
                i === hookTypesUpdateIndexDev ? hookName : oldHookName;
            for (
              oldHookName = i + 1 + ". " + oldHookName;
              30 > oldHookName.length;

            )
              oldHookName += " ";
            oldHookName += newHookName + "\n";
            table += oldHookName;
          }
          console.error(
            "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            componentName,
            table
          );
        }
      }
    }
    function checkDepsAreArrayDev(deps) {
      void 0 === deps ||
        null === deps ||
        isArrayImpl(deps) ||
        console.error(
          "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
          currentHookNameInDev,
          typeof deps
        );
    }
    function warnOnUseFormStateInDev() {
      var componentName = getComponentNameFromFiber(currentlyRenderingFiber);
      didWarnAboutUseFormState.has(componentName) ||
        (didWarnAboutUseFormState.add(componentName),
        console.error(
          "ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",
          componentName
        ));
    }
    function throwInvalidHookError() {
      throw Error(
        "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
      );
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      if (ignorePreviousDependencies) return !1;
      if (null === prevDeps)
        return (
          console.error(
            "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
            currentHookNameInDev
          ),
          !1
        );
      nextDeps.length !== prevDeps.length &&
        console.error(
          "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
          currentHookNameInDev,
          "[" + prevDeps.join(", ") + "]",
          "[" + nextDeps.join(", ") + "]"
        );
      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
        if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
      return !0;
    }
    function renderWithHooks(
      current,
      workInProgress,
      Component,
      props,
      secondArg,
      nextRenderLanes
    ) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber = workInProgress;
      hookTypesDev = null !== current ? current._debugHookTypes : null;
      hookTypesUpdateIndexDev = -1;
      ignorePreviousDependencies =
        null !== current && current.type !== workInProgress.type;
      if (
        "[object AsyncFunction]" ===
          Object.prototype.toString.call(Component) ||
        "[object AsyncGeneratorFunction]" ===
          Object.prototype.toString.call(Component)
      )
        (nextRenderLanes = getComponentNameFromFiber(currentlyRenderingFiber)),
          didWarnAboutAsyncClientComponent.has(nextRenderLanes) ||
            (didWarnAboutAsyncClientComponent.add(nextRenderLanes),
            console.error(
              "%s is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.",
              null === nextRenderLanes
                ? "An unknown Component"
                : "<" + nextRenderLanes + ">"
            ));
      workInProgress.memoizedState = null;
      workInProgress.updateQueue = null;
      workInProgress.lanes = 0;
      ReactSharedInternals.H =
        null !== current && null !== current.memoizedState
          ? HooksDispatcherOnUpdateInDEV
          : null !== hookTypesDev
            ? HooksDispatcherOnMountWithHookTypesInDEV
            : HooksDispatcherOnMountInDEV;
      shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes =
        (workInProgress.mode & StrictLegacyMode) !== NoMode;
      var children = callComponentInDEV(Component, props, secondArg);
      shouldDoubleInvokeUserFnsInHooksDEV = !1;
      didScheduleRenderPhaseUpdateDuringThisPass &&
        (children = renderWithHooksAgain(
          workInProgress,
          Component,
          props,
          secondArg
        ));
      if (nextRenderLanes) {
        setIsStrictModeForDevtools(!0);
        try {
          children = renderWithHooksAgain(
            workInProgress,
            Component,
            props,
            secondArg
          );
        } finally {
          setIsStrictModeForDevtools(!1);
        }
      }
      finishRenderingHooks(current, workInProgress);
      return children;
    }
    function finishRenderingHooks(current, workInProgress) {
      workInProgress._debugHookTypes = hookTypesDev;
      null === workInProgress.dependencies
        ? null !== thenableState$1 &&
          (workInProgress.dependencies = {
            lanes: 0,
            firstContext: null,
            _debugThenableState: thenableState$1
          })
        : (workInProgress.dependencies._debugThenableState = thenableState$1);
      ReactSharedInternals.H = ContextOnlyDispatcher;
      var didRenderTooFewHooks =
        null !== currentHook && null !== currentHook.next;
      renderLanes = 0;
      hookTypesDev =
        currentHookNameInDev =
        workInProgressHook =
        currentHook =
        currentlyRenderingFiber =
          null;
      hookTypesUpdateIndexDev = -1;
      null !== current &&
        (current.flags & 65011712) !== (workInProgress.flags & 65011712) &&
        console.error(
          "Internal React error: Expected static flag was missing. Please notify the React team."
        );
      didScheduleRenderPhaseUpdate = !1;
      thenableIndexCounter$1 = 0;
      thenableState$1 = null;
      if (didRenderTooFewHooks)
        throw Error(
          "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
        );
      null === current ||
        didReceiveUpdate ||
        ((current = current.dependencies),
        null !== current &&
          checkIfContextChanged(current) &&
          (didReceiveUpdate = !0));
      needsToResetSuspendedThenableDEV
        ? ((needsToResetSuspendedThenableDEV = !1), (current = !0))
        : (current = !1);
      current &&
        ((workInProgress =
          getComponentNameFromFiber(workInProgress) || "Unknown"),
        didWarnAboutUseWrappedInTryCatch.has(workInProgress) ||
          didWarnAboutAsyncClientComponent.has(workInProgress) ||
          (didWarnAboutUseWrappedInTryCatch.add(workInProgress),
          console.error(
            "`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
          )));
    }
    function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
      currentlyRenderingFiber = workInProgress;
      var numberOfReRenders = 0;
      do {
        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null);
        thenableIndexCounter$1 = 0;
        didScheduleRenderPhaseUpdateDuringThisPass = !1;
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw Error(
            "Too many re-renders. React limits the number of renders to prevent an infinite loop."
          );
        numberOfReRenders += 1;
        ignorePreviousDependencies = !1;
        workInProgressHook = currentHook = null;
        if (null != workInProgress.updateQueue) {
          var children = workInProgress.updateQueue;
          children.lastEffect = null;
          children.events = null;
          children.stores = null;
          null != children.memoCache && (children.memoCache.index = 0);
        }
        hookTypesUpdateIndexDev = -1;
        ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
        children = callComponentInDEV(Component, props, secondArg);
      } while (didScheduleRenderPhaseUpdateDuringThisPass);
      return children;
    }
    function TransitionAwareHostComponent() {
      var dispatcher = ReactSharedInternals.H,
        maybeThenable = dispatcher.useState()[0];
      maybeThenable =
        "function" === typeof maybeThenable.then
          ? useThenable(maybeThenable)
          : maybeThenable;
      dispatcher = dispatcher.useState()[0];
      (null !== currentHook ? currentHook.memoizedState : null) !==
        dispatcher && (currentlyRenderingFiber.flags |= 1024);
      return maybeThenable;
    }
    function checkDidRenderIdHook() {
      var didRenderIdHook = 0 !== localIdCounter;
      localIdCounter = 0;
      return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress, lanes) {
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.flags =
        (workInProgress.mode & StrictEffectsMode) !== NoMode
          ? workInProgress.flags & -402655237
          : workInProgress.flags & -2053;
      current.lanes &= ~lanes;
    }
    function resetHooksOnUnwind(workInProgress) {
      if (didScheduleRenderPhaseUpdate) {
        for (
          workInProgress = workInProgress.memoizedState;
          null !== workInProgress;

        ) {
          var queue = workInProgress.queue;
          null !== queue && (queue.pending = null);
          workInProgress = workInProgress.next;
        }
        didScheduleRenderPhaseUpdate = !1;
      }
      renderLanes = 0;
      hookTypesDev =
        workInProgressHook =
        currentHook =
        currentlyRenderingFiber =
          null;
      hookTypesUpdateIndexDev = -1;
      currentHookNameInDev = null;
      didScheduleRenderPhaseUpdateDuringThisPass = !1;
      thenableIndexCounter$1 = localIdCounter = 0;
      thenableState$1 = null;
    }
    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      null === workInProgressHook
        ? (currentlyRenderingFiber.memoizedState = workInProgressHook = hook)
        : (workInProgressHook = workInProgressHook.next = hook);
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      if (null === currentHook) {
        var nextCurrentHook = currentlyRenderingFiber.alternate;
        nextCurrentHook =
          null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
      } else nextCurrentHook = currentHook.next;
      var nextWorkInProgressHook =
        null === workInProgressHook
          ? currentlyRenderingFiber.memoizedState
          : workInProgressHook.next;
      if (null !== nextWorkInProgressHook)
        (workInProgressHook = nextWorkInProgressHook),
          (currentHook = nextCurrentHook);
      else {
        if (null === nextCurrentHook) {
          if (null === currentlyRenderingFiber.alternate)
            throw Error(
              "Update hook called on initial render. This is likely a bug in React. Please file an issue."
            );
          throw Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        nextCurrentHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null
        };
        null === workInProgressHook
          ? (currentlyRenderingFiber.memoizedState = workInProgressHook =
              nextCurrentHook)
          : (workInProgressHook = workInProgressHook.next = nextCurrentHook);
      }
      return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
      return { lastEffect: null, events: null, stores: null, memoCache: null };
    }
    function useThenable(thenable) {
      var index = thenableIndexCounter$1;
      thenableIndexCounter$1 += 1;
      null === thenableState$1 && (thenableState$1 = createThenableState());
      thenable = trackUsedThenable(thenableState$1, thenable, index);
      index = currentlyRenderingFiber;
      null ===
        (null === workInProgressHook
          ? index.memoizedState
          : workInProgressHook.next) &&
        ((index = index.alternate),
        (ReactSharedInternals.H =
          null !== index && null !== index.memoizedState
            ? HooksDispatcherOnUpdateInDEV
            : HooksDispatcherOnMountInDEV));
      return thenable;
    }
    function use(usable) {
      if (null !== usable && "object" === typeof usable) {
        if ("function" === typeof usable.then) return useThenable(usable);
        if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
      }
      throw Error("An unsupported type was passed to use(): " + String(usable));
    }
    function useMemoCache(size) {
      var memoCache = null,
        updateQueue = currentlyRenderingFiber.updateQueue;
      null !== updateQueue && (memoCache = updateQueue.memoCache);
      if (null == memoCache) {
        var current = currentlyRenderingFiber.alternate;
        null !== current &&
          ((current = current.updateQueue),
          null !== current &&
            ((current = current.memoCache),
            null != current &&
              (memoCache = {
                data: current.data.map(function (array) {
                  return array.slice();
                }),
                index: 0
              })));
      }
      null == memoCache && (memoCache = { data: [], index: 0 });
      null === updateQueue &&
        ((updateQueue = createFunctionComponentUpdateQueue()),
        (currentlyRenderingFiber.updateQueue = updateQueue));
      updateQueue.memoCache = memoCache;
      updateQueue = memoCache.data[memoCache.index];
      if (void 0 === updateQueue || ignorePreviousDependencies)
        for (
          updateQueue = memoCache.data[memoCache.index] = Array(size),
            current = 0;
          current < size;
          current++
        )
          updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
      else
        updateQueue.length !== size &&
          console.error(
            "Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",
            updateQueue.length,
            size
          );
      memoCache.index++;
      return updateQueue;
    }
    function basicStateReducer(state, action) {
      return "function" === typeof action ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      if (void 0 !== init) {
        var initialState = init(initialArg);
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(!0);
          try {
            init(initialArg);
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
      } else initialState = initialArg;
      hook.memoizedState = hook.baseState = initialState;
      reducer = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      hook.queue = reducer;
      reducer = reducer.dispatch = dispatchReducerAction.bind(
        null,
        currentlyRenderingFiber,
        reducer
      );
      return [hook.memoizedState, reducer];
    }
    function updateReducer(reducer) {
      var hook = updateWorkInProgressHook();
      return updateReducerImpl(hook, currentHook, reducer);
    }
    function updateReducerImpl(hook, current, reducer) {
      var queue = hook.queue;
      if (null === queue)
        throw Error(
          "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
        );
      queue.lastRenderedReducer = reducer;
      var baseQueue = hook.baseQueue,
        pendingQueue = queue.pending;
      if (null !== pendingQueue) {
        if (null !== baseQueue) {
          var baseFirst = baseQueue.next;
          baseQueue.next = pendingQueue.next;
          pendingQueue.next = baseFirst;
        }
        current.baseQueue !== baseQueue &&
          console.error(
            "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
          );
        current.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
      }
      pendingQueue = hook.baseState;
      if (null === baseQueue) hook.memoizedState = pendingQueue;
      else {
        current = baseQueue.next;
        var newBaseQueueFirst = (baseFirst = null),
          newBaseQueueLast = null,
          update = current,
          didReadFromEntangledAsyncAction = !1;
        do {
          var updateLane = update.lane & -536870913;
          if (
            updateLane !== update.lane
              ? (workInProgressRootRenderLanes & updateLane) === updateLane
              : (renderLanes & updateLane) === updateLane
          ) {
            var revertLane = update.revertLane;
            if (0 === revertLane)
              null !== newBaseQueueLast &&
                (newBaseQueueLast = newBaseQueueLast.next =
                  {
                    lane: 0,
                    revertLane: 0,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  }),
                updateLane === currentEntangledLane &&
                  (didReadFromEntangledAsyncAction = !0);
            else if ((renderLanes & revertLane) === revertLane) {
              update = update.next;
              revertLane === currentEntangledLane &&
                (didReadFromEntangledAsyncAction = !0);
              continue;
            } else
              (updateLane = {
                lane: 0,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              }),
                null === newBaseQueueLast
                  ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),
                    (baseFirst = pendingQueue))
                  : (newBaseQueueLast = newBaseQueueLast.next = updateLane),
                (currentlyRenderingFiber.lanes |= revertLane),
                (workInProgressRootSkippedLanes |= revertLane);
            updateLane = update.action;
            shouldDoubleInvokeUserFnsInHooksDEV &&
              reducer(pendingQueue, updateLane);
            pendingQueue = update.hasEagerState
              ? update.eagerState
              : reducer(pendingQueue, updateLane);
          } else
            (revertLane = {
              lane: updateLane,
              revertLane: update.revertLane,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null
            }),
              null === newBaseQueueLast
                ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),
                  (baseFirst = pendingQueue))
                : (newBaseQueueLast = newBaseQueueLast.next = revertLane),
              (currentlyRenderingFiber.lanes |= updateLane),
              (workInProgressRootSkippedLanes |= updateLane);
          update = update.next;
        } while (null !== update && update !== current);
        null === newBaseQueueLast
          ? (baseFirst = pendingQueue)
          : (newBaseQueueLast.next = newBaseQueueFirst);
        if (
          !objectIs(pendingQueue, hook.memoizedState) &&
          ((didReceiveUpdate = !0),
          didReadFromEntangledAsyncAction &&
            ((reducer = currentEntangledActionThenable), null !== reducer))
        )
          throw reducer;
        hook.memoizedState = pendingQueue;
        hook.baseState = baseFirst;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = pendingQueue;
      }
      null === baseQueue && (queue.lanes = 0);
      return [hook.memoizedState, queue.dispatch];
    }
    function rerenderReducer(reducer) {
      var hook = updateWorkInProgressHook(),
        queue = hook.queue;
      if (null === queue)
        throw Error(
          "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
        );
      queue.lastRenderedReducer = reducer;
      var dispatch = queue.dispatch,
        lastRenderPhaseUpdate = queue.pending,
        newState = hook.memoizedState;
      if (null !== lastRenderPhaseUpdate) {
        queue.pending = null;
        var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);
        do
          (newState = reducer(newState, update.action)), (update = update.next);
        while (update !== lastRenderPhaseUpdate);
        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
        hook.memoizedState = newState;
        null === hook.baseQueue && (hook.baseState = newState);
        queue.lastRenderedState = newState;
      }
      return [newState, dispatch];
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber,
        hook = mountWorkInProgressHook();
      if (isHydrating) {
        if (void 0 === getServerSnapshot)
          throw Error(
            "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
          );
        var nextSnapshot = getServerSnapshot();
        didWarnUncachedGetSnapshot ||
          nextSnapshot === getServerSnapshot() ||
          (console.error(
            "The result of getServerSnapshot should be cached to avoid an infinite loop"
          ),
          (didWarnUncachedGetSnapshot = !0));
      } else {
        nextSnapshot = getSnapshot();
        didWarnUncachedGetSnapshot ||
          ((getServerSnapshot = getSnapshot()),
          objectIs(nextSnapshot, getServerSnapshot) ||
            (console.error(
              "The result of getSnapshot should be cached to avoid an infinite loop"
            ),
            (didWarnUncachedGetSnapshot = !0)));
        if (null === workInProgressRoot)
          throw Error(
            "Expected a work-in-progress root. This is a bug in React. Please file an issue."
          );
        0 !== (workInProgressRootRenderLanes & 124) ||
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
      }
      hook.memoizedState = nextSnapshot;
      getServerSnapshot = { value: nextSnapshot, getSnapshot: getSnapshot };
      hook.queue = getServerSnapshot;
      mountEffect(
        subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe),
        [subscribe]
      );
      fiber.flags |= 2048;
      pushSimpleEffect(
        HasEffect | Passive,
        createEffectInstance(),
        updateStoreInstance.bind(
          null,
          fiber,
          getServerSnapshot,
          nextSnapshot,
          getSnapshot
        ),
        null
      );
      return nextSnapshot;
    }
    function updateSyncExternalStore(
      subscribe,
      getSnapshot,
      getServerSnapshot
    ) {
      var fiber = currentlyRenderingFiber,
        hook = updateWorkInProgressHook(),
        isHydrating$jscomp$0 = isHydrating;
      if (isHydrating$jscomp$0) {
        if (void 0 === getServerSnapshot)
          throw Error(
            "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
          );
        getServerSnapshot = getServerSnapshot();
      } else if (
        ((getServerSnapshot = getSnapshot()), !didWarnUncachedGetSnapshot)
      ) {
        var cachedSnapshot = getSnapshot();
        objectIs(getServerSnapshot, cachedSnapshot) ||
          (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ),
          (didWarnUncachedGetSnapshot = !0));
      }
      if (
        (cachedSnapshot = !objectIs(
          (currentHook || hook).memoizedState,
          getServerSnapshot
        ))
      )
        (hook.memoizedState = getServerSnapshot), (didReceiveUpdate = !0);
      hook = hook.queue;
      var create = subscribeToStore.bind(null, fiber, hook, subscribe);
      updateEffectImpl(2048, Passive, create, [subscribe]);
      if (
        hook.getSnapshot !== getSnapshot ||
        cachedSnapshot ||
        (null !== workInProgressHook &&
          workInProgressHook.memoizedState.tag & HasEffect)
      ) {
        fiber.flags |= 2048;
        pushSimpleEffect(
          HasEffect | Passive,
          createEffectInstance(),
          updateStoreInstance.bind(
            null,
            fiber,
            hook,
            getServerSnapshot,
            getSnapshot
          ),
          null
        );
        if (null === workInProgressRoot)
          throw Error(
            "Expected a work-in-progress root. This is a bug in React. Please file an issue."
          );
        isHydrating$jscomp$0 ||
          0 !== (renderLanes & 124) ||
          pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
      }
      return getServerSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= 16384;
      fiber = { getSnapshot: getSnapshot, value: renderedSnapshot };
      getSnapshot = currentlyRenderingFiber.updateQueue;
      null === getSnapshot
        ? ((getSnapshot = createFunctionComponentUpdateQueue()),
          (currentlyRenderingFiber.updateQueue = getSnapshot),
          (getSnapshot.stores = [fiber]))
        : ((renderedSnapshot = getSnapshot.stores),
          null === renderedSnapshot
            ? (getSnapshot.stores = [fiber])
            : renderedSnapshot.push(fiber));
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      inst.value = nextSnapshot;
      inst.getSnapshot = getSnapshot;
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
      return subscribe(function () {
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
      });
    }
    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      inst = inst.value;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
      } catch (error) {
        return !0;
      }
    }
    function forceStoreRerender(fiber) {
      var root = enqueueConcurrentRenderForLane(fiber, 2);
      null !== root && scheduleUpdateOnFiber(root, fiber, 2);
    }
    function mountStateImpl(initialState) {
      var hook = mountWorkInProgressHook();
      if ("function" === typeof initialState) {
        var initialStateInitializer = initialState;
        initialState = initialStateInitializer();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(!0);
          try {
            initialStateInitializer();
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
      }
      hook.memoizedState = hook.baseState = initialState;
      hook.queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      return hook;
    }
    function mountState(initialState) {
      initialState = mountStateImpl(initialState);
      var queue = initialState.queue,
        dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
      queue.dispatch = dispatch;
      return [initialState.memoizedState, dispatch];
    }
    function mountOptimistic(passthrough) {
      var hook = mountWorkInProgressHook();
      hook.memoizedState = hook.baseState = passthrough;
      var queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
      };
      hook.queue = queue;
      hook = dispatchOptimisticSetState.bind(
        null,
        currentlyRenderingFiber,
        !0,
        queue
      );
      queue.dispatch = hook;
      return [passthrough, hook];
    }
    function updateOptimistic(passthrough, reducer) {
      var hook = updateWorkInProgressHook();
      return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    }
    function updateOptimisticImpl(hook, current, passthrough, reducer) {
      hook.baseState = passthrough;
      return updateReducerImpl(
        hook,
        currentHook,
        "function" === typeof reducer ? reducer : basicStateReducer
      );
    }
    function rerenderOptimistic(passthrough, reducer) {
      var hook = updateWorkInProgressHook();
      if (null !== currentHook)
        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
      hook.baseState = passthrough;
      return [passthrough, hook.queue.dispatch];
    }
    function dispatchActionState(
      fiber,
      actionQueue,
      setPendingState,
      setState,
      payload
    ) {
      if (isRenderPhaseUpdate(fiber))
        throw Error("Cannot update form state while rendering.");
      fiber = actionQueue.action;
      if (null !== fiber) {
        var actionNode = {
          payload: payload,
          action: fiber,
          next: null,
          isTransition: !0,
          status: "pending",
          value: null,
          reason: null,
          listeners: [],
          then: function (listener) {
            actionNode.listeners.push(listener);
          }
        };
        null !== ReactSharedInternals.T
          ? setPendingState(!0)
          : (actionNode.isTransition = !1);
        setState(actionNode);
        setPendingState = actionQueue.pending;
        null === setPendingState
          ? ((actionNode.next = actionQueue.pending = actionNode),
            runActionStateAction(actionQueue, actionNode))
          : ((actionNode.next = setPendingState.next),
            (actionQueue.pending = setPendingState.next = actionNode));
      }
    }
    function runActionStateAction(actionQueue, node) {
      var action = node.action,
        payload = node.payload,
        prevState = actionQueue.state;
      if (node.isTransition) {
        var prevTransition = ReactSharedInternals.T,
          currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        ReactSharedInternals.T._updatedFibers = new Set();
        try {
          var returnValue = action(prevState, payload),
            onStartTransitionFinish = ReactSharedInternals.S;
          null !== onStartTransitionFinish &&
            onStartTransitionFinish(currentTransition, returnValue);
          handleActionReturnValue(actionQueue, node, returnValue);
        } catch (error) {
          onActionError(actionQueue, node, error);
        } finally {
          (ReactSharedInternals.T = prevTransition),
            null === prevTransition &&
              currentTransition._updatedFibers &&
              ((actionQueue = currentTransition._updatedFibers.size),
              currentTransition._updatedFibers.clear(),
              10 < actionQueue &&
                console.warn(
                  "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
                ));
        }
      } else
        try {
          (currentTransition = action(prevState, payload)),
            handleActionReturnValue(actionQueue, node, currentTransition);
        } catch (error$4) {
          onActionError(actionQueue, node, error$4);
        }
    }
    function handleActionReturnValue(actionQueue, node, returnValue) {
      null !== returnValue &&
      "object" === typeof returnValue &&
      "function" === typeof returnValue.then
        ? (returnValue.then(
            function (nextState) {
              onActionSuccess(actionQueue, node, nextState);
            },
            function (error) {
              return onActionError(actionQueue, node, error);
            }
          ),
          node.isTransition ||
            console.error(
              "An async function with useActionState was called outside of a transition. This is likely not what you intended (for example, isPending will not update correctly). Either call the returned function inside startTransition, or pass it to an `action` or `formAction` prop."
            ))
        : onActionSuccess(actionQueue, node, returnValue);
    }
    function onActionSuccess(actionQueue, actionNode, nextState) {
      actionNode.status = "fulfilled";
      actionNode.value = nextState;
      notifyActionListeners(actionNode);
      actionQueue.state = nextState;
      actionNode = actionQueue.pending;
      null !== actionNode &&
        ((nextState = actionNode.next),
        nextState === actionNode
          ? (actionQueue.pending = null)
          : ((nextState = nextState.next),
            (actionNode.next = nextState),
            runActionStateAction(actionQueue, nextState)));
    }
    function onActionError(actionQueue, actionNode, error) {
      var last = actionQueue.pending;
      actionQueue.pending = null;
      if (null !== last) {
        last = last.next;
        do
          (actionNode.status = "rejected"),
            (actionNode.reason = error),
            notifyActionListeners(actionNode),
            (actionNode = actionNode.next);
        while (actionNode !== last);
      }
      actionQueue.action = null;
    }
    function notifyActionListeners(actionNode) {
      actionNode = actionNode.listeners;
      for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
    }
    function actionStateReducer(oldState, newState) {
      return newState;
    }
    function mountActionState(action, initialStateProp) {
      if (isHydrating) {
        var ssrFormState = workInProgressRoot.formState;
        if (null !== ssrFormState) {
          a: {
            var isMatching = currentlyRenderingFiber;
            if (isHydrating) {
              if (nextHydratableInstance) {
                b: {
                  var markerInstance = nextHydratableInstance;
                  for (
                    var inRootOrSingleton = rootOrSingletonContext;
                    8 !== markerInstance.nodeType;

                  ) {
                    if (!inRootOrSingleton) {
                      markerInstance = null;
                      break b;
                    }
                    markerInstance = getNextHydratable(
                      markerInstance.nextSibling
                    );
                    if (null === markerInstance) {
                      markerInstance = null;
                      break b;
                    }
                  }
                  inRootOrSingleton = markerInstance.data;
                  markerInstance =
                    inRootOrSingleton === FORM_STATE_IS_MATCHING ||
                    inRootOrSingleton === FORM_STATE_IS_NOT_MATCHING
                      ? markerInstance
                      : null;
                }
                if (markerInstance) {
                  nextHydratableInstance = getNextHydratable(
                    markerInstance.nextSibling
                  );
                  isMatching = markerInstance.data === FORM_STATE_IS_MATCHING;
                  break a;
                }
              }
              throwOnHydrationMismatch(isMatching);
            }
            isMatching = !1;
          }
          isMatching && (initialStateProp = ssrFormState[0]);
        }
      }
      ssrFormState = mountWorkInProgressHook();
      ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
      isMatching = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: actionStateReducer,
        lastRenderedState: initialStateProp
      };
      ssrFormState.queue = isMatching;
      ssrFormState = dispatchSetState.bind(
        null,
        currentlyRenderingFiber,
        isMatching
      );
      isMatching.dispatch = ssrFormState;
      isMatching = mountStateImpl(!1);
      inRootOrSingleton = dispatchOptimisticSetState.bind(
        null,
        currentlyRenderingFiber,
        !1,
        isMatching.queue
      );
      isMatching = mountWorkInProgressHook();
      markerInstance = {
        state: initialStateProp,
        dispatch: null,
        action: action,
        pending: null
      };
      isMatching.queue = markerInstance;
      ssrFormState = dispatchActionState.bind(
        null,
        currentlyRenderingFiber,
        markerInstance,
        inRootOrSingleton,
        ssrFormState
      );
      markerInstance.dispatch = ssrFormState;
      isMatching.memoizedState = action;
      return [initialStateProp, ssrFormState, !1];
    }
    function updateActionState(action) {
      var stateHook = updateWorkInProgressHook();
      return updateActionStateImpl(stateHook, currentHook, action);
    }
    function updateActionStateImpl(stateHook, currentStateHook, action) {
      currentStateHook = updateReducerImpl(
        stateHook,
        currentStateHook,
        actionStateReducer
      )[0];
      stateHook = updateReducer(basicStateReducer)[0];
      if (
        "object" === typeof currentStateHook &&
        null !== currentStateHook &&
        "function" === typeof currentStateHook.then
      )
        try {
          var state = useThenable(currentStateHook);
        } catch (x) {
          if (x === SuspenseException) throw SuspenseActionException;
          throw x;
        }
      else state = currentStateHook;
      currentStateHook = updateWorkInProgressHook();
      var actionQueue = currentStateHook.queue,
        dispatch = actionQueue.dispatch;
      action !== currentStateHook.memoizedState &&
        ((currentlyRenderingFiber.flags |= 2048),
        pushSimpleEffect(
          HasEffect | Passive,
          createEffectInstance(),
          actionStateActionEffect.bind(null, actionQueue, action),
          null
        ));
      return [state, dispatch, stateHook];
    }
    function actionStateActionEffect(actionQueue, action) {
      actionQueue.action = action;
    }
    function rerenderActionState(action) {
      var stateHook = updateWorkInProgressHook(),
        currentStateHook = currentHook;
      if (null !== currentStateHook)
        return updateActionStateImpl(stateHook, currentStateHook, action);
      updateWorkInProgressHook();
      stateHook = stateHook.memoizedState;
      currentStateHook = updateWorkInProgressHook();
      var dispatch = currentStateHook.queue.dispatch;
      currentStateHook.memoizedState = action;
      return [stateHook, dispatch, !1];
    }
    function pushSimpleEffect(tag, inst, create, createDeps) {
      tag = {
        tag: tag,
        create: create,
        deps: createDeps,
        inst: inst,
        next: null
      };
      inst = currentlyRenderingFiber.updateQueue;
      null === inst &&
        ((inst = createFunctionComponentUpdateQueue()),
        (currentlyRenderingFiber.updateQueue = inst));
      create = inst.lastEffect;
      null === create
        ? (inst.lastEffect = tag.next = tag)
        : ((createDeps = create.next),
          (create.next = tag),
          (tag.next = createDeps),
          (inst.lastEffect = tag));
      return tag;
    }
    function createEffectInstance() {
      return { destroy: void 0, resource: void 0 };
    }
    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = { current: initialValue };
      return (hook.memoizedState = initialValue);
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, createDeps) {
      var hook = mountWorkInProgressHook();
      createDeps = void 0 === createDeps ? null : createDeps;
      currentlyRenderingFiber.flags |= fiberFlags;
      hook.memoizedState = pushSimpleEffect(
        HasEffect | hookFlags,
        createEffectInstance(),
        create,
        createDeps
      );
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var inst = hook.memoizedState.inst;
      null !== currentHook &&
      null !== deps &&
      areHookInputsEqual(deps, currentHook.memoizedState.deps)
        ? (hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps))
        : ((currentlyRenderingFiber.flags |= fiberFlags),
          (hook.memoizedState = pushSimpleEffect(
            HasEffect | hookFlags,
            inst,
            create,
            deps
          )));
    }
    function mountEffect(create, createDeps) {
      (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode &&
      (currentlyRenderingFiber.mode & NoStrictPassiveEffectsMode) === NoMode
        ? mountEffectImpl(276826112, Passive, create, createDeps)
        : mountEffectImpl(8390656, Passive, create, createDeps);
    }
    function mountLayoutEffect(create, deps) {
      var fiberFlags = 4194308;
      (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode &&
        (fiberFlags |= 134217728);
      return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
      if ("function" === typeof ref) {
        create = create();
        var refCleanup = ref(create);
        return function () {
          "function" === typeof refCleanup ? refCleanup() : ref(null);
        };
      }
      if (null !== ref && void 0 !== ref)
        return (
          ref.hasOwnProperty("current") ||
            console.error(
              "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
              "an object with keys {" + Object.keys(ref).join(", ") + "}"
            ),
          (create = create()),
          (ref.current = create),
          function () {
            ref.current = null;
          }
        );
    }
    function mountImperativeHandle(ref, create, deps) {
      "function" !== typeof create &&
        console.error(
          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
          null !== create ? typeof create : "null"
        );
      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
      var fiberFlags = 4194308;
      (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode &&
        (fiberFlags |= 134217728);
      mountEffectImpl(
        fiberFlags,
        Layout,
        imperativeHandleEffect.bind(null, create, ref),
        deps
      );
    }
    function updateImperativeHandle(ref, create, deps) {
      "function" !== typeof create &&
        console.error(
          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
          null !== create ? typeof create : "null"
        );
      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
      updateEffectImpl(
        4,
        Layout,
        imperativeHandleEffect.bind(null, create, ref),
        deps
      );
    }
    function mountCallback(callback, deps) {
      mountWorkInProgressHook().memoizedState = [
        callback,
        void 0 === deps ? null : deps
      ];
      return callback;
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== deps && areHookInputsEqual(deps, prevState[1]))
        return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    }
    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var nextValue = nextCreate();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(!0);
        try {
          nextCreate();
        } finally {
          setIsStrictModeForDevtools(!1);
        }
      }
      hook.memoizedState = [nextValue, deps];
      return nextValue;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== deps && areHookInputsEqual(deps, prevState[1]))
        return prevState[0];
      prevState = nextCreate();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(!0);
        try {
          nextCreate();
        } finally {
          setIsStrictModeForDevtools(!1);
        }
      }
      hook.memoizedState = [prevState, deps];
      return prevState;
    }
    function mountDeferredValue(value, initialValue) {
      var hook = mountWorkInProgressHook();
      return mountDeferredValueImpl(hook, value, initialValue);
    }
    function updateDeferredValue(value, initialValue) {
      var hook = updateWorkInProgressHook();
      return updateDeferredValueImpl(
        hook,
        currentHook.memoizedState,
        value,
        initialValue
      );
    }
    function rerenderDeferredValue(value, initialValue) {
      var hook = updateWorkInProgressHook();
      return null === currentHook
        ? mountDeferredValueImpl(hook, value, initialValue)
        : updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
    }
    function mountDeferredValueImpl(hook, value, initialValue) {
      if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
        return (hook.memoizedState = value);
      hook.memoizedState = initialValue;
      hook = requestDeferredLane();
      currentlyRenderingFiber.lanes |= hook;
      workInProgressRootSkippedLanes |= hook;
      return initialValue;
    }
    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
      if (objectIs(value, prevValue)) return value;
      if (null !== currentTreeHiddenStackCursor.current)
        return (
          (hook = mountDeferredValueImpl(hook, value, initialValue)),
          objectIs(hook, prevValue) || (didReceiveUpdate = !0),
          hook
        );
      if (0 === (renderLanes & 42))
        return (didReceiveUpdate = !0), (hook.memoizedState = value);
      hook = requestDeferredLane();
      currentlyRenderingFiber.lanes |= hook;
      workInProgressRootSkippedLanes |= hook;
      return prevValue;
    }
    function startTransition(
      fiber,
      queue,
      pendingState,
      finishedState,
      callback
    ) {
      var previousPriority = ReactDOMSharedInternals.p;
      ReactDOMSharedInternals.p =
        0 !== previousPriority && previousPriority < ContinuousEventPriority
          ? previousPriority
          : ContinuousEventPriority;
      var prevTransition = ReactSharedInternals.T,
        currentTransition = {};
      ReactSharedInternals.T = currentTransition;
      dispatchOptimisticSetState(fiber, !1, queue, pendingState);
      currentTransition._updatedFibers = new Set();
      try {
        var returnValue = callback(),
          onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish &&
          onStartTransitionFinish(currentTransition, returnValue);
        if (
          null !== returnValue &&
          "object" === typeof returnValue &&
          "function" === typeof returnValue.then
        ) {
          var thenableForFinishedState = chainThenableValue(
            returnValue,
            finishedState
          );
          dispatchSetStateInternal(
            fiber,
            queue,
            thenableForFinishedState,
            requestUpdateLane(fiber)
          );
        } else
          dispatchSetStateInternal(
            fiber,
            queue,
            finishedState,
            requestUpdateLane(fiber)
          );
      } catch (error) {
        dispatchSetStateInternal(
          fiber,
          queue,
          { then: function () {}, status: "rejected", reason: error },
          requestUpdateLane(fiber)
        );
      } finally {
        (ReactDOMSharedInternals.p = previousPriority),
          (ReactSharedInternals.T = prevTransition),
          null === prevTransition &&
            currentTransition._updatedFibers &&
            ((fiber = currentTransition._updatedFibers.size),
            currentTransition._updatedFibers.clear(),
            10 < fiber &&
              console.warn(
                "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
              ));
      }
    }
    function startHostTransition(formFiber, pendingState, action, formData) {
      if (5 !== formFiber.tag)
        throw Error(
          "Expected the form instance to be a HostComponent. This is a bug in React."
        );
      var queue = ensureFormComponentIsStateful(formFiber).queue;
      startTransition(
        formFiber,
        queue,
        pendingState,
        NotPendingTransition,
        null === action
          ? noop$2
          : function () {
              requestFormReset$1(formFiber);
              return action(formData);
            }
      );
    }
    function ensureFormComponentIsStateful(formFiber) {
      var existingStateHook = formFiber.memoizedState;
      if (null !== existingStateHook) return existingStateHook;
      existingStateHook = {
        memoizedState: NotPendingTransition,
        baseState: NotPendingTransition,
        baseQueue: null,
        queue: {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: NotPendingTransition
        },
        next: null
      };
      var initialResetState = {};
      existingStateHook.next = {
        memoizedState: initialResetState,
        baseState: initialResetState,
        baseQueue: null,
        queue: {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialResetState
        },
        next: null
      };
      formFiber.memoizedState = existingStateHook;
      formFiber = formFiber.alternate;
      null !== formFiber && (formFiber.memoizedState = existingStateHook);
      return existingStateHook;
    }
    function requestFormReset$1(formFiber) {
      null === ReactSharedInternals.T &&
        console.error(
          "requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."
        );
      var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
      dispatchSetStateInternal(
        formFiber,
        resetStateQueue,
        {},
        requestUpdateLane(formFiber)
      );
    }
    function mountTransition() {
      var stateHook = mountStateImpl(!1);
      stateHook = startTransition.bind(
        null,
        currentlyRenderingFiber,
        stateHook.queue,
        !0,
        !1
      );
      mountWorkInProgressHook().memoizedState = stateHook;
      return [!1, stateHook];
    }
    function updateTransition() {
      var booleanOrThenable = updateReducer(basicStateReducer)[0],
        start = updateWorkInProgressHook().memoizedState;
      return [
        "boolean" === typeof booleanOrThenable
          ? booleanOrThenable
          : useThenable(booleanOrThenable),
        start
      ];
    }
    function rerenderTransition() {
      var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
        start = updateWorkInProgressHook().memoizedState;
      return [
        "boolean" === typeof booleanOrThenable
          ? booleanOrThenable
          : useThenable(booleanOrThenable),
        start
      ];
    }
    function useHostTransitionStatus() {
      return readContext(HostTransitionContext);
    }
    function mountId() {
      var hook = mountWorkInProgressHook(),
        identifierPrefix = workInProgressRoot.identifierPrefix;
      if (isHydrating) {
        var treeId = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        treeId =
          (
            idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))
          ).toString(32) + treeId;
        identifierPrefix = "\u00ab" + identifierPrefix + "R" + treeId;
        treeId = localIdCounter++;
        0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
        identifierPrefix += "\u00bb";
      } else
        (treeId = globalClientIdCounter++),
          (identifierPrefix =
            "\u00ab" + identifierPrefix + "r" + treeId.toString(32) + "\u00bb");
      return (hook.memoizedState = identifierPrefix);
    }
    function mountRefresh() {
      return (mountWorkInProgressHook().memoizedState = refreshCache.bind(
        null,
        currentlyRenderingFiber
      ));
    }
    function refreshCache(fiber, seedKey) {
      for (var provider = fiber.return; null !== provider; ) {
        switch (provider.tag) {
          case 24:
          case 3:
            var lane = requestUpdateLane(provider);
            fiber = createUpdate(lane);
            var root = enqueueUpdate(provider, fiber, lane);
            null !== root &&
              (scheduleUpdateOnFiber(root, provider, lane),
              entangleTransitions(root, provider, lane));
            provider = createCache();
            null !== seedKey &&
              void 0 !== seedKey &&
              null !== root &&
              console.error(
                "The seed argument is not enabled outside experimental channels."
              );
            fiber.payload = { cache: provider };
            return;
        }
        provider = provider.return;
      }
    }
    function dispatchReducerAction(fiber, queue, action) {
      var args = arguments;
      "function" === typeof args[3] &&
        console.error(
          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
        );
      args = requestUpdateLane(fiber);
      var update = {
        lane: args,
        revertLane: 0,
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      isRenderPhaseUpdate(fiber)
        ? enqueueRenderPhaseUpdate(queue, update)
        : ((update = enqueueConcurrentHookUpdate(fiber, queue, update, args)),
          null !== update &&
            (scheduleUpdateOnFiber(update, fiber, args),
            entangleTransitionUpdate(update, queue, args)));
      markStateUpdateScheduled(fiber, args);
    }
    function dispatchSetState(fiber, queue, action) {
      var args = arguments;
      "function" === typeof args[3] &&
        console.error(
          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
        );
      args = requestUpdateLane(fiber);
      dispatchSetStateInternal(fiber, queue, action, args);
      markStateUpdateScheduled(fiber, args);
    }
    function dispatchSetStateInternal(fiber, queue, action, lane) {
      var update = {
        lane: lane,
        revertLane: 0,
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
      else {
        var alternate = fiber.alternate;
        if (
          0 === fiber.lanes &&
          (null === alternate || 0 === alternate.lanes) &&
          ((alternate = queue.lastRenderedReducer), null !== alternate)
        ) {
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            var currentState = queue.lastRenderedState,
              eagerState = alternate(currentState, action);
            update.hasEagerState = !0;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState))
              return (
                enqueueUpdate$1(fiber, queue, update, 0),
                null === workInProgressRoot &&
                  finishQueueingConcurrentUpdates(),
                !1
              );
          } catch (error) {
          } finally {
            ReactSharedInternals.H = prevDispatcher;
          }
        }
        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (null !== action)
          return (
            scheduleUpdateOnFiber(action, fiber, lane),
            entangleTransitionUpdate(action, queue, lane),
            !0
          );
      }
      return !1;
    }
    function dispatchOptimisticSetState(
      fiber,
      throwIfDuringRender,
      queue,
      action
    ) {
      null === ReactSharedInternals.T &&
        0 === currentEntangledLane &&
        console.error(
          "An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."
        );
      action = {
        lane: 2,
        revertLane: requestTransitionLane(),
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        if (throwIfDuringRender)
          throw Error("Cannot update optimistic state while rendering.");
        console.error("Cannot call startTransition while rendering.");
      } else
        (throwIfDuringRender = enqueueConcurrentHookUpdate(
          fiber,
          queue,
          action,
          2
        )),
          null !== throwIfDuringRender &&
            scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
      markStateUpdateScheduled(fiber, 2);
    }
    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return (
        fiber === currentlyRenderingFiber ||
        (null !== alternate && alternate === currentlyRenderingFiber)
      );
    }
    function enqueueRenderPhaseUpdate(queue, update) {
      didScheduleRenderPhaseUpdateDuringThisPass =
        didScheduleRenderPhaseUpdate = !0;
      var pending = queue.pending;
      null === pending
        ? (update.next = update)
        : ((update.next = pending.next), (pending.next = update));
      queue.pending = update;
    }
    function entangleTransitionUpdate(root, queue, lane) {
      if (0 !== (lane & 4194048)) {
        var queueLanes = queue.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        queue.lanes = lane;
        markRootEntangled(root, lane);
      }
    }
    function pushDebugInfo(debugInfo) {
      var previousDebugInfo = currentDebugInfo;
      null != debugInfo &&
        (currentDebugInfo =
          null === previousDebugInfo
            ? debugInfo
            : previousDebugInfo.concat(debugInfo));
      return previousDebugInfo;
    }
    function validateFragmentProps(element, fiber, returnFiber) {
      for (var keys = Object.keys(element.props), i = 0; i < keys.length; i++) {
        var key = keys[i];
        if ("children" !== key && "key" !== key) {
          null === fiber &&
            ((fiber = createFiberFromElement(element, returnFiber.mode, 0)),
            (fiber._debugInfo = currentDebugInfo),
            (fiber.return = returnFiber));
          runWithFiberInDEV(
            fiber,
            function (erroredKey) {
              console.error(
                "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
                erroredKey
              );
            },
            key
          );
          break;
        }
      }
    }
    function unwrapThenable(thenable) {
      var index = thenableIndexCounter;
      thenableIndexCounter += 1;
      null === thenableState && (thenableState = createThenableState());
      return trackUsedThenable(thenableState, thenable, index);
    }
    function coerceRef(workInProgress, element) {
      element = element.props.ref;
      workInProgress.ref = void 0 !== element ? element : null;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
        throw Error(
          'A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.'
        );
      returnFiber = Object.prototype.toString.call(newChild);
      throw Error(
        "Objects are not valid as a React child (found: " +
          ("[object Object]" === returnFiber
            ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
            : returnFiber) +
          "). If you meant to render a collection of children, use an array instead."
      );
    }
    function warnOnFunctionType(returnFiber, invalidChild) {
      var parentName = getComponentNameFromFiber(returnFiber) || "Component";
      ownerHasFunctionTypeWarning[parentName] ||
        ((ownerHasFunctionTypeWarning[parentName] = !0),
        (invalidChild =
          invalidChild.displayName || invalidChild.name || "Component"),
        3 === returnFiber.tag
          ? console.error(
              "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",
              invalidChild,
              invalidChild,
              invalidChild
            )
          : console.error(
              "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",
              invalidChild,
              invalidChild,
              parentName,
              invalidChild,
              parentName
            ));
    }
    function warnOnSymbolType(returnFiber, invalidChild) {
      var parentName = getComponentNameFromFiber(returnFiber) || "Component";
      ownerHasSymbolTypeWarning[parentName] ||
        ((ownerHasSymbolTypeWarning[parentName] = !0),
        (invalidChild = String(invalidChild)),
        3 === returnFiber.tag
          ? console.error(
              "Symbols are not valid as a React child.\n  root.render(%s)",
              invalidChild
            )
          : console.error(
              "Symbols are not valid as a React child.\n  <%s>%s</%s>",
              parentName,
              invalidChild,
              parentName
            ));
    }
    function createChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
          var deletions = returnFiber.deletions;
          null === deletions
            ? ((returnFiber.deletions = [childToDelete]),
              (returnFiber.flags |= 16))
            : deletions.push(childToDelete);
        }
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;
        for (; null !== currentFirstChild; )
          deleteChild(returnFiber, currentFirstChild),
            (currentFirstChild = currentFirstChild.sibling);
        return null;
      }
      function mapRemainingChildren(currentFirstChild) {
        for (var existingChildren = new Map(); null !== currentFirstChild; )
          null !== currentFirstChild.key
            ? existingChildren.set(currentFirstChild.key, currentFirstChild)
            : existingChildren.set(currentFirstChild.index, currentFirstChild),
            (currentFirstChild = currentFirstChild.sibling);
        return existingChildren;
      }
      function useFiber(fiber, pendingProps) {
        fiber = createWorkInProgress(fiber, pendingProps);
        fiber.index = 0;
        fiber.sibling = null;
        return fiber;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects)
          return (newFiber.flags |= 1048576), lastPlacedIndex;
        newIndex = newFiber.alternate;
        if (null !== newIndex)
          return (
            (newIndex = newIndex.index),
            newIndex < lastPlacedIndex
              ? ((newFiber.flags |= 67108866), lastPlacedIndex)
              : newIndex
          );
        newFiber.flags |= 67108866;
        return lastPlacedIndex;
      }
      function placeSingleChild(newFiber) {
        shouldTrackSideEffects &&
          null === newFiber.alternate &&
          (newFiber.flags |= 67108866);
        return newFiber;
      }
      function updateTextNode(returnFiber, current, textContent, lanes) {
        if (null === current || 6 !== current.tag)
          return (
            (current = createFiberFromText(
              textContent,
              returnFiber.mode,
              lanes
            )),
            (current.return = returnFiber),
            (current._debugOwner = returnFiber),
            (current._debugTask = returnFiber._debugTask),
            (current._debugInfo = currentDebugInfo),
            current
          );
        current = useFiber(current, textContent);
        current.return = returnFiber;
        current._debugInfo = currentDebugInfo;
        return current;
      }
      function updateElement(returnFiber, current, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE)
          return (
            (current = updateFragment(
              returnFiber,
              current,
              element.props.children,
              lanes,
              element.key
            )),
            validateFragmentProps(element, current, returnFiber),
            current
          );
        if (
          null !== current &&
          (current.elementType === elementType ||
            isCompatibleFamilyForHotReloading(current, element) ||
            ("object" === typeof elementType &&
              null !== elementType &&
              elementType.$$typeof === REACT_LAZY_TYPE &&
              callLazyInitInDEV(elementType) === current.type))
        )
          return (
            (current = useFiber(current, element.props)),
            coerceRef(current, element),
            (current.return = returnFiber),
            (current._debugOwner = element._owner),
            (current._debugInfo = currentDebugInfo),
            current
          );
        current = createFiberFromElement(element, returnFiber.mode, lanes);
        coerceRef(current, element);
        current.return = returnFiber;
        current._debugInfo = currentDebugInfo;
        return current;
      }
      function updatePortal(returnFiber, current, portal, lanes) {
        if (
          null === current ||
          4 !== current.tag ||
          current.stateNode.containerInfo !== portal.containerInfo ||
          current.stateNode.implementation !== portal.implementation
        )
          return (
            (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
            (current.return = returnFiber),
            (current._debugInfo = currentDebugInfo),
            current
          );
        current = useFiber(current, portal.children || []);
        current.return = returnFiber;
        current._debugInfo = currentDebugInfo;
        return current;
      }
      function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (null === current || 7 !== current.tag)
          return (
            (current = createFiberFromFragment(
              fragment,
              returnFiber.mode,
              lanes,
              key
            )),
            (current.return = returnFiber),
            (current._debugOwner = returnFiber),
            (current._debugTask = returnFiber._debugTask),
            (current._debugInfo = currentDebugInfo),
            current
          );
        current = useFiber(current, fragment);
        current.return = returnFiber;
        current._debugInfo = currentDebugInfo;
        return current;
      }
      function createChild(returnFiber, newChild, lanes) {
        if (
          ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild ||
          "bigint" === typeof newChild
        )
          return (
            (newChild = createFiberFromText(
              "" + newChild,
              returnFiber.mode,
              lanes
            )),
            (newChild.return = returnFiber),
            (newChild._debugOwner = returnFiber),
            (newChild._debugTask = returnFiber._debugTask),
            (newChild._debugInfo = currentDebugInfo),
            newChild
          );
        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return (
                (lanes = createFiberFromElement(
                  newChild,
                  returnFiber.mode,
                  lanes
                )),
                coerceRef(lanes, newChild),
                (lanes.return = returnFiber),
                (returnFiber = pushDebugInfo(newChild._debugInfo)),
                (lanes._debugInfo = currentDebugInfo),
                (currentDebugInfo = returnFiber),
                lanes
              );
            case REACT_PORTAL_TYPE:
              return (
                (newChild = createFiberFromPortal(
                  newChild,
                  returnFiber.mode,
                  lanes
                )),
                (newChild.return = returnFiber),
                (newChild._debugInfo = currentDebugInfo),
                newChild
              );
            case REACT_LAZY_TYPE:
              var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
              newChild = callLazyInitInDEV(newChild);
              returnFiber = createChild(returnFiber, newChild, lanes);
              currentDebugInfo = _prevDebugInfo;
              return returnFiber;
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return (
              (lanes = createFiberFromFragment(
                newChild,
                returnFiber.mode,
                lanes,
                null
              )),
              (lanes.return = returnFiber),
              (lanes._debugOwner = returnFiber),
              (lanes._debugTask = returnFiber._debugTask),
              (returnFiber = pushDebugInfo(newChild._debugInfo)),
              (lanes._debugInfo = currentDebugInfo),
              (currentDebugInfo = returnFiber),
              lanes
            );
          if ("function" === typeof newChild.then)
            return (
              (_prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
              (returnFiber = createChild(
                returnFiber,
                unwrapThenable(newChild),
                lanes
              )),
              (currentDebugInfo = _prevDebugInfo),
              returnFiber
            );
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return createChild(
              returnFiber,
              readContextDuringReconciliation(returnFiber, newChild),
              lanes
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        "function" === typeof newChild &&
          warnOnFunctionType(returnFiber, newChild);
        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if (
          ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild ||
          "bigint" === typeof newChild
        )
          return null !== key
            ? null
            : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return newChild.key === key
                ? ((key = pushDebugInfo(newChild._debugInfo)),
                  (returnFiber = updateElement(
                    returnFiber,
                    oldFiber,
                    newChild,
                    lanes
                  )),
                  (currentDebugInfo = key),
                  returnFiber)
                : null;
            case REACT_PORTAL_TYPE:
              return newChild.key === key
                ? updatePortal(returnFiber, oldFiber, newChild, lanes)
                : null;
            case REACT_LAZY_TYPE:
              return (
                (key = pushDebugInfo(newChild._debugInfo)),
                (newChild = callLazyInitInDEV(newChild)),
                (returnFiber = updateSlot(
                  returnFiber,
                  oldFiber,
                  newChild,
                  lanes
                )),
                (currentDebugInfo = key),
                returnFiber
              );
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
            if (null !== key) return null;
            key = pushDebugInfo(newChild._debugInfo);
            returnFiber = updateFragment(
              returnFiber,
              oldFiber,
              newChild,
              lanes,
              null
            );
            currentDebugInfo = key;
            return returnFiber;
          }
          if ("function" === typeof newChild.then)
            return (
              (key = pushDebugInfo(newChild._debugInfo)),
              (returnFiber = updateSlot(
                returnFiber,
                oldFiber,
                unwrapThenable(newChild),
                lanes
              )),
              (currentDebugInfo = key),
              returnFiber
            );
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return updateSlot(
              returnFiber,
              oldFiber,
              readContextDuringReconciliation(returnFiber, newChild),
              lanes
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        "function" === typeof newChild &&
          warnOnFunctionType(returnFiber, newChild);
        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
        return null;
      }
      function updateFromMap(
        existingChildren,
        returnFiber,
        newIdx,
        newChild,
        lanes
      ) {
        if (
          ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild ||
          "bigint" === typeof newChild
        )
          return (
            (existingChildren = existingChildren.get(newIdx) || null),
            updateTextNode(returnFiber, existingChildren, "" + newChild, lanes)
          );
        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return (
                (newIdx =
                  existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null),
                (existingChildren = pushDebugInfo(newChild._debugInfo)),
                (returnFiber = updateElement(
                  returnFiber,
                  newIdx,
                  newChild,
                  lanes
                )),
                (currentDebugInfo = existingChildren),
                returnFiber
              );
            case REACT_PORTAL_TYPE:
              return (
                (existingChildren =
                  existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null),
                updatePortal(returnFiber, existingChildren, newChild, lanes)
              );
            case REACT_LAZY_TYPE:
              var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
              newChild = callLazyInitInDEV(newChild);
              returnFiber = updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                newChild,
                lanes
              );
              currentDebugInfo = _prevDebugInfo7;
              return returnFiber;
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return (
              (newIdx = existingChildren.get(newIdx) || null),
              (existingChildren = pushDebugInfo(newChild._debugInfo)),
              (returnFiber = updateFragment(
                returnFiber,
                newIdx,
                newChild,
                lanes,
                null
              )),
              (currentDebugInfo = existingChildren),
              returnFiber
            );
          if ("function" === typeof newChild.then)
            return (
              (_prevDebugInfo7 = pushDebugInfo(newChild._debugInfo)),
              (returnFiber = updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                unwrapThenable(newChild),
                lanes
              )),
              (currentDebugInfo = _prevDebugInfo7),
              returnFiber
            );
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return updateFromMap(
              existingChildren,
              returnFiber,
              newIdx,
              readContextDuringReconciliation(returnFiber, newChild),
              lanes
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        "function" === typeof newChild &&
          warnOnFunctionType(returnFiber, newChild);
        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
        return null;
      }
      function warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys) {
        if ("object" !== typeof child || null === child) return knownKeys;
        switch (child.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            warnForMissingKey(returnFiber, workInProgress, child);
            var key = child.key;
            if ("string" !== typeof key) break;
            if (null === knownKeys) {
              knownKeys = new Set();
              knownKeys.add(key);
              break;
            }
            if (!knownKeys.has(key)) {
              knownKeys.add(key);
              break;
            }
            runWithFiberInDEV(workInProgress, function () {
              console.error(
                "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
                key
              );
            });
            break;
          case REACT_LAZY_TYPE:
            (child = callLazyInitInDEV(child)),
              warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys);
        }
        return knownKeys;
      }
      function reconcileChildrenArray(
        returnFiber,
        currentFirstChild,
        newChildren,
        lanes
      ) {
        for (
          var knownKeys = null,
            resultingFirstChild = null,
            previousNewFiber = null,
            oldFiber = currentFirstChild,
            newIdx = (currentFirstChild = 0),
            nextOldFiber = null;
          null !== oldFiber && newIdx < newChildren.length;
          newIdx++
        ) {
          oldFiber.index > newIdx
            ? ((nextOldFiber = oldFiber), (oldFiber = null))
            : (nextOldFiber = oldFiber.sibling);
          var newFiber = updateSlot(
            returnFiber,
            oldFiber,
            newChildren[newIdx],
            lanes
          );
          if (null === newFiber) {
            null === oldFiber && (oldFiber = nextOldFiber);
            break;
          }
          knownKeys = warnOnInvalidKey(
            returnFiber,
            newFiber,
            newChildren[newIdx],
            knownKeys
          );
          shouldTrackSideEffects &&
            oldFiber &&
            null === newFiber.alternate &&
            deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          null === previousNewFiber
            ? (resultingFirstChild = newFiber)
            : (previousNewFiber.sibling = newFiber);
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length)
          return (
            deleteRemainingChildren(returnFiber, oldFiber),
            isHydrating && pushTreeFork(returnFiber, newIdx),
            resultingFirstChild
          );
        if (null === oldFiber) {
          for (; newIdx < newChildren.length; newIdx++)
            (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
              null !== oldFiber &&
                ((knownKeys = warnOnInvalidKey(
                  returnFiber,
                  oldFiber,
                  newChildren[newIdx],
                  knownKeys
                )),
                (currentFirstChild = placeChild(
                  oldFiber,
                  currentFirstChild,
                  newIdx
                )),
                null === previousNewFiber
                  ? (resultingFirstChild = oldFiber)
                  : (previousNewFiber.sibling = oldFiber),
                (previousNewFiber = oldFiber));
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        for (
          oldFiber = mapRemainingChildren(oldFiber);
          newIdx < newChildren.length;
          newIdx++
        )
          (nextOldFiber = updateFromMap(
            oldFiber,
            returnFiber,
            newIdx,
            newChildren[newIdx],
            lanes
          )),
            null !== nextOldFiber &&
              ((knownKeys = warnOnInvalidKey(
                returnFiber,
                nextOldFiber,
                newChildren[newIdx],
                knownKeys
              )),
              shouldTrackSideEffects &&
                null !== nextOldFiber.alternate &&
                oldFiber.delete(
                  null === nextOldFiber.key ? newIdx : nextOldFiber.key
                ),
              (currentFirstChild = placeChild(
                nextOldFiber,
                currentFirstChild,
                newIdx
              )),
              null === previousNewFiber
                ? (resultingFirstChild = nextOldFiber)
                : (previousNewFiber.sibling = nextOldFiber),
              (previousNewFiber = nextOldFiber));
        shouldTrackSideEffects &&
          oldFiber.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        isHydrating && pushTreeFork(returnFiber, newIdx);
        return resultingFirstChild;
      }
      function reconcileChildrenIterator(
        returnFiber,
        currentFirstChild,
        newChildren,
        lanes
      ) {
        if (null == newChildren)
          throw Error("An iterable object provided no iterator.");
        for (
          var resultingFirstChild = null,
            previousNewFiber = null,
            oldFiber = currentFirstChild,
            newIdx = (currentFirstChild = 0),
            nextOldFiber = null,
            knownKeys = null,
            step = newChildren.next();
          null !== oldFiber && !step.done;
          newIdx++, step = newChildren.next()
        ) {
          oldFiber.index > newIdx
            ? ((nextOldFiber = oldFiber), (oldFiber = null))
            : (nextOldFiber = oldFiber.sibling);
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
          if (null === newFiber) {
            null === oldFiber && (oldFiber = nextOldFiber);
            break;
          }
          knownKeys = warnOnInvalidKey(
            returnFiber,
            newFiber,
            step.value,
            knownKeys
          );
          shouldTrackSideEffects &&
            oldFiber &&
            null === newFiber.alternate &&
            deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          null === previousNewFiber
            ? (resultingFirstChild = newFiber)
            : (previousNewFiber.sibling = newFiber);
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (step.done)
          return (
            deleteRemainingChildren(returnFiber, oldFiber),
            isHydrating && pushTreeFork(returnFiber, newIdx),
            resultingFirstChild
          );
        if (null === oldFiber) {
          for (; !step.done; newIdx++, step = newChildren.next())
            (oldFiber = createChild(returnFiber, step.value, lanes)),
              null !== oldFiber &&
                ((knownKeys = warnOnInvalidKey(
                  returnFiber,
                  oldFiber,
                  step.value,
                  knownKeys
                )),
                (currentFirstChild = placeChild(
                  oldFiber,
                  currentFirstChild,
                  newIdx
                )),
                null === previousNewFiber
                  ? (resultingFirstChild = oldFiber)
                  : (previousNewFiber.sibling = oldFiber),
                (previousNewFiber = oldFiber));
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        for (
          oldFiber = mapRemainingChildren(oldFiber);
          !step.done;
          newIdx++, step = newChildren.next()
        )
          (nextOldFiber = updateFromMap(
            oldFiber,
            returnFiber,
            newIdx,
            step.value,
            lanes
          )),
            null !== nextOldFiber &&
              ((knownKeys = warnOnInvalidKey(
                returnFiber,
                nextOldFiber,
                step.value,
                knownKeys
              )),
              shouldTrackSideEffects &&
                null !== nextOldFiber.alternate &&
                oldFiber.delete(
                  null === nextOldFiber.key ? newIdx : nextOldFiber.key
                ),
              (currentFirstChild = placeChild(
                nextOldFiber,
                currentFirstChild,
                newIdx
              )),
              null === previousNewFiber
                ? (resultingFirstChild = nextOldFiber)
                : (previousNewFiber.sibling = nextOldFiber),
              (previousNewFiber = nextOldFiber));
        shouldTrackSideEffects &&
          oldFiber.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        isHydrating && pushTreeFork(returnFiber, newIdx);
        return resultingFirstChild;
      }
      function reconcileChildFibersImpl(
        returnFiber,
        currentFirstChild,
        newChild,
        lanes
      ) {
        "object" === typeof newChild &&
          null !== newChild &&
          newChild.type === REACT_FRAGMENT_TYPE &&
          null === newChild.key &&
          (validateFragmentProps(newChild, null, returnFiber),
          (newChild = newChild.props.children));
        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
              a: {
                for (var key = newChild.key; null !== currentFirstChild; ) {
                  if (currentFirstChild.key === key) {
                    key = newChild.type;
                    if (key === REACT_FRAGMENT_TYPE) {
                      if (7 === currentFirstChild.tag) {
                        deleteRemainingChildren(
                          returnFiber,
                          currentFirstChild.sibling
                        );
                        lanes = useFiber(
                          currentFirstChild,
                          newChild.props.children
                        );
                        lanes.return = returnFiber;
                        lanes._debugOwner = newChild._owner;
                        lanes._debugInfo = currentDebugInfo;
                        validateFragmentProps(newChild, lanes, returnFiber);
                        returnFiber = lanes;
                        break a;
                      }
                    } else if (
                      currentFirstChild.elementType === key ||
                      isCompatibleFamilyForHotReloading(
                        currentFirstChild,
                        newChild
                      ) ||
                      ("object" === typeof key &&
                        null !== key &&
                        key.$$typeof === REACT_LAZY_TYPE &&
                        callLazyInitInDEV(key) === currentFirstChild.type)
                    ) {
                      deleteRemainingChildren(
                        returnFiber,
                        currentFirstChild.sibling
                      );
                      lanes = useFiber(currentFirstChild, newChild.props);
                      coerceRef(lanes, newChild);
                      lanes.return = returnFiber;
                      lanes._debugOwner = newChild._owner;
                      lanes._debugInfo = currentDebugInfo;
                      returnFiber = lanes;
                      break a;
                    }
                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    break;
                  } else deleteChild(returnFiber, currentFirstChild);
                  currentFirstChild = currentFirstChild.sibling;
                }
                newChild.type === REACT_FRAGMENT_TYPE
                  ? ((lanes = createFiberFromFragment(
                      newChild.props.children,
                      returnFiber.mode,
                      lanes,
                      newChild.key
                    )),
                    (lanes.return = returnFiber),
                    (lanes._debugOwner = returnFiber),
                    (lanes._debugTask = returnFiber._debugTask),
                    (lanes._debugInfo = currentDebugInfo),
                    validateFragmentProps(newChild, lanes, returnFiber),
                    (returnFiber = lanes))
                  : ((lanes = createFiberFromElement(
                      newChild,
                      returnFiber.mode,
                      lanes
                    )),
                    coerceRef(lanes, newChild),
                    (lanes.return = returnFiber),
                    (lanes._debugInfo = currentDebugInfo),
                    (returnFiber = lanes));
              }
              returnFiber = placeSingleChild(returnFiber);
              currentDebugInfo = prevDebugInfo;
              return returnFiber;
            case REACT_PORTAL_TYPE:
              a: {
                prevDebugInfo = newChild;
                for (
                  newChild = prevDebugInfo.key;
                  null !== currentFirstChild;

                ) {
                  if (currentFirstChild.key === newChild)
                    if (
                      4 === currentFirstChild.tag &&
                      currentFirstChild.stateNode.containerInfo ===
                        prevDebugInfo.containerInfo &&
                      currentFirstChild.stateNode.implementation ===
                        prevDebugInfo.implementation
                    ) {
                      deleteRemainingChildren(
                        returnFiber,
                        currentFirstChild.sibling
                      );
                      lanes = useFiber(
                        currentFirstChild,
                        prevDebugInfo.children || []
                      );
                      lanes.return = returnFiber;
                      returnFiber = lanes;
                      break a;
                    } else {
                      deleteRemainingChildren(returnFiber, currentFirstChild);
                      break;
                    }
                  else deleteChild(returnFiber, currentFirstChild);
                  currentFirstChild = currentFirstChild.sibling;
                }
                lanes = createFiberFromPortal(
                  prevDebugInfo,
                  returnFiber.mode,
                  lanes
                );
                lanes.return = returnFiber;
                returnFiber = lanes;
              }
              return placeSingleChild(returnFiber);
            case REACT_LAZY_TYPE:
              return (
                (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
                (newChild = callLazyInitInDEV(newChild)),
                (returnFiber = reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  lanes
                )),
                (currentDebugInfo = prevDebugInfo),
                returnFiber
              );
          }
          if (isArrayImpl(newChild))
            return (
              (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
              (returnFiber = reconcileChildrenArray(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              )),
              (currentDebugInfo = prevDebugInfo),
              returnFiber
            );
          if (getIteratorFn(newChild)) {
            prevDebugInfo = pushDebugInfo(newChild._debugInfo);
            key = getIteratorFn(newChild);
            if ("function" !== typeof key)
              throw Error(
                "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
              );
            var newChildren = key.call(newChild);
            if (newChildren === newChild) {
              if (
                0 !== returnFiber.tag ||
                "[object GeneratorFunction]" !==
                  Object.prototype.toString.call(returnFiber.type) ||
                "[object Generator]" !==
                  Object.prototype.toString.call(newChildren)
              )
                didWarnAboutGenerators ||
                  console.error(
                    "Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."
                  ),
                  (didWarnAboutGenerators = !0);
            } else
              newChild.entries !== key ||
                didWarnAboutMaps ||
                (console.error(
                  "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
                ),
                (didWarnAboutMaps = !0));
            returnFiber = reconcileChildrenIterator(
              returnFiber,
              currentFirstChild,
              newChildren,
              lanes
            );
            currentDebugInfo = prevDebugInfo;
            return returnFiber;
          }
          if ("function" === typeof newChild.then)
            return (
              (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
              (returnFiber = reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                unwrapThenable(newChild),
                lanes
              )),
              (currentDebugInfo = prevDebugInfo),
              returnFiber
            );
          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
            return reconcileChildFibersImpl(
              returnFiber,
              currentFirstChild,
              readContextDuringReconciliation(returnFiber, newChild),
              lanes
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if (
          ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild ||
          "bigint" === typeof newChild
        )
          return (
            (prevDebugInfo = "" + newChild),
            null !== currentFirstChild && 6 === currentFirstChild.tag
              ? (deleteRemainingChildren(
                  returnFiber,
                  currentFirstChild.sibling
                ),
                (lanes = useFiber(currentFirstChild, prevDebugInfo)),
                (lanes.return = returnFiber),
                (returnFiber = lanes))
              : (deleteRemainingChildren(returnFiber, currentFirstChild),
                (lanes = createFiberFromText(
                  prevDebugInfo,
                  returnFiber.mode,
                  lanes
                )),
                (lanes.return = returnFiber),
                (lanes._debugOwner = returnFiber),
                (lanes._debugTask = returnFiber._debugTask),
                (lanes._debugInfo = currentDebugInfo),
                (returnFiber = lanes)),
            placeSingleChild(returnFiber)
          );
        "function" === typeof newChild &&
          warnOnFunctionType(returnFiber, newChild);
        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return function (returnFiber, currentFirstChild, newChild, lanes) {
        var prevDebugInfo = currentDebugInfo;
        currentDebugInfo = null;
        try {
          thenableIndexCounter = 0;
          var firstChildFiber = reconcileChildFibersImpl(
            returnFiber,
            currentFirstChild,
            newChild,
            lanes
          );
          thenableState = null;
          return firstChildFiber;
        } catch (x) {
          if (x === SuspenseException || x === SuspenseActionException) throw x;
          var fiber = createFiber(29, x, null, returnFiber.mode);
          fiber.lanes = lanes;
          fiber.return = returnFiber;
          var debugInfo = (fiber._debugInfo = currentDebugInfo);
          fiber._debugOwner = returnFiber._debugOwner;
          fiber._debugTask = returnFiber._debugTask;
          if (null != debugInfo)
            for (var i = debugInfo.length - 1; 0 <= i; i--)
              if ("string" === typeof debugInfo[i].stack) {
                fiber._debugOwner = debugInfo[i];
                fiber._debugTask = debugInfo[i].debugTask;
                break;
              }
          return fiber;
        } finally {
          currentDebugInfo = prevDebugInfo;
        }
      };
    }
    function pushPrimaryTreeSuspenseHandler(handler) {
      var current = handler.alternate;
      push(
        suspenseStackCursor,
        suspenseStackCursor.current & SubtreeSuspenseContextMask,
        handler
      );
      push(suspenseHandlerStackCursor, handler, handler);
      null === shellBoundary &&
        (null === current || null !== currentTreeHiddenStackCursor.current
          ? (shellBoundary = handler)
          : null !== current.memoizedState && (shellBoundary = handler));
    }
    function pushOffscreenSuspenseHandler(fiber) {
      if (22 === fiber.tag) {
        if (
          (push(suspenseStackCursor, suspenseStackCursor.current, fiber),
          push(suspenseHandlerStackCursor, fiber, fiber),
          null === shellBoundary)
        ) {
          var current = fiber.alternate;
          null !== current &&
            null !== current.memoizedState &&
            (shellBoundary = fiber);
        }
      } else reuseSuspenseHandlerOnStack(fiber);
    }
    function reuseSuspenseHandlerOnStack(fiber) {
      push(suspenseStackCursor, suspenseStackCursor.current, fiber);
      push(
        suspenseHandlerStackCursor,
        suspenseHandlerStackCursor.current,
        fiber
      );
    }
    function popSuspenseHandler(fiber) {
      pop(suspenseHandlerStackCursor, fiber);
      shellBoundary === fiber && (shellBoundary = null);
      pop(suspenseStackCursor, fiber);
    }
    function findFirstSuspended(row) {
      for (var node = row; null !== node; ) {
        if (13 === node.tag) {
          var state = node.memoizedState;
          if (
            null !== state &&
            ((state = state.dehydrated),
            null === state ||
              state.data === SUSPENSE_PENDING_START_DATA ||
              isSuspenseInstanceFallback(state))
          )
            return node;
        } else if (
          19 === node.tag &&
          void 0 !== node.memoizedProps.revealOrder
        ) {
          if (0 !== (node.flags & 128)) return node;
        } else if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === row) break;
        for (; null === node.sibling; ) {
          if (null === node.return || node.return === row) return null;
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      return null;
    }
    function warnOnInvalidCallback(callback) {
      if (null !== callback && "function" !== typeof callback) {
        var key = String(callback);
        didWarnOnInvalidCallback.has(key) ||
          (didWarnOnInvalidCallback.add(key),
          console.error(
            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
            callback
          ));
      }
    }
    function applyDerivedStateFromProps(
      workInProgress,
      ctor,
      getDerivedStateFromProps,
      nextProps
    ) {
      var prevState = workInProgress.memoizedState,
        partialState = getDerivedStateFromProps(nextProps, prevState);
      if (workInProgress.mode & StrictLegacyMode) {
        setIsStrictModeForDevtools(!0);
        try {
          partialState = getDerivedStateFromProps(nextProps, prevState);
        } finally {
          setIsStrictModeForDevtools(!1);
        }
      }
      void 0 === partialState &&
        ((ctor = getComponentNameFromType(ctor) || "Component"),
        didWarnAboutUndefinedDerivedState.has(ctor) ||
          (didWarnAboutUndefinedDerivedState.add(ctor),
          console.error(
            "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
            ctor
          )));
      prevState =
        null === partialState || void 0 === partialState
          ? prevState
          : assign({}, prevState, partialState);
      workInProgress.memoizedState = prevState;
      0 === workInProgress.lanes &&
        (workInProgress.updateQueue.baseState = prevState);
    }
    function checkShouldComponentUpdate(
      workInProgress,
      ctor,
      oldProps,
      newProps,
      oldState,
      newState,
      nextContext
    ) {
      var instance = workInProgress.stateNode;
      if ("function" === typeof instance.shouldComponentUpdate) {
        oldProps = instance.shouldComponentUpdate(
          newProps,
          newState,
          nextContext
        );
        if (workInProgress.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(!0);
          try {
            oldProps = instance.shouldComponentUpdate(
              newProps,
              newState,
              nextContext
            );
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        void 0 === oldProps &&
          console.error(
            "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
            getComponentNameFromType(ctor) || "Component"
          );
        return oldProps;
      }
      return ctor.prototype && ctor.prototype.isPureReactComponent
        ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
        : !0;
    }
    function callComponentWillReceiveProps(
      workInProgress,
      instance,
      newProps,
      nextContext
    ) {
      var oldState = instance.state;
      "function" === typeof instance.componentWillReceiveProps &&
        instance.componentWillReceiveProps(newProps, nextContext);
      "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      instance.state !== oldState &&
        ((workInProgress =
          getComponentNameFromFiber(workInProgress) || "Component"),
        didWarnAboutStateAssignmentForComponent.has(workInProgress) ||
          (didWarnAboutStateAssignmentForComponent.add(workInProgress),
          console.error(
            "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
            workInProgress
          )),
        classComponentUpdater.enqueueReplaceState(
          instance,
          instance.state,
          null
        ));
    }
    function resolveClassComponentProps(Component, baseProps) {
      var newProps = baseProps;
      if ("ref" in baseProps) {
        newProps = {};
        for (var propName in baseProps)
          "ref" !== propName && (newProps[propName] = baseProps[propName]);
      }
      if ((Component = Component.defaultProps)) {
        newProps === baseProps && (newProps = assign({}, newProps));
        for (var _propName in Component)
          void 0 === newProps[_propName] &&
            (newProps[_propName] = Component[_propName]);
      }
      return newProps;
    }
    function defaultOnUncaughtError(error) {
      reportGlobalError(error);
      console.warn(
        "%s\n\n%s\n",
        componentName
          ? "An error occurred in the <" + componentName + "> component."
          : "An error occurred in one of your React components.",
        "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries."
      );
    }
    function defaultOnCaughtError(error) {
      var componentNameMessage = componentName
          ? "The above error occurred in the <" + componentName + "> component."
          : "The above error occurred in one of your React components.",
        recreateMessage =
          "React will try to recreate this component tree from scratch using the error boundary you provided, " +
          ((errorBoundaryName || "Anonymous") + ".");
      if (
        "object" === typeof error &&
        null !== error &&
        "string" === typeof error.environmentName
      ) {
        var JSCompiler_inline_result = error.environmentName;
        error = [
          "%o\n\n%s\n\n%s\n",
          error,
          componentNameMessage,
          recreateMessage
        ].slice(0);
        "string" === typeof error[0]
          ? error.splice(
              0,
              1,
              badgeFormat + error[0],
              badgeStyle,
              pad + JSCompiler_inline_result + pad,
              resetStyle
            )
          : error.splice(
              0,
              0,
              badgeFormat,
              badgeStyle,
              pad + JSCompiler_inline_result + pad,
              resetStyle
            );
        error.unshift(console);
        JSCompiler_inline_result = bind.apply(console.error, error);
        JSCompiler_inline_result();
      } else
        console.error(
          "%o\n\n%s\n\n%s\n",
          error,
          componentNameMessage,
          recreateMessage
        );
    }
    function defaultOnRecoverableError(error) {
      reportGlobalError(error);
    }
    function logUncaughtError(root, errorInfo) {
      try {
        componentName = errorInfo.source
          ? getComponentNameFromFiber(errorInfo.source)
          : null;
        errorBoundaryName = null;
        var error = errorInfo.value;
        if (null !== ReactSharedInternals.actQueue)
          ReactSharedInternals.thrownErrors.push(error);
        else {
          var onUncaughtError = root.onUncaughtError;
          onUncaughtError(error, { componentStack: errorInfo.stack });
        }
      } catch (e$5) {
        setTimeout(function () {
          throw e$5;
        });
      }
    }
    function logCaughtError(root, boundary, errorInfo) {
      try {
        componentName = errorInfo.source
          ? getComponentNameFromFiber(errorInfo.source)
          : null;
        errorBoundaryName = getComponentNameFromFiber(boundary);
        var onCaughtError = root.onCaughtError;
        onCaughtError(errorInfo.value, {
          componentStack: errorInfo.stack,
          errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
        });
      } catch (e$6) {
        setTimeout(function () {
          throw e$6;
        });
      }
    }
    function createRootErrorUpdate(root, errorInfo, lane) {
      lane = createUpdate(lane);
      lane.tag = CaptureUpdate;
      lane.payload = { element: null };
      lane.callback = function () {
        runWithFiberInDEV(errorInfo.source, logUncaughtError, root, errorInfo);
      };
      return lane;
    }
    function createClassErrorUpdate(lane) {
      lane = createUpdate(lane);
      lane.tag = CaptureUpdate;
      return lane;
    }
    function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if ("function" === typeof getDerivedStateFromError) {
        var error = errorInfo.value;
        update.payload = function () {
          return getDerivedStateFromError(error);
        };
        update.callback = function () {
          markFailedErrorBoundaryForHotReloading(fiber);
          runWithFiberInDEV(
            errorInfo.source,
            logCaughtError,
            root,
            fiber,
            errorInfo
          );
        };
      }
      var inst = fiber.stateNode;
      null !== inst &&
        "function" === typeof inst.componentDidCatch &&
        (update.callback = function () {
          markFailedErrorBoundaryForHotReloading(fiber);
          runWithFiberInDEV(
            errorInfo.source,
            logCaughtError,
            root,
            fiber,
            errorInfo
          );
          "function" !== typeof getDerivedStateFromError &&
            (null === legacyErrorBoundariesThatAlreadyFailed
              ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))
              : legacyErrorBoundariesThatAlreadyFailed.add(this));
          callComponentDidCatchInDEV(this, errorInfo);
          "function" === typeof getDerivedStateFromError ||
            (0 === (fiber.lanes & 2) &&
              console.error(
                "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
                getComponentNameFromFiber(fiber) || "Unknown"
              ));
        });
    }
    function throwException(
      root,
      returnFiber,
      sourceFiber,
      value,
      rootRenderLanes
    ) {
      sourceFiber.flags |= 32768;
      isDevToolsPresent && restorePendingUpdaters(root, rootRenderLanes);
      if (
        null !== value &&
        "object" === typeof value &&
        "function" === typeof value.then
      ) {
        returnFiber = sourceFiber.alternate;
        null !== returnFiber &&
          propagateParentContextChanges(
            returnFiber,
            sourceFiber,
            rootRenderLanes,
            !0
          );
        isHydrating && (didSuspendOrErrorDEV = !0);
        sourceFiber = suspenseHandlerStackCursor.current;
        if (null !== sourceFiber) {
          switch (sourceFiber.tag) {
            case 13:
              return (
                null === shellBoundary
                  ? renderDidSuspendDelayIfPossible()
                  : null === sourceFiber.alternate &&
                    workInProgressRootExitStatus === RootInProgress &&
                    (workInProgressRootExitStatus = RootSuspended),
                (sourceFiber.flags &= -257),
                (sourceFiber.flags |= 65536),
                (sourceFiber.lanes = rootRenderLanes),
                value === noopSuspenseyCommitThenable
                  ? (sourceFiber.flags |= 16384)
                  : ((returnFiber = sourceFiber.updateQueue),
                    null === returnFiber
                      ? (sourceFiber.updateQueue = new Set([value]))
                      : returnFiber.add(value),
                    attachPingListener(root, value, rootRenderLanes)),
                !1
              );
            case 22:
              return (
                (sourceFiber.flags |= 65536),
                value === noopSuspenseyCommitThenable
                  ? (sourceFiber.flags |= 16384)
                  : ((returnFiber = sourceFiber.updateQueue),
                    null === returnFiber
                      ? ((returnFiber = {
                          transitions: null,
                          markerInstances: null,
                          retryQueue: new Set([value])
                        }),
                        (sourceFiber.updateQueue = returnFiber))
                      : ((sourceFiber = returnFiber.retryQueue),
                        null === sourceFiber
                          ? (returnFiber.retryQueue = new Set([value]))
                          : sourceFiber.add(value)),
                    attachPingListener(root, value, rootRenderLanes)),
                !1
              );
          }
          throw Error(
            "Unexpected Suspense handler tag (" +
              sourceFiber.tag +
              "). This is a bug in React."
          );
        }
        attachPingListener(root, value, rootRenderLanes);
        renderDidSuspendDelayIfPossible();
        return !1;
      }
      if (isHydrating)
        return (
          (didSuspendOrErrorDEV = !0),
          (returnFiber = suspenseHandlerStackCursor.current),
          null !== returnFiber
            ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),
              (returnFiber.flags |= 65536),
              (returnFiber.lanes = rootRenderLanes),
              value !== HydrationMismatchException &&
                queueHydrationError(
                  createCapturedValueAtFiber(
                    Error(
                      "There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",
                      { cause: value }
                    ),
                    sourceFiber
                  )
                ))
            : (value !== HydrationMismatchException &&
                queueHydrationError(
                  createCapturedValueAtFiber(
                    Error(
                      "There was an error while hydrating but React was able to recover by instead client rendering the entire root.",
                      { cause: value }
                    ),
                    sourceFiber
                  )
                ),
              (root = root.current.alternate),
              (root.flags |= 65536),
              (rootRenderLanes &= -rootRenderLanes),
              (root.lanes |= rootRenderLanes),
              (value = createCapturedValueAtFiber(value, sourceFiber)),
              (rootRenderLanes = createRootErrorUpdate(
                root.stateNode,
                value,
                rootRenderLanes
              )),
              enqueueCapturedUpdate(root, rootRenderLanes),
              workInProgressRootExitStatus !== RootSuspendedWithDelay &&
                (workInProgressRootExitStatus = RootErrored)),
          !1
        );
      var error = createCapturedValueAtFiber(
        Error(
          "There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",
          { cause: value }
        ),
        sourceFiber
      );
      null === workInProgressRootConcurrentErrors
        ? (workInProgressRootConcurrentErrors = [error])
        : workInProgressRootConcurrentErrors.push(error);
      workInProgressRootExitStatus !== RootSuspendedWithDelay &&
        (workInProgressRootExitStatus = RootErrored);
      if (null === returnFiber) return !0;
      value = createCapturedValueAtFiber(value, sourceFiber);
      sourceFiber = returnFiber;
      do {
        switch (sourceFiber.tag) {
          case 3:
            return (
              (sourceFiber.flags |= 65536),
              (root = rootRenderLanes & -rootRenderLanes),
              (sourceFiber.lanes |= root),
              (root = createRootErrorUpdate(
                sourceFiber.stateNode,
                value,
                root
              )),
              enqueueCapturedUpdate(sourceFiber, root),
              !1
            );
          case 1:
            if (
              ((returnFiber = sourceFiber.type),
              (error = sourceFiber.stateNode),
              0 === (sourceFiber.flags & 128) &&
                ("function" === typeof returnFiber.getDerivedStateFromError ||
                  (null !== error &&
                    "function" === typeof error.componentDidCatch &&
                    (null === legacyErrorBoundariesThatAlreadyFailed ||
                      !legacyErrorBoundariesThatAlreadyFailed.has(error)))))
            )
              return (
                (sourceFiber.flags |= 65536),
                (rootRenderLanes &= -rootRenderLanes),
                (sourceFiber.lanes |= rootRenderLanes),
                (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),
                initializeClassErrorUpdate(
                  rootRenderLanes,
                  root,
                  sourceFiber,
                  value
                ),
                enqueueCapturedUpdate(sourceFiber, rootRenderLanes),
                !1
              );
        }
        sourceFiber = sourceFiber.return;
      } while (null !== sourceFiber);
      return !1;
    }
    function reconcileChildren(
      current,
      workInProgress,
      nextChildren,
      renderLanes
    ) {
      workInProgress.child =
        null === current
          ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)
          : reconcileChildFibers(
              workInProgress,
              current.child,
              nextChildren,
              renderLanes
            );
    }
    function updateForwardRef(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      Component = Component.render;
      var ref = workInProgress.ref;
      if ("ref" in nextProps) {
        var propsWithoutRef = {};
        for (var key in nextProps)
          "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
      } else propsWithoutRef = nextProps;
      prepareToReadContext(workInProgress);
      markComponentRenderStarted(workInProgress);
      nextProps = renderWithHooks(
        current,
        workInProgress,
        Component,
        propsWithoutRef,
        ref,
        renderLanes
      );
      key = checkDidRenderIdHook();
      markComponentRenderStopped();
      if (null !== current && !didReceiveUpdate)
        return (
          bailoutHooks(current, workInProgress, renderLanes),
          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
        );
      isHydrating && key && pushMaterializedTreeId(workInProgress);
      workInProgress.flags |= 1;
      reconcileChildren(current, workInProgress, nextProps, renderLanes);
      return workInProgress.child;
    }
    function updateMemoComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      if (null === current) {
        var type = Component.type;
        if (
          "function" === typeof type &&
          !shouldConstruct(type) &&
          void 0 === type.defaultProps &&
          null === Component.compare
        )
          return (
            (Component = resolveFunctionForHotReloading(type)),
            (workInProgress.tag = 15),
            (workInProgress.type = Component),
            validateFunctionComponentInDev(workInProgress, type),
            updateSimpleMemoComponent(
              current,
              workInProgress,
              Component,
              nextProps,
              renderLanes
            )
          );
        current = createFiberFromTypeAndProps(
          Component.type,
          null,
          nextProps,
          workInProgress,
          workInProgress.mode,
          renderLanes
        );
        current.ref = workInProgress.ref;
        current.return = workInProgress;
        return (workInProgress.child = current);
      }
      type = current.child;
      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
        var prevProps = type.memoizedProps;
        Component = Component.compare;
        Component = null !== Component ? Component : shallowEqual;
        if (
          Component(prevProps, nextProps) &&
          current.ref === workInProgress.ref
        )
          return bailoutOnAlreadyFinishedWork(
            current,
            workInProgress,
            renderLanes
          );
      }
      workInProgress.flags |= 1;
      current = createWorkInProgress(type, nextProps);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return (workInProgress.child = current);
    }
    function updateSimpleMemoComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      if (null !== current) {
        var prevProps = current.memoizedProps;
        if (
          shallowEqual(prevProps, nextProps) &&
          current.ref === workInProgress.ref &&
          workInProgress.type === current.type
        )
          if (
            ((didReceiveUpdate = !1),
            (workInProgress.pendingProps = nextProps = prevProps),
            checkScheduledUpdateOrContext(current, renderLanes))
          )
            0 !== (current.flags & 131072) && (didReceiveUpdate = !0);
          else
            return (
              (workInProgress.lanes = current.lanes),
              bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
            );
      }
      return updateFunctionComponent(
        current,
        workInProgress,
        Component,
        nextProps,
        renderLanes
      );
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps,
        nextChildren = nextProps.children,
        prevState = null !== current ? current.memoizedState : null;
      if ("hidden" === nextProps.mode) {
        if (0 !== (workInProgress.flags & 128)) {
          nextProps =
            null !== prevState
              ? prevState.baseLanes | renderLanes
              : renderLanes;
          if (null !== current) {
            nextChildren = workInProgress.child = current.child;
            for (prevState = 0; null !== nextChildren; )
              (prevState =
                prevState | nextChildren.lanes | nextChildren.childLanes),
                (nextChildren = nextChildren.sibling);
            workInProgress.childLanes = prevState & ~nextProps;
          } else (workInProgress.childLanes = 0), (workInProgress.child = null);
          return deferHiddenOffscreenComponent(
            current,
            workInProgress,
            nextProps,
            renderLanes
          );
        }
        if (0 !== (renderLanes & 536870912))
          (workInProgress.memoizedState = { baseLanes: 0, cachePool: null }),
            null !== current &&
              pushTransition(
                workInProgress,
                null !== prevState ? prevState.cachePool : null
              ),
            null !== prevState
              ? pushHiddenContext(workInProgress, prevState)
              : reuseHiddenContextOnStack(workInProgress),
            pushOffscreenSuspenseHandler(workInProgress);
        else
          return (
            (workInProgress.lanes = workInProgress.childLanes = 536870912),
            deferHiddenOffscreenComponent(
              current,
              workInProgress,
              null !== prevState
                ? prevState.baseLanes | renderLanes
                : renderLanes,
              renderLanes
            )
          );
      } else
        null !== prevState
          ? (pushTransition(workInProgress, prevState.cachePool),
            pushHiddenContext(workInProgress, prevState),
            reuseSuspenseHandlerOnStack(workInProgress),
            (workInProgress.memoizedState = null))
          : (null !== current && pushTransition(workInProgress, null),
            reuseHiddenContextOnStack(workInProgress),
            reuseSuspenseHandlerOnStack(workInProgress));
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function deferHiddenOffscreenComponent(
      current,
      workInProgress,
      nextBaseLanes,
      renderLanes
    ) {
      var JSCompiler_inline_result = peekCacheFromPool();
      JSCompiler_inline_result =
        null === JSCompiler_inline_result
          ? null
          : {
              parent: CacheContext._currentValue,
              pool: JSCompiler_inline_result
            };
      workInProgress.memoizedState = {
        baseLanes: nextBaseLanes,
        cachePool: JSCompiler_inline_result
      };
      null !== current && pushTransition(workInProgress, null);
      reuseHiddenContextOnStack(workInProgress);
      pushOffscreenSuspenseHandler(workInProgress);
      null !== current &&
        propagateParentContextChanges(current, workInProgress, renderLanes, !0);
      return null;
    }
    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      if (null === ref)
        null !== current &&
          null !== current.ref &&
          (workInProgress.flags |= 4194816);
      else {
        if ("function" !== typeof ref && "object" !== typeof ref)
          throw Error(
            "Expected ref to be a function, an object returned by React.createRef(), or undefined/null."
          );
        if (null === current || current.ref !== ref)
          workInProgress.flags |= 4194816;
      }
    }
    function updateFunctionComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      if (
        Component.prototype &&
        "function" === typeof Component.prototype.render
      ) {
        var componentName = getComponentNameFromType(Component) || "Unknown";
        didWarnAboutBadClass[componentName] ||
          (console.error(
            "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
            componentName,
            componentName
          ),
          (didWarnAboutBadClass[componentName] = !0));
      }
      workInProgress.mode & StrictLegacyMode &&
        ReactStrictModeWarnings.recordLegacyContextWarning(
          workInProgress,
          null
        );
      null === current &&
        (validateFunctionComponentInDev(workInProgress, workInProgress.type),
        Component.contextTypes &&
          ((componentName = getComponentNameFromType(Component) || "Unknown"),
          didWarnAboutContextTypes[componentName] ||
            ((didWarnAboutContextTypes[componentName] = !0),
            console.error(
              "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",
              componentName
            ))));
      prepareToReadContext(workInProgress);
      markComponentRenderStarted(workInProgress);
      Component = renderWithHooks(
        current,
        workInProgress,
        Component,
        nextProps,
        void 0,
        renderLanes
      );
      nextProps = checkDidRenderIdHook();
      markComponentRenderStopped();
      if (null !== current && !didReceiveUpdate)
        return (
          bailoutHooks(current, workInProgress, renderLanes),
          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
        );
      isHydrating && nextProps && pushMaterializedTreeId(workInProgress);
      workInProgress.flags |= 1;
      reconcileChildren(current, workInProgress, Component, renderLanes);
      return workInProgress.child;
    }
    function replayFunctionComponent(
      current,
      workInProgress,
      nextProps,
      Component,
      secondArg,
      renderLanes
    ) {
      prepareToReadContext(workInProgress);
      markComponentRenderStarted(workInProgress);
      hookTypesUpdateIndexDev = -1;
      ignorePreviousDependencies =
        null !== current && current.type !== workInProgress.type;
      workInProgress.updateQueue = null;
      nextProps = renderWithHooksAgain(
        workInProgress,
        Component,
        nextProps,
        secondArg
      );
      finishRenderingHooks(current, workInProgress);
      Component = checkDidRenderIdHook();
      markComponentRenderStopped();
      if (null !== current && !didReceiveUpdate)
        return (
          bailoutHooks(current, workInProgress, renderLanes),
          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
        );
      isHydrating && Component && pushMaterializedTreeId(workInProgress);
      workInProgress.flags |= 1;
      reconcileChildren(current, workInProgress, nextProps, renderLanes);
      return workInProgress.child;
    }
    function updateClassComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      switch (shouldErrorImpl(workInProgress)) {
        case !1:
          var _instance = workInProgress.stateNode,
            state = new workInProgress.type(
              workInProgress.memoizedProps,
              _instance.context
            ).state;
          _instance.updater.enqueueSetState(_instance, state, null);
          break;
        case !0:
          workInProgress.flags |= 128;
          workInProgress.flags |= 65536;
          _instance = Error("Simulated error coming from DevTools");
          var lane = renderLanes & -renderLanes;
          workInProgress.lanes |= lane;
          state = workInProgressRoot;
          if (null === state)
            throw Error(
              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
            );
          lane = createClassErrorUpdate(lane);
          initializeClassErrorUpdate(
            lane,
            state,
            workInProgress,
            createCapturedValueAtFiber(_instance, workInProgress)
          );
          enqueueCapturedUpdate(workInProgress, lane);
      }
      prepareToReadContext(workInProgress);
      if (null === workInProgress.stateNode) {
        state = emptyContextObject;
        _instance = Component.contextType;
        "contextType" in Component &&
          null !== _instance &&
          (void 0 === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) &&
          !didWarnAboutInvalidateContextType.has(Component) &&
          (didWarnAboutInvalidateContextType.add(Component),
          (lane =
            void 0 === _instance
              ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file."
              : "object" !== typeof _instance
                ? " However, it is set to a " + typeof _instance + "."
                : _instance.$$typeof === REACT_CONSUMER_TYPE
                  ? " Did you accidentally pass the Context.Consumer instead?"
                  : " However, it is set to an object with keys {" +
                    Object.keys(_instance).join(", ") +
                    "}."),
          console.error(
            "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
            getComponentNameFromType(Component) || "Component",
            lane
          ));
        "object" === typeof _instance &&
          null !== _instance &&
          (state = readContext(_instance));
        _instance = new Component(nextProps, state);
        if (workInProgress.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(!0);
          try {
            _instance = new Component(nextProps, state);
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        state = workInProgress.memoizedState =
          null !== _instance.state && void 0 !== _instance.state
            ? _instance.state
            : null;
        _instance.updater = classComponentUpdater;
        workInProgress.stateNode = _instance;
        _instance._reactInternals = workInProgress;
        _instance._reactInternalInstance = fakeInternalInstance;
        "function" === typeof Component.getDerivedStateFromProps &&
          null === state &&
          ((state = getComponentNameFromType(Component) || "Component"),
          didWarnAboutUninitializedState.has(state) ||
            (didWarnAboutUninitializedState.add(state),
            console.error(
              "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
              state,
              null === _instance.state ? "null" : "undefined",
              state
            )));
        if (
          "function" === typeof Component.getDerivedStateFromProps ||
          "function" === typeof _instance.getSnapshotBeforeUpdate
        ) {
          var foundWillUpdateName = (lane = state = null);
          "function" === typeof _instance.componentWillMount &&
          !0 !== _instance.componentWillMount.__suppressDeprecationWarning
            ? (state = "componentWillMount")
            : "function" === typeof _instance.UNSAFE_componentWillMount &&
              (state = "UNSAFE_componentWillMount");
          "function" === typeof _instance.componentWillReceiveProps &&
          !0 !==
            _instance.componentWillReceiveProps.__suppressDeprecationWarning
            ? (lane = "componentWillReceiveProps")
            : "function" ===
                typeof _instance.UNSAFE_componentWillReceiveProps &&
              (lane = "UNSAFE_componentWillReceiveProps");
          "function" === typeof _instance.componentWillUpdate &&
          !0 !== _instance.componentWillUpdate.__suppressDeprecationWarning
            ? (foundWillUpdateName = "componentWillUpdate")
            : "function" === typeof _instance.UNSAFE_componentWillUpdate &&
              (foundWillUpdateName = "UNSAFE_componentWillUpdate");
          if (null !== state || null !== lane || null !== foundWillUpdateName) {
            _instance = getComponentNameFromType(Component) || "Component";
            var newApiName =
              "function" === typeof Component.getDerivedStateFromProps
                ? "getDerivedStateFromProps()"
                : "getSnapshotBeforeUpdate()";
            didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) ||
              (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance),
              console.error(
                "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",
                _instance,
                newApiName,
                null !== state ? "\n  " + state : "",
                null !== lane ? "\n  " + lane : "",
                null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""
              ));
          }
        }
        _instance = workInProgress.stateNode;
        state = getComponentNameFromType(Component) || "Component";
        _instance.render ||
          (Component.prototype &&
          "function" === typeof Component.prototype.render
            ? console.error(
                "No `render` method found on the %s instance: did you accidentally return an object from the constructor?",
                state
              )
            : console.error(
                "No `render` method found on the %s instance: you may have forgotten to define `render`.",
                state
              ));
        !_instance.getInitialState ||
          _instance.getInitialState.isReactClassApproved ||
          _instance.state ||
          console.error(
            "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
            state
          );
        _instance.getDefaultProps &&
          !_instance.getDefaultProps.isReactClassApproved &&
          console.error(
            "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
            state
          );
        _instance.contextType &&
          console.error(
            "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
            state
          );
        Component.childContextTypes &&
          !didWarnAboutChildContextTypes.has(Component) &&
          (didWarnAboutChildContextTypes.add(Component),
          console.error(
            "%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",
            state
          ));
        Component.contextTypes &&
          !didWarnAboutContextTypes$1.has(Component) &&
          (didWarnAboutContextTypes$1.add(Component),
          console.error(
            "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",
            state
          ));
        "function" === typeof _instance.componentShouldUpdate &&
          console.error(
            "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
            state
          );
        Component.prototype &&
          Component.prototype.isPureReactComponent &&
          "undefined" !== typeof _instance.shouldComponentUpdate &&
          console.error(
            "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
            getComponentNameFromType(Component) || "A pure component"
          );
        "function" === typeof _instance.componentDidUnmount &&
          console.error(
            "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
            state
          );
        "function" === typeof _instance.componentDidReceiveProps &&
          console.error(
            "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
            state
          );
        "function" === typeof _instance.componentWillRecieveProps &&
          console.error(
            "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
            state
          );
        "function" === typeof _instance.UNSAFE_componentWillRecieveProps &&
          console.error(
            "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
            state
          );
        lane = _instance.props !== nextProps;
        void 0 !== _instance.props &&
          lane &&
          console.error(
            "When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
            state
          );
        _instance.defaultProps &&
          console.error(
            "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
            state,
            state
          );
        "function" !== typeof _instance.getSnapshotBeforeUpdate ||
          "function" === typeof _instance.componentDidUpdate ||
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) ||
          (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component),
          console.error(
            "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
            getComponentNameFromType(Component)
          ));
        "function" === typeof _instance.getDerivedStateFromProps &&
          console.error(
            "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
            state
          );
        "function" === typeof _instance.getDerivedStateFromError &&
          console.error(
            "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
            state
          );
        "function" === typeof Component.getSnapshotBeforeUpdate &&
          console.error(
            "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
            state
          );
        (lane = _instance.state) &&
          ("object" !== typeof lane || isArrayImpl(lane)) &&
          console.error("%s.state: must be set to an object or null", state);
        "function" === typeof _instance.getChildContext &&
          "object" !== typeof Component.childContextTypes &&
          console.error(
            "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
            state
          );
        _instance = workInProgress.stateNode;
        _instance.props = nextProps;
        _instance.state = workInProgress.memoizedState;
        _instance.refs = {};
        initializeUpdateQueue(workInProgress);
        state = Component.contextType;
        _instance.context =
          "object" === typeof state && null !== state
            ? readContext(state)
            : emptyContextObject;
        _instance.state === nextProps &&
          ((state = getComponentNameFromType(Component) || "Component"),
          didWarnAboutDirectlyAssigningPropsToState.has(state) ||
            (didWarnAboutDirectlyAssigningPropsToState.add(state),
            console.error(
              "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
              state
            )));
        workInProgress.mode & StrictLegacyMode &&
          ReactStrictModeWarnings.recordLegacyContextWarning(
            workInProgress,
            _instance
          );
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
          workInProgress,
          _instance
        );
        _instance.state = workInProgress.memoizedState;
        state = Component.getDerivedStateFromProps;
        "function" === typeof state &&
          (applyDerivedStateFromProps(
            workInProgress,
            Component,
            state,
            nextProps
          ),
          (_instance.state = workInProgress.memoizedState));
        "function" === typeof Component.getDerivedStateFromProps ||
          "function" === typeof _instance.getSnapshotBeforeUpdate ||
          ("function" !== typeof _instance.UNSAFE_componentWillMount &&
            "function" !== typeof _instance.componentWillMount) ||
          ((state = _instance.state),
          "function" === typeof _instance.componentWillMount &&
            _instance.componentWillMount(),
          "function" === typeof _instance.UNSAFE_componentWillMount &&
            _instance.UNSAFE_componentWillMount(),
          state !== _instance.state &&
            (console.error(
              "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
              getComponentNameFromFiber(workInProgress) || "Component"
            ),
            classComponentUpdater.enqueueReplaceState(
              _instance,
              _instance.state,
              null
            )),
          processUpdateQueue(workInProgress, nextProps, _instance, renderLanes),
          suspendIfUpdateReadFromEntangledAsyncAction(),
          (_instance.state = workInProgress.memoizedState));
        "function" === typeof _instance.componentDidMount &&
          (workInProgress.flags |= 4194308);
        (workInProgress.mode & StrictEffectsMode) !== NoMode &&
          (workInProgress.flags |= 134217728);
        _instance = !0;
      } else if (null === current) {
        _instance = workInProgress.stateNode;
        var unresolvedOldProps = workInProgress.memoizedProps;
        lane = resolveClassComponentProps(Component, unresolvedOldProps);
        _instance.props = lane;
        var oldContext = _instance.context;
        foundWillUpdateName = Component.contextType;
        state = emptyContextObject;
        "object" === typeof foundWillUpdateName &&
          null !== foundWillUpdateName &&
          (state = readContext(foundWillUpdateName));
        newApiName = Component.getDerivedStateFromProps;
        foundWillUpdateName =
          "function" === typeof newApiName ||
          "function" === typeof _instance.getSnapshotBeforeUpdate;
        unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
        foundWillUpdateName ||
          ("function" !== typeof _instance.UNSAFE_componentWillReceiveProps &&
            "function" !== typeof _instance.componentWillReceiveProps) ||
          ((unresolvedOldProps || oldContext !== state) &&
            callComponentWillReceiveProps(
              workInProgress,
              _instance,
              nextProps,
              state
            ));
        hasForceUpdate = !1;
        var oldState = workInProgress.memoizedState;
        _instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);
        suspendIfUpdateReadFromEntangledAsyncAction();
        oldContext = workInProgress.memoizedState;
        unresolvedOldProps || oldState !== oldContext || hasForceUpdate
          ? ("function" === typeof newApiName &&
              (applyDerivedStateFromProps(
                workInProgress,
                Component,
                newApiName,
                nextProps
              ),
              (oldContext = workInProgress.memoizedState)),
            (lane =
              hasForceUpdate ||
              checkShouldComponentUpdate(
                workInProgress,
                Component,
                lane,
                nextProps,
                oldState,
                oldContext,
                state
              ))
              ? (foundWillUpdateName ||
                  ("function" !== typeof _instance.UNSAFE_componentWillMount &&
                    "function" !== typeof _instance.componentWillMount) ||
                  ("function" === typeof _instance.componentWillMount &&
                    _instance.componentWillMount(),
                  "function" === typeof _instance.UNSAFE_componentWillMount &&
                    _instance.UNSAFE_componentWillMount()),
                "function" === typeof _instance.componentDidMount &&
                  (workInProgress.flags |= 4194308),
                (workInProgress.mode & StrictEffectsMode) !== NoMode &&
                  (workInProgress.flags |= 134217728))
              : ("function" === typeof _instance.componentDidMount &&
                  (workInProgress.flags |= 4194308),
                (workInProgress.mode & StrictEffectsMode) !== NoMode &&
                  (workInProgress.flags |= 134217728),
                (workInProgress.memoizedProps = nextProps),
                (workInProgress.memoizedState = oldContext)),
            (_instance.props = nextProps),
            (_instance.state = oldContext),
            (_instance.context = state),
            (_instance = lane))
          : ("function" === typeof _instance.componentDidMount &&
              (workInProgress.flags |= 4194308),
            (workInProgress.mode & StrictEffectsMode) !== NoMode &&
              (workInProgress.flags |= 134217728),
            (_instance = !1));
      } else {
        _instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        state = workInProgress.memoizedProps;
        foundWillUpdateName = resolveClassComponentProps(Component, state);
        _instance.props = foundWillUpdateName;
        newApiName = workInProgress.pendingProps;
        oldState = _instance.context;
        oldContext = Component.contextType;
        lane = emptyContextObject;
        "object" === typeof oldContext &&
          null !== oldContext &&
          (lane = readContext(oldContext));
        unresolvedOldProps = Component.getDerivedStateFromProps;
        (oldContext =
          "function" === typeof unresolvedOldProps ||
          "function" === typeof _instance.getSnapshotBeforeUpdate) ||
          ("function" !== typeof _instance.UNSAFE_componentWillReceiveProps &&
            "function" !== typeof _instance.componentWillReceiveProps) ||
          ((state !== newApiName || oldState !== lane) &&
            callComponentWillReceiveProps(
              workInProgress,
              _instance,
              nextProps,
              lane
            ));
        hasForceUpdate = !1;
        oldState = workInProgress.memoizedState;
        _instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);
        suspendIfUpdateReadFromEntangledAsyncAction();
        var newState = workInProgress.memoizedState;
        state !== newApiName ||
        oldState !== newState ||
        hasForceUpdate ||
        (null !== current &&
          null !== current.dependencies &&
          checkIfContextChanged(current.dependencies))
          ? ("function" === typeof unresolvedOldProps &&
              (applyDerivedStateFromProps(
                workInProgress,
                Component,
                unresolvedOldProps,
                nextProps
              ),
              (newState = workInProgress.memoizedState)),
            (foundWillUpdateName =
              hasForceUpdate ||
              checkShouldComponentUpdate(
                workInProgress,
                Component,
                foundWillUpdateName,
                nextProps,
                oldState,
                newState,
                lane
              ) ||
              (null !== current &&
                null !== current.dependencies &&
                checkIfContextChanged(current.dependencies)))
              ? (oldContext ||
                  ("function" !== typeof _instance.UNSAFE_componentWillUpdate &&
                    "function" !== typeof _instance.componentWillUpdate) ||
                  ("function" === typeof _instance.componentWillUpdate &&
                    _instance.componentWillUpdate(nextProps, newState, lane),
                  "function" === typeof _instance.UNSAFE_componentWillUpdate &&
                    _instance.UNSAFE_componentWillUpdate(
                      nextProps,
                      newState,
                      lane
                    )),
                "function" === typeof _instance.componentDidUpdate &&
                  (workInProgress.flags |= 4),
                "function" === typeof _instance.getSnapshotBeforeUpdate &&
                  (workInProgress.flags |= 1024))
              : ("function" !== typeof _instance.componentDidUpdate ||
                  (state === current.memoizedProps &&
                    oldState === current.memoizedState) ||
                  (workInProgress.flags |= 4),
                "function" !== typeof _instance.getSnapshotBeforeUpdate ||
                  (state === current.memoizedProps &&
                    oldState === current.memoizedState) ||
                  (workInProgress.flags |= 1024),
                (workInProgress.memoizedProps = nextProps),
                (workInProgress.memoizedState = newState)),
            (_instance.props = nextProps),
            (_instance.state = newState),
            (_instance.context = lane),
            (_instance = foundWillUpdateName))
          : ("function" !== typeof _instance.componentDidUpdate ||
              (state === current.memoizedProps &&
                oldState === current.memoizedState) ||
              (workInProgress.flags |= 4),
            "function" !== typeof _instance.getSnapshotBeforeUpdate ||
              (state === current.memoizedProps &&
                oldState === current.memoizedState) ||
              (workInProgress.flags |= 1024),
            (_instance = !1));
      }
      lane = _instance;
      markRef(current, workInProgress);
      state = 0 !== (workInProgress.flags & 128);
      if (lane || state) {
        lane = workInProgress.stateNode;
        setCurrentFiber(workInProgress);
        if (state && "function" !== typeof Component.getDerivedStateFromError)
          (Component = null), (profilerStartTime = -1);
        else {
          markComponentRenderStarted(workInProgress);
          Component = callRenderInDEV(lane);
          if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              callRenderInDEV(lane);
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          markComponentRenderStopped();
        }
        workInProgress.flags |= 1;
        null !== current && state
          ? ((workInProgress.child = reconcileChildFibers(
              workInProgress,
              current.child,
              null,
              renderLanes
            )),
            (workInProgress.child = reconcileChildFibers(
              workInProgress,
              null,
              Component,
              renderLanes
            )))
          : reconcileChildren(current, workInProgress, Component, renderLanes);
        workInProgress.memoizedState = lane.state;
        current = workInProgress.child;
      } else
        current = bailoutOnAlreadyFinishedWork(
          current,
          workInProgress,
          renderLanes
        );
      renderLanes = workInProgress.stateNode;
      _instance &&
        renderLanes.props !== nextProps &&
        (didWarnAboutReassigningProps ||
          console.error(
            "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
            getComponentNameFromFiber(workInProgress) || "a component"
          ),
        (didWarnAboutReassigningProps = !0));
      return current;
    }
    function mountHostRootWithoutHydrating(
      current,
      workInProgress,
      nextChildren,
      renderLanes
    ) {
      resetHydrationState();
      workInProgress.flags |= 256;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
      Component &&
        Component.childContextTypes &&
        console.error(
          "childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",
          Component.displayName || Component.name || "Component"
        );
      "function" === typeof Component.getDerivedStateFromProps &&
        ((workInProgress = getComponentNameFromType(Component) || "Unknown"),
        didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] ||
          (console.error(
            "%s: Function components do not support getDerivedStateFromProps.",
            workInProgress
          ),
          (didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] =
            !0)));
      "object" === typeof Component.contextType &&
        null !== Component.contextType &&
        ((Component = getComponentNameFromType(Component) || "Unknown"),
        didWarnAboutContextTypeOnFunctionComponent[Component] ||
          (console.error(
            "%s: Function components do not support contextType.",
            Component
          ),
          (didWarnAboutContextTypeOnFunctionComponent[Component] = !0)));
    }
    function mountSuspenseOffscreenState(renderLanes) {
      return { baseLanes: renderLanes, cachePool: getSuspendedCache() };
    }
    function getRemainingWorkInPrimaryTree(
      current,
      primaryTreeDidDefer,
      renderLanes
    ) {
      current = null !== current ? current.childLanes & ~renderLanes : 0;
      primaryTreeDidDefer && (current |= workInProgressDeferredLane);
      return current;
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
      var JSCompiler_object_inline_digest_2451;
      var JSCompiler_object_inline_stack_2452 = workInProgress.pendingProps;
      shouldSuspendImpl(workInProgress) && (workInProgress.flags |= 128);
      var JSCompiler_object_inline_componentStack_2453 = !1;
      var didSuspend = 0 !== (workInProgress.flags & 128);
      (JSCompiler_object_inline_digest_2451 = didSuspend) ||
        (JSCompiler_object_inline_digest_2451 =
          null !== current && null === current.memoizedState
            ? !1
            : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));
      JSCompiler_object_inline_digest_2451 &&
        ((JSCompiler_object_inline_componentStack_2453 = !0),
        (workInProgress.flags &= -129));
      JSCompiler_object_inline_digest_2451 = 0 !== (workInProgress.flags & 32);
      workInProgress.flags &= -33;
      if (null === current) {
        if (isHydrating) {
          JSCompiler_object_inline_componentStack_2453
            ? pushPrimaryTreeSuspenseHandler(workInProgress)
            : reuseSuspenseHandlerOnStack(workInProgress);
          if (isHydrating) {
            var JSCompiler_object_inline_message_2450 = nextHydratableInstance;
            var JSCompiler_temp;
            if (!(JSCompiler_temp = !JSCompiler_object_inline_message_2450)) {
              c: {
                var instance = JSCompiler_object_inline_message_2450;
                for (
                  JSCompiler_temp = rootOrSingletonContext;
                  8 !== instance.nodeType;

                ) {
                  if (!JSCompiler_temp) {
                    JSCompiler_temp = null;
                    break c;
                  }
                  instance = getNextHydratable(instance.nextSibling);
                  if (null === instance) {
                    JSCompiler_temp = null;
                    break c;
                  }
                }
                JSCompiler_temp = instance;
              }
              null !== JSCompiler_temp
                ? (warnIfNotHydrating(),
                  (workInProgress.memoizedState = {
                    dehydrated: JSCompiler_temp,
                    treeContext:
                      null !== treeContextProvider
                        ? { id: treeContextId, overflow: treeContextOverflow }
                        : null,
                    retryLane: 536870912,
                    hydrationErrors: null
                  }),
                  (instance = createFiber(18, null, null, NoMode)),
                  (instance.stateNode = JSCompiler_temp),
                  (instance.return = workInProgress),
                  (workInProgress.child = instance),
                  (hydrationParentFiber = workInProgress),
                  (nextHydratableInstance = null),
                  (JSCompiler_temp = !0))
                : (JSCompiler_temp = !1);
              JSCompiler_temp = !JSCompiler_temp;
            }
            JSCompiler_temp &&
              (warnNonHydratedInstance(
                workInProgress,
                JSCompiler_object_inline_message_2450
              ),
              throwOnHydrationMismatch(workInProgress));
          }
          JSCompiler_object_inline_message_2450 = workInProgress.memoizedState;
          if (
            null !== JSCompiler_object_inline_message_2450 &&
            ((JSCompiler_object_inline_message_2450 =
              JSCompiler_object_inline_message_2450.dehydrated),
            null !== JSCompiler_object_inline_message_2450)
          )
            return (
              isSuspenseInstanceFallback(JSCompiler_object_inline_message_2450)
                ? (workInProgress.lanes = 32)
                : (workInProgress.lanes = 536870912),
              null
            );
          popSuspenseHandler(workInProgress);
        }
        JSCompiler_object_inline_message_2450 =
          JSCompiler_object_inline_stack_2452.children;
        JSCompiler_object_inline_stack_2452 =
          JSCompiler_object_inline_stack_2452.fallback;
        if (JSCompiler_object_inline_componentStack_2453)
          return (
            reuseSuspenseHandlerOnStack(workInProgress),
            (JSCompiler_object_inline_componentStack_2453 =
              workInProgress.mode),
            (JSCompiler_object_inline_message_2450 =
              mountWorkInProgressOffscreenFiber(
                {
                  mode: "hidden",
                  children: JSCompiler_object_inline_message_2450
                },
                JSCompiler_object_inline_componentStack_2453
              )),
            (JSCompiler_object_inline_stack_2452 = createFiberFromFragment(
              JSCompiler_object_inline_stack_2452,
              JSCompiler_object_inline_componentStack_2453,
              renderLanes,
              null
            )),
            (JSCompiler_object_inline_message_2450.return = workInProgress),
            (JSCompiler_object_inline_stack_2452.return = workInProgress),
            (JSCompiler_object_inline_message_2450.sibling =
              JSCompiler_object_inline_stack_2452),
            (workInProgress.child = JSCompiler_object_inline_message_2450),
            (JSCompiler_object_inline_componentStack_2453 =
              workInProgress.child),
            (JSCompiler_object_inline_componentStack_2453.memoizedState =
              mountSuspenseOffscreenState(renderLanes)),
            (JSCompiler_object_inline_componentStack_2453.childLanes =
              getRemainingWorkInPrimaryTree(
                current,
                JSCompiler_object_inline_digest_2451,
                renderLanes
              )),
            (workInProgress.memoizedState = SUSPENDED_MARKER),
            JSCompiler_object_inline_stack_2452
          );
        pushPrimaryTreeSuspenseHandler(workInProgress);
        return mountSuspensePrimaryChildren(
          workInProgress,
          JSCompiler_object_inline_message_2450
        );
      }
      var prevState = current.memoizedState;
      if (
        null !== prevState &&
        ((JSCompiler_object_inline_message_2450 = prevState.dehydrated),
        null !== JSCompiler_object_inline_message_2450)
      ) {
        if (didSuspend)
          workInProgress.flags & 256
            ? (pushPrimaryTreeSuspenseHandler(workInProgress),
              (workInProgress.flags &= -257),
              (workInProgress = retrySuspenseComponentWithoutHydrating(
                current,
                workInProgress,
                renderLanes
              )))
            : null !== workInProgress.memoizedState
              ? (reuseSuspenseHandlerOnStack(workInProgress),
                (workInProgress.child = current.child),
                (workInProgress.flags |= 128),
                (workInProgress = null))
              : (reuseSuspenseHandlerOnStack(workInProgress),
                (JSCompiler_object_inline_componentStack_2453 =
                  JSCompiler_object_inline_stack_2452.fallback),
                (JSCompiler_object_inline_message_2450 = workInProgress.mode),
                (JSCompiler_object_inline_stack_2452 =
                  mountWorkInProgressOffscreenFiber(
                    {
                      mode: "visible",
                      children: JSCompiler_object_inline_stack_2452.children
                    },
                    JSCompiler_object_inline_message_2450
                  )),
                (JSCompiler_object_inline_componentStack_2453 =
                  createFiberFromFragment(
                    JSCompiler_object_inline_componentStack_2453,
                    JSCompiler_object_inline_message_2450,
                    renderLanes,
                    null
                  )),
                (JSCompiler_object_inline_componentStack_2453.flags |= 2),
                (JSCompiler_object_inline_stack_2452.return = workInProgress),
                (JSCompiler_object_inline_componentStack_2453.return =
                  workInProgress),
                (JSCompiler_object_inline_stack_2452.sibling =
                  JSCompiler_object_inline_componentStack_2453),
                (workInProgress.child = JSCompiler_object_inline_stack_2452),
                reconcileChildFibers(
                  workInProgress,
                  current.child,
                  null,
                  renderLanes
                ),
                (JSCompiler_object_inline_stack_2452 = workInProgress.child),
                (JSCompiler_object_inline_stack_2452.memoizedState =
                  mountSuspenseOffscreenState(renderLanes)),
                (JSCompiler_object_inline_stack_2452.childLanes =
                  getRemainingWorkInPrimaryTree(
                    current,
                    JSCompiler_object_inline_digest_2451,
                    renderLanes
                  )),
                (workInProgress.memoizedState = SUSPENDED_MARKER),
                (workInProgress =
                  JSCompiler_object_inline_componentStack_2453));
        else if (
          (pushPrimaryTreeSuspenseHandler(workInProgress),
          isHydrating &&
            console.error(
              "We should not be hydrating here. This is a bug in React. Please file a bug."
            ),
          isSuspenseInstanceFallback(JSCompiler_object_inline_message_2450))
        ) {
          JSCompiler_object_inline_digest_2451 =
            JSCompiler_object_inline_message_2450.nextSibling &&
            JSCompiler_object_inline_message_2450.nextSibling.dataset;
          if (JSCompiler_object_inline_digest_2451) {
            JSCompiler_temp = JSCompiler_object_inline_digest_2451.dgst;
            var message = JSCompiler_object_inline_digest_2451.msg;
            instance = JSCompiler_object_inline_digest_2451.stck;
            var componentStack = JSCompiler_object_inline_digest_2451.cstck;
          }
          JSCompiler_object_inline_message_2450 = message;
          JSCompiler_object_inline_digest_2451 = JSCompiler_temp;
          JSCompiler_object_inline_stack_2452 = instance;
          JSCompiler_temp = JSCompiler_object_inline_componentStack_2453 =
            componentStack;
          JSCompiler_object_inline_componentStack_2453 =
            JSCompiler_object_inline_message_2450
              ? Error(JSCompiler_object_inline_message_2450)
              : Error(
                  "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
                );
          JSCompiler_object_inline_componentStack_2453.stack =
            JSCompiler_object_inline_stack_2452 || "";
          JSCompiler_object_inline_componentStack_2453.digest =
            JSCompiler_object_inline_digest_2451;
          JSCompiler_object_inline_digest_2451 =
            void 0 === JSCompiler_temp ? null : JSCompiler_temp;
          JSCompiler_object_inline_stack_2452 = {
            value: JSCompiler_object_inline_componentStack_2453,
            source: null,
            stack: JSCompiler_object_inline_digest_2451
          };
          "string" === typeof JSCompiler_object_inline_digest_2451 &&
            CapturedStacks.set(
              JSCompiler_object_inline_componentStack_2453,
              JSCompiler_object_inline_stack_2452
            );
          queueHydrationError(JSCompiler_object_inline_stack_2452);
          workInProgress = retrySuspenseComponentWithoutHydrating(
            current,
            workInProgress,
            renderLanes
          );
        } else if (
          (didReceiveUpdate ||
            propagateParentContextChanges(
              current,
              workInProgress,
              renderLanes,
              !1
            ),
          (JSCompiler_object_inline_digest_2451 =
            0 !== (renderLanes & current.childLanes)),
          didReceiveUpdate || JSCompiler_object_inline_digest_2451)
        ) {
          JSCompiler_object_inline_digest_2451 = workInProgressRoot;
          if (
            null !== JSCompiler_object_inline_digest_2451 &&
            ((JSCompiler_object_inline_stack_2452 = renderLanes & -renderLanes),
            (JSCompiler_object_inline_stack_2452 =
              0 !== (JSCompiler_object_inline_stack_2452 & 42)
                ? 1
                : getBumpedLaneForHydrationByLane(
                    JSCompiler_object_inline_stack_2452
                  )),
            (JSCompiler_object_inline_stack_2452 =
              0 !==
              (JSCompiler_object_inline_stack_2452 &
                (JSCompiler_object_inline_digest_2451.suspendedLanes |
                  renderLanes))
                ? 0
                : JSCompiler_object_inline_stack_2452),
            0 !== JSCompiler_object_inline_stack_2452 &&
              JSCompiler_object_inline_stack_2452 !== prevState.retryLane)
          )
            throw (
              ((prevState.retryLane = JSCompiler_object_inline_stack_2452),
              enqueueConcurrentRenderForLane(
                current,
                JSCompiler_object_inline_stack_2452
              ),
              scheduleUpdateOnFiber(
                JSCompiler_object_inline_digest_2451,
                current,
                JSCompiler_object_inline_stack_2452
              ),
              SelectiveHydrationException)
            );
          JSCompiler_object_inline_message_2450.data ===
            SUSPENSE_PENDING_START_DATA || renderDidSuspendDelayIfPossible();
          workInProgress = retrySuspenseComponentWithoutHydrating(
            current,
            workInProgress,
            renderLanes
          );
        } else
          JSCompiler_object_inline_message_2450.data ===
          SUSPENSE_PENDING_START_DATA
            ? ((workInProgress.flags |= 192),
              (workInProgress.child = current.child),
              (workInProgress = null))
            : ((current = prevState.treeContext),
              (nextHydratableInstance = getNextHydratable(
                JSCompiler_object_inline_message_2450.nextSibling
              )),
              (hydrationParentFiber = workInProgress),
              (isHydrating = !0),
              (hydrationErrors = null),
              (didSuspendOrErrorDEV = !1),
              (hydrationDiffRootDEV = null),
              (rootOrSingletonContext = !1),
              null !== current &&
                (warnIfNotHydrating(),
                (idStack[idStackIndex++] = treeContextId),
                (idStack[idStackIndex++] = treeContextOverflow),
                (idStack[idStackIndex++] = treeContextProvider),
                (treeContextId = current.id),
                (treeContextOverflow = current.overflow),
                (treeContextProvider = workInProgress)),
              (workInProgress = mountSuspensePrimaryChildren(
                workInProgress,
                JSCompiler_object_inline_stack_2452.children
              )),
              (workInProgress.flags |= 4096));
        return workInProgress;
      }
      if (JSCompiler_object_inline_componentStack_2453)
        return (
          reuseSuspenseHandlerOnStack(workInProgress),
          (JSCompiler_object_inline_componentStack_2453 =
            JSCompiler_object_inline_stack_2452.fallback),
          (JSCompiler_object_inline_message_2450 = workInProgress.mode),
          (JSCompiler_temp = current.child),
          (instance = JSCompiler_temp.sibling),
          (JSCompiler_object_inline_stack_2452 = createWorkInProgress(
            JSCompiler_temp,
            {
              mode: "hidden",
              children: JSCompiler_object_inline_stack_2452.children
            }
          )),
          (JSCompiler_object_inline_stack_2452.subtreeFlags =
            JSCompiler_temp.subtreeFlags & 65011712),
          null !== instance
            ? (JSCompiler_object_inline_componentStack_2453 =
                createWorkInProgress(
                  instance,
                  JSCompiler_object_inline_componentStack_2453
                ))
            : ((JSCompiler_object_inline_componentStack_2453 =
                createFiberFromFragment(
                  JSCompiler_object_inline_componentStack_2453,
                  JSCompiler_object_inline_message_2450,
                  renderLanes,
                  null
                )),
              (JSCompiler_object_inline_componentStack_2453.flags |= 2)),
          (JSCompiler_object_inline_componentStack_2453.return =
            workInProgress),
          (JSCompiler_object_inline_stack_2452.return = workInProgress),
          (JSCompiler_object_inline_stack_2452.sibling =
            JSCompiler_object_inline_componentStack_2453),
          (workInProgress.child = JSCompiler_object_inline_stack_2452),
          (JSCompiler_object_inline_stack_2452 =
            JSCompiler_object_inline_componentStack_2453),
          (JSCompiler_object_inline_componentStack_2453 = workInProgress.child),
          (JSCompiler_object_inline_message_2450 = current.child.memoizedState),
          null === JSCompiler_object_inline_message_2450
            ? (JSCompiler_object_inline_message_2450 =
                mountSuspenseOffscreenState(renderLanes))
            : ((JSCompiler_temp =
                JSCompiler_object_inline_message_2450.cachePool),
              null !== JSCompiler_temp
                ? ((instance = CacheContext._currentValue),
                  (JSCompiler_temp =
                    JSCompiler_temp.parent !== instance
                      ? { parent: instance, pool: instance }
                      : JSCompiler_temp))
                : (JSCompiler_temp = getSuspendedCache()),
              (JSCompiler_object_inline_message_2450 = {
                baseLanes:
                  JSCompiler_object_inline_message_2450.baseLanes | renderLanes,
                cachePool: JSCompiler_temp
              })),
          (JSCompiler_object_inline_componentStack_2453.memoizedState =
            JSCompiler_object_inline_message_2450),
          (JSCompiler_object_inline_componentStack_2453.childLanes =
            getRemainingWorkInPrimaryTree(
              current,
              JSCompiler_object_inline_digest_2451,
              renderLanes
            )),
          (workInProgress.memoizedState = SUSPENDED_MARKER),
          JSCompiler_object_inline_stack_2452
        );
      pushPrimaryTreeSuspenseHandler(workInProgress);
      renderLanes = current.child;
      current = renderLanes.sibling;
      renderLanes = createWorkInProgress(renderLanes, {
        mode: "visible",
        children: JSCompiler_object_inline_stack_2452.children
      });
      renderLanes.return = workInProgress;
      renderLanes.sibling = null;
      null !== current &&
        ((JSCompiler_object_inline_digest_2451 = workInProgress.deletions),
        null === JSCompiler_object_inline_digest_2451
          ? ((workInProgress.deletions = [current]),
            (workInProgress.flags |= 16))
          : JSCompiler_object_inline_digest_2451.push(current));
      workInProgress.child = renderLanes;
      workInProgress.memoizedState = null;
      return renderLanes;
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
      primaryChildren = mountWorkInProgressOffscreenFiber(
        { mode: "visible", children: primaryChildren },
        workInProgress.mode
      );
      primaryChildren.return = workInProgress;
      return (workInProgress.child = primaryChildren);
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
      offscreenProps = createFiber(22, offscreenProps, null, mode);
      offscreenProps.lanes = 0;
      offscreenProps.stateNode = {
        _visibility: OffscreenVisible,
        _pendingMarkers: null,
        _retryCache: null,
        _transitions: null
      };
      return offscreenProps;
    }
    function retrySuspenseComponentWithoutHydrating(
      current,
      workInProgress,
      renderLanes
    ) {
      reconcileChildFibers(workInProgress, current.child, null, renderLanes);
      current = mountSuspensePrimaryChildren(
        workInProgress,
        workInProgress.pendingProps.children
      );
      current.flags |= 2;
      workInProgress.memoizedState = null;
      return current;
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
      fiber.lanes |= renderLanes;
      var alternate = fiber.alternate;
      null !== alternate && (alternate.lanes |= renderLanes);
      scheduleContextWorkOnParentPath(
        fiber.return,
        renderLanes,
        propagationRoot
      );
    }
    function validateSuspenseListNestedChild(childSlot, index) {
      var isAnArray = isArrayImpl(childSlot);
      childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
      return isAnArray || childSlot
        ? ((isAnArray = isAnArray ? "array" : "iterable"),
          console.error(
            "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
            isAnArray,
            index,
            isAnArray
          ),
          !1)
        : !0;
    }
    function initSuspenseListRenderState(
      workInProgress,
      isBackwards,
      tail,
      lastContentRow,
      tailMode
    ) {
      var renderState = workInProgress.memoizedState;
      null === renderState
        ? (workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode
          })
        : ((renderState.isBackwards = isBackwards),
          (renderState.rendering = null),
          (renderState.renderingStartTime = 0),
          (renderState.last = lastContentRow),
          (renderState.tail = tail),
          (renderState.tailMode = tailMode));
    }
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
      nextProps = nextProps.children;
      if (
        void 0 !== revealOrder &&
        "forwards" !== revealOrder &&
        "backwards" !== revealOrder &&
        "together" !== revealOrder &&
        !didWarnAboutRevealOrder[revealOrder]
      )
        if (
          ((didWarnAboutRevealOrder[revealOrder] = !0),
          "string" === typeof revealOrder)
        )
          switch (revealOrder.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards":
              console.error(
                '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
                revealOrder,
                revealOrder.toLowerCase()
              );
              break;
            case "forward":
            case "backward":
              console.error(
                '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
                revealOrder,
                revealOrder.toLowerCase()
              );
              break;
            default:
              console.error(
                '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                revealOrder
              );
          }
        else
          console.error(
            '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
            revealOrder
          );
      void 0 === tailMode ||
        didWarnAboutTailOptions[tailMode] ||
        ("collapsed" !== tailMode && "hidden" !== tailMode
          ? ((didWarnAboutTailOptions[tailMode] = !0),
            console.error(
              '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
              tailMode
            ))
          : "forwards" !== revealOrder &&
            "backwards" !== revealOrder &&
            ((didWarnAboutTailOptions[tailMode] = !0),
            console.error(
              '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
              tailMode
            )));
      a: if (
        ("forwards" === revealOrder || "backwards" === revealOrder) &&
        void 0 !== nextProps &&
        null !== nextProps &&
        !1 !== nextProps
      )
        if (isArrayImpl(nextProps))
          for (var i = 0; i < nextProps.length; i++) {
            if (!validateSuspenseListNestedChild(nextProps[i], i)) break a;
          }
        else if (((i = getIteratorFn(nextProps)), "function" === typeof i)) {
          if ((i = i.call(nextProps)))
            for (var step = i.next(), _i = 0; !step.done; step = i.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) break a;
              _i++;
            }
        } else
          console.error(
            'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
            revealOrder
          );
      reconcileChildren(current, workInProgress, nextProps, renderLanes);
      nextProps = suspenseStackCursor.current;
      if (0 !== (nextProps & ForceSuspenseFallback))
        (nextProps =
          (nextProps & SubtreeSuspenseContextMask) | ForceSuspenseFallback),
          (workInProgress.flags |= 128);
      else {
        if (null !== current && 0 !== (current.flags & 128))
          a: for (current = workInProgress.child; null !== current; ) {
            if (13 === current.tag)
              null !== current.memoizedState &&
                scheduleSuspenseWorkOnFiber(
                  current,
                  renderLanes,
                  workInProgress
                );
            else if (19 === current.tag)
              scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (null !== current.child) {
              current.child.return = current;
              current = current.child;
              continue;
            }
            if (current === workInProgress) break a;
            for (; null === current.sibling; ) {
              if (null === current.return || current.return === workInProgress)
                break a;
              current = current.return;
            }
            current.sibling.return = current.return;
            current = current.sibling;
          }
        nextProps &= SubtreeSuspenseContextMask;
      }
      push(suspenseStackCursor, nextProps, workInProgress);
      switch (revealOrder) {
        case "forwards":
          renderLanes = workInProgress.child;
          for (revealOrder = null; null !== renderLanes; )
            (current = renderLanes.alternate),
              null !== current &&
                null === findFirstSuspended(current) &&
                (revealOrder = renderLanes),
              (renderLanes = renderLanes.sibling);
          renderLanes = revealOrder;
          null === renderLanes
            ? ((revealOrder = workInProgress.child),
              (workInProgress.child = null))
            : ((revealOrder = renderLanes.sibling),
              (renderLanes.sibling = null));
          initSuspenseListRenderState(
            workInProgress,
            !1,
            revealOrder,
            renderLanes,
            tailMode
          );
          break;
        case "backwards":
          renderLanes = null;
          revealOrder = workInProgress.child;
          for (workInProgress.child = null; null !== revealOrder; ) {
            current = revealOrder.alternate;
            if (null !== current && null === findFirstSuspended(current)) {
              workInProgress.child = revealOrder;
              break;
            }
            current = revealOrder.sibling;
            revealOrder.sibling = renderLanes;
            renderLanes = revealOrder;
            revealOrder = current;
          }
          initSuspenseListRenderState(
            workInProgress,
            !0,
            renderLanes,
            null,
            tailMode
          );
          break;
        case "together":
          initSuspenseListRenderState(workInProgress, !1, null, null, void 0);
          break;
        default:
          workInProgress.memoizedState = null;
      }
      return workInProgress.child;
    }
    function bailoutOnAlreadyFinishedWork(
      current,
      workInProgress,
      renderLanes
    ) {
      null !== current && (workInProgress.dependencies = current.dependencies);
      profilerStartTime = -1;
      workInProgressRootSkippedLanes |= workInProgress.lanes;
      if (0 === (renderLanes & workInProgress.childLanes))
        if (null !== current) {
          if (
            (propagateParentContextChanges(
              current,
              workInProgress,
              renderLanes,
              !1
            ),
            0 === (renderLanes & workInProgress.childLanes))
          )
            return null;
        } else return null;
      if (null !== current && workInProgress.child !== current.child)
        throw Error("Resuming work not yet implemented.");
      if (null !== workInProgress.child) {
        current = workInProgress.child;
        renderLanes = createWorkInProgress(current, current.pendingProps);
        workInProgress.child = renderLanes;
        for (renderLanes.return = workInProgress; null !== current.sibling; )
          (current = current.sibling),
            (renderLanes = renderLanes.sibling =
              createWorkInProgress(current, current.pendingProps)),
            (renderLanes.return = workInProgress);
        renderLanes.sibling = null;
      }
      return workInProgress.child;
    }
    function checkScheduledUpdateOrContext(current, renderLanes) {
      if (0 !== (current.lanes & renderLanes)) return !0;
      current = current.dependencies;
      return null !== current && checkIfContextChanged(current) ? !0 : !1;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(
      current,
      workInProgress,
      renderLanes
    ) {
      switch (workInProgress.tag) {
        case 3:
          pushHostContainer(
            workInProgress,
            workInProgress.stateNode.containerInfo
          );
          pushProvider(
            workInProgress,
            CacheContext,
            current.memoizedState.cache
          );
          resetHydrationState();
          break;
        case 27:
        case 5:
          pushHostContext(workInProgress);
          break;
        case 4:
          pushHostContainer(
            workInProgress,
            workInProgress.stateNode.containerInfo
          );
          break;
        case 10:
          pushProvider(
            workInProgress,
            workInProgress.type,
            workInProgress.memoizedProps.value
          );
          break;
        case 12:
          0 !== (renderLanes & workInProgress.childLanes) &&
            (workInProgress.flags |= 4);
          workInProgress.flags |= 2048;
          var stateNode = workInProgress.stateNode;
          stateNode.effectDuration = -0;
          stateNode.passiveEffectDuration = -0;
          break;
        case 13:
          stateNode = workInProgress.memoizedState;
          if (null !== stateNode) {
            if (null !== stateNode.dehydrated)
              return (
                pushPrimaryTreeSuspenseHandler(workInProgress),
                (workInProgress.flags |= 128),
                null
              );
            if (0 !== (renderLanes & workInProgress.child.childLanes))
              return updateSuspenseComponent(
                current,
                workInProgress,
                renderLanes
              );
            pushPrimaryTreeSuspenseHandler(workInProgress);
            current = bailoutOnAlreadyFinishedWork(
              current,
              workInProgress,
              renderLanes
            );
            return null !== current ? current.sibling : null;
          }
          pushPrimaryTreeSuspenseHandler(workInProgress);
          break;
        case 19:
          var didSuspendBefore = 0 !== (current.flags & 128);
          stateNode = 0 !== (renderLanes & workInProgress.childLanes);
          stateNode ||
            (propagateParentContextChanges(
              current,
              workInProgress,
              renderLanes,
              !1
            ),
            (stateNode = 0 !== (renderLanes & workInProgress.childLanes)));
          if (didSuspendBefore) {
            if (stateNode)
              return updateSuspenseListComponent(
                current,
                workInProgress,
                renderLanes
              );
            workInProgress.flags |= 128;
          }
          didSuspendBefore = workInProgress.memoizedState;
          null !== didSuspendBefore &&
            ((didSuspendBefore.rendering = null),
            (didSuspendBefore.tail = null),
            (didSuspendBefore.lastEffect = null));
          push(
            suspenseStackCursor,
            suspenseStackCursor.current,
            workInProgress
          );
          if (stateNode) break;
          else return null;
        case 22:
        case 23:
          return (
            (workInProgress.lanes = 0),
            updateOffscreenComponent(current, workInProgress, renderLanes)
          );
        case 24:
          pushProvider(
            workInProgress,
            CacheContext,
            current.memoizedState.cache
          );
      }
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    function beginWork(current, workInProgress, renderLanes) {
      if (workInProgress._debugNeedsRemount && null !== current) {
        renderLanes = createFiberFromTypeAndProps(
          workInProgress.type,
          workInProgress.key,
          workInProgress.pendingProps,
          workInProgress._debugOwner || null,
          workInProgress.mode,
          workInProgress.lanes
        );
        renderLanes._debugStack = workInProgress._debugStack;
        renderLanes._debugTask = workInProgress._debugTask;
        var returnFiber = workInProgress.return;
        if (null === returnFiber) throw Error("Cannot swap the root fiber.");
        current.alternate = null;
        workInProgress.alternate = null;
        renderLanes.index = workInProgress.index;
        renderLanes.sibling = workInProgress.sibling;
        renderLanes.return = workInProgress.return;
        renderLanes.ref = workInProgress.ref;
        renderLanes._debugInfo = workInProgress._debugInfo;
        if (workInProgress === returnFiber.child)
          returnFiber.child = renderLanes;
        else {
          var prevSibling = returnFiber.child;
          if (null === prevSibling)
            throw Error("Expected parent to have a child.");
          for (; prevSibling.sibling !== workInProgress; )
            if (((prevSibling = prevSibling.sibling), null === prevSibling))
              throw Error("Expected to find the previous sibling.");
          prevSibling.sibling = renderLanes;
        }
        workInProgress = returnFiber.deletions;
        null === workInProgress
          ? ((returnFiber.deletions = [current]), (returnFiber.flags |= 16))
          : workInProgress.push(current);
        renderLanes.flags |= 2;
        return renderLanes;
      }
      if (null !== current)
        if (
          current.memoizedProps !== workInProgress.pendingProps ||
          workInProgress.type !== current.type
        )
          didReceiveUpdate = !0;
        else {
          if (
            !checkScheduledUpdateOrContext(current, renderLanes) &&
            0 === (workInProgress.flags & 128)
          )
            return (
              (didReceiveUpdate = !1),
              attemptEarlyBailoutIfNoScheduledUpdate(
                current,
                workInProgress,
                renderLanes
              )
            );
          didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;
        }
      else {
        didReceiveUpdate = !1;
        if ((returnFiber = isHydrating))
          warnIfNotHydrating(),
            (returnFiber = 0 !== (workInProgress.flags & 1048576));
        returnFiber &&
          ((returnFiber = workInProgress.index),
          warnIfNotHydrating(),
          pushTreeId(workInProgress, treeForkCount, returnFiber));
      }
      workInProgress.lanes = 0;
      switch (workInProgress.tag) {
        case 16:
          a: if (
            ((returnFiber = workInProgress.pendingProps),
            (current = callLazyInitInDEV(workInProgress.elementType)),
            (workInProgress.type = current),
            "function" === typeof current)
          )
            shouldConstruct(current)
              ? ((returnFiber = resolveClassComponentProps(
                  current,
                  returnFiber
                )),
                (workInProgress.tag = 1),
                (workInProgress.type = current =
                  resolveFunctionForHotReloading(current)),
                (workInProgress = updateClassComponent(
                  null,
                  workInProgress,
                  current,
                  returnFiber,
                  renderLanes
                )))
              : ((workInProgress.tag = 0),
                validateFunctionComponentInDev(workInProgress, current),
                (workInProgress.type = current =
                  resolveFunctionForHotReloading(current)),
                (workInProgress = updateFunctionComponent(
                  null,
                  workInProgress,
                  current,
                  returnFiber,
                  renderLanes
                )));
          else {
            if (void 0 !== current && null !== current)
              if (
                ((prevSibling = current.$$typeof),
                prevSibling === REACT_FORWARD_REF_TYPE)
              ) {
                workInProgress.tag = 11;
                workInProgress.type = current =
                  resolveForwardRefForHotReloading(current);
                workInProgress = updateForwardRef(
                  null,
                  workInProgress,
                  current,
                  returnFiber,
                  renderLanes
                );
                break a;
              } else if (prevSibling === REACT_MEMO_TYPE) {
                workInProgress.tag = 14;
                workInProgress = updateMemoComponent(
                  null,
                  workInProgress,
                  current,
                  returnFiber,
                  renderLanes
                );
                break a;
              }
            workInProgress = "";
            null !== current &&
              "object" === typeof current &&
              current.$$typeof === REACT_LAZY_TYPE &&
              (workInProgress =
                " Did you wrap a component in React.lazy() more than once?");
            current = getComponentNameFromType(current) || current;
            throw Error(
              "Element type is invalid. Received a promise that resolves to: " +
                current +
                ". Lazy element type must resolve to a class or function." +
                workInProgress
            );
          }
          return workInProgress;
        case 0:
          return updateFunctionComponent(
            current,
            workInProgress,
            workInProgress.type,
            workInProgress.pendingProps,
            renderLanes
          );
        case 1:
          return (
            (returnFiber = workInProgress.type),
            (prevSibling = resolveClassComponentProps(
              returnFiber,
              workInProgress.pendingProps
            )),
            updateClassComponent(
              current,
              workInProgress,
              returnFiber,
              prevSibling,
              renderLanes
            )
          );
        case 3:
          a: {
            pushHostContainer(
              workInProgress,
              workInProgress.stateNode.containerInfo
            );
            if (null === current)
              throw Error(
                "Should have a current fiber. This is a bug in React."
              );
            returnFiber = workInProgress.pendingProps;
            var prevState = workInProgress.memoizedState;
            prevSibling = prevState.element;
            cloneUpdateQueue(current, workInProgress);
            processUpdateQueue(workInProgress, returnFiber, null, renderLanes);
            var nextState = workInProgress.memoizedState;
            returnFiber = nextState.cache;
            pushProvider(workInProgress, CacheContext, returnFiber);
            returnFiber !== prevState.cache &&
              propagateContextChanges(
                workInProgress,
                [CacheContext],
                renderLanes,
                !0
              );
            suspendIfUpdateReadFromEntangledAsyncAction();
            returnFiber = nextState.element;
            if (prevState.isDehydrated)
              if (
                ((prevState = {
                  element: returnFiber,
                  isDehydrated: !1,
                  cache: nextState.cache
                }),
                (workInProgress.updateQueue.baseState = prevState),
                (workInProgress.memoizedState = prevState),
                workInProgress.flags & 256)
              ) {
                workInProgress = mountHostRootWithoutHydrating(
                  current,
                  workInProgress,
                  returnFiber,
                  renderLanes
                );
                break a;
              } else if (returnFiber !== prevSibling) {
                prevSibling = createCapturedValueAtFiber(
                  Error(
                    "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."
                  ),
                  workInProgress
                );
                queueHydrationError(prevSibling);
                workInProgress = mountHostRootWithoutHydrating(
                  current,
                  workInProgress,
                  returnFiber,
                  renderLanes
                );
                break a;
              } else {
                current = workInProgress.stateNode.containerInfo;
                switch (current.nodeType) {
                  case 9:
                    current = current.body;
                    break;
                  default:
                    current =
                      "HTML" === current.nodeName
                        ? current.ownerDocument.body
                        : current;
                }
                nextHydratableInstance = getNextHydratable(current.firstChild);
                hydrationParentFiber = workInProgress;
                isHydrating = !0;
                hydrationErrors = null;
                didSuspendOrErrorDEV = !1;
                hydrationDiffRootDEV = null;
                rootOrSingletonContext = !0;
                current = mountChildFibers(
                  workInProgress,
                  null,
                  returnFiber,
                  renderLanes
                );
                for (workInProgress.child = current; current; )
                  (current.flags = (current.flags & -3) | 4096),
                    (current = current.sibling);
              }
            else {
              resetHydrationState();
              if (returnFiber === prevSibling) {
                workInProgress = bailoutOnAlreadyFinishedWork(
                  current,
                  workInProgress,
                  renderLanes
                );
                break a;
              }
              reconcileChildren(
                current,
                workInProgress,
                returnFiber,
                renderLanes
              );
            }
            workInProgress = workInProgress.child;
          }
          return workInProgress;
        case 26:
          return (
            markRef(current, workInProgress),
            null === current
              ? (current = getResource(
                  workInProgress.type,
                  null,
                  workInProgress.pendingProps,
                  null
                ))
                ? (workInProgress.memoizedState = current)
                : isHydrating ||
                  ((current = workInProgress.type),
                  (renderLanes = workInProgress.pendingProps),
                  (returnFiber = requiredContext(
                    rootInstanceStackCursor.current
                  )),
                  (returnFiber =
                    getOwnerDocumentFromRootContainer(
                      returnFiber
                    ).createElement(current)),
                  (returnFiber[internalInstanceKey] = workInProgress),
                  (returnFiber[internalPropsKey] = renderLanes),
                  setInitialProperties(returnFiber, current, renderLanes),
                  markNodeAsHoistable(returnFiber),
                  (workInProgress.stateNode = returnFiber))
              : (workInProgress.memoizedState = getResource(
                  workInProgress.type,
                  current.memoizedProps,
                  workInProgress.pendingProps,
                  current.memoizedState
                )),
            null
          );
        case 27:
          return (
            pushHostContext(workInProgress),
            null === current &&
              isHydrating &&
              ((returnFiber = requiredContext(rootInstanceStackCursor.current)),
              (prevSibling = getHostContext()),
              (returnFiber = workInProgress.stateNode =
                resolveSingletonInstance(
                  workInProgress.type,
                  workInProgress.pendingProps,
                  returnFiber,
                  prevSibling,
                  !1
                )),
              didSuspendOrErrorDEV ||
                ((prevSibling = diffHydratedProperties(
                  returnFiber,
                  workInProgress.type,
                  workInProgress.pendingProps,
                  prevSibling
                )),
                null !== prevSibling &&
                  (buildHydrationDiffNode(workInProgress, 0).serverProps =
                    prevSibling)),
              (hydrationParentFiber = workInProgress),
              (rootOrSingletonContext = !0),
              (prevSibling = nextHydratableInstance),
              isSingletonScope(workInProgress.type)
                ? ((previousHydratableOnEnteringScopedSingleton = prevSibling),
                  (nextHydratableInstance = getNextHydratable(
                    returnFiber.firstChild
                  )))
                : (nextHydratableInstance = prevSibling)),
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps.children,
              renderLanes
            ),
            markRef(current, workInProgress),
            null === current && (workInProgress.flags |= 4194304),
            workInProgress.child
          );
        case 5:
          return (
            null === current &&
              isHydrating &&
              ((prevState = getHostContext()),
              (returnFiber = validateDOMNesting(
                workInProgress.type,
                prevState.ancestorInfo
              )),
              (prevSibling = nextHydratableInstance),
              (nextState = !prevSibling) ||
                ((nextState = canHydrateInstance(
                  prevSibling,
                  workInProgress.type,
                  workInProgress.pendingProps,
                  rootOrSingletonContext
                )),
                null !== nextState
                  ? ((workInProgress.stateNode = nextState),
                    didSuspendOrErrorDEV ||
                      ((prevState = diffHydratedProperties(
                        nextState,
                        workInProgress.type,
                        workInProgress.pendingProps,
                        prevState
                      )),
                      null !== prevState &&
                        (buildHydrationDiffNode(workInProgress, 0).serverProps =
                          prevState)),
                    (hydrationParentFiber = workInProgress),
                    (nextHydratableInstance = getNextHydratable(
                      nextState.firstChild
                    )),
                    (rootOrSingletonContext = !1),
                    (prevState = !0))
                  : (prevState = !1),
                (nextState = !prevState)),
              nextState &&
                (returnFiber &&
                  warnNonHydratedInstance(workInProgress, prevSibling),
                throwOnHydrationMismatch(workInProgress))),
            pushHostContext(workInProgress),
            (prevSibling = workInProgress.type),
            (prevState = workInProgress.pendingProps),
            (nextState = null !== current ? current.memoizedProps : null),
            (returnFiber = prevState.children),
            shouldSetTextContent(prevSibling, prevState)
              ? (returnFiber = null)
              : null !== nextState &&
                shouldSetTextContent(prevSibling, nextState) &&
                (workInProgress.flags |= 32),
            null !== workInProgress.memoizedState &&
              ((prevSibling = renderWithHooks(
                current,
                workInProgress,
                TransitionAwareHostComponent,
                null,
                null,
                renderLanes
              )),
              (HostTransitionContext._currentValue = prevSibling)),
            markRef(current, workInProgress),
            reconcileChildren(
              current,
              workInProgress,
              returnFiber,
              renderLanes
            ),
            workInProgress.child
          );
        case 6:
          return (
            null === current &&
              isHydrating &&
              ((current = workInProgress.pendingProps),
              (renderLanes = getHostContext()),
              (returnFiber = renderLanes.ancestorInfo.current),
              (current =
                null != returnFiber
                  ? validateTextNesting(
                      current,
                      returnFiber.tag,
                      renderLanes.ancestorInfo.implicitRootScope
                    )
                  : !0),
              (renderLanes = nextHydratableInstance),
              (returnFiber = !renderLanes) ||
                ((returnFiber = canHydrateTextInstance(
                  renderLanes,
                  workInProgress.pendingProps,
                  rootOrSingletonContext
                )),
                null !== returnFiber
                  ? ((workInProgress.stateNode = returnFiber),
                    (hydrationParentFiber = workInProgress),
                    (nextHydratableInstance = null),
                    (returnFiber = !0))
                  : (returnFiber = !1),
                (returnFiber = !returnFiber)),
              returnFiber &&
                (current &&
                  warnNonHydratedInstance(workInProgress, renderLanes),
                throwOnHydrationMismatch(workInProgress))),
            null
          );
        case 13:
          return updateSuspenseComponent(current, workInProgress, renderLanes);
        case 4:
          return (
            pushHostContainer(
              workInProgress,
              workInProgress.stateNode.containerInfo
            ),
            (returnFiber = workInProgress.pendingProps),
            null === current
              ? (workInProgress.child = reconcileChildFibers(
                  workInProgress,
                  null,
                  returnFiber,
                  renderLanes
                ))
              : reconcileChildren(
                  current,
                  workInProgress,
                  returnFiber,
                  renderLanes
                ),
            workInProgress.child
          );
        case 11:
          return updateForwardRef(
            current,
            workInProgress,
            workInProgress.type,
            workInProgress.pendingProps,
            renderLanes
          );
        case 7:
          return (
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps,
              renderLanes
            ),
            workInProgress.child
          );
        case 8:
          return (
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps.children,
              renderLanes
            ),
            workInProgress.child
          );
        case 12:
          return (
            (workInProgress.flags |= 4),
            (workInProgress.flags |= 2048),
            (returnFiber = workInProgress.stateNode),
            (returnFiber.effectDuration = -0),
            (returnFiber.passiveEffectDuration = -0),
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps.children,
              renderLanes
            ),
            workInProgress.child
          );
        case 10:
          return (
            (returnFiber = workInProgress.type),
            (prevSibling = workInProgress.pendingProps),
            (prevState = prevSibling.value),
            "value" in prevSibling ||
              hasWarnedAboutUsingNoValuePropOnContextProvider ||
              ((hasWarnedAboutUsingNoValuePropOnContextProvider = !0),
              console.error(
                "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
              )),
            pushProvider(workInProgress, returnFiber, prevState),
            reconcileChildren(
              current,
              workInProgress,
              prevSibling.children,
              renderLanes
            ),
            workInProgress.child
          );
        case 9:
          return (
            (prevSibling = workInProgress.type._context),
            (returnFiber = workInProgress.pendingProps.children),
            "function" !== typeof returnFiber &&
              console.error(
                "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
              ),
            prepareToReadContext(workInProgress),
            (prevSibling = readContext(prevSibling)),
            markComponentRenderStarted(workInProgress),
            (returnFiber = callComponentInDEV(
              returnFiber,
              prevSibling,
              void 0
            )),
            markComponentRenderStopped(),
            (workInProgress.flags |= 1),
            reconcileChildren(
              current,
              workInProgress,
              returnFiber,
              renderLanes
            ),
            workInProgress.child
          );
        case 14:
          return updateMemoComponent(
            current,
            workInProgress,
            workInProgress.type,
            workInProgress.pendingProps,
            renderLanes
          );
        case 15:
          return updateSimpleMemoComponent(
            current,
            workInProgress,
            workInProgress.type,
            workInProgress.pendingProps,
            renderLanes
          );
        case 19:
          return updateSuspenseListComponent(
            current,
            workInProgress,
            renderLanes
          );
        case 31:
          return (
            (returnFiber = workInProgress.pendingProps),
            (renderLanes = workInProgress.mode),
            (returnFiber = {
              mode: returnFiber.mode,
              children: returnFiber.children
            }),
            null === current
              ? ((current = mountWorkInProgressOffscreenFiber(
                  returnFiber,
                  renderLanes
                )),
                (current.ref = workInProgress.ref),
                (workInProgress.child = current),
                (current.return = workInProgress),
                (workInProgress = current))
              : ((current = createWorkInProgress(current.child, returnFiber)),
                (current.ref = workInProgress.ref),
                (workInProgress.child = current),
                (current.return = workInProgress),
                (workInProgress = current)),
            workInProgress
          );
        case 22:
          return updateOffscreenComponent(current, workInProgress, renderLanes);
        case 24:
          return (
            prepareToReadContext(workInProgress),
            (returnFiber = readContext(CacheContext)),
            null === current
              ? ((prevSibling = peekCacheFromPool()),
                null === prevSibling &&
                  ((prevSibling = workInProgressRoot),
                  (prevState = createCache()),
                  (prevSibling.pooledCache = prevState),
                  retainCache(prevState),
                  null !== prevState &&
                    (prevSibling.pooledCacheLanes |= renderLanes),
                  (prevSibling = prevState)),
                (workInProgress.memoizedState = {
                  parent: returnFiber,
                  cache: prevSibling
                }),
                initializeUpdateQueue(workInProgress),
                pushProvider(workInProgress, CacheContext, prevSibling))
              : (0 !== (current.lanes & renderLanes) &&
                  (cloneUpdateQueue(current, workInProgress),
                  processUpdateQueue(workInProgress, null, null, renderLanes),
                  suspendIfUpdateReadFromEntangledAsyncAction()),
                (prevSibling = current.memoizedState),
                (prevState = workInProgress.memoizedState),
                prevSibling.parent !== returnFiber
                  ? ((prevSibling = {
                      parent: returnFiber,
                      cache: returnFiber
                    }),
                    (workInProgress.memoizedState = prevSibling),
                    0 === workInProgress.lanes &&
                      (workInProgress.memoizedState =
                        workInProgress.updateQueue.baseState =
                          prevSibling),
                    pushProvider(workInProgress, CacheContext, returnFiber))
                  : ((returnFiber = prevState.cache),
                    pushProvider(workInProgress, CacheContext, returnFiber),
                    returnFiber !== prevSibling.cache &&
                      propagateContextChanges(
                        workInProgress,
                        [CacheContext],
                        renderLanes,
                        !0
                      ))),
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps.children,
              renderLanes
            ),
            workInProgress.child
          );
        case 29:
          throw workInProgress.pendingProps;
      }
      throw Error(
        "Unknown unit of work tag (" +
          workInProgress.tag +
          "). This error is likely caused by a bug in React. Please file an issue."
      );
    }
    function markUpdate(workInProgress) {
      workInProgress.flags |= 4;
    }
    function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {
      if (
        "stylesheet" !== resource.type ||
        (resource.state.loading & Inserted) !== NotLoaded
      )
        workInProgress.flags &= -16777217;
      else if (
        ((workInProgress.flags |= 16777216), !preloadResource(resource))
      ) {
        resource = suspenseHandlerStackCursor.current;
        if (
          null !== resource &&
          ((workInProgressRootRenderLanes & 4194048) ===
          workInProgressRootRenderLanes
            ? null !== shellBoundary
            : ((workInProgressRootRenderLanes & 62914560) !==
                workInProgressRootRenderLanes &&
                0 === (workInProgressRootRenderLanes & 536870912)) ||
              resource !== shellBoundary)
        )
          throw (
            ((suspendedThenable = noopSuspenseyCommitThenable),
            SuspenseyCommitException)
          );
        workInProgress.flags |= 8192;
      }
    }
    function scheduleRetryEffect(workInProgress, retryQueue) {
      null !== retryQueue && (workInProgress.flags |= 4);
      workInProgress.flags & 16384 &&
        ((retryQueue =
          22 !== workInProgress.tag ? claimNextRetryLane() : 536870912),
        (workInProgress.lanes |= retryQueue),
        (workInProgressSuspendedRetryLanes |= retryQueue));
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (!isHydrating)
        switch (renderState.tailMode) {
          case "hidden":
            hasRenderedATailFallback = renderState.tail;
            for (var lastTailNode = null; null !== hasRenderedATailFallback; )
              null !== hasRenderedATailFallback.alternate &&
                (lastTailNode = hasRenderedATailFallback),
                (hasRenderedATailFallback = hasRenderedATailFallback.sibling);
            null === lastTailNode
              ? (renderState.tail = null)
              : (lastTailNode.sibling = null);
            break;
          case "collapsed":
            lastTailNode = renderState.tail;
            for (var _lastTailNode = null; null !== lastTailNode; )
              null !== lastTailNode.alternate && (_lastTailNode = lastTailNode),
                (lastTailNode = lastTailNode.sibling);
            null === _lastTailNode
              ? hasRenderedATailFallback || null === renderState.tail
                ? (renderState.tail = null)
                : (renderState.tail.sibling = null)
              : (_lastTailNode.sibling = null);
        }
    }
    function bubbleProperties(completedWork) {
      var didBailout =
          null !== completedWork.alternate &&
          completedWork.alternate.child === completedWork.child,
        newChildLanes = 0,
        subtreeFlags = 0;
      if (didBailout)
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          for (
            var _treeBaseDuration = completedWork.selfBaseDuration,
              _child2 = completedWork.child;
            null !== _child2;

          )
            (newChildLanes |= _child2.lanes | _child2.childLanes),
              (subtreeFlags |= _child2.subtreeFlags & 65011712),
              (subtreeFlags |= _child2.flags & 65011712),
              (_treeBaseDuration += _child2.treeBaseDuration),
              (_child2 = _child2.sibling);
          completedWork.treeBaseDuration = _treeBaseDuration;
        } else
          for (
            _treeBaseDuration = completedWork.child;
            null !== _treeBaseDuration;

          )
            (newChildLanes |=
              _treeBaseDuration.lanes | _treeBaseDuration.childLanes),
              (subtreeFlags |= _treeBaseDuration.subtreeFlags & 65011712),
              (subtreeFlags |= _treeBaseDuration.flags & 65011712),
              (_treeBaseDuration.return = completedWork),
              (_treeBaseDuration = _treeBaseDuration.sibling);
      else if ((completedWork.mode & ProfileMode) !== NoMode) {
        _treeBaseDuration = completedWork.actualDuration;
        _child2 = completedWork.selfBaseDuration;
        for (var child = completedWork.child; null !== child; )
          (newChildLanes |= child.lanes | child.childLanes),
            (subtreeFlags |= child.subtreeFlags),
            (subtreeFlags |= child.flags),
            (_treeBaseDuration += child.actualDuration),
            (_child2 += child.treeBaseDuration),
            (child = child.sibling);
        completedWork.actualDuration = _treeBaseDuration;
        completedWork.treeBaseDuration = _child2;
      } else
        for (
          _treeBaseDuration = completedWork.child;
          null !== _treeBaseDuration;

        )
          (newChildLanes |=
            _treeBaseDuration.lanes | _treeBaseDuration.childLanes),
            (subtreeFlags |= _treeBaseDuration.subtreeFlags),
            (subtreeFlags |= _treeBaseDuration.flags),
            (_treeBaseDuration.return = completedWork),
            (_treeBaseDuration = _treeBaseDuration.sibling);
      completedWork.subtreeFlags |= subtreeFlags;
      completedWork.childLanes = newChildLanes;
      return didBailout;
    }
    function completeWork(current, workInProgress, renderLanes) {
      var newProps = workInProgress.pendingProps;
      popTreeContext(workInProgress);
      switch (workInProgress.tag) {
        case 31:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return bubbleProperties(workInProgress), null;
        case 1:
          return bubbleProperties(workInProgress), null;
        case 3:
          renderLanes = workInProgress.stateNode;
          newProps = null;
          null !== current && (newProps = current.memoizedState.cache);
          workInProgress.memoizedState.cache !== newProps &&
            (workInProgress.flags |= 2048);
          popProvider(CacheContext, workInProgress);
          popHostContainer(workInProgress);
          renderLanes.pendingContext &&
            ((renderLanes.context = renderLanes.pendingContext),
            (renderLanes.pendingContext = null));
          if (null === current || null === current.child)
            popHydrationState(workInProgress)
              ? (emitPendingHydrationWarnings(), markUpdate(workInProgress))
              : null === current ||
                (current.memoizedState.isDehydrated &&
                  0 === (workInProgress.flags & 256)) ||
                ((workInProgress.flags |= 1024),
                upgradeHydrationErrorsToRecoverable());
          bubbleProperties(workInProgress);
          return null;
        case 26:
          return (
            (renderLanes = workInProgress.memoizedState),
            null === current
              ? (markUpdate(workInProgress),
                null !== renderLanes
                  ? (bubbleProperties(workInProgress),
                    preloadResourceAndSuspendIfNeeded(
                      workInProgress,
                      renderLanes
                    ))
                  : (bubbleProperties(workInProgress),
                    (workInProgress.flags &= -16777217)))
              : renderLanes
                ? renderLanes !== current.memoizedState
                  ? (markUpdate(workInProgress),
                    bubbleProperties(workInProgress),
                    preloadResourceAndSuspendIfNeeded(
                      workInProgress,
                      renderLanes
                    ))
                  : (bubbleProperties(workInProgress),
                    (workInProgress.flags &= -16777217))
                : (current.memoizedProps !== newProps &&
                    markUpdate(workInProgress),
                  bubbleProperties(workInProgress),
                  (workInProgress.flags &= -16777217)),
            null
          );
        case 27:
          popHostContext(workInProgress);
          renderLanes = requiredContext(rootInstanceStackCursor.current);
          var _type = workInProgress.type;
          if (null !== current && null != workInProgress.stateNode)
            current.memoizedProps !== newProps && markUpdate(workInProgress);
          else {
            if (!newProps) {
              if (null === workInProgress.stateNode)
                throw Error(
                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                );
              bubbleProperties(workInProgress);
              return null;
            }
            current = getHostContext();
            popHydrationState(workInProgress)
              ? prepareToHydrateHostInstance(workInProgress, current)
              : ((current = resolveSingletonInstance(
                  _type,
                  newProps,
                  renderLanes,
                  current,
                  !0
                )),
                (workInProgress.stateNode = current),
                markUpdate(workInProgress));
          }
          bubbleProperties(workInProgress);
          return null;
        case 5:
          popHostContext(workInProgress);
          renderLanes = workInProgress.type;
          if (null !== current && null != workInProgress.stateNode)
            current.memoizedProps !== newProps && markUpdate(workInProgress);
          else {
            if (!newProps) {
              if (null === workInProgress.stateNode)
                throw Error(
                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                );
              bubbleProperties(workInProgress);
              return null;
            }
            _type = getHostContext();
            if (popHydrationState(workInProgress))
              prepareToHydrateHostInstance(workInProgress, _type);
            else {
              current = requiredContext(rootInstanceStackCursor.current);
              validateDOMNesting(renderLanes, _type.ancestorInfo);
              _type = _type.context;
              current = getOwnerDocumentFromRootContainer(current);
              switch (_type) {
                case HostContextNamespaceSvg:
                  current = current.createElementNS(SVG_NAMESPACE, renderLanes);
                  break;
                case HostContextNamespaceMath:
                  current = current.createElementNS(
                    MATH_NAMESPACE,
                    renderLanes
                  );
                  break;
                default:
                  switch (renderLanes) {
                    case "svg":
                      current = current.createElementNS(
                        SVG_NAMESPACE,
                        renderLanes
                      );
                      break;
                    case "math":
                      current = current.createElementNS(
                        MATH_NAMESPACE,
                        renderLanes
                      );
                      break;
                    case "script":
                      current = current.createElement("div");
                      current.innerHTML = "<script>\x3c/script>";
                      current = current.removeChild(current.firstChild);
                      break;
                    case "select":
                      current =
                        "string" === typeof newProps.is
                          ? current.createElement("select", { is: newProps.is })
                          : current.createElement("select");
                      newProps.multiple
                        ? (current.multiple = !0)
                        : newProps.size && (current.size = newProps.size);
                      break;
                    default:
                      (current =
                        "string" === typeof newProps.is
                          ? current.createElement(renderLanes, {
                              is: newProps.is
                            })
                          : current.createElement(renderLanes)),
                        -1 === renderLanes.indexOf("-") &&
                          (renderLanes !== renderLanes.toLowerCase() &&
                            console.error(
                              "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
                              renderLanes
                            ),
                          "[object HTMLUnknownElement]" !==
                            Object.prototype.toString.call(current) ||
                            hasOwnProperty.call(
                              warnedUnknownTags,
                              renderLanes
                            ) ||
                            ((warnedUnknownTags[renderLanes] = !0),
                            console.error(
                              "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",
                              renderLanes
                            )));
                  }
              }
              current[internalInstanceKey] = workInProgress;
              current[internalPropsKey] = newProps;
              a: for (_type = workInProgress.child; null !== _type; ) {
                if (5 === _type.tag || 6 === _type.tag)
                  current.appendChild(_type.stateNode);
                else if (
                  4 !== _type.tag &&
                  27 !== _type.tag &&
                  null !== _type.child
                ) {
                  _type.child.return = _type;
                  _type = _type.child;
                  continue;
                }
                if (_type === workInProgress) break a;
                for (; null === _type.sibling; ) {
                  if (null === _type.return || _type.return === workInProgress)
                    break a;
                  _type = _type.return;
                }
                _type.sibling.return = _type.return;
                _type = _type.sibling;
              }
              workInProgress.stateNode = current;
              a: switch (
                (setInitialProperties(current, renderLanes, newProps),
                renderLanes)
              ) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  current = !!newProps.autoFocus;
                  break a;
                case "img":
                  current = !0;
                  break a;
                default:
                  current = !1;
              }
              current && markUpdate(workInProgress);
            }
          }
          bubbleProperties(workInProgress);
          workInProgress.flags &= -16777217;
          return null;
        case 6:
          if (current && null != workInProgress.stateNode)
            current.memoizedProps !== newProps && markUpdate(workInProgress);
          else {
            if (
              "string" !== typeof newProps &&
              null === workInProgress.stateNode
            )
              throw Error(
                "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
              );
            current = requiredContext(rootInstanceStackCursor.current);
            renderLanes = getHostContext();
            if (popHydrationState(workInProgress)) {
              current = workInProgress.stateNode;
              renderLanes = workInProgress.memoizedProps;
              _type = !didSuspendOrErrorDEV;
              newProps = null;
              var returnFiber = hydrationParentFiber;
              if (null !== returnFiber)
                switch (returnFiber.tag) {
                  case 3:
                    _type &&
                      ((_type = diffHydratedTextForDevWarnings(
                        current,
                        renderLanes,
                        newProps
                      )),
                      null !== _type &&
                        (buildHydrationDiffNode(workInProgress, 0).serverProps =
                          _type));
                    break;
                  case 27:
                  case 5:
                    (newProps = returnFiber.memoizedProps),
                      _type &&
                        ((_type = diffHydratedTextForDevWarnings(
                          current,
                          renderLanes,
                          newProps
                        )),
                        null !== _type &&
                          (buildHydrationDiffNode(
                            workInProgress,
                            0
                          ).serverProps = _type));
                }
              current[internalInstanceKey] = workInProgress;
              current =
                current.nodeValue === renderLanes ||
                (null !== newProps &&
                  !0 === newProps.suppressHydrationWarning) ||
                checkForUnmatchedText(current.nodeValue, renderLanes)
                  ? !0
                  : !1;
              current || throwOnHydrationMismatch(workInProgress);
            } else
              (_type = renderLanes.ancestorInfo.current),
                null != _type &&
                  validateTextNesting(
                    newProps,
                    _type.tag,
                    renderLanes.ancestorInfo.implicitRootScope
                  ),
                (current =
                  getOwnerDocumentFromRootContainer(current).createTextNode(
                    newProps
                  )),
                (current[internalInstanceKey] = workInProgress),
                (workInProgress.stateNode = current);
          }
          bubbleProperties(workInProgress);
          return null;
        case 13:
          newProps = workInProgress.memoizedState;
          if (
            null === current ||
            (null !== current.memoizedState &&
              null !== current.memoizedState.dehydrated)
          ) {
            _type = popHydrationState(workInProgress);
            if (null !== newProps && null !== newProps.dehydrated) {
              if (null === current) {
                if (!_type)
                  throw Error(
                    "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
                  );
                _type = workInProgress.memoizedState;
                _type = null !== _type ? _type.dehydrated : null;
                if (!_type)
                  throw Error(
                    "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
                  );
                _type[internalInstanceKey] = workInProgress;
                bubbleProperties(workInProgress);
                (workInProgress.mode & ProfileMode) !== NoMode &&
                  null !== newProps &&
                  ((_type = workInProgress.child),
                  null !== _type &&
                    (workInProgress.treeBaseDuration -=
                      _type.treeBaseDuration));
              } else
                emitPendingHydrationWarnings(),
                  resetHydrationState(),
                  0 === (workInProgress.flags & 128) &&
                    (workInProgress.memoizedState = null),
                  (workInProgress.flags |= 4),
                  bubbleProperties(workInProgress),
                  (workInProgress.mode & ProfileMode) !== NoMode &&
                    null !== newProps &&
                    ((_type = workInProgress.child),
                    null !== _type &&
                      (workInProgress.treeBaseDuration -=
                        _type.treeBaseDuration));
              _type = !1;
            } else
              (_type = upgradeHydrationErrorsToRecoverable()),
                null !== current &&
                  null !== current.memoizedState &&
                  (current.memoizedState.hydrationErrors = _type),
                (_type = !0);
            if (!_type) {
              if (workInProgress.flags & 256)
                return popSuspenseHandler(workInProgress), workInProgress;
              popSuspenseHandler(workInProgress);
              return null;
            }
          }
          popSuspenseHandler(workInProgress);
          if (0 !== (workInProgress.flags & 128))
            return (
              (workInProgress.lanes = renderLanes),
              (workInProgress.mode & ProfileMode) !== NoMode &&
                transferActualDuration(workInProgress),
              workInProgress
            );
          renderLanes = null !== newProps;
          current = null !== current && null !== current.memoizedState;
          renderLanes &&
            ((newProps = workInProgress.child),
            (_type = null),
            null !== newProps.alternate &&
              null !== newProps.alternate.memoizedState &&
              null !== newProps.alternate.memoizedState.cachePool &&
              (_type = newProps.alternate.memoizedState.cachePool.pool),
            (returnFiber = null),
            null !== newProps.memoizedState &&
              null !== newProps.memoizedState.cachePool &&
              (returnFiber = newProps.memoizedState.cachePool.pool),
            returnFiber !== _type && (newProps.flags |= 2048));
          renderLanes !== current &&
            renderLanes &&
            (workInProgress.child.flags |= 8192);
          scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
          bubbleProperties(workInProgress);
          (workInProgress.mode & ProfileMode) !== NoMode &&
            renderLanes &&
            ((current = workInProgress.child),
            null !== current &&
              (workInProgress.treeBaseDuration -= current.treeBaseDuration));
          return null;
        case 4:
          return (
            popHostContainer(workInProgress),
            null === current &&
              listenToAllSupportedEvents(
                workInProgress.stateNode.containerInfo
              ),
            bubbleProperties(workInProgress),
            null
          );
        case 10:
          return (
            popProvider(workInProgress.type, workInProgress),
            bubbleProperties(workInProgress),
            null
          );
        case 19:
          pop(suspenseStackCursor, workInProgress);
          _type = workInProgress.memoizedState;
          if (null === _type) return bubbleProperties(workInProgress), null;
          newProps = 0 !== (workInProgress.flags & 128);
          returnFiber = _type.rendering;
          if (null === returnFiber)
            if (newProps) cutOffTailIfNeeded(_type, !1);
            else {
              if (
                workInProgressRootExitStatus !== RootInProgress ||
                (null !== current && 0 !== (current.flags & 128))
              )
                for (current = workInProgress.child; null !== current; ) {
                  returnFiber = findFirstSuspended(current);
                  if (null !== returnFiber) {
                    workInProgress.flags |= 128;
                    cutOffTailIfNeeded(_type, !1);
                    current = returnFiber.updateQueue;
                    workInProgress.updateQueue = current;
                    scheduleRetryEffect(workInProgress, current);
                    workInProgress.subtreeFlags = 0;
                    current = renderLanes;
                    for (
                      renderLanes = workInProgress.child;
                      null !== renderLanes;

                    )
                      resetWorkInProgress(renderLanes, current),
                        (renderLanes = renderLanes.sibling);
                    push(
                      suspenseStackCursor,
                      (suspenseStackCursor.current &
                        SubtreeSuspenseContextMask) |
                        ForceSuspenseFallback,
                      workInProgress
                    );
                    return workInProgress.child;
                  }
                  current = current.sibling;
                }
              null !== _type.tail &&
                now$1() > workInProgressRootRenderTargetTime &&
                ((workInProgress.flags |= 128),
                (newProps = !0),
                cutOffTailIfNeeded(_type, !1),
                (workInProgress.lanes = 4194304));
            }
          else {
            if (!newProps)
              if (
                ((current = findFirstSuspended(returnFiber)), null !== current)
              ) {
                if (
                  ((workInProgress.flags |= 128),
                  (newProps = !0),
                  (current = current.updateQueue),
                  (workInProgress.updateQueue = current),
                  scheduleRetryEffect(workInProgress, current),
                  cutOffTailIfNeeded(_type, !0),
                  null === _type.tail &&
                    "hidden" === _type.tailMode &&
                    !returnFiber.alternate &&
                    !isHydrating)
                )
                  return bubbleProperties(workInProgress), null;
              } else
                2 * now$1() - _type.renderingStartTime >
                  workInProgressRootRenderTargetTime &&
                  536870912 !== renderLanes &&
                  ((workInProgress.flags |= 128),
                  (newProps = !0),
                  cutOffTailIfNeeded(_type, !1),
                  (workInProgress.lanes = 4194304));
            _type.isBackwards
              ? ((returnFiber.sibling = workInProgress.child),
                (workInProgress.child = returnFiber))
              : ((current = _type.last),
                null !== current
                  ? (current.sibling = returnFiber)
                  : (workInProgress.child = returnFiber),
                (_type.last = returnFiber));
          }
          if (null !== _type.tail)
            return (
              (current = _type.tail),
              (_type.rendering = current),
              (_type.tail = current.sibling),
              (_type.renderingStartTime = now$1()),
              (current.sibling = null),
              (renderLanes = suspenseStackCursor.current),
              (renderLanes = newProps
                ? (renderLanes & SubtreeSuspenseContextMask) |
                  ForceSuspenseFallback
                : renderLanes & SubtreeSuspenseContextMask),
              push(suspenseStackCursor, renderLanes, workInProgress),
              current
            );
          bubbleProperties(workInProgress);
          return null;
        case 22:
        case 23:
          return (
            popSuspenseHandler(workInProgress),
            popHiddenContext(workInProgress),
            (newProps = null !== workInProgress.memoizedState),
            null !== current
              ? (null !== current.memoizedState) !== newProps &&
                (workInProgress.flags |= 8192)
              : newProps && (workInProgress.flags |= 8192),
            newProps
              ? 0 !== (renderLanes & 536870912) &&
                0 === (workInProgress.flags & 128) &&
                (bubbleProperties(workInProgress),
                workInProgress.subtreeFlags & 6 &&
                  (workInProgress.flags |= 8192))
              : bubbleProperties(workInProgress),
            (renderLanes = workInProgress.updateQueue),
            null !== renderLanes &&
              scheduleRetryEffect(workInProgress, renderLanes.retryQueue),
            (renderLanes = null),
            null !== current &&
              null !== current.memoizedState &&
              null !== current.memoizedState.cachePool &&
              (renderLanes = current.memoizedState.cachePool.pool),
            (newProps = null),
            null !== workInProgress.memoizedState &&
              null !== workInProgress.memoizedState.cachePool &&
              (newProps = workInProgress.memoizedState.cachePool.pool),
            newProps !== renderLanes && (workInProgress.flags |= 2048),
            null !== current && pop(resumedCache, workInProgress),
            null
          );
        case 24:
          return (
            (renderLanes = null),
            null !== current && (renderLanes = current.memoizedState.cache),
            workInProgress.memoizedState.cache !== renderLanes &&
              (workInProgress.flags |= 2048),
            popProvider(CacheContext, workInProgress),
            bubbleProperties(workInProgress),
            null
          );
        case 25:
          return null;
        case 30:
          return null;
      }
      throw Error(
        "Unknown unit of work tag (" +
          workInProgress.tag +
          "). This error is likely caused by a bug in React. Please file an issue."
      );
    }
    function unwindWork(current, workInProgress) {
      popTreeContext(workInProgress);
      switch (workInProgress.tag) {
        case 1:
          return (
            (current = workInProgress.flags),
            current & 65536
              ? ((workInProgress.flags = (current & -65537) | 128),
                (workInProgress.mode & ProfileMode) !== NoMode &&
                  transferActualDuration(workInProgress),
                workInProgress)
              : null
          );
        case 3:
          return (
            popProvider(CacheContext, workInProgress),
            popHostContainer(workInProgress),
            (current = workInProgress.flags),
            0 !== (current & 65536) && 0 === (current & 128)
              ? ((workInProgress.flags = (current & -65537) | 128),
                workInProgress)
              : null
          );
        case 26:
        case 27:
        case 5:
          return popHostContext(workInProgress), null;
        case 13:
          popSuspenseHandler(workInProgress);
          current = workInProgress.memoizedState;
          if (null !== current && null !== current.dehydrated) {
            if (null === workInProgress.alternate)
              throw Error(
                "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
              );
            resetHydrationState();
          }
          current = workInProgress.flags;
          return current & 65536
            ? ((workInProgress.flags = (current & -65537) | 128),
              (workInProgress.mode & ProfileMode) !== NoMode &&
                transferActualDuration(workInProgress),
              workInProgress)
            : null;
        case 19:
          return pop(suspenseStackCursor, workInProgress), null;
        case 4:
          return popHostContainer(workInProgress), null;
        case 10:
          return popProvider(workInProgress.type, workInProgress), null;
        case 22:
        case 23:
          return (
            popSuspenseHandler(workInProgress),
            popHiddenContext(workInProgress),
            null !== current && pop(resumedCache, workInProgress),
            (current = workInProgress.flags),
            current & 65536
              ? ((workInProgress.flags = (current & -65537) | 128),
                (workInProgress.mode & ProfileMode) !== NoMode &&
                  transferActualDuration(workInProgress),
                workInProgress)
              : null
          );
        case 24:
          return popProvider(CacheContext, workInProgress), null;
        case 25:
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(current, interruptedWork) {
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case 3:
          popProvider(CacheContext, interruptedWork);
          popHostContainer(interruptedWork);
          break;
        case 26:
        case 27:
        case 5:
          popHostContext(interruptedWork);
          break;
        case 4:
          popHostContainer(interruptedWork);
          break;
        case 13:
          popSuspenseHandler(interruptedWork);
          break;
        case 19:
          pop(suspenseStackCursor, interruptedWork);
          break;
        case 10:
          popProvider(interruptedWork.type, interruptedWork);
          break;
        case 22:
        case 23:
          popSuspenseHandler(interruptedWork);
          popHiddenContext(interruptedWork);
          null !== current && pop(resumedCache, interruptedWork);
          break;
        case 24:
          popProvider(CacheContext, interruptedWork);
      }
    }
    function shouldProfile(current) {
      return (current.mode & ProfileMode) !== NoMode;
    }
    function commitHookLayoutEffects(finishedWork, hookFlags) {
      shouldProfile(finishedWork)
        ? (startEffectTimer(),
          commitHookEffectListMount(hookFlags, finishedWork),
          recordEffectDuration())
        : commitHookEffectListMount(hookFlags, finishedWork);
    }
    function commitHookLayoutUnmountEffects(
      finishedWork,
      nearestMountedAncestor,
      hookFlags
    ) {
      shouldProfile(finishedWork)
        ? (startEffectTimer(),
          commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          ),
          recordEffectDuration())
        : commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          );
    }
    function commitHookEffectListMount(flags, finishedWork) {
      try {
        var updateQueue = finishedWork.updateQueue,
          lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
          var firstEffect = lastEffect.next;
          updateQueue = firstEffect;
          do {
            if (
              (updateQueue.tag & flags) === flags &&
              ((flags & Passive) !== NoFlags
                ? null !== injectedProfilingHooks &&
                  "function" ===
                    typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted &&
                  injectedProfilingHooks.markComponentPassiveEffectMountStarted(
                    finishedWork
                  )
                : (flags & Layout) !== NoFlags &&
                  null !== injectedProfilingHooks &&
                  "function" ===
                    typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted &&
                  injectedProfilingHooks.markComponentLayoutEffectMountStarted(
                    finishedWork
                  ),
              (lastEffect = void 0),
              (flags & Insertion) !== NoFlags &&
                (isRunningInsertionEffect = !0),
              (lastEffect = runWithFiberInDEV(
                finishedWork,
                callCreateInDEV,
                updateQueue
              )),
              (flags & Insertion) !== NoFlags &&
                (isRunningInsertionEffect = !1),
              (flags & Passive) !== NoFlags
                ? null !== injectedProfilingHooks &&
                  "function" ===
                    typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped &&
                  injectedProfilingHooks.markComponentPassiveEffectMountStopped()
                : (flags & Layout) !== NoFlags &&
                  null !== injectedProfilingHooks &&
                  "function" ===
                    typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped &&
                  injectedProfilingHooks.markComponentLayoutEffectMountStopped(),
              void 0 !== lastEffect && "function" !== typeof lastEffect)
            ) {
              var hookName = void 0;
              hookName =
                0 !== (updateQueue.tag & Layout)
                  ? "useLayoutEffect"
                  : 0 !== (updateQueue.tag & Insertion)
                    ? "useInsertionEffect"
                    : "useEffect";
              var addendum = void 0;
              addendum =
                null === lastEffect
                  ? " You returned null. If your effect does not require clean up, return undefined (or nothing)."
                  : "function" === typeof lastEffect.then
                    ? "\n\nIt looks like you wrote " +
                      hookName +
                      "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" +
                      hookName +
                      "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching"
                    : " You returned: " + lastEffect;
              runWithFiberInDEV(
                finishedWork,
                function (n, a) {
                  console.error(
                    "%s must not return anything besides a function, which is used for clean-up.%s",
                    n,
                    a
                  );
                },
                hookName,
                addendum
              );
            }
            updateQueue = updateQueue.next;
          } while (updateQueue !== firstEffect);
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function commitHookEffectListUnmount(
      flags,
      finishedWork,
      nearestMountedAncestor
    ) {
      try {
        var updateQueue = finishedWork.updateQueue,
          lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
          var firstEffect = lastEffect.next;
          updateQueue = firstEffect;
          do {
            if ((updateQueue.tag & flags) === flags) {
              var inst = updateQueue.inst,
                destroy = inst.destroy;
              void 0 !== destroy &&
                ((inst.destroy = void 0),
                (flags & Passive) !== NoFlags
                  ? null !== injectedProfilingHooks &&
                    "function" ===
                      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted &&
                    injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(
                      finishedWork
                    )
                  : (flags & Layout) !== NoFlags &&
                    null !== injectedProfilingHooks &&
                    "function" ===
                      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted &&
                    injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(
                      finishedWork
                    ),
                (flags & Insertion) !== NoFlags &&
                  (isRunningInsertionEffect = !0),
                (lastEffect = finishedWork),
                runWithFiberInDEV(
                  lastEffect,
                  callDestroyInDEV,
                  lastEffect,
                  nearestMountedAncestor,
                  destroy
                ),
                (flags & Insertion) !== NoFlags &&
                  (isRunningInsertionEffect = !1),
                (flags & Passive) !== NoFlags
                  ? null !== injectedProfilingHooks &&
                    "function" ===
                      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped &&
                    injectedProfilingHooks.markComponentPassiveEffectUnmountStopped()
                  : (flags & Layout) !== NoFlags &&
                    null !== injectedProfilingHooks &&
                    "function" ===
                      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped &&
                    injectedProfilingHooks.markComponentLayoutEffectUnmountStopped());
            }
            updateQueue = updateQueue.next;
          } while (updateQueue !== firstEffect);
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function commitHookPassiveMountEffects(finishedWork, hookFlags) {
      shouldProfile(finishedWork)
        ? (startEffectTimer(),
          commitHookEffectListMount(hookFlags, finishedWork),
          recordEffectDuration())
        : commitHookEffectListMount(hookFlags, finishedWork);
    }
    function commitHookPassiveUnmountEffects(
      finishedWork,
      nearestMountedAncestor,
      hookFlags
    ) {
      shouldProfile(finishedWork)
        ? (startEffectTimer(),
          commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          ),
          recordEffectDuration())
        : commitHookEffectListUnmount(
            hookFlags,
            finishedWork,
            nearestMountedAncestor
          );
    }
    function commitClassCallbacks(finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      if (null !== updateQueue) {
        var instance = finishedWork.stateNode;
        finishedWork.type.defaultProps ||
          "ref" in finishedWork.memoizedProps ||
          didWarnAboutReassigningProps ||
          (instance.props !== finishedWork.memoizedProps &&
            console.error(
              "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
              getComponentNameFromFiber(finishedWork) || "instance"
            ),
          instance.state !== finishedWork.memoizedState &&
            console.error(
              "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
              getComponentNameFromFiber(finishedWork) || "instance"
            ));
        try {
          runWithFiberInDEV(
            finishedWork,
            commitCallbacks,
            updateQueue,
            instance
          );
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
    }
    function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {
      return instance.getSnapshotBeforeUpdate(prevProps, prevState);
    }
    function commitClassSnapshot(finishedWork, current) {
      var prevProps = current.memoizedProps,
        prevState = current.memoizedState;
      current = finishedWork.stateNode;
      finishedWork.type.defaultProps ||
        "ref" in finishedWork.memoizedProps ||
        didWarnAboutReassigningProps ||
        (current.props !== finishedWork.memoizedProps &&
          console.error(
            "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ),
        current.state !== finishedWork.memoizedState &&
          console.error(
            "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
            getComponentNameFromFiber(finishedWork) || "instance"
          ));
      try {
        var resolvedPrevProps = resolveClassComponentProps(
          finishedWork.type,
          prevProps,
          finishedWork.elementType === finishedWork.type
        );
        var snapshot = runWithFiberInDEV(
          finishedWork,
          callGetSnapshotBeforeUpdates,
          current,
          resolvedPrevProps,
          prevState
        );
        prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;
        void 0 !== snapshot ||
          prevProps.has(finishedWork.type) ||
          (prevProps.add(finishedWork.type),
          runWithFiberInDEV(finishedWork, function () {
            console.error(
              "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
              getComponentNameFromFiber(finishedWork)
            );
          }));
        current.__reactInternalSnapshotBeforeUpdate = snapshot;
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function safelyCallComponentWillUnmount(
      current,
      nearestMountedAncestor,
      instance
    ) {
      instance.props = resolveClassComponentProps(
        current.type,
        current.memoizedProps
      );
      instance.state = current.memoizedState;
      shouldProfile(current)
        ? (startEffectTimer(),
          runWithFiberInDEV(
            current,
            callComponentWillUnmountInDEV,
            current,
            nearestMountedAncestor,
            instance
          ),
          recordEffectDuration())
        : runWithFiberInDEV(
            current,
            callComponentWillUnmountInDEV,
            current,
            nearestMountedAncestor,
            instance
          );
    }
    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (null !== ref) {
        switch (finishedWork.tag) {
          case 26:
          case 27:
          case 5:
            var instanceToUse = finishedWork.stateNode;
            break;
          case 30:
            instanceToUse = finishedWork.stateNode;
            break;
          default:
            instanceToUse = finishedWork.stateNode;
        }
        if ("function" === typeof ref)
          if (shouldProfile(finishedWork))
            try {
              startEffectTimer(),
                (finishedWork.refCleanup = ref(instanceToUse));
            } finally {
              recordEffectDuration();
            }
          else finishedWork.refCleanup = ref(instanceToUse);
        else
          "string" === typeof ref
            ? console.error("String refs are no longer supported.")
            : ref.hasOwnProperty("current") ||
              console.error(
                "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
                getComponentNameFromFiber(finishedWork)
              ),
            (ref.current = instanceToUse);
      }
    }
    function safelyAttachRef(current, nearestMountedAncestor) {
      try {
        runWithFiberInDEV(current, commitAttachRef, current);
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
      var ref = current.ref,
        refCleanup = current.refCleanup;
      if (null !== ref)
        if ("function" === typeof refCleanup)
          try {
            if (shouldProfile(current))
              try {
                startEffectTimer(), runWithFiberInDEV(current, refCleanup);
              } finally {
                recordEffectDuration(current);
              }
            else runWithFiberInDEV(current, refCleanup);
          } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
          } finally {
            (current.refCleanup = null),
              (current = current.alternate),
              null != current && (current.refCleanup = null);
          }
        else if ("function" === typeof ref)
          try {
            if (shouldProfile(current))
              try {
                startEffectTimer(), runWithFiberInDEV(current, ref, null);
              } finally {
                recordEffectDuration(current);
              }
            else runWithFiberInDEV(current, ref, null);
          } catch (error$7) {
            captureCommitPhaseError(current, nearestMountedAncestor, error$7);
          }
        else ref.current = null;
    }
    function commitProfiler(
      finishedWork,
      current,
      commitStartTime,
      effectDuration
    ) {
      var _finishedWork$memoize = finishedWork.memoizedProps,
        id = _finishedWork$memoize.id,
        onCommit = _finishedWork$memoize.onCommit;
      _finishedWork$memoize = _finishedWork$memoize.onRender;
      current = null === current ? "mount" : "update";
      currentUpdateIsNested && (current = "nested-update");
      "function" === typeof _finishedWork$memoize &&
        _finishedWork$memoize(
          id,
          current,
          finishedWork.actualDuration,
          finishedWork.treeBaseDuration,
          finishedWork.actualStartTime,
          commitStartTime
        );
      "function" === typeof onCommit &&
        onCommit(
          finishedWork.memoizedProps.id,
          current,
          effectDuration,
          commitStartTime
        );
    }
    function commitProfilerPostCommitImpl(
      finishedWork,
      current,
      commitStartTime,
      passiveEffectDuration
    ) {
      var _finishedWork$memoize2 = finishedWork.memoizedProps;
      finishedWork = _finishedWork$memoize2.id;
      _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;
      current = null === current ? "mount" : "update";
      currentUpdateIsNested && (current = "nested-update");
      "function" === typeof _finishedWork$memoize2 &&
        _finishedWork$memoize2(
          finishedWork,
          current,
          passiveEffectDuration,
          commitStartTime
        );
    }
    function commitHostMount(finishedWork) {
      var type = finishedWork.type,
        props = finishedWork.memoizedProps,
        instance = finishedWork.stateNode;
      try {
        runWithFiberInDEV(
          finishedWork,
          commitMount,
          instance,
          type,
          props,
          finishedWork
        );
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function commitHostUpdate(finishedWork, newProps, oldProps) {
      try {
        runWithFiberInDEV(
          finishedWork,
          commitUpdate,
          finishedWork.stateNode,
          finishedWork.type,
          oldProps,
          newProps,
          finishedWork
        );
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function isHostParent(fiber) {
      return (
        5 === fiber.tag ||
        3 === fiber.tag ||
        26 === fiber.tag ||
        (27 === fiber.tag && isSingletonScope(fiber.type)) ||
        4 === fiber.tag
      );
    }
    function getHostSibling(fiber) {
      a: for (;;) {
        for (; null === fiber.sibling; ) {
          if (null === fiber.return || isHostParent(fiber.return)) return null;
          fiber = fiber.return;
        }
        fiber.sibling.return = fiber.return;
        for (
          fiber = fiber.sibling;
          5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag;

        ) {
          if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
          if (fiber.flags & 2) continue a;
          if (null === fiber.child || 4 === fiber.tag) continue a;
          else (fiber.child.return = fiber), (fiber = fiber.child);
        }
        if (!(fiber.flags & 2)) return fiber.stateNode;
      }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
      var tag = node.tag;
      if (5 === tag || 6 === tag)
        (node = node.stateNode),
          before
            ? (9 === parent.nodeType
                ? parent.body
                : "HTML" === parent.nodeName
                  ? parent.ownerDocument.body
                  : parent
              ).insertBefore(node, before)
            : ((before =
                9 === parent.nodeType
                  ? parent.body
                  : "HTML" === parent.nodeName
                    ? parent.ownerDocument.body
                    : parent),
              before.appendChild(node),
              (parent = parent._reactRootContainer),
              (null !== parent && void 0 !== parent) ||
                null !== before.onclick ||
                (before.onclick = noop$1));
      else if (
        4 !== tag &&
        (27 === tag &&
          isSingletonScope(node.type) &&
          ((parent = node.stateNode), (before = null)),
        (node = node.child),
        null !== node)
      )
        for (
          insertOrAppendPlacementNodeIntoContainer(node, before, parent),
            node = node.sibling;
          null !== node;

        )
          insertOrAppendPlacementNodeIntoContainer(node, before, parent),
            (node = node.sibling);
    }
    function insertOrAppendPlacementNode(node, before, parent) {
      var tag = node.tag;
      if (5 === tag || 6 === tag)
        (node = node.stateNode),
          before ? parent.insertBefore(node, before) : parent.appendChild(node);
      else if (
        4 !== tag &&
        (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode),
        (node = node.child),
        null !== node)
      )
        for (
          insertOrAppendPlacementNode(node, before, parent),
            node = node.sibling;
          null !== node;

        )
          insertOrAppendPlacementNode(node, before, parent),
            (node = node.sibling);
    }
    function commitPlacement(finishedWork) {
      for (
        var hostParentFiber, parentFiber = finishedWork.return;
        null !== parentFiber;

      ) {
        if (isHostParent(parentFiber)) {
          hostParentFiber = parentFiber;
          break;
        }
        parentFiber = parentFiber.return;
      }
      if (null == hostParentFiber)
        throw Error(
          "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
        );
      switch (hostParentFiber.tag) {
        case 27:
          hostParentFiber = hostParentFiber.stateNode;
          parentFiber = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(
            finishedWork,
            parentFiber,
            hostParentFiber
          );
          break;
        case 5:
          parentFiber = hostParentFiber.stateNode;
          hostParentFiber.flags & 32 &&
            (resetTextContent(parentFiber), (hostParentFiber.flags &= -33));
          hostParentFiber = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(
            finishedWork,
            hostParentFiber,
            parentFiber
          );
          break;
        case 3:
        case 4:
          hostParentFiber = hostParentFiber.stateNode.containerInfo;
          parentFiber = getHostSibling(finishedWork);
          insertOrAppendPlacementNodeIntoContainer(
            finishedWork,
            parentFiber,
            hostParentFiber
          );
          break;
        default:
          throw Error(
            "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
          );
      }
    }
    function commitHostSingletonAcquisition(finishedWork) {
      var singleton = finishedWork.stateNode,
        props = finishedWork.memoizedProps;
      try {
        runWithFiberInDEV(
          finishedWork,
          acquireSingletonInstance,
          finishedWork.type,
          props,
          singleton,
          finishedWork
        );
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
    function commitBeforeMutationEffects(root, firstChild) {
      root = root.containerInfo;
      eventsEnabled = _enabled;
      root = getActiveElementDeep(root);
      if (hasSelectionCapabilities(root)) {
        if ("selectionStart" in root)
          var JSCompiler_temp = {
            start: root.selectionStart,
            end: root.selectionEnd
          };
        else
          a: {
            JSCompiler_temp =
              ((JSCompiler_temp = root.ownerDocument) &&
                JSCompiler_temp.defaultView) ||
              window;
            var selection =
              JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
            if (selection && 0 !== selection.rangeCount) {
              JSCompiler_temp = selection.anchorNode;
              var anchorOffset = selection.anchorOffset,
                focusNode = selection.focusNode;
              selection = selection.focusOffset;
              try {
                JSCompiler_temp.nodeType, focusNode.nodeType;
              } catch (e$2) {
                JSCompiler_temp = null;
                break a;
              }
              var length = 0,
                start = -1,
                end = -1,
                indexWithinAnchor = 0,
                indexWithinFocus = 0,
                node = root,
                parentNode = null;
              b: for (;;) {
                for (var next; ; ) {
                  node !== JSCompiler_temp ||
                    (0 !== anchorOffset && 3 !== node.nodeType) ||
                    (start = length + anchorOffset);
                  node !== focusNode ||
                    (0 !== selection && 3 !== node.nodeType) ||
                    (end = length + selection);
                  3 === node.nodeType && (length += node.nodeValue.length);
                  if (null === (next = node.firstChild)) break;
                  parentNode = node;
                  node = next;
                }
                for (;;) {
                  if (node === root) break b;
                  parentNode === JSCompiler_temp &&
                    ++indexWithinAnchor === anchorOffset &&
                    (start = length);
                  parentNode === focusNode &&
                    ++indexWithinFocus === selection &&
                    (end = length);
                  if (null !== (next = node.nextSibling)) break;
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
              JSCompiler_temp =
                -1 === start || -1 === end ? null : { start: start, end: end };
            } else JSCompiler_temp = null;
          }
        JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
      } else JSCompiler_temp = null;
      selectionInformation = {
        focusedElem: root,
        selectionRange: JSCompiler_temp
      };
      _enabled = !1;
      for (nextEffect = firstChild; null !== nextEffect; )
        if (
          ((firstChild = nextEffect),
          (root = firstChild.child),
          0 !== (firstChild.subtreeFlags & 1024) && null !== root)
        )
          (root.return = firstChild), (nextEffect = root);
        else
          for (; null !== nextEffect; ) {
            root = firstChild = nextEffect;
            JSCompiler_temp = root.alternate;
            anchorOffset = root.flags;
            switch (root.tag) {
              case 0:
                break;
              case 11:
              case 15:
                break;
              case 1:
                0 !== (anchorOffset & 1024) &&
                  null !== JSCompiler_temp &&
                  commitClassSnapshot(root, JSCompiler_temp);
                break;
              case 3:
                if (0 !== (anchorOffset & 1024))
                  if (
                    ((root = root.stateNode.containerInfo),
                    (JSCompiler_temp = root.nodeType),
                    9 === JSCompiler_temp)
                  )
                    clearContainerSparingly(root);
                  else if (1 === JSCompiler_temp)
                    switch (root.nodeName) {
                      case "HEAD":
                      case "HTML":
                      case "BODY":
                        clearContainerSparingly(root);
                        break;
                      default:
                        root.textContent = "";
                    }
                break;
              case 5:
              case 26:
              case 27:
              case 6:
              case 4:
              case 17:
                break;
              default:
                if (0 !== (anchorOffset & 1024))
                  throw Error(
                    "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                  );
            }
            root = firstChild.sibling;
            if (null !== root) {
              root.return = firstChild.return;
              nextEffect = root;
              break;
            }
            nextEffect = firstChild.return;
          }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
      var flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          flags & 4 &&
            commitHookLayoutEffects(finishedWork, Layout | HasEffect);
          break;
        case 1:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          if (flags & 4)
            if (((finishedRoot = finishedWork.stateNode), null === current))
              finishedWork.type.defaultProps ||
                "ref" in finishedWork.memoizedProps ||
                didWarnAboutReassigningProps ||
                (finishedRoot.props !== finishedWork.memoizedProps &&
                  console.error(
                    "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ),
                finishedRoot.state !== finishedWork.memoizedState &&
                  console.error(
                    "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  )),
                shouldProfile(finishedWork)
                  ? (startEffectTimer(),
                    runWithFiberInDEV(
                      finishedWork,
                      callComponentDidMountInDEV,
                      finishedWork,
                      finishedRoot
                    ),
                    recordEffectDuration())
                  : runWithFiberInDEV(
                      finishedWork,
                      callComponentDidMountInDEV,
                      finishedWork,
                      finishedRoot
                    );
            else {
              var prevProps = resolveClassComponentProps(
                finishedWork.type,
                current.memoizedProps
              );
              current = current.memoizedState;
              finishedWork.type.defaultProps ||
                "ref" in finishedWork.memoizedProps ||
                didWarnAboutReassigningProps ||
                (finishedRoot.props !== finishedWork.memoizedProps &&
                  console.error(
                    "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ),
                finishedRoot.state !== finishedWork.memoizedState &&
                  console.error(
                    "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                    getComponentNameFromFiber(finishedWork) || "instance"
                  ));
              shouldProfile(finishedWork)
                ? (startEffectTimer(),
                  runWithFiberInDEV(
                    finishedWork,
                    callComponentDidUpdateInDEV,
                    finishedWork,
                    finishedRoot,
                    prevProps,
                    current,
                    finishedRoot.__reactInternalSnapshotBeforeUpdate
                  ),
                  recordEffectDuration())
                : runWithFiberInDEV(
                    finishedWork,
                    callComponentDidUpdateInDEV,
                    finishedWork,
                    finishedRoot,
                    prevProps,
                    current,
                    finishedRoot.__reactInternalSnapshotBeforeUpdate
                  );
            }
          flags & 64 && commitClassCallbacks(finishedWork);
          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 3:
          current = pushNestedEffectDurations();
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          if (
            flags & 64 &&
            ((flags = finishedWork.updateQueue), null !== flags)
          ) {
            prevProps = null;
            if (null !== finishedWork.child)
              switch (finishedWork.child.tag) {
                case 27:
                case 5:
                  prevProps = finishedWork.child.stateNode;
                  break;
                case 1:
                  prevProps = finishedWork.child.stateNode;
              }
            try {
              runWithFiberInDEV(
                finishedWork,
                commitCallbacks,
                flags,
                prevProps
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          finishedRoot.effectDuration += popNestedEffectDurations(current);
          break;
        case 27:
          null === current &&
            flags & 4 &&
            commitHostSingletonAcquisition(finishedWork);
        case 26:
        case 5:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          null === current && flags & 4 && commitHostMount(finishedWork);
          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 12:
          if (flags & 4) {
            flags = pushNestedEffectDurations();
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            finishedRoot = finishedWork.stateNode;
            finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);
            try {
              runWithFiberInDEV(
                finishedWork,
                commitProfiler,
                finishedWork,
                current,
                commitStartTime,
                finishedRoot.effectDuration
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          break;
        case 13:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          flags & 4 &&
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          flags & 64 &&
            ((finishedRoot = finishedWork.memoizedState),
            null !== finishedRoot &&
              ((finishedRoot = finishedRoot.dehydrated),
              null !== finishedRoot &&
                ((finishedWork = retryDehydratedSuspenseBoundary.bind(
                  null,
                  finishedWork
                )),
                registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
          break;
        case 22:
          flags =
            null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
          if (!flags) {
            current =
              (null !== current && null !== current.memoizedState) ||
              offscreenSubtreeWasHidden;
            prevProps = offscreenSubtreeIsHidden;
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = flags;
            (offscreenSubtreeWasHidden = current) &&
            !prevOffscreenSubtreeWasHidden
              ? recursivelyTraverseReappearLayoutEffects(
                  finishedRoot,
                  finishedWork,
                  0 !== (finishedWork.subtreeFlags & 8772)
                )
              : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            offscreenSubtreeIsHidden = prevProps;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          }
          break;
        case 30:
          break;
        default:
          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      }
    }
    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      null !== alternate &&
        ((fiber.alternate = null), detachFiberAfterEffects(alternate));
      fiber.child = null;
      fiber.deletions = null;
      fiber.sibling = null;
      5 === fiber.tag &&
        ((alternate = fiber.stateNode),
        null !== alternate && detachDeletedInstance(alternate));
      fiber.stateNode = null;
      fiber._debugOwner = null;
      fiber.return = null;
      fiber.dependencies = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.stateNode = null;
      fiber.updateQueue = null;
    }
    function recursivelyTraverseDeletionEffects(
      finishedRoot,
      nearestMountedAncestor,
      parent
    ) {
      for (parent = parent.child; null !== parent; )
        commitDeletionEffectsOnFiber(
          finishedRoot,
          nearestMountedAncestor,
          parent
        ),
          (parent = parent.sibling);
    }
    function commitDeletionEffectsOnFiber(
      finishedRoot,
      nearestMountedAncestor,
      deletedFiber
    ) {
      if (
        injectedHook &&
        "function" === typeof injectedHook.onCommitFiberUnmount
      )
        try {
          injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
        } catch (err) {
          hasLoggedError ||
            ((hasLoggedError = !0),
            console.error(
              "React instrumentation encountered an error: %s",
              err
            ));
        }
      switch (deletedFiber.tag) {
        case 26:
          offscreenSubtreeWasHidden ||
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          deletedFiber.memoizedState
            ? deletedFiber.memoizedState.count--
            : deletedFiber.stateNode &&
              ((deletedFiber = deletedFiber.stateNode),
              deletedFiber.parentNode.removeChild(deletedFiber));
          break;
        case 27:
          offscreenSubtreeWasHidden ||
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
          var prevHostParent = hostParent,
            prevHostParentIsContainer = hostParentIsContainer;
          isSingletonScope(deletedFiber.type) &&
            ((hostParent = deletedFiber.stateNode),
            (hostParentIsContainer = !1));
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          runWithFiberInDEV(
            deletedFiber,
            releaseSingletonInstance,
            deletedFiber.stateNode
          );
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          break;
        case 5:
          offscreenSubtreeWasHidden ||
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
        case 6:
          prevHostParent = hostParent;
          prevHostParentIsContainer = hostParentIsContainer;
          hostParent = null;
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          if (null !== hostParent)
            if (hostParentIsContainer)
              try {
                runWithFiberInDEV(
                  deletedFiber,
                  removeChildFromContainer,
                  hostParent,
                  deletedFiber.stateNode
                );
              } catch (error) {
                captureCommitPhaseError(
                  deletedFiber,
                  nearestMountedAncestor,
                  error
                );
              }
            else
              try {
                runWithFiberInDEV(
                  deletedFiber,
                  removeChild,
                  hostParent,
                  deletedFiber.stateNode
                );
              } catch (error) {
                captureCommitPhaseError(
                  deletedFiber,
                  nearestMountedAncestor,
                  error
                );
              }
          break;
        case 18:
          null !== hostParent &&
            (hostParentIsContainer
              ? ((finishedRoot = hostParent),
                clearSuspenseBoundary(
                  9 === finishedRoot.nodeType
                    ? finishedRoot.body
                    : "HTML" === finishedRoot.nodeName
                      ? finishedRoot.ownerDocument.body
                      : finishedRoot,
                  deletedFiber.stateNode
                ),
                retryIfBlockedOn(finishedRoot))
              : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
          break;
        case 4:
          prevHostParent = hostParent;
          prevHostParentIsContainer = hostParentIsContainer;
          hostParent = deletedFiber.stateNode.containerInfo;
          hostParentIsContainer = !0;
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          offscreenSubtreeWasHidden ||
            commitHookEffectListUnmount(
              Insertion,
              deletedFiber,
              nearestMountedAncestor
            );
          offscreenSubtreeWasHidden ||
            commitHookLayoutUnmountEffects(
              deletedFiber,
              nearestMountedAncestor,
              Layout
            );
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;
        case 1:
          offscreenSubtreeWasHidden ||
            (safelyDetachRef(deletedFiber, nearestMountedAncestor),
            (prevHostParent = deletedFiber.stateNode),
            "function" === typeof prevHostParent.componentWillUnmount &&
              safelyCallComponentWillUnmount(
                deletedFiber,
                nearestMountedAncestor,
                prevHostParent
              ));
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;
        case 21:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;
        case 22:
          offscreenSubtreeWasHidden =
            (prevHostParent = offscreenSubtreeWasHidden) ||
            null !== deletedFiber.memoizedState;
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          offscreenSubtreeWasHidden = prevHostParent;
          break;
        default:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
      }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
      if (
        null === finishedWork.memoizedState &&
        ((finishedRoot = finishedWork.alternate),
        null !== finishedRoot &&
          ((finishedRoot = finishedRoot.memoizedState),
          null !== finishedRoot &&
            ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))
      )
        try {
          runWithFiberInDEV(
            finishedWork,
            commitHydratedSuspenseInstance,
            finishedRoot
          );
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
    function getRetryCache(finishedWork) {
      switch (finishedWork.tag) {
        case 13:
        case 19:
          var retryCache = finishedWork.stateNode;
          null === retryCache &&
            (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
          return retryCache;
        case 22:
          return (
            (finishedWork = finishedWork.stateNode),
            (retryCache = finishedWork._retryCache),
            null === retryCache &&
              (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),
            retryCache
          );
        default:
          throw Error(
            "Unexpected Suspense handler tag (" +
              finishedWork.tag +
              "). This is a bug in React."
          );
      }
    }
    function attachSuspenseRetryListeners(finishedWork, wakeables) {
      var retryCache = getRetryCache(finishedWork);
      wakeables.forEach(function (wakeable) {
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        if (!retryCache.has(wakeable)) {
          retryCache.add(wakeable);
          if (isDevToolsPresent)
            if (null !== inProgressLanes && null !== inProgressRoot)
              restorePendingUpdaters(inProgressRoot, inProgressLanes);
            else
              throw Error(
                "Expected finished root and lanes to be set. This is a bug in React."
              );
          wakeable.then(retry, retry);
        }
      });
    }
    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
      var deletions = parentFiber.deletions;
      if (null !== deletions)
        for (var i = 0; i < deletions.length; i++) {
          var root = root$jscomp$0,
            returnFiber = parentFiber,
            deletedFiber = deletions[i],
            parent = returnFiber;
          a: for (; null !== parent; ) {
            switch (parent.tag) {
              case 27:
                if (isSingletonScope(parent.type)) {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = !1;
                  break a;
                }
                break;
              case 5:
                hostParent = parent.stateNode;
                hostParentIsContainer = !1;
                break a;
              case 3:
              case 4:
                hostParent = parent.stateNode.containerInfo;
                hostParentIsContainer = !0;
                break a;
            }
            parent = parent.return;
          }
          if (null === hostParent)
            throw Error(
              "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
            );
          commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
          hostParent = null;
          hostParentIsContainer = !1;
          root = deletedFiber;
          returnFiber = root.alternate;
          null !== returnFiber && (returnFiber.return = null);
          root.return = null;
        }
      if (parentFiber.subtreeFlags & 13878)
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),
            (parentFiber = parentFiber.sibling);
    }
    function commitMutationEffectsOnFiber(finishedWork, root) {
      var current = finishedWork.alternate,
        flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 4 &&
            (commitHookEffectListUnmount(
              Insertion | HasEffect,
              finishedWork,
              finishedWork.return
            ),
            commitHookEffectListMount(Insertion | HasEffect, finishedWork),
            commitHookLayoutUnmountEffects(
              finishedWork,
              finishedWork.return,
              Layout | HasEffect
            ));
          break;
        case 1:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 &&
            (offscreenSubtreeWasHidden ||
              null === current ||
              safelyDetachRef(current, current.return));
          flags & 64 &&
            offscreenSubtreeIsHidden &&
            ((finishedWork = finishedWork.updateQueue),
            null !== finishedWork &&
              ((flags = finishedWork.callbacks),
              null !== flags &&
                ((current = finishedWork.shared.hiddenCallbacks),
                (finishedWork.shared.hiddenCallbacks =
                  null === current ? flags : current.concat(flags)))));
          break;
        case 26:
          var hoistableRoot = currentHoistableRoot;
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 &&
            (offscreenSubtreeWasHidden ||
              null === current ||
              safelyDetachRef(current, current.return));
          if (flags & 4)
            if (
              ((root = null !== current ? current.memoizedState : null),
              (flags = finishedWork.memoizedState),
              null === current)
            )
              if (null === flags)
                if (null === finishedWork.stateNode) {
                  a: {
                    flags = finishedWork.type;
                    current = finishedWork.memoizedProps;
                    root = hoistableRoot.ownerDocument || hoistableRoot;
                    b: switch (flags) {
                      case "title":
                        hoistableRoot = root.getElementsByTagName("title")[0];
                        if (
                          !hoistableRoot ||
                          hoistableRoot[internalHoistableMarker] ||
                          hoistableRoot[internalInstanceKey] ||
                          hoistableRoot.namespaceURI === SVG_NAMESPACE ||
                          hoistableRoot.hasAttribute("itemprop")
                        )
                          (hoistableRoot = root.createElement(flags)),
                            root.head.insertBefore(
                              hoistableRoot,
                              root.querySelector("head > title")
                            );
                        setInitialProperties(hoistableRoot, flags, current);
                        hoistableRoot[internalInstanceKey] = finishedWork;
                        markNodeAsHoistable(hoistableRoot);
                        flags = hoistableRoot;
                        break a;
                      case "link":
                        var maybeNodes = getHydratableHoistableCache(
                          "link",
                          "href",
                          root
                        ).get(flags + (current.href || ""));
                        if (maybeNodes)
                          for (var i = 0; i < maybeNodes.length; i++)
                            if (
                              ((hoistableRoot = maybeNodes[i]),
                              hoistableRoot.getAttribute("href") ===
                                (null == current.href || "" === current.href
                                  ? null
                                  : current.href) &&
                                hoistableRoot.getAttribute("rel") ===
                                  (null == current.rel ? null : current.rel) &&
                                hoistableRoot.getAttribute("title") ===
                                  (null == current.title
                                    ? null
                                    : current.title) &&
                                hoistableRoot.getAttribute("crossorigin") ===
                                  (null == current.crossOrigin
                                    ? null
                                    : current.crossOrigin))
                            ) {
                              maybeNodes.splice(i, 1);
                              break b;
                            }
                        hoistableRoot = root.createElement(flags);
                        setInitialProperties(hoistableRoot, flags, current);
                        root.head.appendChild(hoistableRoot);
                        break;
                      case "meta":
                        if (
                          (maybeNodes = getHydratableHoistableCache(
                            "meta",
                            "content",
                            root
                          ).get(flags + (current.content || "")))
                        )
                          for (i = 0; i < maybeNodes.length; i++)
                            if (
                              ((hoistableRoot = maybeNodes[i]),
                              checkAttributeStringCoercion(
                                current.content,
                                "content"
                              ),
                              hoistableRoot.getAttribute("content") ===
                                (null == current.content
                                  ? null
                                  : "" + current.content) &&
                                hoistableRoot.getAttribute("name") ===
                                  (null == current.name
                                    ? null
                                    : current.name) &&
                                hoistableRoot.getAttribute("property") ===
                                  (null == current.property
                                    ? null
                                    : current.property) &&
                                hoistableRoot.getAttribute("http-equiv") ===
                                  (null == current.httpEquiv
                                    ? null
                                    : current.httpEquiv) &&
                                hoistableRoot.getAttribute("charset") ===
                                  (null == current.charSet
                                    ? null
                                    : current.charSet))
                            ) {
                              maybeNodes.splice(i, 1);
                              break b;
                            }
                        hoistableRoot = root.createElement(flags);
                        setInitialProperties(hoistableRoot, flags, current);
                        root.head.appendChild(hoistableRoot);
                        break;
                      default:
                        throw Error(
                          'getNodesForType encountered a type it did not expect: "' +
                            flags +
                            '". This is a bug in React.'
                        );
                    }
                    hoistableRoot[internalInstanceKey] = finishedWork;
                    markNodeAsHoistable(hoistableRoot);
                    flags = hoistableRoot;
                  }
                  finishedWork.stateNode = flags;
                } else
                  mountHoistable(
                    hoistableRoot,
                    finishedWork.type,
                    finishedWork.stateNode
                  );
              else
                finishedWork.stateNode = acquireResource(
                  hoistableRoot,
                  flags,
                  finishedWork.memoizedProps
                );
            else
              root !== flags
                ? (null === root
                    ? null !== current.stateNode &&
                      ((current = current.stateNode),
                      current.parentNode.removeChild(current))
                    : root.count--,
                  null === flags
                    ? mountHoistable(
                        hoistableRoot,
                        finishedWork.type,
                        finishedWork.stateNode
                      )
                    : acquireResource(
                        hoistableRoot,
                        flags,
                        finishedWork.memoizedProps
                      ))
                : null === flags &&
                  null !== finishedWork.stateNode &&
                  commitHostUpdate(
                    finishedWork,
                    finishedWork.memoizedProps,
                    current.memoizedProps
                  );
          break;
        case 27:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 &&
            (offscreenSubtreeWasHidden ||
              null === current ||
              safelyDetachRef(current, current.return));
          null !== current &&
            flags & 4 &&
            commitHostUpdate(
              finishedWork,
              finishedWork.memoizedProps,
              current.memoizedProps
            );
          break;
        case 5:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 &&
            (offscreenSubtreeWasHidden ||
              null === current ||
              safelyDetachRef(current, current.return));
          if (finishedWork.flags & 32) {
            root = finishedWork.stateNode;
            try {
              runWithFiberInDEV(finishedWork, resetTextContent, root);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          flags & 4 &&
            null != finishedWork.stateNode &&
            ((root = finishedWork.memoizedProps),
            commitHostUpdate(
              finishedWork,
              root,
              null !== current ? current.memoizedProps : root
            ));
          flags & 1024 &&
            ((needsFormReset = !0),
            "form" !== finishedWork.type &&
              console.error(
                "Unexpected host component type. Expected a form. This is a bug in React."
              ));
          break;
        case 6:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & 4) {
            if (null === finishedWork.stateNode)
              throw Error(
                "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
              );
            flags = finishedWork.memoizedProps;
            current = null !== current ? current.memoizedProps : flags;
            root = finishedWork.stateNode;
            try {
              runWithFiberInDEV(
                finishedWork,
                commitTextUpdate,
                root,
                current,
                flags
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          break;
        case 3:
          hoistableRoot = pushNestedEffectDurations();
          tagCaches = null;
          maybeNodes = currentHoistableRoot;
          currentHoistableRoot = getHoistableRoot(root.containerInfo);
          recursivelyTraverseMutationEffects(root, finishedWork);
          currentHoistableRoot = maybeNodes;
          commitReconciliationEffects(finishedWork);
          if (
            flags & 4 &&
            null !== current &&
            current.memoizedState.isDehydrated
          )
            try {
              runWithFiberInDEV(
                finishedWork,
                commitHydratedContainer,
                root.containerInfo
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          needsFormReset &&
            ((needsFormReset = !1), recursivelyResetForms(finishedWork));
          root.effectDuration += popNestedEffectDurations(hoistableRoot);
          break;
        case 4:
          flags = currentHoistableRoot;
          currentHoistableRoot = getHoistableRoot(
            finishedWork.stateNode.containerInfo
          );
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          currentHoistableRoot = flags;
          break;
        case 12:
          flags = pushNestedEffectDurations();
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          finishedWork.stateNode.effectDuration +=
            bubbleNestedEffectDurations(flags);
          break;
        case 13:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          finishedWork.child.flags & 8192 &&
            (null !== finishedWork.memoizedState) !==
              (null !== current && null !== current.memoizedState) &&
            (globalMostRecentFallbackTime = now$1());
          flags & 4 &&
            ((flags = finishedWork.updateQueue),
            null !== flags &&
              ((finishedWork.updateQueue = null),
              attachSuspenseRetryListeners(finishedWork, flags)));
          break;
        case 22:
          hoistableRoot = null !== finishedWork.memoizedState;
          var wasHidden = null !== current && null !== current.memoizedState,
            prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
            prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden =
            prevOffscreenSubtreeIsHidden || hoistableRoot;
          offscreenSubtreeWasHidden =
            prevOffscreenSubtreeWasHidden || wasHidden;
          recursivelyTraverseMutationEffects(root, finishedWork);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
          commitReconciliationEffects(finishedWork);
          if (flags & 8192)
            a: for (
              root = finishedWork.stateNode,
                root._visibility = hoistableRoot
                  ? root._visibility & ~OffscreenVisible
                  : root._visibility | OffscreenVisible,
                hoistableRoot &&
                  (null === current ||
                    wasHidden ||
                    offscreenSubtreeIsHidden ||
                    offscreenSubtreeWasHidden ||
                    recursivelyTraverseDisappearLayoutEffects(finishedWork)),
                current = null,
                root = finishedWork;
              ;

            ) {
              if (5 === root.tag || 26 === root.tag) {
                if (null === current) {
                  wasHidden = current = root;
                  try {
                    (maybeNodes = wasHidden.stateNode),
                      hoistableRoot
                        ? runWithFiberInDEV(wasHidden, hideInstance, maybeNodes)
                        : runWithFiberInDEV(
                            wasHidden,
                            unhideInstance,
                            wasHidden.stateNode,
                            wasHidden.memoizedProps
                          );
                  } catch (error) {
                    captureCommitPhaseError(wasHidden, wasHidden.return, error);
                  }
                }
              } else if (6 === root.tag) {
                if (null === current) {
                  wasHidden = root;
                  try {
                    (i = wasHidden.stateNode),
                      hoistableRoot
                        ? runWithFiberInDEV(wasHidden, hideTextInstance, i)
                        : runWithFiberInDEV(
                            wasHidden,
                            unhideTextInstance,
                            i,
                            wasHidden.memoizedProps
                          );
                  } catch (error) {
                    captureCommitPhaseError(wasHidden, wasHidden.return, error);
                  }
                }
              } else if (
                ((22 !== root.tag && 23 !== root.tag) ||
                  null === root.memoizedState ||
                  root === finishedWork) &&
                null !== root.child
              ) {
                root.child.return = root;
                root = root.child;
                continue;
              }
              if (root === finishedWork) break a;
              for (; null === root.sibling; ) {
                if (null === root.return || root.return === finishedWork)
                  break a;
                current === root && (current = null);
                root = root.return;
              }
              current === root && (current = null);
              root.sibling.return = root.return;
              root = root.sibling;
            }
          flags & 4 &&
            ((flags = finishedWork.updateQueue),
            null !== flags &&
              ((current = flags.retryQueue),
              null !== current &&
                ((flags.retryQueue = null),
                attachSuspenseRetryListeners(finishedWork, current))));
          break;
        case 19:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 4 &&
            ((flags = finishedWork.updateQueue),
            null !== flags &&
              ((finishedWork.updateQueue = null),
              attachSuspenseRetryListeners(finishedWork, flags)));
          break;
        case 30:
          break;
        case 21:
          break;
        default:
          recursivelyTraverseMutationEffects(root, finishedWork),
            commitReconciliationEffects(finishedWork);
      }
    }
    function commitReconciliationEffects(finishedWork) {
      var flags = finishedWork.flags;
      if (flags & 2) {
        try {
          runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
        finishedWork.flags &= -3;
      }
      flags & 4096 && (finishedWork.flags &= -4097);
    }
    function recursivelyResetForms(parentFiber) {
      if (parentFiber.subtreeFlags & 1024)
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var fiber = parentFiber;
          recursivelyResetForms(fiber);
          5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
          parentFiber = parentFiber.sibling;
        }
    }
    function recursivelyTraverseLayoutEffects(root, parentFiber) {
      if (parentFiber.subtreeFlags & 8772)
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber),
            (parentFiber = parentFiber.sibling);
    }
    function disappearLayoutEffects(finishedWork) {
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          commitHookLayoutUnmountEffects(
            finishedWork,
            finishedWork.return,
            Layout
          );
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 1:
          safelyDetachRef(finishedWork, finishedWork.return);
          var instance = finishedWork.stateNode;
          "function" === typeof instance.componentWillUnmount &&
            safelyCallComponentWillUnmount(
              finishedWork,
              finishedWork.return,
              instance
            );
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 27:
          runWithFiberInDEV(
            finishedWork,
            releaseSingletonInstance,
            finishedWork.stateNode
          );
        case 26:
        case 5:
          safelyDetachRef(finishedWork, finishedWork.return);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 22:
          null === finishedWork.memoizedState &&
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 30:
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        default:
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
      }
    }
    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
      for (parentFiber = parentFiber.child; null !== parentFiber; )
        disappearLayoutEffects(parentFiber),
          (parentFiber = parentFiber.sibling);
    }
    function reappearLayoutEffects(
      finishedRoot,
      current,
      finishedWork,
      includeWorkInProgressEffects
    ) {
      var flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          commitHookLayoutEffects(finishedWork, Layout);
          break;
        case 1:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          current = finishedWork.stateNode;
          "function" === typeof current.componentDidMount &&
            runWithFiberInDEV(
              finishedWork,
              callComponentDidMountInDEV,
              finishedWork,
              current
            );
          current = finishedWork.updateQueue;
          if (null !== current) {
            finishedRoot = finishedWork.stateNode;
            try {
              runWithFiberInDEV(
                finishedWork,
                commitHiddenCallbacks,
                current,
                finishedRoot
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          includeWorkInProgressEffects &&
            flags & 64 &&
            commitClassCallbacks(finishedWork);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 27:
          commitHostSingletonAcquisition(finishedWork);
        case 26:
        case 5:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          includeWorkInProgressEffects &&
            null === current &&
            flags & 4 &&
            commitHostMount(finishedWork);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 12:
          if (includeWorkInProgressEffects && flags & 4) {
            flags = pushNestedEffectDurations();
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
            includeWorkInProgressEffects = finishedWork.stateNode;
            includeWorkInProgressEffects.effectDuration +=
              bubbleNestedEffectDurations(flags);
            try {
              runWithFiberInDEV(
                finishedWork,
                commitProfiler,
                finishedWork,
                current,
                commitStartTime,
                includeWorkInProgressEffects.effectDuration
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          } else
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
          break;
        case 13:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          includeWorkInProgressEffects &&
            flags & 4 &&
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          break;
        case 22:
          null === finishedWork.memoizedState &&
            recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              includeWorkInProgressEffects
            );
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 30:
          break;
        default:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
      }
    }
    function recursivelyTraverseReappearLayoutEffects(
      finishedRoot,
      parentFiber,
      includeWorkInProgressEffects
    ) {
      includeWorkInProgressEffects =
        includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
      for (parentFiber = parentFiber.child; null !== parentFiber; )
        reappearLayoutEffects(
          finishedRoot,
          parentFiber.alternate,
          parentFiber,
          includeWorkInProgressEffects
        ),
          (parentFiber = parentFiber.sibling);
    }
    function commitOffscreenPassiveMountEffects(current, finishedWork) {
      var previousCache = null;
      null !== current &&
        null !== current.memoizedState &&
        null !== current.memoizedState.cachePool &&
        (previousCache = current.memoizedState.cachePool.pool);
      current = null;
      null !== finishedWork.memoizedState &&
        null !== finishedWork.memoizedState.cachePool &&
        (current = finishedWork.memoizedState.cachePool.pool);
      current !== previousCache &&
        (null != current && retainCache(current),
        null != previousCache && releaseCache(previousCache));
    }
    function commitCachePassiveMountEffect(current, finishedWork) {
      current = null;
      null !== finishedWork.alternate &&
        (current = finishedWork.alternate.memoizedState.cache);
      finishedWork = finishedWork.memoizedState.cache;
      finishedWork !== current &&
        (retainCache(finishedWork), null != current && releaseCache(current));
    }
    function recursivelyTraversePassiveMountEffects(
      root,
      parentFiber,
      committedLanes,
      committedTransitions
    ) {
      if (parentFiber.subtreeFlags & 10256)
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          commitPassiveMountOnFiber(
            root,
            parentFiber,
            committedLanes,
            committedTransitions
          ),
            (parentFiber = parentFiber.sibling);
    }
    function commitPassiveMountOnFiber(
      finishedRoot,
      finishedWork,
      committedLanes,
      committedTransitions
    ) {
      var flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          flags & 2048 &&
            commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
          break;
        case 1:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          break;
        case 3:
          var prevEffectDuration = pushNestedEffectDurations();
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          flags & 2048 &&
            ((committedLanes = null),
            null !== finishedWork.alternate &&
              (committedLanes = finishedWork.alternate.memoizedState.cache),
            (finishedWork = finishedWork.memoizedState.cache),
            finishedWork !== committedLanes &&
              (retainCache(finishedWork),
              null != committedLanes && releaseCache(committedLanes)));
          finishedRoot.passiveEffectDuration +=
            popNestedEffectDurations(prevEffectDuration);
          break;
        case 12:
          if (flags & 2048) {
            flags = pushNestedEffectDurations();
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            finishedRoot = finishedWork.stateNode;
            finishedRoot.passiveEffectDuration +=
              bubbleNestedEffectDurations(flags);
            try {
              runWithFiberInDEV(
                finishedWork,
                commitProfilerPostCommitImpl,
                finishedWork,
                finishedWork.alternate,
                commitStartTime,
                finishedRoot.passiveEffectDuration
              );
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          } else
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
          break;
        case 13:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          break;
        case 23:
          break;
        case 22:
          prevEffectDuration = finishedWork.stateNode;
          var _current = finishedWork.alternate;
          null !== finishedWork.memoizedState
            ? prevEffectDuration._visibility & OffscreenPassiveEffectsConnected
              ? recursivelyTraversePassiveMountEffects(
                  finishedRoot,
                  finishedWork,
                  committedLanes,
                  committedTransitions
                )
              : recursivelyTraverseAtomicPassiveEffects(
                  finishedRoot,
                  finishedWork
                )
            : prevEffectDuration._visibility & OffscreenPassiveEffectsConnected
              ? recursivelyTraversePassiveMountEffects(
                  finishedRoot,
                  finishedWork,
                  committedLanes,
                  committedTransitions
                )
              : ((prevEffectDuration._visibility |=
                  OffscreenPassiveEffectsConnected),
                recursivelyTraverseReconnectPassiveEffects(
                  finishedRoot,
                  finishedWork,
                  committedLanes,
                  committedTransitions,
                  0 !== (finishedWork.subtreeFlags & 10256)
                ));
          flags & 2048 &&
            commitOffscreenPassiveMountEffects(_current, finishedWork);
          break;
        case 24:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          flags & 2048 &&
            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
      }
    }
    function recursivelyTraverseReconnectPassiveEffects(
      finishedRoot,
      parentFiber,
      committedLanes,
      committedTransitions,
      includeWorkInProgressEffects
    ) {
      includeWorkInProgressEffects =
        includeWorkInProgressEffects &&
        0 !== (parentFiber.subtreeFlags & 10256);
      for (parentFiber = parentFiber.child; null !== parentFiber; )
        reconnectPassiveEffects(
          finishedRoot,
          parentFiber,
          committedLanes,
          committedTransitions,
          includeWorkInProgressEffects
        ),
          (parentFiber = parentFiber.sibling);
    }
    function reconnectPassiveEffects(
      finishedRoot,
      finishedWork,
      committedLanes,
      committedTransitions,
      includeWorkInProgressEffects
    ) {
      var flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseReconnectPassiveEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions,
            includeWorkInProgressEffects
          );
          commitHookPassiveMountEffects(finishedWork, Passive);
          break;
        case 23:
          break;
        case 22:
          var _instance2 = finishedWork.stateNode;
          null !== finishedWork.memoizedState
            ? _instance2._visibility & OffscreenPassiveEffectsConnected
              ? recursivelyTraverseReconnectPassiveEffects(
                  finishedRoot,
                  finishedWork,
                  committedLanes,
                  committedTransitions,
                  includeWorkInProgressEffects
                )
              : recursivelyTraverseAtomicPassiveEffects(
                  finishedRoot,
                  finishedWork
                )
            : ((_instance2._visibility |= OffscreenPassiveEffectsConnected),
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              ));
          includeWorkInProgressEffects &&
            flags & 2048 &&
            commitOffscreenPassiveMountEffects(
              finishedWork.alternate,
              finishedWork
            );
          break;
        case 24:
          recursivelyTraverseReconnectPassiveEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions,
            includeWorkInProgressEffects
          );
          includeWorkInProgressEffects &&
            flags & 2048 &&
            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraverseReconnectPassiveEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions,
            includeWorkInProgressEffects
          );
      }
    }
    function recursivelyTraverseAtomicPassiveEffects(
      finishedRoot$jscomp$0,
      parentFiber
    ) {
      if (parentFiber.subtreeFlags & 10256)
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var finishedRoot = finishedRoot$jscomp$0,
            finishedWork = parentFiber,
            flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 22:
              recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork
              );
              flags & 2048 &&
                commitOffscreenPassiveMountEffects(
                  finishedWork.alternate,
                  finishedWork
                );
              break;
            case 24:
              recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork
              );
              flags & 2048 &&
                commitCachePassiveMountEffect(
                  finishedWork.alternate,
                  finishedWork
                );
              break;
            default:
              recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork
              );
          }
          parentFiber = parentFiber.sibling;
        }
    }
    function recursivelyAccumulateSuspenseyCommit(parentFiber) {
      if (parentFiber.subtreeFlags & suspenseyCommitFlag)
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          accumulateSuspenseyCommitOnFiber(parentFiber),
            (parentFiber = parentFiber.sibling);
    }
    function accumulateSuspenseyCommitOnFiber(fiber) {
      switch (fiber.tag) {
        case 26:
          recursivelyAccumulateSuspenseyCommit(fiber);
          fiber.flags & suspenseyCommitFlag &&
            null !== fiber.memoizedState &&
            suspendResource(
              currentHoistableRoot,
              fiber.memoizedState,
              fiber.memoizedProps
            );
          break;
        case 5:
          recursivelyAccumulateSuspenseyCommit(fiber);
          break;
        case 3:
        case 4:
          var previousHoistableRoot = currentHoistableRoot;
          currentHoistableRoot = getHoistableRoot(
            fiber.stateNode.containerInfo
          );
          recursivelyAccumulateSuspenseyCommit(fiber);
          currentHoistableRoot = previousHoistableRoot;
          break;
        case 22:
          null === fiber.memoizedState &&
            ((previousHoistableRoot = fiber.alternate),
            null !== previousHoistableRoot &&
            null !== previousHoistableRoot.memoizedState
              ? ((previousHoistableRoot = suspenseyCommitFlag),
                (suspenseyCommitFlag = 16777216),
                recursivelyAccumulateSuspenseyCommit(fiber),
                (suspenseyCommitFlag = previousHoistableRoot))
              : recursivelyAccumulateSuspenseyCommit(fiber));
          break;
        default:
          recursivelyAccumulateSuspenseyCommit(fiber);
      }
    }
    function detachAlternateSiblings(parentFiber) {
      var previousFiber = parentFiber.alternate;
      if (
        null !== previousFiber &&
        ((parentFiber = previousFiber.child), null !== parentFiber)
      ) {
        previousFiber.child = null;
        do
          (previousFiber = parentFiber.sibling),
            (parentFiber.sibling = null),
            (parentFiber = previousFiber);
        while (null !== parentFiber);
      }
    }
    function recursivelyTraversePassiveUnmountEffects(parentFiber) {
      var deletions = parentFiber.deletions;
      if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions)
          for (var i = 0; i < deletions.length; i++) {
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
              childToDelete,
              parentFiber
            );
          }
        detachAlternateSiblings(parentFiber);
      }
      if (parentFiber.subtreeFlags & 10256)
        for (parentFiber = parentFiber.child; null !== parentFiber; )
          commitPassiveUnmountOnFiber(parentFiber),
            (parentFiber = parentFiber.sibling);
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraversePassiveUnmountEffects(finishedWork);
          finishedWork.flags & 2048 &&
            commitHookPassiveUnmountEffects(
              finishedWork,
              finishedWork.return,
              Passive | HasEffect
            );
          break;
        case 3:
          var prevEffectDuration = pushNestedEffectDurations();
          recursivelyTraversePassiveUnmountEffects(finishedWork);
          finishedWork.stateNode.passiveEffectDuration +=
            popNestedEffectDurations(prevEffectDuration);
          break;
        case 12:
          prevEffectDuration = pushNestedEffectDurations();
          recursivelyTraversePassiveUnmountEffects(finishedWork);
          finishedWork.stateNode.passiveEffectDuration +=
            bubbleNestedEffectDurations(prevEffectDuration);
          break;
        case 22:
          prevEffectDuration = finishedWork.stateNode;
          null !== finishedWork.memoizedState &&
          prevEffectDuration._visibility & OffscreenPassiveEffectsConnected &&
          (null === finishedWork.return || 13 !== finishedWork.return.tag)
            ? ((prevEffectDuration._visibility &=
                ~OffscreenPassiveEffectsConnected),
              recursivelyTraverseDisconnectPassiveEffects(finishedWork))
            : recursivelyTraversePassiveUnmountEffects(finishedWork);
          break;
        default:
          recursivelyTraversePassiveUnmountEffects(finishedWork);
      }
    }
    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
      var deletions = parentFiber.deletions;
      if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions)
          for (var i = 0; i < deletions.length; i++) {
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
              childToDelete,
              parentFiber
            );
          }
        detachAlternateSiblings(parentFiber);
      }
      for (parentFiber = parentFiber.child; null !== parentFiber; )
        disconnectPassiveEffect(parentFiber),
          (parentFiber = parentFiber.sibling);
    }
    function disconnectPassiveEffect(finishedWork) {
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          commitHookPassiveUnmountEffects(
            finishedWork,
            finishedWork.return,
            Passive
          );
          recursivelyTraverseDisconnectPassiveEffects(finishedWork);
          break;
        case 22:
          var instance = finishedWork.stateNode;
          instance._visibility & OffscreenPassiveEffectsConnected &&
            ((instance._visibility &= ~OffscreenPassiveEffectsConnected),
            recursivelyTraverseDisconnectPassiveEffects(finishedWork));
          break;
        default:
          recursivelyTraverseDisconnectPassiveEffects(finishedWork);
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
      deletedSubtreeRoot,
      nearestMountedAncestor
    ) {
      for (; null !== nextEffect; ) {
        var fiber = nextEffect,
          current = fiber;
        switch (current.tag) {
          case 0:
          case 11:
          case 15:
            commitHookPassiveUnmountEffects(
              current,
              nearestMountedAncestor,
              Passive
            );
            break;
          case 23:
          case 22:
            null !== current.memoizedState &&
              null !== current.memoizedState.cachePool &&
              ((current = current.memoizedState.cachePool.pool),
              null != current && retainCache(current));
            break;
          case 24:
            releaseCache(current.memoizedState.cache);
        }
        current = fiber.child;
        if (null !== current) (current.return = fiber), (nextEffect = current);
        else
          a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
            current = nextEffect;
            var sibling = current.sibling,
              returnFiber = current.return;
            detachFiberAfterEffects(current);
            if (current === fiber) {
              nextEffect = null;
              break a;
            }
            if (null !== sibling) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              break a;
            }
            nextEffect = returnFiber;
          }
      }
    }
    function onCommitRoot() {
      commitHooks.forEach(function (commitHook) {
        return commitHook();
      });
    }
    function isConcurrentActEnvironment() {
      var isReactActEnvironmentGlobal =
        "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT
          ? IS_REACT_ACT_ENVIRONMENT
          : void 0;
      isReactActEnvironmentGlobal ||
        null === ReactSharedInternals.actQueue ||
        console.error(
          "The current testing environment is not configured to support act(...)"
        );
      return isReactActEnvironmentGlobal;
    }
    function requestUpdateLane(fiber) {
      if (
        (executionContext & RenderContext) !== NoContext &&
        0 !== workInProgressRootRenderLanes
      )
        return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
      var transition = ReactSharedInternals.T;
      return null !== transition
        ? (transition._updatedFibers || (transition._updatedFibers = new Set()),
          transition._updatedFibers.add(fiber),
          (fiber = currentEntangledLane),
          0 !== fiber ? fiber : requestTransitionLane())
        : resolveUpdatePriority();
    }
    function requestDeferredLane() {
      0 === workInProgressDeferredLane &&
        (workInProgressDeferredLane =
          0 === (workInProgressRootRenderLanes & 536870912) || isHydrating
            ? claimNextTransitionLane()
            : 536870912);
      var suspenseHandler = suspenseHandlerStackCursor.current;
      null !== suspenseHandler && (suspenseHandler.flags |= 32);
      return workInProgressDeferredLane;
    }
    function scheduleUpdateOnFiber(root, fiber, lane) {
      isRunningInsertionEffect &&
        console.error("useInsertionEffect must not schedule updates.");
      isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = !0);
      if (
        (root === workInProgressRoot &&
          (workInProgressSuspendedReason === SuspendedOnData ||
            workInProgressSuspendedReason === SuspendedOnAction)) ||
        null !== root.cancelPendingCommit
      )
        prepareFreshStack(root, 0),
          markRootSuspended(
            root,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane,
            !1
          );
      markRootUpdated$1(root, lane);
      if (
        0 !== (executionContext & RenderContext) &&
        root === workInProgressRoot
      ) {
        if (isRendering)
          switch (fiber.tag) {
            case 0:
            case 11:
            case 15:
              root =
                (workInProgress && getComponentNameFromFiber(workInProgress)) ||
                "Unknown";
              didWarnAboutUpdateInRenderForAnotherComponent.has(root) ||
                (didWarnAboutUpdateInRenderForAnotherComponent.add(root),
                (fiber = getComponentNameFromFiber(fiber) || "Unknown"),
                console.error(
                  "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",
                  fiber,
                  root,
                  root
                ));
              break;
            case 1:
              didWarnAboutUpdateInRender ||
                (console.error(
                  "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
                ),
                (didWarnAboutUpdateInRender = !0));
          }
      } else
        isDevToolsPresent && addFiberToLanesMap(root, fiber, lane),
          warnIfUpdatesNotWrappedWithActDEV(fiber),
          root === workInProgressRoot &&
            ((executionContext & RenderContext) === NoContext &&
              (workInProgressRootInterleavedUpdatedLanes |= lane),
            workInProgressRootExitStatus === RootSuspendedWithDelay &&
              markRootSuspended(
                root,
                workInProgressRootRenderLanes,
                workInProgressDeferredLane,
                !1
              )),
          ensureRootIsScheduled(root);
    }
    function performWorkOnRoot(root, lanes, forceSync) {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
        throw Error("Should not already be working.");
      var shouldTimeSlice =
          (!forceSync &&
            0 === (lanes & 124) &&
            0 === (lanes & root.expiredLanes)) ||
          checkIfRootIsPrerendering(root, lanes),
        exitStatus = shouldTimeSlice
          ? renderRootConcurrent(root, lanes)
          : renderRootSync(root, lanes, !0),
        renderWasConcurrent = shouldTimeSlice;
      do {
        if (exitStatus === RootInProgress) {
          workInProgressRootIsPrerendering &&
            !shouldTimeSlice &&
            markRootSuspended(root, lanes, 0, !1);
          break;
        } else {
          forceSync = root.current.alternate;
          if (
            renderWasConcurrent &&
            !isRenderConsistentWithExternalStores(forceSync)
          ) {
            exitStatus = renderRootSync(root, lanes, !1);
            renderWasConcurrent = !1;
            continue;
          }
          if (exitStatus === RootErrored) {
            renderWasConcurrent = lanes;
            if (root.errorRecoveryDisabledLanes & renderWasConcurrent)
              var errorRetryLanes = 0;
            else
              (errorRetryLanes = root.pendingLanes & -536870913),
                (errorRetryLanes =
                  0 !== errorRetryLanes
                    ? errorRetryLanes
                    : errorRetryLanes & 536870912
                      ? 536870912
                      : 0);
            if (0 !== errorRetryLanes) {
              lanes = errorRetryLanes;
              a: {
                exitStatus = root;
                var errorRetryLanes$jscomp$0 = errorRetryLanes;
                errorRetryLanes = workInProgressRootConcurrentErrors;
                var wasRootDehydrated =
                  exitStatus.current.memoizedState.isDehydrated;
                wasRootDehydrated &&
                  (prepareFreshStack(
                    exitStatus,
                    errorRetryLanes$jscomp$0
                  ).flags |= 256);
                errorRetryLanes$jscomp$0 = renderRootSync(
                  exitStatus,
                  errorRetryLanes$jscomp$0,
                  !1
                );
                if (errorRetryLanes$jscomp$0 !== RootErrored) {
                  if (
                    workInProgressRootDidAttachPingListener &&
                    !wasRootDehydrated
                  ) {
                    exitStatus.errorRecoveryDisabledLanes |=
                      renderWasConcurrent;
                    workInProgressRootInterleavedUpdatedLanes |=
                      renderWasConcurrent;
                    exitStatus = RootSuspendedWithDelay;
                    break a;
                  }
                  exitStatus = workInProgressRootRecoverableErrors;
                  workInProgressRootRecoverableErrors = errorRetryLanes;
                  null !== exitStatus &&
                    (null === workInProgressRootRecoverableErrors
                      ? (workInProgressRootRecoverableErrors = exitStatus)
                      : workInProgressRootRecoverableErrors.push.apply(
                          workInProgressRootRecoverableErrors,
                          exitStatus
                        ));
                }
                exitStatus = errorRetryLanes$jscomp$0;
              }
              renderWasConcurrent = !1;
              if (exitStatus !== RootErrored) continue;
            }
          }
          if (exitStatus === RootFatalErrored) {
            prepareFreshStack(root, 0);
            markRootSuspended(root, lanes, 0, !0);
            break;
          }
          a: {
            shouldTimeSlice = root;
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
              case RootSuspendedWithDelay:
                if ((lanes & 4194048) !== lanes) break;
              case RootSuspendedAtTheShell:
                markRootSuspended(
                  shouldTimeSlice,
                  lanes,
                  workInProgressDeferredLane,
                  !workInProgressRootDidSkipSuspendedSiblings
                );
                break a;
              case RootErrored:
                workInProgressRootRecoverableErrors = null;
                break;
              case RootSuspended:
              case RootCompleted:
                break;
              default:
                throw Error("Unknown root exit status.");
            }
            if (null !== ReactSharedInternals.actQueue)
              commitRoot(
                shouldTimeSlice,
                forceSync,
                lanes,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions,
                workInProgressRootDidIncludeRecursiveRenderUpdate,
                workInProgressDeferredLane,
                workInProgressRootInterleavedUpdatedLanes,
                workInProgressSuspendedRetryLanes
              );
            else {
              if (
                (lanes & 62914560) === lanes &&
                ((renderWasConcurrent =
                  globalMostRecentFallbackTime +
                  FALLBACK_THROTTLE_MS -
                  now$1()),
                10 < renderWasConcurrent)
              ) {
                markRootSuspended(
                  shouldTimeSlice,
                  lanes,
                  workInProgressDeferredLane,
                  !workInProgressRootDidSkipSuspendedSiblings
                );
                if (0 !== getNextLanes(shouldTimeSlice, 0, !0)) break a;
                shouldTimeSlice.timeoutHandle = scheduleTimeout(
                  commitRootWhenReady.bind(
                    null,
                    shouldTimeSlice,
                    forceSync,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    lanes,
                    workInProgressDeferredLane,
                    workInProgressRootInterleavedUpdatedLanes,
                    workInProgressSuspendedRetryLanes,
                    workInProgressRootDidSkipSuspendedSiblings,
                    exitStatus,
                    THROTTLED_COMMIT,
                    renderStartTime,
                    0
                  ),
                  renderWasConcurrent
                );
                break a;
              }
              commitRootWhenReady(
                shouldTimeSlice,
                forceSync,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions,
                workInProgressRootDidIncludeRecursiveRenderUpdate,
                lanes,
                workInProgressDeferredLane,
                workInProgressRootInterleavedUpdatedLanes,
                workInProgressSuspendedRetryLanes,
                workInProgressRootDidSkipSuspendedSiblings,
                exitStatus,
                IMMEDIATE_COMMIT,
                renderStartTime,
                0
              );
            }
          }
        }
        break;
      } while (1);
      ensureRootIsScheduled(root);
    }
    function commitRootWhenReady(
      root,
      finishedWork,
      recoverableErrors,
      transitions,
      didIncludeRenderPhaseUpdate,
      lanes,
      spawnedLane,
      updatedLanes,
      suspendedRetryLanes,
      didSkipSuspendedSiblings,
      exitStatus,
      suspendedCommitReason,
      completedRenderStartTime,
      completedRenderEndTime
    ) {
      root.timeoutHandle = noTimeout;
      suspendedCommitReason = finishedWork.subtreeFlags;
      if (
        suspendedCommitReason & 8192 ||
        16785408 === (suspendedCommitReason & 16785408)
      )
        if (
          ((suspendedState = { stylesheets: null, count: 0, unsuspend: noop }),
          accumulateSuspenseyCommitOnFiber(finishedWork),
          (suspendedCommitReason = waitForCommitToBeReady()),
          null !== suspendedCommitReason)
        ) {
          root.cancelPendingCommit = suspendedCommitReason(
            commitRoot.bind(
              null,
              root,
              finishedWork,
              lanes,
              recoverableErrors,
              transitions,
              didIncludeRenderPhaseUpdate,
              spawnedLane,
              updatedLanes,
              suspendedRetryLanes,
              exitStatus,
              SUSPENDED_COMMIT,
              completedRenderStartTime,
              completedRenderEndTime
            )
          );
          markRootSuspended(
            root,
            lanes,
            spawnedLane,
            !didSkipSuspendedSiblings
          );
          return;
        }
      commitRoot(
        root,
        finishedWork,
        lanes,
        recoverableErrors,
        transitions,
        didIncludeRenderPhaseUpdate,
        spawnedLane,
        updatedLanes,
        suspendedRetryLanes
      );
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
      for (var node = finishedWork; ; ) {
        var tag = node.tag;
        if (
          (0 === tag || 11 === tag || 15 === tag) &&
          node.flags & 16384 &&
          ((tag = node.updateQueue),
          null !== tag && ((tag = tag.stores), null !== tag))
        )
          for (var i = 0; i < tag.length; i++) {
            var check = tag[i],
              getSnapshot = check.getSnapshot;
            check = check.value;
            try {
              if (!objectIs(getSnapshot(), check)) return !1;
            } catch (error) {
              return !1;
            }
          }
        tag = node.child;
        if (node.subtreeFlags & 16384 && null !== tag)
          (tag.return = node), (node = tag);
        else {
          if (node === finishedWork) break;
          for (; null === node.sibling; ) {
            if (null === node.return || node.return === finishedWork) return !0;
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      return !0;
    }
    function markRootSuspended(
      root,
      suspendedLanes,
      spawnedLane,
      didAttemptEntireTree
    ) {
      suspendedLanes &= ~workInProgressRootPingedLanes;
      suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
      root.suspendedLanes |= suspendedLanes;
      root.pingedLanes &= ~suspendedLanes;
      didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
      didAttemptEntireTree = root.expirationTimes;
      for (var lanes = suspendedLanes; 0 < lanes; ) {
        var index = 31 - clz32(lanes),
          lane = 1 << index;
        didAttemptEntireTree[index] = -1;
        lanes &= ~lane;
      }
      0 !== spawnedLane &&
        markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
    }
    function flushSyncWork$1() {
      return (executionContext & (RenderContext | CommitContext)) === NoContext
        ? (flushSyncWorkAcrossRoots_impl(0, !1), !1)
        : !0;
    }
    function resetWorkInProgressStack() {
      if (null !== workInProgress) {
        if (workInProgressSuspendedReason === NotSuspended)
          var interruptedWork = workInProgress.return;
        else
          (interruptedWork = workInProgress),
            resetContextDependencies(),
            resetHooksOnUnwind(interruptedWork),
            (thenableState = null),
            (thenableIndexCounter = 0),
            (interruptedWork = workInProgress);
        for (; null !== interruptedWork; )
          unwindInterruptedWork(interruptedWork.alternate, interruptedWork),
            (interruptedWork = interruptedWork.return);
        workInProgress = null;
      }
    }
    function prepareFreshStack(root, lanes) {
      var timeoutHandle = root.timeoutHandle;
      timeoutHandle !== noTimeout &&
        ((root.timeoutHandle = noTimeout), cancelTimeout(timeoutHandle));
      timeoutHandle = root.cancelPendingCommit;
      null !== timeoutHandle &&
        ((root.cancelPendingCommit = null), timeoutHandle());
      resetWorkInProgressStack();
      workInProgressRoot = root;
      workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
      workInProgressRootRenderLanes = lanes;
      workInProgressSuspendedReason = NotSuspended;
      workInProgressThrownValue = null;
      workInProgressRootDidSkipSuspendedSiblings = !1;
      workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
      workInProgressRootDidAttachPingListener = !1;
      workInProgressRootExitStatus = RootInProgress;
      workInProgressSuspendedRetryLanes =
        workInProgressDeferredLane =
        workInProgressRootPingedLanes =
        workInProgressRootInterleavedUpdatedLanes =
        workInProgressRootSkippedLanes =
          0;
      workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =
        null;
      workInProgressRootDidIncludeRecursiveRenderUpdate = !1;
      0 !== (lanes & 8) && (lanes |= lanes & 32);
      var allEntangledLanes = root.entangledLanes;
      if (0 !== allEntangledLanes)
        for (
          root = root.entanglements, allEntangledLanes &= lanes;
          0 < allEntangledLanes;

        ) {
          var index = 31 - clz32(allEntangledLanes),
            lane = 1 << index;
          lanes |= root[index];
          allEntangledLanes &= ~lane;
        }
      entangledRenderLanes = lanes;
      finishQueueingConcurrentUpdates();
      lanes = getCurrentTime();
      1e3 < lanes - lastResetTime &&
        ((ReactSharedInternals.recentlyCreatedOwnerStacks = 0),
        (lastResetTime = lanes));
      ReactStrictModeWarnings.discardPendingWarnings();
      return timeoutHandle;
    }
    function handleThrow(root, thrownValue) {
      currentlyRenderingFiber = null;
      ReactSharedInternals.H = ContextOnlyDispatcher;
      ReactSharedInternals.getCurrentStack = null;
      isRendering = !1;
      current = null;
      thrownValue === SuspenseException ||
      thrownValue === SuspenseActionException
        ? ((thrownValue = getSuspendedThenable()),
          (workInProgressSuspendedReason = SuspendedOnImmediate))
        : thrownValue === SuspenseyCommitException
          ? ((thrownValue = getSuspendedThenable()),
            (workInProgressSuspendedReason = SuspendedOnInstance))
          : (workInProgressSuspendedReason =
              thrownValue === SelectiveHydrationException
                ? SuspendedOnHydration
                : null !== thrownValue &&
                    "object" === typeof thrownValue &&
                    "function" === typeof thrownValue.then
                  ? SuspendedOnDeprecatedThrowPromise
                  : SuspendedOnError);
      workInProgressThrownValue = thrownValue;
      var erroredWork = workInProgress;
      if (null === erroredWork)
        (workInProgressRootExitStatus = RootFatalErrored),
          logUncaughtError(
            root,
            createCapturedValueAtFiber(thrownValue, root.current)
          );
      else
        switch (
          (erroredWork.mode & ProfileMode &&
            stopProfilerTimerIfRunningAndRecordDuration(erroredWork),
          markComponentRenderStopped(),
          workInProgressSuspendedReason)
        ) {
          case SuspendedOnError:
            null !== injectedProfilingHooks &&
              "function" ===
                typeof injectedProfilingHooks.markComponentErrored &&
              injectedProfilingHooks.markComponentErrored(
                erroredWork,
                thrownValue,
                workInProgressRootRenderLanes
              );
            break;
          case SuspendedOnData:
          case SuspendedOnAction:
          case SuspendedOnImmediate:
          case SuspendedOnDeprecatedThrowPromise:
          case SuspendedAndReadyToContinue:
            null !== injectedProfilingHooks &&
              "function" ===
                typeof injectedProfilingHooks.markComponentSuspended &&
              injectedProfilingHooks.markComponentSuspended(
                erroredWork,
                thrownValue,
                workInProgressRootRenderLanes
              );
        }
    }
    function pushDispatcher() {
      var prevDispatcher = ReactSharedInternals.H;
      ReactSharedInternals.H = ContextOnlyDispatcher;
      return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
    }
    function pushAsyncDispatcher() {
      var prevAsyncDispatcher = ReactSharedInternals.A;
      ReactSharedInternals.A = DefaultAsyncDispatcher;
      return prevAsyncDispatcher;
    }
    function renderDidSuspendDelayIfPossible() {
      workInProgressRootExitStatus = RootSuspendedWithDelay;
      workInProgressRootDidSkipSuspendedSiblings ||
        ((workInProgressRootRenderLanes & 4194048) !==
          workInProgressRootRenderLanes &&
          null !== suspenseHandlerStackCursor.current) ||
        (workInProgressRootIsPrerendering = !0);
      (0 === (workInProgressRootSkippedLanes & 134217727) &&
        0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||
        null === workInProgressRoot ||
        markRootSuspended(
          workInProgressRoot,
          workInProgressRootRenderLanes,
          workInProgressDeferredLane,
          !1
        );
    }
    function renderRootSync(root, lanes, shouldYieldForPrerendering) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher(),
        prevAsyncDispatcher = pushAsyncDispatcher();
      if (
        workInProgressRoot !== root ||
        workInProgressRootRenderLanes !== lanes
      ) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root.memoizedUpdaters;
          0 < memoizedUpdaters.size &&
            (restorePendingUpdaters(root, workInProgressRootRenderLanes),
            memoizedUpdaters.clear());
          movePendingFibersToMemoized(root, lanes);
        }
        workInProgressTransitions = null;
        prepareFreshStack(root, lanes);
      }
      markRenderStarted(lanes);
      lanes = !1;
      memoizedUpdaters = workInProgressRootExitStatus;
      a: do
        try {
          if (
            workInProgressSuspendedReason !== NotSuspended &&
            null !== workInProgress
          ) {
            var unitOfWork = workInProgress,
              thrownValue = workInProgressThrownValue;
            switch (workInProgressSuspendedReason) {
              case SuspendedOnHydration:
                resetWorkInProgressStack();
                memoizedUpdaters = RootSuspendedAtTheShell;
                break a;
              case SuspendedOnImmediate:
              case SuspendedOnData:
              case SuspendedOnAction:
              case SuspendedOnDeprecatedThrowPromise:
                null === suspenseHandlerStackCursor.current && (lanes = !0);
                var reason = workInProgressSuspendedReason;
                workInProgressSuspendedReason = NotSuspended;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
                if (
                  shouldYieldForPrerendering &&
                  workInProgressRootIsPrerendering
                ) {
                  memoizedUpdaters = RootInProgress;
                  break a;
                }
                break;
              default:
                (reason = workInProgressSuspendedReason),
                  (workInProgressSuspendedReason = NotSuspended),
                  (workInProgressThrownValue = null),
                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
            }
          }
          workLoopSync();
          memoizedUpdaters = workInProgressRootExitStatus;
          break;
        } catch (thrownValue$8) {
          handleThrow(root, thrownValue$8);
        }
      while (1);
      lanes && root.shellSuspendCounter++;
      resetContextDependencies();
      executionContext = prevExecutionContext;
      ReactSharedInternals.H = prevDispatcher;
      ReactSharedInternals.A = prevAsyncDispatcher;
      markRenderStopped();
      null === workInProgress &&
        ((workInProgressRoot = null),
        (workInProgressRootRenderLanes = 0),
        finishQueueingConcurrentUpdates());
      return memoizedUpdaters;
    }
    function workLoopSync() {
      for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher(),
        prevAsyncDispatcher = pushAsyncDispatcher();
      if (
        workInProgressRoot !== root ||
        workInProgressRootRenderLanes !== lanes
      ) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root.memoizedUpdaters;
          0 < memoizedUpdaters.size &&
            (restorePendingUpdaters(root, workInProgressRootRenderLanes),
            memoizedUpdaters.clear());
          movePendingFibersToMemoized(root, lanes);
        }
        workInProgressTransitions = null;
        workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
        prepareFreshStack(root, lanes);
      } else
        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
          root,
          lanes
        );
      markRenderStarted(lanes);
      a: do
        try {
          if (
            workInProgressSuspendedReason !== NotSuspended &&
            null !== workInProgress
          )
            b: switch (
              ((lanes = workInProgress),
              (memoizedUpdaters = workInProgressThrownValue),
              workInProgressSuspendedReason)
            ) {
              case SuspendedOnError:
                workInProgressSuspendedReason = NotSuspended;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(
                  root,
                  lanes,
                  memoizedUpdaters,
                  SuspendedOnError
                );
                break;
              case SuspendedOnData:
              case SuspendedOnAction:
                if (isThenableResolved(memoizedUpdaters)) {
                  workInProgressSuspendedReason = NotSuspended;
                  workInProgressThrownValue = null;
                  replaySuspendedUnitOfWork(lanes);
                  break;
                }
                lanes = function () {
                  (workInProgressSuspendedReason !== SuspendedOnData &&
                    workInProgressSuspendedReason !== SuspendedOnAction) ||
                    workInProgressRoot !== root ||
                    (workInProgressSuspendedReason =
                      SuspendedAndReadyToContinue);
                  ensureRootIsScheduled(root);
                };
                memoizedUpdaters.then(lanes, lanes);
                break a;
              case SuspendedOnImmediate:
                workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                break a;
              case SuspendedOnInstance:
                workInProgressSuspendedReason =
                  SuspendedOnInstanceAndReadyToContinue;
                break a;
              case SuspendedAndReadyToContinue:
                isThenableResolved(memoizedUpdaters)
                  ? ((workInProgressSuspendedReason = NotSuspended),
                    (workInProgressThrownValue = null),
                    replaySuspendedUnitOfWork(lanes))
                  : ((workInProgressSuspendedReason = NotSuspended),
                    (workInProgressThrownValue = null),
                    throwAndUnwindWorkLoop(
                      root,
                      lanes,
                      memoizedUpdaters,
                      SuspendedAndReadyToContinue
                    ));
                break;
              case SuspendedOnInstanceAndReadyToContinue:
                var resource = null;
                switch (workInProgress.tag) {
                  case 26:
                    resource = workInProgress.memoizedState;
                  case 5:
                  case 27:
                    var hostFiber = workInProgress;
                    if (resource ? preloadResource(resource) : 1) {
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      var sibling = hostFiber.sibling;
                      if (null !== sibling) workInProgress = sibling;
                      else {
                        var returnFiber = hostFiber.return;
                        null !== returnFiber
                          ? ((workInProgress = returnFiber),
                            completeUnitOfWork(returnFiber))
                          : (workInProgress = null);
                      }
                      break b;
                    }
                    break;
                  default:
                    console.error(
                      "Unexpected type of fiber triggered a suspensey commit. This is a bug in React."
                    );
                }
                workInProgressSuspendedReason = NotSuspended;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(
                  root,
                  lanes,
                  memoizedUpdaters,
                  SuspendedOnInstanceAndReadyToContinue
                );
                break;
              case SuspendedOnDeprecatedThrowPromise:
                workInProgressSuspendedReason = NotSuspended;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(
                  root,
                  lanes,
                  memoizedUpdaters,
                  SuspendedOnDeprecatedThrowPromise
                );
                break;
              case SuspendedOnHydration:
                resetWorkInProgressStack();
                workInProgressRootExitStatus = RootSuspendedAtTheShell;
                break a;
              default:
                throw Error(
                  "Unexpected SuspendedReason. This is a bug in React."
                );
            }
          null !== ReactSharedInternals.actQueue
            ? workLoopSync()
            : workLoopConcurrentByScheduler();
          break;
        } catch (thrownValue$9) {
          handleThrow(root, thrownValue$9);
        }
      while (1);
      resetContextDependencies();
      ReactSharedInternals.H = prevDispatcher;
      ReactSharedInternals.A = prevAsyncDispatcher;
      executionContext = prevExecutionContext;
      if (null !== workInProgress)
        return (
          null !== injectedProfilingHooks &&
            "function" === typeof injectedProfilingHooks.markRenderYielded &&
            injectedProfilingHooks.markRenderYielded(),
          RootInProgress
        );
      markRenderStopped();
      workInProgressRoot = null;
      workInProgressRootRenderLanes = 0;
      finishQueueingConcurrentUpdates();
      return workInProgressRootExitStatus;
    }
    function workLoopConcurrentByScheduler() {
      for (; null !== workInProgress && !shouldYield(); )
        performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
      var current = unitOfWork.alternate;
      (unitOfWork.mode & ProfileMode) !== NoMode
        ? (startProfilerTimer(unitOfWork),
          (current = runWithFiberInDEV(
            unitOfWork,
            beginWork,
            current,
            unitOfWork,
            entangledRenderLanes
          )),
          stopProfilerTimerIfRunningAndRecordDuration(unitOfWork))
        : (current = runWithFiberInDEV(
            unitOfWork,
            beginWork,
            current,
            unitOfWork,
            entangledRenderLanes
          ));
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      null === current
        ? completeUnitOfWork(unitOfWork)
        : (workInProgress = current);
    }
    function replaySuspendedUnitOfWork(unitOfWork) {
      var next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
    }
    function replayBeginWork(unitOfWork) {
      var current = unitOfWork.alternate,
        isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
      isProfilingMode && startProfilerTimer(unitOfWork);
      switch (unitOfWork.tag) {
        case 15:
        case 0:
          current = replayFunctionComponent(
            current,
            unitOfWork,
            unitOfWork.pendingProps,
            unitOfWork.type,
            void 0,
            workInProgressRootRenderLanes
          );
          break;
        case 11:
          current = replayFunctionComponent(
            current,
            unitOfWork,
            unitOfWork.pendingProps,
            unitOfWork.type.render,
            unitOfWork.ref,
            workInProgressRootRenderLanes
          );
          break;
        case 5:
          resetHooksOnUnwind(unitOfWork);
        default:
          unwindInterruptedWork(current, unitOfWork),
            (unitOfWork = workInProgress =
              resetWorkInProgress(unitOfWork, entangledRenderLanes)),
            (current = beginWork(current, unitOfWork, entangledRenderLanes));
      }
      isProfilingMode &&
        stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);
      return current;
    }
    function throwAndUnwindWorkLoop(
      root,
      unitOfWork,
      thrownValue,
      suspendedReason
    ) {
      resetContextDependencies();
      resetHooksOnUnwind(unitOfWork);
      thenableState = null;
      thenableIndexCounter = 0;
      var returnFiber = unitOfWork.return;
      try {
        if (
          throwException(
            root,
            returnFiber,
            unitOfWork,
            thrownValue,
            workInProgressRootRenderLanes
          )
        ) {
          workInProgressRootExitStatus = RootFatalErrored;
          logUncaughtError(
            root,
            createCapturedValueAtFiber(thrownValue, root.current)
          );
          workInProgress = null;
          return;
        }
      } catch (error) {
        if (null !== returnFiber) throw ((workInProgress = returnFiber), error);
        workInProgressRootExitStatus = RootFatalErrored;
        logUncaughtError(
          root,
          createCapturedValueAtFiber(thrownValue, root.current)
        );
        workInProgress = null;
        return;
      }
      if (unitOfWork.flags & 32768) {
        if (isHydrating || suspendedReason === SuspendedOnError) root = !0;
        else if (
          workInProgressRootIsPrerendering ||
          0 !== (workInProgressRootRenderLanes & 536870912)
        )
          root = !1;
        else if (
          ((workInProgressRootDidSkipSuspendedSiblings = root = !0),
          suspendedReason === SuspendedOnData ||
            suspendedReason === SuspendedOnAction ||
            suspendedReason === SuspendedOnImmediate ||
            suspendedReason === SuspendedOnDeprecatedThrowPromise)
        )
          (suspendedReason = suspenseHandlerStackCursor.current),
            null !== suspendedReason &&
              13 === suspendedReason.tag &&
              (suspendedReason.flags |= 16384);
        unwindUnitOfWork(unitOfWork, root);
      } else completeUnitOfWork(unitOfWork);
    }
    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;
      do {
        if (0 !== (completedWork.flags & 32768)) {
          unwindUnitOfWork(
            completedWork,
            workInProgressRootDidSkipSuspendedSiblings
          );
          return;
        }
        var current = completedWork.alternate;
        unitOfWork = completedWork.return;
        startProfilerTimer(completedWork);
        current = runWithFiberInDEV(
          completedWork,
          completeWork,
          current,
          completedWork,
          entangledRenderLanes
        );
        (completedWork.mode & ProfileMode) !== NoMode &&
          stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);
        if (null !== current) {
          workInProgress = current;
          return;
        }
        completedWork = completedWork.sibling;
        if (null !== completedWork) {
          workInProgress = completedWork;
          return;
        }
        workInProgress = completedWork = unitOfWork;
      } while (null !== completedWork);
      workInProgressRootExitStatus === RootInProgress &&
        (workInProgressRootExitStatus = RootCompleted);
    }
    function unwindUnitOfWork(unitOfWork, skipSiblings) {
      do {
        var next = unwindWork(unitOfWork.alternate, unitOfWork);
        if (null !== next) {
          next.flags &= 32767;
          workInProgress = next;
          return;
        }
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);
          next = unitOfWork.actualDuration;
          for (var child = unitOfWork.child; null !== child; )
            (next += child.actualDuration), (child = child.sibling);
          unitOfWork.actualDuration = next;
        }
        next = unitOfWork.return;
        null !== next &&
          ((next.flags |= 32768),
          (next.subtreeFlags = 0),
          (next.deletions = null));
        if (
          !skipSiblings &&
          ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)
        ) {
          workInProgress = unitOfWork;
          return;
        }
        workInProgress = unitOfWork = next;
      } while (null !== unitOfWork);
      workInProgressRootExitStatus = RootSuspendedAtTheShell;
      workInProgress = null;
    }
    function commitRoot(
      root,
      finishedWork,
      lanes,
      recoverableErrors,
      transitions,
      didIncludeRenderPhaseUpdate,
      spawnedLane,
      updatedLanes,
      suspendedRetryLanes
    ) {
      root.cancelPendingCommit = null;
      do flushPendingEffects();
      while (pendingEffectsStatus !== NO_PENDING_EFFECTS);
      ReactStrictModeWarnings.flushLegacyContextWarning();
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
        throw Error("Should not already be working.");
      null !== injectedProfilingHooks &&
        "function" === typeof injectedProfilingHooks.markCommitStarted &&
        injectedProfilingHooks.markCommitStarted(lanes);
      if (null === finishedWork) markCommitStopped();
      else {
        0 === lanes &&
          console.error(
            "finishedLanes should not be empty during a commit. This is a bug in React."
          );
        if (finishedWork === root.current)
          throw Error(
            "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
          );
        didIncludeRenderPhaseUpdate =
          finishedWork.lanes | finishedWork.childLanes;
        didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
        markRootFinished(
          root,
          lanes,
          didIncludeRenderPhaseUpdate,
          spawnedLane,
          updatedLanes,
          suspendedRetryLanes
        );
        root === workInProgressRoot &&
          ((workInProgress = workInProgressRoot = null),
          (workInProgressRootRenderLanes = 0));
        pendingFinishedWork = finishedWork;
        pendingEffectsRoot = root;
        pendingEffectsLanes = lanes;
        pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
        pendingPassiveTransitions = transitions;
        pendingRecoverableErrors = recoverableErrors;
        0 !== (finishedWork.subtreeFlags & 10256) ||
        0 !== (finishedWork.flags & 10256)
          ? ((root.callbackNode = null),
            (root.callbackPriority = 0),
            scheduleCallback$1(NormalPriority$1, function () {
              flushPassiveEffects(!0);
              return null;
            }))
          : ((root.callbackNode = null), (root.callbackPriority = 0));
        commitStartTime = now();
        recoverableErrors = 0 !== (finishedWork.flags & 13878);
        if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
          recoverableErrors = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          transitions = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = DiscreteEventPriority;
          spawnedLane = executionContext;
          executionContext |= CommitContext;
          try {
            commitBeforeMutationEffects(root, finishedWork, lanes);
          } finally {
            (executionContext = spawnedLane),
              (ReactDOMSharedInternals.p = transitions),
              (ReactSharedInternals.T = recoverableErrors);
          }
        }
        pendingEffectsStatus = PENDING_MUTATION_PHASE;
        flushMutationEffects();
        flushLayoutEffects();
        flushSpawnedWork();
      }
    }
    function flushMutationEffects() {
      if (pendingEffectsStatus === PENDING_MUTATION_PHASE) {
        pendingEffectsStatus = NO_PENDING_EFFECTS;
        var root = pendingEffectsRoot,
          finishedWork = pendingFinishedWork,
          lanes = pendingEffectsLanes,
          rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
        if (
          0 !== (finishedWork.subtreeFlags & 13878) ||
          rootMutationHasEffect
        ) {
          rootMutationHasEffect = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = DiscreteEventPriority;
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          try {
            inProgressLanes = lanes;
            inProgressRoot = root;
            commitMutationEffectsOnFiber(finishedWork, root);
            inProgressRoot = inProgressLanes = null;
            lanes = selectionInformation;
            var curFocusedElem = getActiveElementDeep(root.containerInfo),
              priorFocusedElem = lanes.focusedElem,
              priorSelectionRange = lanes.selectionRange;
            if (
              curFocusedElem !== priorFocusedElem &&
              priorFocusedElem &&
              priorFocusedElem.ownerDocument &&
              containsNode(
                priorFocusedElem.ownerDocument.documentElement,
                priorFocusedElem
              )
            ) {
              if (
                null !== priorSelectionRange &&
                hasSelectionCapabilities(priorFocusedElem)
              ) {
                var start = priorSelectionRange.start,
                  end = priorSelectionRange.end;
                void 0 === end && (end = start);
                if ("selectionStart" in priorFocusedElem)
                  (priorFocusedElem.selectionStart = start),
                    (priorFocusedElem.selectionEnd = Math.min(
                      end,
                      priorFocusedElem.value.length
                    ));
                else {
                  var doc = priorFocusedElem.ownerDocument || document,
                    win = (doc && doc.defaultView) || window;
                  if (win.getSelection) {
                    var selection = win.getSelection(),
                      length = priorFocusedElem.textContent.length,
                      start$jscomp$0 = Math.min(
                        priorSelectionRange.start,
                        length
                      ),
                      end$jscomp$0 =
                        void 0 === priorSelectionRange.end
                          ? start$jscomp$0
                          : Math.min(priorSelectionRange.end, length);
                    !selection.extend &&
                      start$jscomp$0 > end$jscomp$0 &&
                      ((curFocusedElem = end$jscomp$0),
                      (end$jscomp$0 = start$jscomp$0),
                      (start$jscomp$0 = curFocusedElem));
                    var startMarker = getNodeForCharacterOffset(
                        priorFocusedElem,
                        start$jscomp$0
                      ),
                      endMarker = getNodeForCharacterOffset(
                        priorFocusedElem,
                        end$jscomp$0
                      );
                    if (
                      startMarker &&
                      endMarker &&
                      (1 !== selection.rangeCount ||
                        selection.anchorNode !== startMarker.node ||
                        selection.anchorOffset !== startMarker.offset ||
                        selection.focusNode !== endMarker.node ||
                        selection.focusOffset !== endMarker.offset)
                    ) {
                      var range = doc.createRange();
                      range.setStart(startMarker.node, startMarker.offset);
                      selection.removeAllRanges();
                      start$jscomp$0 > end$jscomp$0
                        ? (selection.addRange(range),
                          selection.extend(endMarker.node, endMarker.offset))
                        : (range.setEnd(endMarker.node, endMarker.offset),
                          selection.addRange(range));
                    }
                  }
                }
              }
              doc = [];
              for (
                selection = priorFocusedElem;
                (selection = selection.parentNode);

              )
                1 === selection.nodeType &&
                  doc.push({
                    element: selection,
                    left: selection.scrollLeft,
                    top: selection.scrollTop
                  });
              "function" === typeof priorFocusedElem.focus &&
                priorFocusedElem.focus();
              for (
                priorFocusedElem = 0;
                priorFocusedElem < doc.length;
                priorFocusedElem++
              ) {
                var info = doc[priorFocusedElem];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
            _enabled = !!eventsEnabled;
            selectionInformation = eventsEnabled = null;
          } finally {
            (executionContext = prevExecutionContext),
              (ReactDOMSharedInternals.p = previousPriority),
              (ReactSharedInternals.T = rootMutationHasEffect);
          }
        }
        root.current = finishedWork;
        pendingEffectsStatus = PENDING_LAYOUT_PHASE;
      }
    }
    function flushLayoutEffects() {
      if (pendingEffectsStatus === PENDING_LAYOUT_PHASE) {
        pendingEffectsStatus = NO_PENDING_EFFECTS;
        var root = pendingEffectsRoot,
          finishedWork = pendingFinishedWork,
          lanes = pendingEffectsLanes,
          rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772);
        if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
          rootHasLayoutEffect = ReactSharedInternals.T;
          ReactSharedInternals.T = null;
          var previousPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = DiscreteEventPriority;
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          try {
            null !== injectedProfilingHooks &&
              "function" ===
                typeof injectedProfilingHooks.markLayoutEffectsStarted &&
              injectedProfilingHooks.markLayoutEffectsStarted(lanes),
              (inProgressLanes = lanes),
              (inProgressRoot = root),
              commitLayoutEffectOnFiber(
                root,
                finishedWork.alternate,
                finishedWork
              ),
              (inProgressRoot = inProgressLanes = null),
              null !== injectedProfilingHooks &&
                "function" ===
                  typeof injectedProfilingHooks.markLayoutEffectsStopped &&
                injectedProfilingHooks.markLayoutEffectsStopped();
          } finally {
            (executionContext = prevExecutionContext),
              (ReactDOMSharedInternals.p = previousPriority),
              (ReactSharedInternals.T = rootHasLayoutEffect);
          }
        }
        pendingEffectsStatus = PENDING_AFTER_MUTATION_PHASE;
      }
    }
    function flushSpawnedWork() {
      if (
        pendingEffectsStatus === PENDING_SPAWNED_WORK ||
        pendingEffectsStatus === PENDING_AFTER_MUTATION_PHASE
      ) {
        pendingEffectsStatus = NO_PENDING_EFFECTS;
        requestPaint();
        var root = pendingEffectsRoot,
          finishedWork = pendingFinishedWork,
          lanes = pendingEffectsLanes,
          recoverableErrors = pendingRecoverableErrors,
          rootDidHavePassiveEffects =
            0 !== (finishedWork.subtreeFlags & 10256) ||
            0 !== (finishedWork.flags & 10256);
        rootDidHavePassiveEffects
          ? (pendingEffectsStatus = PENDING_PASSIVE_PHASE)
          : ((pendingEffectsStatus = NO_PENDING_EFFECTS),
            (pendingFinishedWork = pendingEffectsRoot = null),
            releaseRootPooledCache(root, root.pendingLanes),
            (nestedPassiveUpdateCount = 0),
            (rootWithPassiveNestedUpdates = null));
        var remainingLanes = root.pendingLanes;
        0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
        rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(root);
        rootDidHavePassiveEffects = lanesToEventPriority(lanes);
        finishedWork = finishedWork.stateNode;
        if (
          injectedHook &&
          "function" === typeof injectedHook.onCommitFiberRoot
        )
          try {
            var didError = 128 === (finishedWork.current.flags & 128);
            switch (rootDidHavePassiveEffects) {
              case DiscreteEventPriority:
                var schedulerPriority = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriority = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriority = NormalPriority$1;
                break;
              case IdleEventPriority:
                schedulerPriority = IdlePriority;
                break;
              default:
                schedulerPriority = NormalPriority$1;
            }
            injectedHook.onCommitFiberRoot(
              rendererID,
              finishedWork,
              schedulerPriority,
              didError
            );
          } catch (err) {
            hasLoggedError ||
              ((hasLoggedError = !0),
              console.error(
                "React instrumentation encountered an error: %s",
                err
              ));
          }
        isDevToolsPresent && root.memoizedUpdaters.clear();
        onCommitRoot();
        if (null !== recoverableErrors) {
          didError = ReactSharedInternals.T;
          schedulerPriority = ReactDOMSharedInternals.p;
          ReactDOMSharedInternals.p = DiscreteEventPriority;
          ReactSharedInternals.T = null;
          try {
            var onRecoverableError = root.onRecoverableError;
            for (
              finishedWork = 0;
              finishedWork < recoverableErrors.length;
              finishedWork++
            ) {
              var recoverableError = recoverableErrors[finishedWork],
                errorInfo = makeErrorInfo(recoverableError.stack);
              runWithFiberInDEV(
                recoverableError.source,
                onRecoverableError,
                recoverableError.value,
                errorInfo
              );
            }
          } finally {
            (ReactSharedInternals.T = didError),
              (ReactDOMSharedInternals.p = schedulerPriority);
          }
        }
        0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
        ensureRootIsScheduled(root);
        remainingLanes = root.pendingLanes;
        0 !== (lanes & 4194090) && 0 !== (remainingLanes & 42)
          ? ((nestedUpdateScheduled = !0),
            root === rootWithNestedUpdates
              ? nestedUpdateCount++
              : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root)))
          : (nestedUpdateCount = 0);
        flushSyncWorkAcrossRoots_impl(0, !1);
        markCommitStopped();
      }
    }
    function makeErrorInfo(componentStack) {
      componentStack = { componentStack: componentStack };
      Object.defineProperty(componentStack, "digest", {
        get: function () {
          console.error(
            'You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'
          );
        }
      });
      return componentStack;
    }
    function releaseRootPooledCache(root, remainingLanes) {
      0 === (root.pooledCacheLanes &= remainingLanes) &&
        ((remainingLanes = root.pooledCache),
        null != remainingLanes &&
          ((root.pooledCache = null), releaseCache(remainingLanes)));
    }
    function flushPendingEffects(wasDelayedCommit) {
      flushMutationEffects();
      flushLayoutEffects();
      flushSpawnedWork();
      return flushPassiveEffects(wasDelayedCommit);
    }
    function flushPassiveEffects() {
      if (pendingEffectsStatus !== PENDING_PASSIVE_PHASE) return !1;
      var root = pendingEffectsRoot,
        remainingLanes = pendingEffectsRemainingLanes;
      pendingEffectsRemainingLanes = 0;
      var renderPriority = lanesToEventPriority(pendingEffectsLanes),
        priority =
          0 === DefaultEventPriority || DefaultEventPriority > renderPriority
            ? DefaultEventPriority
            : renderPriority;
      renderPriority = ReactSharedInternals.T;
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        ReactDOMSharedInternals.p = priority;
        ReactSharedInternals.T = null;
        priority = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root$jscomp$0 = pendingEffectsRoot,
          lanes = pendingEffectsLanes;
        pendingEffectsStatus = NO_PENDING_EFFECTS;
        pendingFinishedWork = pendingEffectsRoot = null;
        pendingEffectsLanes = 0;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = !0;
        didScheduleUpdateDuringPassiveEffects = !1;
        null !== injectedProfilingHooks &&
          "function" ===
            typeof injectedProfilingHooks.markPassiveEffectsStarted &&
          injectedProfilingHooks.markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountOnFiber(root$jscomp$0.current);
        commitPassiveMountOnFiber(
          root$jscomp$0,
          root$jscomp$0.current,
          lanes,
          priority
        );
        null !== injectedProfilingHooks &&
          "function" ===
            typeof injectedProfilingHooks.markPassiveEffectsStopped &&
          injectedProfilingHooks.markPassiveEffectsStopped();
        commitDoubleInvokeEffectsInDEV(root$jscomp$0);
        executionContext = prevExecutionContext;
        flushSyncWorkAcrossRoots_impl(0, !1);
        didScheduleUpdateDuringPassiveEffects
          ? root$jscomp$0 === rootWithPassiveNestedUpdates
            ? nestedPassiveUpdateCount++
            : ((nestedPassiveUpdateCount = 0),
              (rootWithPassiveNestedUpdates = root$jscomp$0))
          : (nestedPassiveUpdateCount = 0);
        didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects = !1;
        if (
          injectedHook &&
          "function" === typeof injectedHook.onPostCommitFiberRoot
        )
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
          } catch (err) {
            hasLoggedError ||
              ((hasLoggedError = !0),
              console.error(
                "React instrumentation encountered an error: %s",
                err
              ));
          }
        var stateNode = root$jscomp$0.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        return !0;
      } finally {
        (ReactDOMSharedInternals.p = previousPriority),
          (ReactSharedInternals.T = renderPriority),
          releaseRootPooledCache(root, remainingLanes);
      }
    }
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
      sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
      sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
      rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
      null !== rootFiber &&
        (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
    }
    function captureCommitPhaseError(
      sourceFiber,
      nearestMountedAncestor,
      error
    ) {
      isRunningInsertionEffect = !1;
      if (3 === sourceFiber.tag)
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
      else {
        for (; null !== nearestMountedAncestor; ) {
          if (3 === nearestMountedAncestor.tag) {
            captureCommitPhaseErrorOnRoot(
              nearestMountedAncestor,
              sourceFiber,
              error
            );
            return;
          }
          if (1 === nearestMountedAncestor.tag) {
            var instance = nearestMountedAncestor.stateNode;
            if (
              "function" ===
                typeof nearestMountedAncestor.type.getDerivedStateFromError ||
              ("function" === typeof instance.componentDidCatch &&
                (null === legacyErrorBoundariesThatAlreadyFailed ||
                  !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
            ) {
              sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
              error = createClassErrorUpdate(2);
              instance = enqueueUpdate(nearestMountedAncestor, error, 2);
              null !== instance &&
                (initializeClassErrorUpdate(
                  error,
                  instance,
                  nearestMountedAncestor,
                  sourceFiber
                ),
                markRootUpdated$1(instance, 2),
                ensureRootIsScheduled(instance));
              return;
            }
          }
          nearestMountedAncestor = nearestMountedAncestor.return;
        }
        console.error(
          "Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",
          error
        );
      }
    }
    function attachPingListener(root, wakeable, lanes) {
      var pingCache = root.pingCache;
      if (null === pingCache) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        var threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
      } else
        (threadIDs = pingCache.get(wakeable)),
          void 0 === threadIDs &&
            ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));
      threadIDs.has(lanes) ||
        ((workInProgressRootDidAttachPingListener = !0),
        threadIDs.add(lanes),
        (pingCache = pingSuspendedRoot.bind(null, root, wakeable, lanes)),
        isDevToolsPresent && restorePendingUpdaters(root, lanes),
        wakeable.then(pingCache, pingCache));
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
      var pingCache = root.pingCache;
      null !== pingCache && pingCache.delete(wakeable);
      root.pingedLanes |= root.suspendedLanes & pingedLanes;
      root.warmLanes &= ~pingedLanes;
      isConcurrentActEnvironment() &&
        null === ReactSharedInternals.actQueue &&
        console.error(
          "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"
        );
      workInProgressRoot === root &&
        (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
        (workInProgressRootExitStatus === RootSuspendedWithDelay ||
        (workInProgressRootExitStatus === RootSuspended &&
          (workInProgressRootRenderLanes & 62914560) ===
            workInProgressRootRenderLanes &&
          now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
          ? (executionContext & RenderContext) === NoContext &&
            prepareFreshStack(root, 0)
          : (workInProgressRootPingedLanes |= pingedLanes),
        workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&
          (workInProgressSuspendedRetryLanes = 0));
      ensureRootIsScheduled(root);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      0 === retryLane && (retryLane = claimNextRetryLane());
      boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
      null !== boundaryFiber &&
        (markRootUpdated$1(boundaryFiber, retryLane),
        ensureRootIsScheduled(boundaryFiber));
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState,
        retryLane = 0;
      null !== suspenseState && (retryLane = suspenseState.retryLane);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = 0;
      switch (boundaryFiber.tag) {
        case 13:
          var retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          null !== suspenseState && (retryLane = suspenseState.retryLane);
          break;
        case 19:
          retryCache = boundaryFiber.stateNode;
          break;
        case 22:
          retryCache = boundaryFiber.stateNode._retryCache;
          break;
        default:
          throw Error(
            "Pinged unknown suspense boundary type. This is probably a bug in React."
          );
      }
      null !== retryCache && retryCache.delete(wakeable);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function recursivelyTraverseAndDoubleInvokeEffectsInDEV(
      root$jscomp$0,
      parentFiber,
      isInStrictMode
    ) {
      if (0 !== (parentFiber.subtreeFlags & 67117056))
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var root = root$jscomp$0,
            fiber = parentFiber,
            isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
          isStrictModeFiber = isInStrictMode || isStrictModeFiber;
          22 !== fiber.tag
            ? fiber.flags & 67108864
              ? isStrictModeFiber &&
                runWithFiberInDEV(
                  fiber,
                  doubleInvokeEffectsOnFiber,
                  root,
                  fiber,
                  (fiber.mode & NoStrictPassiveEffectsMode) === NoMode
                )
              : recursivelyTraverseAndDoubleInvokeEffectsInDEV(
                  root,
                  fiber,
                  isStrictModeFiber
                )
            : null === fiber.memoizedState &&
              (isStrictModeFiber && fiber.flags & 8192
                ? runWithFiberInDEV(
                    fiber,
                    doubleInvokeEffectsOnFiber,
                    root,
                    fiber
                  )
                : fiber.subtreeFlags & 67108864 &&
                  runWithFiberInDEV(
                    fiber,
                    recursivelyTraverseAndDoubleInvokeEffectsInDEV,
                    root,
                    fiber,
                    isStrictModeFiber
                  ));
          parentFiber = parentFiber.sibling;
        }
    }
    function doubleInvokeEffectsOnFiber(root, fiber) {
      var shouldDoubleInvokePassiveEffects =
        2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : !0;
      setIsStrictModeForDevtools(!0);
      try {
        disappearLayoutEffects(fiber),
          shouldDoubleInvokePassiveEffects && disconnectPassiveEffect(fiber),
          reappearLayoutEffects(root, fiber.alternate, fiber, !1),
          shouldDoubleInvokePassiveEffects &&
            reconnectPassiveEffects(root, fiber, 0, null, !1, 0);
      } finally {
        setIsStrictModeForDevtools(!1);
      }
    }
    function commitDoubleInvokeEffectsInDEV(root) {
      var doubleInvokeEffects = !0;
      root.current.mode & (StrictLegacyMode | StrictEffectsMode) ||
        (doubleInvokeEffects = !1);
      recursivelyTraverseAndDoubleInvokeEffectsInDEV(
        root,
        root.current,
        doubleInvokeEffects
      );
    }
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
      if ((executionContext & RenderContext) === NoContext) {
        var tag = fiber.tag;
        if (
          3 === tag ||
          1 === tag ||
          0 === tag ||
          11 === tag ||
          14 === tag ||
          15 === tag
        ) {
          tag = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (null !== didWarnStateUpdateForNotYetMountedComponent) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(tag)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(tag);
          } else didWarnStateUpdateForNotYetMountedComponent = new Set([tag]);
          runWithFiberInDEV(fiber, function () {
            console.error(
              "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
            );
          });
        }
      }
    }
    function restorePendingUpdaters(root, lanes) {
      isDevToolsPresent &&
        root.memoizedUpdaters.forEach(function (schedulingFiber) {
          addFiberToLanesMap(root, schedulingFiber, lanes);
        });
    }
    function scheduleCallback$1(priorityLevel, callback) {
      var actQueue = ReactSharedInternals.actQueue;
      return null !== actQueue
        ? (actQueue.push(callback), fakeActCallbackNode$1)
        : scheduleCallback$3(priorityLevel, callback);
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
      isConcurrentActEnvironment() &&
        null === ReactSharedInternals.actQueue &&
        runWithFiberInDEV(fiber, function () {
          console.error(
            "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",
            getComponentNameFromFiber(fiber)
          );
        });
    }
    function ensureRootIsScheduled(root) {
      root !== lastScheduledRoot &&
        null === root.next &&
        (null === lastScheduledRoot
          ? (firstScheduledRoot = lastScheduledRoot = root)
          : (lastScheduledRoot = lastScheduledRoot.next = root));
      mightHavePendingSyncWork = !0;
      null !== ReactSharedInternals.actQueue
        ? didScheduleMicrotask_act ||
          ((didScheduleMicrotask_act = !0), scheduleImmediateRootScheduleTask())
        : didScheduleMicrotask ||
          ((didScheduleMicrotask = !0), scheduleImmediateRootScheduleTask());
    }
    function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
      if (!isFlushingWork && mightHavePendingSyncWork) {
        isFlushingWork = !0;
        do {
          var didPerformSomeWork = !1;
          for (var root = firstScheduledRoot; null !== root; ) {
            if (!onlyLegacy)
              if (0 !== syncTransitionLanes) {
                var pendingLanes = root.pendingLanes;
                if (0 === pendingLanes) var nextLanes = 0;
                else {
                  var suspendedLanes = root.suspendedLanes,
                    pingedLanes = root.pingedLanes;
                  nextLanes =
                    (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1;
                  nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                  nextLanes =
                    nextLanes & 201326741
                      ? (nextLanes & 201326741) | 1
                      : nextLanes
                        ? nextLanes | 2
                        : 0;
                }
                0 !== nextLanes &&
                  ((didPerformSomeWork = !0),
                  performSyncWorkOnRoot(root, nextLanes));
              } else
                (nextLanes = workInProgressRootRenderLanes),
                  (nextLanes = getNextLanes(
                    root,
                    root === workInProgressRoot ? nextLanes : 0,
                    null !== root.cancelPendingCommit ||
                      root.timeoutHandle !== noTimeout
                  )),
                  0 === (nextLanes & 3) ||
                    checkIfRootIsPrerendering(root, nextLanes) ||
                    ((didPerformSomeWork = !0),
                    performSyncWorkOnRoot(root, nextLanes));
            root = root.next;
          }
        } while (didPerformSomeWork);
        isFlushingWork = !1;
      }
    }
    function processRootScheduleInImmediateTask() {
      processRootScheduleInMicrotask();
    }
    function processRootScheduleInMicrotask() {
      mightHavePendingSyncWork =
        didScheduleMicrotask_act =
        didScheduleMicrotask =
          !1;
      var syncTransitionLanes = 0;
      0 !== currentEventTransitionLane &&
        (shouldAttemptEagerTransition() &&
          (syncTransitionLanes = currentEventTransitionLane),
        (currentEventTransitionLane = 0));
      for (
        var currentTime = now$1(), prev = null, root = firstScheduledRoot;
        null !== root;

      ) {
        var next = root.next,
          nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
        if (0 === nextLanes)
          (root.next = null),
            null === prev ? (firstScheduledRoot = next) : (prev.next = next),
            null === next && (lastScheduledRoot = prev);
        else if (
          ((prev = root), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
        )
          mightHavePendingSyncWork = !0;
        root = next;
      }
      flushSyncWorkAcrossRoots_impl(syncTransitionLanes, !1);
    }
    function scheduleTaskForRootDuringMicrotask(root, currentTime) {
      for (
        var suspendedLanes = root.suspendedLanes,
          pingedLanes = root.pingedLanes,
          expirationTimes = root.expirationTimes,
          lanes = root.pendingLanes & -62914561;
        0 < lanes;

      ) {
        var index = 31 - clz32(lanes),
          lane = 1 << index,
          expirationTime = expirationTimes[index];
        if (-1 === expirationTime) {
          if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
            expirationTimes[index] = computeExpirationTime(lane, currentTime);
        } else expirationTime <= currentTime && (root.expiredLanes |= lane);
        lanes &= ~lane;
      }
      currentTime = workInProgressRoot;
      suspendedLanes = workInProgressRootRenderLanes;
      suspendedLanes = getNextLanes(
        root,
        root === currentTime ? suspendedLanes : 0,
        null !== root.cancelPendingCommit || root.timeoutHandle !== noTimeout
      );
      pingedLanes = root.callbackNode;
      if (
        0 === suspendedLanes ||
        (root === currentTime &&
          (workInProgressSuspendedReason === SuspendedOnData ||
            workInProgressSuspendedReason === SuspendedOnAction)) ||
        null !== root.cancelPendingCommit
      )
        return (
          null !== pingedLanes && cancelCallback(pingedLanes),
          (root.callbackNode = null),
          (root.callbackPriority = 0)
        );
      if (
        0 === (suspendedLanes & 3) ||
        checkIfRootIsPrerendering(root, suspendedLanes)
      ) {
        currentTime = suspendedLanes & -suspendedLanes;
        if (
          currentTime !== root.callbackPriority ||
          (null !== ReactSharedInternals.actQueue &&
            pingedLanes !== fakeActCallbackNode)
        )
          cancelCallback(pingedLanes);
        else return currentTime;
        switch (lanesToEventPriority(suspendedLanes)) {
          case DiscreteEventPriority:
          case ContinuousEventPriority:
            suspendedLanes = UserBlockingPriority;
            break;
          case DefaultEventPriority:
            suspendedLanes = NormalPriority$1;
            break;
          case IdleEventPriority:
            suspendedLanes = IdlePriority;
            break;
          default:
            suspendedLanes = NormalPriority$1;
        }
        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
        null !== ReactSharedInternals.actQueue
          ? (ReactSharedInternals.actQueue.push(pingedLanes),
            (suspendedLanes = fakeActCallbackNode))
          : (suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes));
        root.callbackPriority = currentTime;
        root.callbackNode = suspendedLanes;
        return currentTime;
      }
      null !== pingedLanes && cancelCallback(pingedLanes);
      root.callbackPriority = 2;
      root.callbackNode = null;
      return 2;
    }
    function performWorkOnRootViaSchedulerTask(root, didTimeout) {
      nestedUpdateScheduled = currentUpdateIsNested = !1;
      if (
        pendingEffectsStatus !== NO_PENDING_EFFECTS &&
        pendingEffectsStatus !== PENDING_PASSIVE_PHASE
      )
        return (root.callbackNode = null), (root.callbackPriority = 0), null;
      var originalCallbackNode = root.callbackNode;
      if (flushPendingEffects(!0) && root.callbackNode !== originalCallbackNode)
        return null;
      var workInProgressRootRenderLanes$jscomp$0 =
        workInProgressRootRenderLanes;
      workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
        root,
        root === workInProgressRoot
          ? workInProgressRootRenderLanes$jscomp$0
          : 0,
        null !== root.cancelPendingCommit || root.timeoutHandle !== noTimeout
      );
      if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
      performWorkOnRoot(
        root,
        workInProgressRootRenderLanes$jscomp$0,
        didTimeout
      );
      scheduleTaskForRootDuringMicrotask(root, now$1());
      return null != root.callbackNode &&
        root.callbackNode === originalCallbackNode
        ? performWorkOnRootViaSchedulerTask.bind(null, root)
        : null;
    }
    function performSyncWorkOnRoot(root, lanes) {
      if (flushPendingEffects()) return null;
      currentUpdateIsNested = nestedUpdateScheduled;
      nestedUpdateScheduled = !1;
      performWorkOnRoot(root, lanes, !0);
    }
    function cancelCallback(callbackNode) {
      callbackNode !== fakeActCallbackNode &&
        null !== callbackNode &&
        cancelCallback$1(callbackNode);
    }
    function scheduleImmediateRootScheduleTask() {
      null !== ReactSharedInternals.actQueue &&
        ReactSharedInternals.actQueue.push(function () {
          processRootScheduleInMicrotask();
          return null;
        });
      scheduleMicrotask(function () {
        (executionContext & (RenderContext | CommitContext)) !== NoContext
          ? scheduleCallback$3(
              ImmediatePriority,
              processRootScheduleInImmediateTask
            )
          : processRootScheduleInMicrotask();
      });
    }
    function requestTransitionLane() {
      0 === currentEventTransitionLane &&
        (currentEventTransitionLane = claimNextTransitionLane());
      return currentEventTransitionLane;
    }
    function coerceFormActionProp(actionProp) {
      if (
        null == actionProp ||
        "symbol" === typeof actionProp ||
        "boolean" === typeof actionProp
      )
        return null;
      if ("function" === typeof actionProp) return actionProp;
      checkAttributeStringCoercion(actionProp, "action");
      return sanitizeURL("" + actionProp);
    }
    function createFormDataWithSubmitter(form, submitter) {
      var temp = submitter.ownerDocument.createElement("input");
      temp.name = submitter.name;
      temp.value = submitter.value;
      form.id && temp.setAttribute("form", form.id);
      submitter.parentNode.insertBefore(temp, submitter);
      form = new FormData(form);
      temp.parentNode.removeChild(temp);
      return form;
    }
    function extractEvents$1(
      dispatchQueue,
      domEventName,
      maybeTargetInst,
      nativeEvent,
      nativeEventTarget
    ) {
      if (
        "submit" === domEventName &&
        maybeTargetInst &&
        maybeTargetInst.stateNode === nativeEventTarget
      ) {
        var action = coerceFormActionProp(
            (nativeEventTarget[internalPropsKey] || null).action
          ),
          submitter = nativeEvent.submitter;
        submitter &&
          ((domEventName = (domEventName = submitter[internalPropsKey] || null)
            ? coerceFormActionProp(domEventName.formAction)
            : submitter.getAttribute("formAction")),
          null !== domEventName &&
            ((action = domEventName), (submitter = null)));
        var event = new SyntheticEvent(
          "action",
          "action",
          null,
          nativeEvent,
          nativeEventTarget
        );
        dispatchQueue.push({
          event: event,
          listeners: [
            {
              instance: null,
              listener: function () {
                if (nativeEvent.defaultPrevented) {
                  if (0 !== currentEventTransitionLane) {
                    var formData = submitter
                        ? createFormDataWithSubmitter(
                            nativeEventTarget,
                            submitter
                          )
                        : new FormData(nativeEventTarget),
                      pendingState = {
                        pending: !0,
                        data: formData,
                        method: nativeEventTarget.method,
                        action: action
                      };
                    Object.freeze(pendingState);
                    startHostTransition(
                      maybeTargetInst,
                      pendingState,
                      null,
                      formData
                    );
                  }
                } else
                  "function" === typeof action &&
                    (event.preventDefault(),
                    (formData = submitter
                      ? createFormDataWithSubmitter(
                          nativeEventTarget,
                          submitter
                        )
                      : new FormData(nativeEventTarget)),
                    (pendingState = {
                      pending: !0,
                      data: formData,
                      method: nativeEventTarget.method,
                      action: action
                    }),
                    Object.freeze(pendingState),
                    startHostTransition(
                      maybeTargetInst,
                      pendingState,
                      action,
                      formData
                    ));
              },
              currentTarget: nativeEventTarget
            }
          ]
        });
      }
    }
    function executeDispatch(event, listener, currentTarget) {
      event.currentTarget = currentTarget;
      try {
        listener(event);
      } catch (error) {
        reportGlobalError(error);
      }
      event.currentTarget = null;
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      eventSystemFlags = 0 !== (eventSystemFlags & 4);
      for (var i = 0; i < dispatchQueue.length; i++) {
        var _dispatchQueue$i = dispatchQueue[i];
        a: {
          var previousInstance = void 0,
            event = _dispatchQueue$i.event;
          _dispatchQueue$i = _dispatchQueue$i.listeners;
          if (eventSystemFlags)
            for (
              var i$jscomp$0 = _dispatchQueue$i.length - 1;
              0 <= i$jscomp$0;
              i$jscomp$0--
            ) {
              var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0],
                instance = _dispatchListeners$i.instance,
                currentTarget = _dispatchListeners$i.currentTarget;
              _dispatchListeners$i = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped())
                break a;
              null !== instance
                ? runWithFiberInDEV(
                    instance,
                    executeDispatch,
                    event,
                    _dispatchListeners$i,
                    currentTarget
                  )
                : executeDispatch(event, _dispatchListeners$i, currentTarget);
              previousInstance = instance;
            }
          else
            for (
              i$jscomp$0 = 0;
              i$jscomp$0 < _dispatchQueue$i.length;
              i$jscomp$0++
            ) {
              _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
              instance = _dispatchListeners$i.instance;
              currentTarget = _dispatchListeners$i.currentTarget;
              _dispatchListeners$i = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped())
                break a;
              null !== instance
                ? runWithFiberInDEV(
                    instance,
                    executeDispatch,
                    event,
                    _dispatchListeners$i,
                    currentTarget
                  )
                : executeDispatch(event, _dispatchListeners$i, currentTarget);
              previousInstance = instance;
            }
        }
      }
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      nonDelegatedEvents.has(domEventName) ||
        console.error(
          'Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',
          domEventName
        );
      var listenerSet = targetElement[internalEventHandlersKey];
      void 0 === listenerSet &&
        (listenerSet = targetElement[internalEventHandlersKey] = new Set());
      var listenerSetKey = domEventName + "__bubble";
      listenerSet.has(listenerSetKey) ||
        (addTrappedEventListener(targetElement, domEventName, 2, !1),
        listenerSet.add(listenerSetKey));
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
      nonDelegatedEvents.has(domEventName) &&
        !isCapturePhaseListener &&
        console.error(
          'Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',
          domEventName
        );
      var eventSystemFlags = 0;
      isCapturePhaseListener && (eventSystemFlags |= 4);
      addTrappedEventListener(
        target,
        domEventName,
        eventSystemFlags,
        isCapturePhaseListener
      );
    }
    function listenToAllSupportedEvents(rootContainerElement) {
      if (!rootContainerElement[listeningMarker]) {
        rootContainerElement[listeningMarker] = !0;
        allNativeEvents.forEach(function (domEventName) {
          "selectionchange" !== domEventName &&
            (nonDelegatedEvents.has(domEventName) ||
              listenToNativeEvent(domEventName, !1, rootContainerElement),
            listenToNativeEvent(domEventName, !0, rootContainerElement));
        });
        var ownerDocument =
          9 === rootContainerElement.nodeType
            ? rootContainerElement
            : rootContainerElement.ownerDocument;
        null === ownerDocument ||
          ownerDocument[listeningMarker] ||
          ((ownerDocument[listeningMarker] = !0),
          listenToNativeEvent("selectionchange", !1, ownerDocument));
      }
    }
    function addTrappedEventListener(
      targetContainer,
      domEventName,
      eventSystemFlags,
      isCapturePhaseListener
    ) {
      switch (getEventPriority(domEventName)) {
        case DiscreteEventPriority:
          var listenerWrapper = dispatchDiscreteEvent;
          break;
        case ContinuousEventPriority:
          listenerWrapper = dispatchContinuousEvent;
          break;
        default:
          listenerWrapper = dispatchEvent;
      }
      eventSystemFlags = listenerWrapper.bind(
        null,
        domEventName,
        eventSystemFlags,
        targetContainer
      );
      listenerWrapper = void 0;
      !passiveBrowserEventsSupported ||
        ("touchstart" !== domEventName &&
          "touchmove" !== domEventName &&
          "wheel" !== domEventName) ||
        (listenerWrapper = !0);
      isCapturePhaseListener
        ? void 0 !== listenerWrapper
          ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
              capture: !0,
              passive: listenerWrapper
            })
          : targetContainer.addEventListener(domEventName, eventSystemFlags, !0)
        : void 0 !== listenerWrapper
          ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
              passive: listenerWrapper
            })
          : targetContainer.addEventListener(
              domEventName,
              eventSystemFlags,
              !1
            );
    }
    function dispatchEventForPluginEventSystem(
      domEventName,
      eventSystemFlags,
      nativeEvent,
      targetInst$jscomp$0,
      targetContainer
    ) {
      var ancestorInst = targetInst$jscomp$0;
      if (
        0 === (eventSystemFlags & 1) &&
        0 === (eventSystemFlags & 2) &&
        null !== targetInst$jscomp$0
      )
        a: for (;;) {
          if (null === targetInst$jscomp$0) return;
          var nodeTag = targetInst$jscomp$0.tag;
          if (3 === nodeTag || 4 === nodeTag) {
            var container = targetInst$jscomp$0.stateNode.containerInfo;
            if (container === targetContainer) break;
            if (4 === nodeTag)
              for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
                var grandTag = nodeTag.tag;
                if (
                  (3 === grandTag || 4 === grandTag) &&
                  nodeTag.stateNode.containerInfo === targetContainer
                )
                  return;
                nodeTag = nodeTag.return;
              }
            for (; null !== container; ) {
              nodeTag = getClosestInstanceFromNode(container);
              if (null === nodeTag) return;
              grandTag = nodeTag.tag;
              if (
                5 === grandTag ||
                6 === grandTag ||
                26 === grandTag ||
                27 === grandTag
              ) {
                targetInst$jscomp$0 = ancestorInst = nodeTag;
                continue a;
              }
              container = container.parentNode;
            }
          }
          targetInst$jscomp$0 = targetInst$jscomp$0.return;
        }
      batchedUpdates$1(function () {
        var targetInst = ancestorInst,
          nativeEventTarget = getEventTarget(nativeEvent),
          dispatchQueue = [];
        a: {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (void 0 !== reactName) {
            var SyntheticEventCtor = SyntheticEvent,
              reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (0 === getEventCharCode(nativeEvent)) break a;
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (2 === nativeEvent.button) break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
              case "scrollend":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
              case "toggle":
              case "beforetoggle":
                SyntheticEventCtor = SyntheticToggleEvent;
            }
            var inCapturePhase = 0 !== (eventSystemFlags & 4),
              accumulateTargetOnly =
                !inCapturePhase &&
                ("scroll" === domEventName || "scrollend" === domEventName),
              reactEventName = inCapturePhase
                ? null !== reactName
                  ? reactName + "Capture"
                  : null
                : reactName;
            inCapturePhase = [];
            for (
              var instance = targetInst, lastHostComponent;
              null !== instance;

            ) {
              var _instance2 = instance;
              lastHostComponent = _instance2.stateNode;
              _instance2 = _instance2.tag;
              (5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2) ||
                null === lastHostComponent ||
                null === reactEventName ||
                ((_instance2 = getListener(instance, reactEventName)),
                null != _instance2 &&
                  inCapturePhase.push(
                    createDispatchListener(
                      instance,
                      _instance2,
                      lastHostComponent
                    )
                  ));
              if (accumulateTargetOnly) break;
              instance = instance.return;
            }
            0 < inCapturePhase.length &&
              ((reactName = new SyntheticEventCtor(
                reactName,
                reactEventType,
                null,
                nativeEvent,
                nativeEventTarget
              )),
              dispatchQueue.push({
                event: reactName,
                listeners: inCapturePhase
              }));
          }
        }
        if (0 === (eventSystemFlags & 7)) {
          a: {
            reactName =
              "mouseover" === domEventName || "pointerover" === domEventName;
            SyntheticEventCtor =
              "mouseout" === domEventName || "pointerout" === domEventName;
            if (
              reactName &&
              nativeEvent !== currentReplayingEvent &&
              (reactEventType =
                nativeEvent.relatedTarget || nativeEvent.fromElement) &&
              (getClosestInstanceFromNode(reactEventType) ||
                reactEventType[internalContainerInstanceKey])
            )
              break a;
            if (SyntheticEventCtor || reactName) {
              reactName =
                nativeEventTarget.window === nativeEventTarget
                  ? nativeEventTarget
                  : (reactName = nativeEventTarget.ownerDocument)
                    ? reactName.defaultView || reactName.parentWindow
                    : window;
              if (SyntheticEventCtor) {
                if (
                  ((reactEventType =
                    nativeEvent.relatedTarget || nativeEvent.toElement),
                  (SyntheticEventCtor = targetInst),
                  (reactEventType = reactEventType
                    ? getClosestInstanceFromNode(reactEventType)
                    : null),
                  null !== reactEventType &&
                    ((accumulateTargetOnly =
                      getNearestMountedFiber(reactEventType)),
                    (inCapturePhase = reactEventType.tag),
                    reactEventType !== accumulateTargetOnly ||
                      (5 !== inCapturePhase &&
                        27 !== inCapturePhase &&
                        6 !== inCapturePhase)))
                )
                  reactEventType = null;
              } else (SyntheticEventCtor = null), (reactEventType = targetInst);
              if (SyntheticEventCtor !== reactEventType) {
                inCapturePhase = SyntheticMouseEvent;
                _instance2 = "onMouseLeave";
                reactEventName = "onMouseEnter";
                instance = "mouse";
                if (
                  "pointerout" === domEventName ||
                  "pointerover" === domEventName
                )
                  (inCapturePhase = SyntheticPointerEvent),
                    (_instance2 = "onPointerLeave"),
                    (reactEventName = "onPointerEnter"),
                    (instance = "pointer");
                accumulateTargetOnly =
                  null == SyntheticEventCtor
                    ? reactName
                    : getNodeFromInstance(SyntheticEventCtor);
                lastHostComponent =
                  null == reactEventType
                    ? reactName
                    : getNodeFromInstance(reactEventType);
                reactName = new inCapturePhase(
                  _instance2,
                  instance + "leave",
                  SyntheticEventCtor,
                  nativeEvent,
                  nativeEventTarget
                );
                reactName.target = accumulateTargetOnly;
                reactName.relatedTarget = lastHostComponent;
                _instance2 = null;
                getClosestInstanceFromNode(nativeEventTarget) === targetInst &&
                  ((inCapturePhase = new inCapturePhase(
                    reactEventName,
                    instance + "enter",
                    reactEventType,
                    nativeEvent,
                    nativeEventTarget
                  )),
                  (inCapturePhase.target = lastHostComponent),
                  (inCapturePhase.relatedTarget = accumulateTargetOnly),
                  (_instance2 = inCapturePhase));
                accumulateTargetOnly = _instance2;
                if (SyntheticEventCtor && reactEventType)
                  b: {
                    inCapturePhase = SyntheticEventCtor;
                    reactEventName = reactEventType;
                    instance = 0;
                    for (
                      lastHostComponent = inCapturePhase;
                      lastHostComponent;
                      lastHostComponent = getParent(lastHostComponent)
                    )
                      instance++;
                    lastHostComponent = 0;
                    for (
                      _instance2 = reactEventName;
                      _instance2;
                      _instance2 = getParent(_instance2)
                    )
                      lastHostComponent++;
                    for (; 0 < instance - lastHostComponent; )
                      (inCapturePhase = getParent(inCapturePhase)), instance--;
                    for (; 0 < lastHostComponent - instance; )
                      (reactEventName = getParent(reactEventName)),
                        lastHostComponent--;
                    for (; instance--; ) {
                      if (
                        inCapturePhase === reactEventName ||
                        (null !== reactEventName &&
                          inCapturePhase === reactEventName.alternate)
                      )
                        break b;
                      inCapturePhase = getParent(inCapturePhase);
                      reactEventName = getParent(reactEventName);
                    }
                    inCapturePhase = null;
                  }
                else inCapturePhase = null;
                null !== SyntheticEventCtor &&
                  accumulateEnterLeaveListenersForEvent(
                    dispatchQueue,
                    reactName,
                    SyntheticEventCtor,
                    inCapturePhase,
                    !1
                  );
                null !== reactEventType &&
                  null !== accumulateTargetOnly &&
                  accumulateEnterLeaveListenersForEvent(
                    dispatchQueue,
                    accumulateTargetOnly,
                    reactEventType,
                    inCapturePhase,
                    !0
                  );
              }
            }
          }
          a: {
            reactName = targetInst ? getNodeFromInstance(targetInst) : window;
            SyntheticEventCtor =
              reactName.nodeName && reactName.nodeName.toLowerCase();
            if (
              "select" === SyntheticEventCtor ||
              ("input" === SyntheticEventCtor && "file" === reactName.type)
            )
              var getTargetInstFunc = getTargetInstForChangeEvent;
            else if (isTextInputElement(reactName))
              if (isInputEventSupported)
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                var handleEventFunc = handleEventsForInputEventPolyfill;
              }
            else
              (SyntheticEventCtor = reactName.nodeName),
                !SyntheticEventCtor ||
                "input" !== SyntheticEventCtor.toLowerCase() ||
                ("checkbox" !== reactName.type && "radio" !== reactName.type)
                  ? targetInst &&
                    isCustomElement(targetInst.elementType) &&
                    (getTargetInstFunc = getTargetInstForChangeEvent)
                  : (getTargetInstFunc = getTargetInstForClickEvent);
            if (
              getTargetInstFunc &&
              (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))
            ) {
              createAndAccumulateChangeEvent(
                dispatchQueue,
                getTargetInstFunc,
                nativeEvent,
                nativeEventTarget
              );
              break a;
            }
            handleEventFunc &&
              handleEventFunc(domEventName, reactName, targetInst);
            "focusout" === domEventName &&
              targetInst &&
              "number" === reactName.type &&
              null != targetInst.memoizedProps.value &&
              setDefaultValue(reactName, "number", reactName.value);
          }
          handleEventFunc = targetInst
            ? getNodeFromInstance(targetInst)
            : window;
          switch (domEventName) {
            case "focusin":
              if (
                isTextInputElement(handleEventFunc) ||
                "true" === handleEventFunc.contentEditable
              )
                (activeElement = handleEventFunc),
                  (activeElementInst = targetInst),
                  (lastSelection = null);
              break;
            case "focusout":
              lastSelection = activeElementInst = activeElement = null;
              break;
            case "mousedown":
              mouseDown = !0;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = !1;
              constructSelectEvent(
                dispatchQueue,
                nativeEvent,
                nativeEventTarget
              );
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) break;
            case "keydown":
            case "keyup":
              constructSelectEvent(
                dispatchQueue,
                nativeEvent,
                nativeEventTarget
              );
          }
          var fallbackData;
          if (canUseCompositionEvent)
            b: {
              switch (domEventName) {
                case "compositionstart":
                  var eventType = "onCompositionStart";
                  break b;
                case "compositionend":
                  eventType = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  eventType = "onCompositionUpdate";
                  break b;
              }
              eventType = void 0;
            }
          else
            isComposing
              ? isFallbackCompositionEnd(domEventName, nativeEvent) &&
                (eventType = "onCompositionEnd")
              : "keydown" === domEventName &&
                nativeEvent.keyCode === START_KEYCODE &&
                (eventType = "onCompositionStart");
          eventType &&
            (useFallbackCompositionData &&
              "ko" !== nativeEvent.locale &&
              (isComposing || "onCompositionStart" !== eventType
                ? "onCompositionEnd" === eventType &&
                  isComposing &&
                  (fallbackData = getData())
                : ((root = nativeEventTarget),
                  (startText = "value" in root ? root.value : root.textContent),
                  (isComposing = !0))),
            (handleEventFunc = accumulateTwoPhaseListeners(
              targetInst,
              eventType
            )),
            0 < handleEventFunc.length &&
              ((eventType = new SyntheticCompositionEvent(
                eventType,
                domEventName,
                null,
                nativeEvent,
                nativeEventTarget
              )),
              dispatchQueue.push({
                event: eventType,
                listeners: handleEventFunc
              }),
              fallbackData
                ? (eventType.data = fallbackData)
                : ((fallbackData = getDataFromCustomEvent(nativeEvent)),
                  null !== fallbackData && (eventType.data = fallbackData))));
          if (
            (fallbackData = canUseTextInputEvent
              ? getNativeBeforeInputChars(domEventName, nativeEvent)
              : getFallbackBeforeInputChars(domEventName, nativeEvent))
          )
            (eventType = accumulateTwoPhaseListeners(
              targetInst,
              "onBeforeInput"
            )),
              0 < eventType.length &&
                ((handleEventFunc = new SyntheticInputEvent(
                  "onBeforeInput",
                  "beforeinput",
                  null,
                  nativeEvent,
                  nativeEventTarget
                )),
                dispatchQueue.push({
                  event: handleEventFunc,
                  listeners: eventType
                }),
                (handleEventFunc.data = fallbackData));
          extractEvents$1(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget
          );
        }
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      });
    }
    function createDispatchListener(instance, listener, currentTarget) {
      return {
        instance: instance,
        listener: listener,
        currentTarget: currentTarget
      };
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      for (
        var captureName = reactName + "Capture", listeners = [];
        null !== targetFiber;

      ) {
        var _instance3 = targetFiber,
          stateNode = _instance3.stateNode;
        _instance3 = _instance3.tag;
        (5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3) ||
          null === stateNode ||
          ((_instance3 = getListener(targetFiber, captureName)),
          null != _instance3 &&
            listeners.unshift(
              createDispatchListener(targetFiber, _instance3, stateNode)
            ),
          (_instance3 = getListener(targetFiber, reactName)),
          null != _instance3 &&
            listeners.push(
              createDispatchListener(targetFiber, _instance3, stateNode)
            ));
        if (3 === targetFiber.tag) return listeners;
        targetFiber = targetFiber.return;
      }
      return [];
    }
    function getParent(inst) {
      if (null === inst) return null;
      do inst = inst.return;
      while (inst && 5 !== inst.tag && 27 !== inst.tag);
      return inst ? inst : null;
    }
    function accumulateEnterLeaveListenersForEvent(
      dispatchQueue,
      event,
      target,
      common,
      inCapturePhase
    ) {
      for (
        var registrationName = event._reactName, listeners = [];
        null !== target && target !== common;

      ) {
        var _instance4 = target,
          alternate = _instance4.alternate,
          stateNode = _instance4.stateNode;
        _instance4 = _instance4.tag;
        if (null !== alternate && alternate === common) break;
        (5 !== _instance4 && 26 !== _instance4 && 27 !== _instance4) ||
          null === stateNode ||
          ((alternate = stateNode),
          inCapturePhase
            ? ((stateNode = getListener(target, registrationName)),
              null != stateNode &&
                listeners.unshift(
                  createDispatchListener(target, stateNode, alternate)
                ))
            : inCapturePhase ||
              ((stateNode = getListener(target, registrationName)),
              null != stateNode &&
                listeners.push(
                  createDispatchListener(target, stateNode, alternate)
                )));
        target = target.return;
      }
      0 !== listeners.length &&
        dispatchQueue.push({ event: event, listeners: listeners });
    }
    function validatePropertiesInDevelopment(type, props) {
      validateProperties$2(type, props);
      ("input" !== type && "textarea" !== type && "select" !== type) ||
        null == props ||
        null !== props.value ||
        didWarnValueNull ||
        ((didWarnValueNull = !0),
        "select" === type && props.multiple
          ? console.error(
              "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
              type
            )
          : console.error(
              "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
              type
            ));
      var eventRegistry = {
        registrationNameDependencies: registrationNameDependencies,
        possibleRegistrationNames: possibleRegistrationNames
      };
      isCustomElement(type) ||
        "string" === typeof props.is ||
        warnUnknownProperties(type, props, eventRegistry);
      props.contentEditable &&
        !props.suppressContentEditableWarning &&
        null != props.children &&
        console.error(
          "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
        );
    }
    function warnForPropDifference(
      propName,
      serverValue,
      clientValue,
      serverDifferences
    ) {
      serverValue !== clientValue &&
        ((clientValue = normalizeMarkupForTextOrAttribute(clientValue)),
        normalizeMarkupForTextOrAttribute(serverValue) !== clientValue &&
          (serverDifferences[propName] = serverValue));
    }
    function warnForExtraAttributes(
      domElement,
      attributeNames,
      serverDifferences
    ) {
      attributeNames.forEach(function (attributeName) {
        serverDifferences[getPropNameFromAttributeName(attributeName)] =
          "style" === attributeName
            ? getStylesObjectFromElement(domElement)
            : domElement.getAttribute(attributeName);
      });
    }
    function warnForInvalidEventListener(registrationName, listener) {
      !1 === listener
        ? console.error(
            "Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",
            registrationName,
            registrationName,
            registrationName
          )
        : console.error(
            "Expected `%s` listener to be a function, instead got a value of `%s` type.",
            registrationName,
            typeof listener
          );
    }
    function normalizeHTML(parent, html) {
      parent =
        parent.namespaceURI === MATH_NAMESPACE ||
        parent.namespaceURI === SVG_NAMESPACE
          ? parent.ownerDocument.createElementNS(
              parent.namespaceURI,
              parent.tagName
            )
          : parent.ownerDocument.createElement(parent.tagName);
      parent.innerHTML = html;
      return parent.innerHTML;
    }
    function normalizeMarkupForTextOrAttribute(markup) {
      willCoercionThrow(markup) &&
        (console.error(
          "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",
          typeName(markup)
        ),
        testStringCoercion(markup));
      return ("string" === typeof markup ? markup : "" + markup)
        .replace(NORMALIZE_NEWLINES_REGEX, "\n")
        .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText) {
      clientText = normalizeMarkupForTextOrAttribute(clientText);
      return normalizeMarkupForTextOrAttribute(serverText) === clientText
        ? !0
        : !1;
    }
    function noop$1() {}
    function setProp(domElement, tag, key, value, props, prevValue) {
      switch (key) {
        case "children":
          if ("string" === typeof value)
            validateTextNesting(value, tag, !1),
              "body" === tag ||
                ("textarea" === tag && "" === value) ||
                setTextContent(domElement, value);
          else if ("number" === typeof value || "bigint" === typeof value)
            validateTextNesting("" + value, tag, !1),
              "body" !== tag && setTextContent(domElement, "" + value);
          break;
        case "className":
          setValueForKnownAttribute(domElement, "class", value);
          break;
        case "tabIndex":
          setValueForKnownAttribute(domElement, "tabindex", value);
          break;
        case "dir":
        case "role":
        case "viewBox":
        case "width":
        case "height":
          setValueForKnownAttribute(domElement, key, value);
          break;
        case "style":
          setValueForStyles(domElement, value, prevValue);
          break;
        case "data":
          if ("object" !== tag) {
            setValueForKnownAttribute(domElement, "data", value);
            break;
          }
        case "src":
        case "href":
          if ("" === value && ("a" !== tag || "href" !== key)) {
            "src" === key
              ? console.error(
                  'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                  key,
                  key
                )
              : console.error(
                  'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                  key,
                  key
                );
            domElement.removeAttribute(key);
            break;
          }
          if (
            null == value ||
            "function" === typeof value ||
            "symbol" === typeof value ||
            "boolean" === typeof value
          ) {
            domElement.removeAttribute(key);
            break;
          }
          checkAttributeStringCoercion(value, key);
          value = sanitizeURL("" + value);
          domElement.setAttribute(key, value);
          break;
        case "action":
        case "formAction":
          null != value &&
            ("form" === tag
              ? "formAction" === key
                ? console.error(
                    "You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."
                  )
                : "function" === typeof value &&
                  ((null == props.encType && null == props.method) ||
                    didWarnFormActionMethod ||
                    ((didWarnFormActionMethod = !0),
                    console.error(
                      "Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden."
                    )),
                  null == props.target ||
                    didWarnFormActionTarget ||
                    ((didWarnFormActionTarget = !0),
                    console.error(
                      "Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."
                    )))
              : "input" === tag || "button" === tag
                ? "action" === key
                  ? console.error(
                      "You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."
                    )
                  : "input" !== tag ||
                      "submit" === props.type ||
                      "image" === props.type ||
                      didWarnFormActionType
                    ? "button" !== tag ||
                      null == props.type ||
                      "submit" === props.type ||
                      didWarnFormActionType
                      ? "function" === typeof value &&
                        (null == props.name ||
                          didWarnFormActionName ||
                          ((didWarnFormActionName = !0),
                          console.error(
                            'Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.'
                          )),
                        (null == props.formEncType &&
                          null == props.formMethod) ||
                          didWarnFormActionMethod ||
                          ((didWarnFormActionMethod = !0),
                          console.error(
                            "Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden."
                          )),
                        null == props.formTarget ||
                          didWarnFormActionTarget ||
                          ((didWarnFormActionTarget = !0),
                          console.error(
                            "Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."
                          )))
                      : ((didWarnFormActionType = !0),
                        console.error(
                          'A button can only specify a formAction along with type="submit" or no type.'
                        ))
                    : ((didWarnFormActionType = !0),
                      console.error(
                        'An input can only specify a formAction along with type="submit" or type="image".'
                      ))
                : "action" === key
                  ? console.error(
                      "You can only pass the action prop to <form>."
                    )
                  : console.error(
                      "You can only pass the formAction prop to <input> or <button>."
                    ));
          if ("function" === typeof value) {
            domElement.setAttribute(
              key,
              "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
            );
            break;
          } else
            "function" === typeof prevValue &&
              ("formAction" === key
                ? ("input" !== tag &&
                    setProp(domElement, tag, "name", props.name, props, null),
                  setProp(
                    domElement,
                    tag,
                    "formEncType",
                    props.formEncType,
                    props,
                    null
                  ),
                  setProp(
                    domElement,
                    tag,
                    "formMethod",
                    props.formMethod,
                    props,
                    null
                  ),
                  setProp(
                    domElement,
                    tag,
                    "formTarget",
                    props.formTarget,
                    props,
                    null
                  ))
                : (setProp(
                    domElement,
                    tag,
                    "encType",
                    props.encType,
                    props,
                    null
                  ),
                  setProp(domElement, tag, "method", props.method, props, null),
                  setProp(
                    domElement,
                    tag,
                    "target",
                    props.target,
                    props,
                    null
                  )));
          if (
            null == value ||
            "symbol" === typeof value ||
            "boolean" === typeof value
          ) {
            domElement.removeAttribute(key);
            break;
          }
          checkAttributeStringCoercion(value, key);
          value = sanitizeURL("" + value);
          domElement.setAttribute(key, value);
          break;
        case "onClick":
          null != value &&
            ("function" !== typeof value &&
              warnForInvalidEventListener(key, value),
            (domElement.onclick = noop$1));
          break;
        case "onScroll":
          null != value &&
            ("function" !== typeof value &&
              warnForInvalidEventListener(key, value),
            listenToNonDelegatedEvent("scroll", domElement));
          break;
        case "onScrollEnd":
          null != value &&
            ("function" !== typeof value &&
              warnForInvalidEventListener(key, value),
            listenToNonDelegatedEvent("scrollend", domElement));
          break;
        case "dangerouslySetInnerHTML":
          if (null != value) {
            if ("object" !== typeof value || !("__html" in value))
              throw Error(
                "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
              );
            key = value.__html;
            if (null != key) {
              if (null != props.children)
                throw Error(
                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                );
              domElement.innerHTML = key;
            }
          }
          break;
        case "multiple":
          domElement.multiple =
            value && "function" !== typeof value && "symbol" !== typeof value;
          break;
        case "muted":
          domElement.muted =
            value && "function" !== typeof value && "symbol" !== typeof value;
          break;
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "ref":
          break;
        case "autoFocus":
          break;
        case "xlinkHref":
          if (
            null == value ||
            "function" === typeof value ||
            "boolean" === typeof value ||
            "symbol" === typeof value
          ) {
            domElement.removeAttribute("xlink:href");
            break;
          }
          checkAttributeStringCoercion(value, key);
          key = sanitizeURL("" + value);
          domElement.setAttributeNS(xlinkNamespace, "xlink:href", key);
          break;
        case "contentEditable":
        case "spellCheck":
        case "draggable":
        case "value":
        case "autoReverse":
        case "externalResourcesRequired":
        case "focusable":
        case "preserveAlpha":
          null != value &&
          "function" !== typeof value &&
          "symbol" !== typeof value
            ? (checkAttributeStringCoercion(value, key),
              domElement.setAttribute(key, "" + value))
            : domElement.removeAttribute(key);
          break;
        case "inert":
          "" !== value ||
            didWarnForNewBooleanPropsWithEmptyValue[key] ||
            ((didWarnForNewBooleanPropsWithEmptyValue[key] = !0),
            console.error(
              "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
              key
            ));
        case "allowFullScreen":
        case "async":
        case "autoPlay":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "disablePictureInPicture":
        case "disableRemotePlayback":
        case "formNoValidate":
        case "hidden":
        case "loop":
        case "noModule":
        case "noValidate":
        case "open":
        case "playsInline":
        case "readOnly":
        case "required":
        case "reversed":
        case "scoped":
        case "seamless":
        case "itemScope":
          value && "function" !== typeof value && "symbol" !== typeof value
            ? domElement.setAttribute(key, "")
            : domElement.removeAttribute(key);
          break;
        case "capture":
        case "download":
          !0 === value
            ? domElement.setAttribute(key, "")
            : !1 !== value &&
                null != value &&
                "function" !== typeof value &&
                "symbol" !== typeof value
              ? (checkAttributeStringCoercion(value, key),
                domElement.setAttribute(key, value))
              : domElement.removeAttribute(key);
          break;
        case "cols":
        case "rows":
        case "size":
        case "span":
          null != value &&
          "function" !== typeof value &&
          "symbol" !== typeof value &&
          !isNaN(value) &&
          1 <= value
            ? (checkAttributeStringCoercion(value, key),
              domElement.setAttribute(key, value))
            : domElement.removeAttribute(key);
          break;
        case "rowSpan":
        case "start":
          null == value ||
          "function" === typeof value ||
          "symbol" === typeof value ||
          isNaN(value)
            ? domElement.removeAttribute(key)
            : (checkAttributeStringCoercion(value, key),
              domElement.setAttribute(key, value));
          break;
        case "popover":
          listenToNonDelegatedEvent("beforetoggle", domElement);
          listenToNonDelegatedEvent("toggle", domElement);
          setValueForAttribute(domElement, "popover", value);
          break;
        case "xlinkActuate":
          setValueForNamespacedAttribute(
            domElement,
            xlinkNamespace,
            "xlink:actuate",
            value
          );
          break;
        case "xlinkArcrole":
          setValueForNamespacedAttribute(
            domElement,
            xlinkNamespace,
            "xlink:arcrole",
            value
          );
          break;
        case "xlinkRole":
          setValueForNamespacedAttribute(
            domElement,
            xlinkNamespace,
            "xlink:role",
            value
          );
          break;
        case "xlinkShow":
          setValueForNamespacedAttribute(
            domElement,
            xlinkNamespace,
            "xlink:show",
            value
          );
          break;
        case "xlinkTitle":
          setValueForNamespacedAttribute(
            domElement,
            xlinkNamespace,
            "xlink:title",
            value
          );
          break;
        case "xlinkType":
          setValueForNamespacedAttribute(
            domElement,
            xlinkNamespace,
            "xlink:type",
            value
          );
          break;
        case "xmlBase":
          setValueForNamespacedAttribute(
            domElement,
            xmlNamespace,
            "xml:base",
            value
          );
          break;
        case "xmlLang":
          setValueForNamespacedAttribute(
            domElement,
            xmlNamespace,
            "xml:lang",
            value
          );
          break;
        case "xmlSpace":
          setValueForNamespacedAttribute(
            domElement,
            xmlNamespace,
            "xml:space",
            value
          );
          break;
        case "is":
          null != prevValue &&
            console.error(
              'Cannot update the "is" prop after it has been initialized.'
            );
          setValueForAttribute(domElement, "is", value);
          break;
        case "innerText":
        case "textContent":
          break;
        case "popoverTarget":
          didWarnPopoverTargetObject ||
            null == value ||
            "object" !== typeof value ||
            ((didWarnPopoverTargetObject = !0),
            console.error(
              "The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",
              value
            ));
        default:
          !(2 < key.length) ||
          ("o" !== key[0] && "O" !== key[0]) ||
          ("n" !== key[1] && "N" !== key[1])
            ? ((key = getAttributeAlias(key)),
              setValueForAttribute(domElement, key, value))
            : registrationNameDependencies.hasOwnProperty(key) &&
              null != value &&
              "function" !== typeof value &&
              warnForInvalidEventListener(key, value);
      }
    }
    function setPropOnCustomElement(
      domElement,
      tag,
      key,
      value,
      props,
      prevValue
    ) {
      switch (key) {
        case "style":
          setValueForStyles(domElement, value, prevValue);
          break;
        case "dangerouslySetInnerHTML":
          if (null != value) {
            if ("object" !== typeof value || !("__html" in value))
              throw Error(
                "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
              );
            key = value.__html;
            if (null != key) {
              if (null != props.children)
                throw Error(
                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                );
              domElement.innerHTML = key;
            }
          }
          break;
        case "children":
          "string" === typeof value
            ? setTextContent(domElement, value)
            : ("number" === typeof value || "bigint" === typeof value) &&
              setTextContent(domElement, "" + value);
          break;
        case "onScroll":
          null != value &&
            ("function" !== typeof value &&
              warnForInvalidEventListener(key, value),
            listenToNonDelegatedEvent("scroll", domElement));
          break;
        case "onScrollEnd":
          null != value &&
            ("function" !== typeof value &&
              warnForInvalidEventListener(key, value),
            listenToNonDelegatedEvent("scrollend", domElement));
          break;
        case "onClick":
          null != value &&
            ("function" !== typeof value &&
              warnForInvalidEventListener(key, value),
            (domElement.onclick = noop$1));
          break;
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "innerHTML":
        case "ref":
          break;
        case "innerText":
        case "textContent":
          break;
        default:
          if (registrationNameDependencies.hasOwnProperty(key))
            null != value &&
              "function" !== typeof value &&
              warnForInvalidEventListener(key, value);
          else
            a: {
              if (
                "o" === key[0] &&
                "n" === key[1] &&
                ((props = key.endsWith("Capture")),
                (tag = key.slice(2, props ? key.length - 7 : void 0)),
                (prevValue = domElement[internalPropsKey] || null),
                (prevValue = null != prevValue ? prevValue[key] : null),
                "function" === typeof prevValue &&
                  domElement.removeEventListener(tag, prevValue, props),
                "function" === typeof value)
              ) {
                "function" !== typeof prevValue &&
                  null !== prevValue &&
                  (key in domElement
                    ? (domElement[key] = null)
                    : domElement.hasAttribute(key) &&
                      domElement.removeAttribute(key));
                domElement.addEventListener(tag, value, props);
                break a;
              }
              key in domElement
                ? (domElement[key] = value)
                : !0 === value
                  ? domElement.setAttribute(key, "")
                  : setValueForAttribute(domElement, key, value);
            }
      }
    }
    function setInitialProperties(domElement, tag, props) {
      validatePropertiesInDevelopment(tag, props);
      switch (tag) {
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
          break;
        case "img":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          var hasSrc = !1,
            hasSrcSet = !1,
            propKey;
          for (propKey in props)
            if (props.hasOwnProperty(propKey)) {
              var propValue = props[propKey];
              if (null != propValue)
                switch (propKey) {
                  case "src":
                    hasSrc = !0;
                    break;
                  case "srcSet":
                    hasSrcSet = !0;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      tag +
                        " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    setProp(domElement, tag, propKey, propValue, props, null);
                }
            }
          hasSrcSet &&
            setProp(domElement, tag, "srcSet", props.srcSet, props, null);
          hasSrc && setProp(domElement, tag, "src", props.src, props, null);
          return;
        case "input":
          checkControlledValueProps("input", props);
          listenToNonDelegatedEvent("invalid", domElement);
          var defaultValue = (propKey = propValue = hasSrcSet = null),
            checked = null,
            defaultChecked = null;
          for (hasSrc in props)
            if (props.hasOwnProperty(hasSrc)) {
              var _propValue = props[hasSrc];
              if (null != _propValue)
                switch (hasSrc) {
                  case "name":
                    hasSrcSet = _propValue;
                    break;
                  case "type":
                    propValue = _propValue;
                    break;
                  case "checked":
                    checked = _propValue;
                    break;
                  case "defaultChecked":
                    defaultChecked = _propValue;
                    break;
                  case "value":
                    propKey = _propValue;
                    break;
                  case "defaultValue":
                    defaultValue = _propValue;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != _propValue)
                      throw Error(
                        tag +
                          " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                      );
                    break;
                  default:
                    setProp(domElement, tag, hasSrc, _propValue, props, null);
                }
            }
          validateInputProps(domElement, props);
          initInput(
            domElement,
            propKey,
            defaultValue,
            checked,
            defaultChecked,
            propValue,
            hasSrcSet,
            !1
          );
          track(domElement);
          return;
        case "select":
          checkControlledValueProps("select", props);
          listenToNonDelegatedEvent("invalid", domElement);
          hasSrc = propValue = propKey = null;
          for (hasSrcSet in props)
            if (
              props.hasOwnProperty(hasSrcSet) &&
              ((defaultValue = props[hasSrcSet]), null != defaultValue)
            )
              switch (hasSrcSet) {
                case "value":
                  propKey = defaultValue;
                  break;
                case "defaultValue":
                  propValue = defaultValue;
                  break;
                case "multiple":
                  hasSrc = defaultValue;
                default:
                  setProp(
                    domElement,
                    tag,
                    hasSrcSet,
                    defaultValue,
                    props,
                    null
                  );
              }
          validateSelectProps(domElement, props);
          tag = propKey;
          props = propValue;
          domElement.multiple = !!hasSrc;
          null != tag
            ? updateOptions(domElement, !!hasSrc, tag, !1)
            : null != props && updateOptions(domElement, !!hasSrc, props, !0);
          return;
        case "textarea":
          checkControlledValueProps("textarea", props);
          listenToNonDelegatedEvent("invalid", domElement);
          propKey = hasSrcSet = hasSrc = null;
          for (propValue in props)
            if (
              props.hasOwnProperty(propValue) &&
              ((defaultValue = props[propValue]), null != defaultValue)
            )
              switch (propValue) {
                case "value":
                  hasSrc = defaultValue;
                  break;
                case "defaultValue":
                  hasSrcSet = defaultValue;
                  break;
                case "children":
                  propKey = defaultValue;
                  break;
                case "dangerouslySetInnerHTML":
                  if (null != defaultValue)
                    throw Error(
                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                    );
                  break;
                default:
                  setProp(
                    domElement,
                    tag,
                    propValue,
                    defaultValue,
                    props,
                    null
                  );
              }
          validateTextareaProps(domElement, props);
          initTextarea(domElement, hasSrc, hasSrcSet, propKey);
          track(domElement);
          return;
        case "option":
          validateOptionProps(domElement, props);
          for (checked in props)
            if (
              props.hasOwnProperty(checked) &&
              ((hasSrc = props[checked]), null != hasSrc)
            )
              switch (checked) {
                case "selected":
                  domElement.selected =
                    hasSrc &&
                    "function" !== typeof hasSrc &&
                    "symbol" !== typeof hasSrc;
                  break;
                default:
                  setProp(domElement, tag, checked, hasSrc, props, null);
              }
          return;
        case "dialog":
          listenToNonDelegatedEvent("beforetoggle", domElement);
          listenToNonDelegatedEvent("toggle", domElement);
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          break;
        case "iframe":
        case "object":
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "video":
        case "audio":
          for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
            listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
          break;
        case "image":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          break;
        case "embed":
        case "source":
        case "link":
          listenToNonDelegatedEvent("error", domElement),
            listenToNonDelegatedEvent("load", domElement);
        case "area":
        case "base":
        case "br":
        case "col":
        case "hr":
        case "keygen":
        case "meta":
        case "param":
        case "track":
        case "wbr":
        case "menuitem":
          for (defaultChecked in props)
            if (
              props.hasOwnProperty(defaultChecked) &&
              ((hasSrc = props[defaultChecked]), null != hasSrc)
            )
              switch (defaultChecked) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error(
                    tag +
                      " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                  );
                default:
                  setProp(domElement, tag, defaultChecked, hasSrc, props, null);
              }
          return;
        default:
          if (isCustomElement(tag)) {
            for (_propValue in props)
              props.hasOwnProperty(_propValue) &&
                ((hasSrc = props[_propValue]),
                void 0 !== hasSrc &&
                  setPropOnCustomElement(
                    domElement,
                    tag,
                    _propValue,
                    hasSrc,
                    props,
                    void 0
                  ));
            return;
          }
      }
      for (defaultValue in props)
        props.hasOwnProperty(defaultValue) &&
          ((hasSrc = props[defaultValue]),
          null != hasSrc &&
            setProp(domElement, tag, defaultValue, hasSrc, props, null));
    }
    function updateProperties(domElement, tag, lastProps, nextProps) {
      validatePropertiesInDevelopment(tag, nextProps);
      switch (tag) {
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
          break;
        case "input":
          var name = null,
            type = null,
            value = null,
            defaultValue = null,
            lastDefaultValue = null,
            checked = null,
            defaultChecked = null;
          for (propKey in lastProps) {
            var lastProp = lastProps[propKey];
            if (lastProps.hasOwnProperty(propKey) && null != lastProp)
              switch (propKey) {
                case "checked":
                  break;
                case "value":
                  break;
                case "defaultValue":
                  lastDefaultValue = lastProp;
                default:
                  nextProps.hasOwnProperty(propKey) ||
                    setProp(
                      domElement,
                      tag,
                      propKey,
                      null,
                      nextProps,
                      lastProp
                    );
              }
          }
          for (var _propKey8 in nextProps) {
            var propKey = nextProps[_propKey8];
            lastProp = lastProps[_propKey8];
            if (
              nextProps.hasOwnProperty(_propKey8) &&
              (null != propKey || null != lastProp)
            )
              switch (_propKey8) {
                case "type":
                  type = propKey;
                  break;
                case "name":
                  name = propKey;
                  break;
                case "checked":
                  checked = propKey;
                  break;
                case "defaultChecked":
                  defaultChecked = propKey;
                  break;
                case "value":
                  value = propKey;
                  break;
                case "defaultValue":
                  defaultValue = propKey;
                  break;
                case "children":
                case "dangerouslySetInnerHTML":
                  if (null != propKey)
                    throw Error(
                      tag +
                        " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  break;
                default:
                  propKey !== lastProp &&
                    setProp(
                      domElement,
                      tag,
                      _propKey8,
                      propKey,
                      nextProps,
                      lastProp
                    );
              }
          }
          tag =
            "checkbox" === lastProps.type || "radio" === lastProps.type
              ? null != lastProps.checked
              : null != lastProps.value;
          nextProps =
            "checkbox" === nextProps.type || "radio" === nextProps.type
              ? null != nextProps.checked
              : null != nextProps.value;
          tag ||
            !nextProps ||
            didWarnUncontrolledToControlled ||
            (console.error(
              "A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
            ),
            (didWarnUncontrolledToControlled = !0));
          !tag ||
            nextProps ||
            didWarnControlledToUncontrolled ||
            (console.error(
              "A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
            ),
            (didWarnControlledToUncontrolled = !0));
          updateInput(
            domElement,
            value,
            defaultValue,
            lastDefaultValue,
            checked,
            defaultChecked,
            type,
            name
          );
          return;
        case "select":
          propKey = value = defaultValue = _propKey8 = null;
          for (type in lastProps)
            if (
              ((lastDefaultValue = lastProps[type]),
              lastProps.hasOwnProperty(type) && null != lastDefaultValue)
            )
              switch (type) {
                case "value":
                  break;
                case "multiple":
                  propKey = lastDefaultValue;
                default:
                  nextProps.hasOwnProperty(type) ||
                    setProp(
                      domElement,
                      tag,
                      type,
                      null,
                      nextProps,
                      lastDefaultValue
                    );
              }
          for (name in nextProps)
            if (
              ((type = nextProps[name]),
              (lastDefaultValue = lastProps[name]),
              nextProps.hasOwnProperty(name) &&
                (null != type || null != lastDefaultValue))
            )
              switch (name) {
                case "value":
                  _propKey8 = type;
                  break;
                case "defaultValue":
                  defaultValue = type;
                  break;
                case "multiple":
                  value = type;
                default:
                  type !== lastDefaultValue &&
                    setProp(
                      domElement,
                      tag,
                      name,
                      type,
                      nextProps,
                      lastDefaultValue
                    );
              }
          nextProps = defaultValue;
          tag = value;
          lastProps = propKey;
          null != _propKey8
            ? updateOptions(domElement, !!tag, _propKey8, !1)
            : !!lastProps !== !!tag &&
              (null != nextProps
                ? updateOptions(domElement, !!tag, nextProps, !0)
                : updateOptions(domElement, !!tag, tag ? [] : "", !1));
          return;
        case "textarea":
          propKey = _propKey8 = null;
          for (defaultValue in lastProps)
            if (
              ((name = lastProps[defaultValue]),
              lastProps.hasOwnProperty(defaultValue) &&
                null != name &&
                !nextProps.hasOwnProperty(defaultValue))
            )
              switch (defaultValue) {
                case "value":
                  break;
                case "children":
                  break;
                default:
                  setProp(domElement, tag, defaultValue, null, nextProps, name);
              }
          for (value in nextProps)
            if (
              ((name = nextProps[value]),
              (type = lastProps[value]),
              nextProps.hasOwnProperty(value) && (null != name || null != type))
            )
              switch (value) {
                case "value":
                  _propKey8 = name;
                  break;
                case "defaultValue":
                  propKey = name;
                  break;
                case "children":
                  break;
                case "dangerouslySetInnerHTML":
                  if (null != name)
                    throw Error(
                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                    );
                  break;
                default:
                  name !== type &&
                    setProp(domElement, tag, value, name, nextProps, type);
              }
          updateTextarea(domElement, _propKey8, propKey);
          return;
        case "option":
          for (var _propKey13 in lastProps)
            if (
              ((_propKey8 = lastProps[_propKey13]),
              lastProps.hasOwnProperty(_propKey13) &&
                null != _propKey8 &&
                !nextProps.hasOwnProperty(_propKey13))
            )
              switch (_propKey13) {
                case "selected":
                  domElement.selected = !1;
                  break;
                default:
                  setProp(
                    domElement,
                    tag,
                    _propKey13,
                    null,
                    nextProps,
                    _propKey8
                  );
              }
          for (lastDefaultValue in nextProps)
            if (
              ((_propKey8 = nextProps[lastDefaultValue]),
              (propKey = lastProps[lastDefaultValue]),
              nextProps.hasOwnProperty(lastDefaultValue) &&
                _propKey8 !== propKey &&
                (null != _propKey8 || null != propKey))
            )
              switch (lastDefaultValue) {
                case "selected":
                  domElement.selected =
                    _propKey8 &&
                    "function" !== typeof _propKey8 &&
                    "symbol" !== typeof _propKey8;
                  break;
                default:
                  setProp(
                    domElement,
                    tag,
                    lastDefaultValue,
                    _propKey8,
                    nextProps,
                    propKey
                  );
              }
          return;
        case "img":
        case "link":
        case "area":
        case "base":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "keygen":
        case "meta":
        case "param":
        case "source":
        case "track":
        case "wbr":
        case "menuitem":
          for (var _propKey15 in lastProps)
            (_propKey8 = lastProps[_propKey15]),
              lastProps.hasOwnProperty(_propKey15) &&
                null != _propKey8 &&
                !nextProps.hasOwnProperty(_propKey15) &&
                setProp(
                  domElement,
                  tag,
                  _propKey15,
                  null,
                  nextProps,
                  _propKey8
                );
          for (checked in nextProps)
            if (
              ((_propKey8 = nextProps[checked]),
              (propKey = lastProps[checked]),
              nextProps.hasOwnProperty(checked) &&
                _propKey8 !== propKey &&
                (null != _propKey8 || null != propKey))
            )
              switch (checked) {
                case "children":
                case "dangerouslySetInnerHTML":
                  if (null != _propKey8)
                    throw Error(
                      tag +
                        " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  break;
                default:
                  setProp(
                    domElement,
                    tag,
                    checked,
                    _propKey8,
                    nextProps,
                    propKey
                  );
              }
          return;
        default:
          if (isCustomElement(tag)) {
            for (var _propKey17 in lastProps)
              (_propKey8 = lastProps[_propKey17]),
                lastProps.hasOwnProperty(_propKey17) &&
                  void 0 !== _propKey8 &&
                  !nextProps.hasOwnProperty(_propKey17) &&
                  setPropOnCustomElement(
                    domElement,
                    tag,
                    _propKey17,
                    void 0,
                    nextProps,
                    _propKey8
                  );
            for (defaultChecked in nextProps)
              (_propKey8 = nextProps[defaultChecked]),
                (propKey = lastProps[defaultChecked]),
                !nextProps.hasOwnProperty(defaultChecked) ||
                  _propKey8 === propKey ||
                  (void 0 === _propKey8 && void 0 === propKey) ||
                  setPropOnCustomElement(
                    domElement,
                    tag,
                    defaultChecked,
                    _propKey8,
                    nextProps,
                    propKey
                  );
            return;
          }
      }
      for (var _propKey19 in lastProps)
        (_propKey8 = lastProps[_propKey19]),
          lastProps.hasOwnProperty(_propKey19) &&
            null != _propKey8 &&
            !nextProps.hasOwnProperty(_propKey19) &&
            setProp(domElement, tag, _propKey19, null, nextProps, _propKey8);
      for (lastProp in nextProps)
        (_propKey8 = nextProps[lastProp]),
          (propKey = lastProps[lastProp]),
          !nextProps.hasOwnProperty(lastProp) ||
            _propKey8 === propKey ||
            (null == _propKey8 && null == propKey) ||
            setProp(domElement, tag, lastProp, _propKey8, nextProps, propKey);
    }
    function getPropNameFromAttributeName(attrName) {
      switch (attrName) {
        case "class":
          return "className";
        case "for":
          return "htmlFor";
        default:
          return attrName;
      }
    }
    function getStylesObjectFromElement(domElement) {
      var serverValueInObjectForm = {};
      domElement = domElement.style;
      for (var i = 0; i < domElement.length; i++) {
        var styleName = domElement[i];
        serverValueInObjectForm[styleName] =
          domElement.getPropertyValue(styleName);
      }
      return serverValueInObjectForm;
    }
    function diffHydratedStyles(domElement, value$jscomp$0, serverDifferences) {
      if (null != value$jscomp$0 && "object" !== typeof value$jscomp$0)
        console.error(
          "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
        );
      else {
        var clientValue;
        var delimiter = (clientValue = ""),
          styleName;
        for (styleName in value$jscomp$0)
          if (value$jscomp$0.hasOwnProperty(styleName)) {
            var value = value$jscomp$0[styleName];
            null != value &&
              "boolean" !== typeof value &&
              "" !== value &&
              (0 === styleName.indexOf("--")
                ? (checkCSSPropertyStringCoercion(value, styleName),
                  (clientValue +=
                    delimiter + styleName + ":" + ("" + value).trim()))
                : "number" !== typeof value ||
                    0 === value ||
                    unitlessNumbers.has(styleName)
                  ? (checkCSSPropertyStringCoercion(value, styleName),
                    (clientValue +=
                      delimiter +
                      styleName
                        .replace(uppercasePattern, "-$1")
                        .toLowerCase()
                        .replace(msPattern$1, "-ms-") +
                      ":" +
                      ("" + value).trim()))
                  : (clientValue +=
                      delimiter +
                      styleName
                        .replace(uppercasePattern, "-$1")
                        .toLowerCase()
                        .replace(msPattern$1, "-ms-") +
                      ":" +
                      value +
                      "px"),
              (delimiter = ";"));
          }
        clientValue = clientValue || null;
        value$jscomp$0 = domElement.getAttribute("style");
        value$jscomp$0 !== clientValue &&
          ((clientValue = normalizeMarkupForTextOrAttribute(clientValue)),
          normalizeMarkupForTextOrAttribute(value$jscomp$0) !== clientValue &&
            (serverDifferences.style = getStylesObjectFromElement(domElement)));
      }
    }
    function hydrateAttribute(
      domElement,
      propKey,
      attributeName,
      value,
      extraAttributes,
      serverDifferences
    ) {
      extraAttributes.delete(attributeName);
      domElement = domElement.getAttribute(attributeName);
      if (null === domElement)
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            return;
        }
      else if (null != value)
        switch (typeof value) {
          case "function":
          case "symbol":
          case "boolean":
            break;
          default:
            if (
              (checkAttributeStringCoercion(value, propKey),
              domElement === "" + value)
            )
              return;
        }
      warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateBooleanAttribute(
      domElement,
      propKey,
      attributeName,
      value,
      extraAttributes,
      serverDifferences
    ) {
      extraAttributes.delete(attributeName);
      domElement = domElement.getAttribute(attributeName);
      if (null === domElement) {
        switch (typeof value) {
          case "function":
          case "symbol":
            return;
        }
        if (!value) return;
      } else
        switch (typeof value) {
          case "function":
          case "symbol":
            break;
          default:
            if (value) return;
        }
      warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateBooleanishAttribute(
      domElement,
      propKey,
      attributeName,
      value,
      extraAttributes,
      serverDifferences
    ) {
      extraAttributes.delete(attributeName);
      domElement = domElement.getAttribute(attributeName);
      if (null === domElement)
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
            return;
        }
      else if (null != value)
        switch (typeof value) {
          case "function":
          case "symbol":
            break;
          default:
            if (
              (checkAttributeStringCoercion(value, attributeName),
              domElement === "" + value)
            )
              return;
        }
      warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateNumericAttribute(
      domElement,
      propKey,
      attributeName,
      value,
      extraAttributes,
      serverDifferences
    ) {
      extraAttributes.delete(attributeName);
      domElement = domElement.getAttribute(attributeName);
      if (null === domElement)
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            return;
          default:
            if (isNaN(value)) return;
        }
      else if (null != value)
        switch (typeof value) {
          case "function":
          case "symbol":
          case "boolean":
            break;
          default:
            if (
              !isNaN(value) &&
              (checkAttributeStringCoercion(value, propKey),
              domElement === "" + value)
            )
              return;
        }
      warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateSanitizedAttribute(
      domElement,
      propKey,
      attributeName,
      value,
      extraAttributes,
      serverDifferences
    ) {
      extraAttributes.delete(attributeName);
      domElement = domElement.getAttribute(attributeName);
      if (null === domElement)
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean":
            return;
        }
      else if (null != value)
        switch (typeof value) {
          case "function":
          case "symbol":
          case "boolean":
            break;
          default:
            if (
              (checkAttributeStringCoercion(value, propKey),
              (attributeName = sanitizeURL("" + value)),
              domElement === attributeName)
            )
              return;
        }
      warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function diffHydratedProperties(domElement, tag, props, hostContext) {
      for (
        var serverDifferences = {},
          extraAttributes = new Set(),
          attributes = domElement.attributes,
          i = 0;
        i < attributes.length;
        i++
      )
        switch (attributes[i].name.toLowerCase()) {
          case "value":
            break;
          case "checked":
            break;
          case "selected":
            break;
          default:
            extraAttributes.add(attributes[i].name);
        }
      if (isCustomElement(tag))
        for (var propKey in props) {
          if (props.hasOwnProperty(propKey)) {
            var value = props[propKey];
            if (null != value)
              if (registrationNameDependencies.hasOwnProperty(propKey))
                "function" !== typeof value &&
                  warnForInvalidEventListener(propKey, value);
              else if (!0 !== props.suppressHydrationWarning)
                switch (propKey) {
                  case "children":
                    ("string" !== typeof value && "number" !== typeof value) ||
                      warnForPropDifference(
                        "children",
                        domElement.textContent,
                        value,
                        serverDifferences
                      );
                    continue;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                  case "defaultValue":
                  case "defaultChecked":
                  case "innerHTML":
                  case "ref":
                    continue;
                  case "dangerouslySetInnerHTML":
                    attributes = domElement.innerHTML;
                    value = value ? value.__html : void 0;
                    null != value &&
                      ((value = normalizeHTML(domElement, value)),
                      warnForPropDifference(
                        propKey,
                        attributes,
                        value,
                        serverDifferences
                      ));
                    continue;
                  case "style":
                    extraAttributes.delete(propKey);
                    diffHydratedStyles(domElement, value, serverDifferences);
                    continue;
                  case "offsetParent":
                  case "offsetTop":
                  case "offsetLeft":
                  case "offsetWidth":
                  case "offsetHeight":
                  case "isContentEditable":
                  case "outerText":
                  case "outerHTML":
                    extraAttributes.delete(propKey.toLowerCase());
                    console.error(
                      "Assignment to read-only property will result in a no-op: `%s`",
                      propKey
                    );
                    continue;
                  case "className":
                    extraAttributes.delete("class");
                    attributes = getValueForAttributeOnCustomComponent(
                      domElement,
                      "class",
                      value
                    );
                    warnForPropDifference(
                      "className",
                      attributes,
                      value,
                      serverDifferences
                    );
                    continue;
                  default:
                    hostContext.context === HostContextNamespaceNone &&
                    "svg" !== tag &&
                    "math" !== tag
                      ? extraAttributes.delete(propKey.toLowerCase())
                      : extraAttributes.delete(propKey),
                      (attributes = getValueForAttributeOnCustomComponent(
                        domElement,
                        propKey,
                        value
                      )),
                      warnForPropDifference(
                        propKey,
                        attributes,
                        value,
                        serverDifferences
                      );
                }
          }
        }
      else
        for (value in props)
          if (
            props.hasOwnProperty(value) &&
            ((propKey = props[value]), null != propKey)
          )
            if (registrationNameDependencies.hasOwnProperty(value))
              "function" !== typeof propKey &&
                warnForInvalidEventListener(value, propKey);
            else if (!0 !== props.suppressHydrationWarning)
              switch (value) {
                case "children":
                  ("string" !== typeof propKey &&
                    "number" !== typeof propKey) ||
                    warnForPropDifference(
                      "children",
                      domElement.textContent,
                      propKey,
                      serverDifferences
                    );
                  continue;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                case "value":
                case "checked":
                case "selected":
                case "defaultValue":
                case "defaultChecked":
                case "innerHTML":
                case "ref":
                  continue;
                case "dangerouslySetInnerHTML":
                  attributes = domElement.innerHTML;
                  propKey = propKey ? propKey.__html : void 0;
                  null != propKey &&
                    ((propKey = normalizeHTML(domElement, propKey)),
                    attributes !== propKey &&
                      (serverDifferences[value] = { __html: attributes }));
                  continue;
                case "className":
                  hydrateAttribute(
                    domElement,
                    value,
                    "class",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "tabIndex":
                  hydrateAttribute(
                    domElement,
                    value,
                    "tabindex",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "style":
                  extraAttributes.delete(value);
                  diffHydratedStyles(domElement, propKey, serverDifferences);
                  continue;
                case "multiple":
                  extraAttributes.delete(value);
                  warnForPropDifference(
                    value,
                    domElement.multiple,
                    propKey,
                    serverDifferences
                  );
                  continue;
                case "muted":
                  extraAttributes.delete(value);
                  warnForPropDifference(
                    value,
                    domElement.muted,
                    propKey,
                    serverDifferences
                  );
                  continue;
                case "autoFocus":
                  extraAttributes.delete("autofocus");
                  warnForPropDifference(
                    value,
                    domElement.autofocus,
                    propKey,
                    serverDifferences
                  );
                  continue;
                case "data":
                  if ("object" !== tag) {
                    extraAttributes.delete(value);
                    attributes = domElement.getAttribute("data");
                    warnForPropDifference(
                      value,
                      attributes,
                      propKey,
                      serverDifferences
                    );
                    continue;
                  }
                case "src":
                case "href":
                  if (
                    !(
                      "" !== propKey ||
                      ("a" === tag && "href" === value) ||
                      ("object" === tag && "data" === value)
                    )
                  ) {
                    "src" === value
                      ? console.error(
                          'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                          value,
                          value
                        )
                      : console.error(
                          'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
                          value,
                          value
                        );
                    continue;
                  }
                  hydrateSanitizedAttribute(
                    domElement,
                    value,
                    value,
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "action":
                case "formAction":
                  attributes = domElement.getAttribute(value);
                  if ("function" === typeof propKey) {
                    extraAttributes.delete(value.toLowerCase());
                    "formAction" === value
                      ? (extraAttributes.delete("name"),
                        extraAttributes.delete("formenctype"),
                        extraAttributes.delete("formmethod"),
                        extraAttributes.delete("formtarget"))
                      : (extraAttributes.delete("enctype"),
                        extraAttributes.delete("method"),
                        extraAttributes.delete("target"));
                    continue;
                  } else if (attributes === EXPECTED_FORM_ACTION_URL) {
                    extraAttributes.delete(value.toLowerCase());
                    warnForPropDifference(
                      value,
                      "function",
                      propKey,
                      serverDifferences
                    );
                    continue;
                  }
                  hydrateSanitizedAttribute(
                    domElement,
                    value,
                    value.toLowerCase(),
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xlinkHref":
                  hydrateSanitizedAttribute(
                    domElement,
                    value,
                    "xlink:href",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "contentEditable":
                  hydrateBooleanishAttribute(
                    domElement,
                    value,
                    "contenteditable",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "spellCheck":
                  hydrateBooleanishAttribute(
                    domElement,
                    value,
                    "spellcheck",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "draggable":
                case "autoReverse":
                case "externalResourcesRequired":
                case "focusable":
                case "preserveAlpha":
                  hydrateBooleanishAttribute(
                    domElement,
                    value,
                    value,
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "allowFullScreen":
                case "async":
                case "autoPlay":
                case "controls":
                case "default":
                case "defer":
                case "disabled":
                case "disablePictureInPicture":
                case "disableRemotePlayback":
                case "formNoValidate":
                case "hidden":
                case "loop":
                case "noModule":
                case "noValidate":
                case "open":
                case "playsInline":
                case "readOnly":
                case "required":
                case "reversed":
                case "scoped":
                case "seamless":
                case "itemScope":
                  hydrateBooleanAttribute(
                    domElement,
                    value,
                    value.toLowerCase(),
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "capture":
                case "download":
                  a: {
                    i = domElement;
                    var attributeName = (attributes = value),
                      serverDifferences$jscomp$0 = serverDifferences;
                    extraAttributes.delete(attributeName);
                    i = i.getAttribute(attributeName);
                    if (null === i)
                      switch (typeof propKey) {
                        case "undefined":
                        case "function":
                        case "symbol":
                          break a;
                        default:
                          if (!1 === propKey) break a;
                      }
                    else if (null != propKey)
                      switch (typeof propKey) {
                        case "function":
                        case "symbol":
                          break;
                        case "boolean":
                          if (!0 === propKey && "" === i) break a;
                          break;
                        default:
                          if (
                            (checkAttributeStringCoercion(propKey, attributes),
                            i === "" + propKey)
                          )
                            break a;
                      }
                    warnForPropDifference(
                      attributes,
                      i,
                      propKey,
                      serverDifferences$jscomp$0
                    );
                  }
                  continue;
                case "cols":
                case "rows":
                case "size":
                case "span":
                  a: {
                    i = domElement;
                    attributeName = attributes = value;
                    serverDifferences$jscomp$0 = serverDifferences;
                    extraAttributes.delete(attributeName);
                    i = i.getAttribute(attributeName);
                    if (null === i)
                      switch (typeof propKey) {
                        case "undefined":
                        case "function":
                        case "symbol":
                        case "boolean":
                          break a;
                        default:
                          if (isNaN(propKey) || 1 > propKey) break a;
                      }
                    else if (null != propKey)
                      switch (typeof propKey) {
                        case "function":
                        case "symbol":
                        case "boolean":
                          break;
                        default:
                          if (
                            !(isNaN(propKey) || 1 > propKey) &&
                            (checkAttributeStringCoercion(propKey, attributes),
                            i === "" + propKey)
                          )
                            break a;
                      }
                    warnForPropDifference(
                      attributes,
                      i,
                      propKey,
                      serverDifferences$jscomp$0
                    );
                  }
                  continue;
                case "rowSpan":
                  hydrateNumericAttribute(
                    domElement,
                    value,
                    "rowspan",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "start":
                  hydrateNumericAttribute(
                    domElement,
                    value,
                    value,
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xHeight":
                  hydrateAttribute(
                    domElement,
                    value,
                    "x-height",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xlinkActuate":
                  hydrateAttribute(
                    domElement,
                    value,
                    "xlink:actuate",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xlinkArcrole":
                  hydrateAttribute(
                    domElement,
                    value,
                    "xlink:arcrole",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xlinkRole":
                  hydrateAttribute(
                    domElement,
                    value,
                    "xlink:role",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xlinkShow":
                  hydrateAttribute(
                    domElement,
                    value,
                    "xlink:show",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xlinkTitle":
                  hydrateAttribute(
                    domElement,
                    value,
                    "xlink:title",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xlinkType":
                  hydrateAttribute(
                    domElement,
                    value,
                    "xlink:type",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xmlBase":
                  hydrateAttribute(
                    domElement,
                    value,
                    "xml:base",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xmlLang":
                  hydrateAttribute(
                    domElement,
                    value,
                    "xml:lang",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "xmlSpace":
                  hydrateAttribute(
                    domElement,
                    value,
                    "xml:space",
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                case "inert":
                  "" !== propKey ||
                    didWarnForNewBooleanPropsWithEmptyValue[value] ||
                    ((didWarnForNewBooleanPropsWithEmptyValue[value] = !0),
                    console.error(
                      "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
                      value
                    ));
                  hydrateBooleanAttribute(
                    domElement,
                    value,
                    value,
                    propKey,
                    extraAttributes,
                    serverDifferences
                  );
                  continue;
                default:
                  if (
                    !(2 < value.length) ||
                    ("o" !== value[0] && "O" !== value[0]) ||
                    ("n" !== value[1] && "N" !== value[1])
                  ) {
                    i = getAttributeAlias(value);
                    attributes = !1;
                    hostContext.context === HostContextNamespaceNone &&
                    "svg" !== tag &&
                    "math" !== tag
                      ? extraAttributes.delete(i.toLowerCase())
                      : ((attributeName = value.toLowerCase()),
                        (attributeName = possibleStandardNames.hasOwnProperty(
                          attributeName
                        )
                          ? possibleStandardNames[attributeName] || null
                          : null),
                        null !== attributeName &&
                          attributeName !== value &&
                          ((attributes = !0),
                          extraAttributes.delete(attributeName)),
                        extraAttributes.delete(i));
                    a: if (
                      ((attributeName = domElement),
                      (serverDifferences$jscomp$0 = i),
                      (i = propKey),
                      isAttributeNameSafe(serverDifferences$jscomp$0))
                    )
                      if (
                        attributeName.hasAttribute(serverDifferences$jscomp$0)
                      )
                        (attributeName = attributeName.getAttribute(
                          serverDifferences$jscomp$0
                        )),
                          checkAttributeStringCoercion(
                            i,
                            serverDifferences$jscomp$0
                          ),
                          (i = attributeName === "" + i ? i : attributeName);
                      else {
                        switch (typeof i) {
                          case "function":
                          case "symbol":
                            break a;
                          case "boolean":
                            if (
                              ((attributeName = serverDifferences$jscomp$0
                                .toLowerCase()
                                .slice(0, 5)),
                              "data-" !== attributeName &&
                                "aria-" !== attributeName)
                            )
                              break a;
                        }
                        i = void 0 === i ? void 0 : null;
                      }
                    else i = void 0;
                    attributes ||
                      warnForPropDifference(
                        value,
                        i,
                        propKey,
                        serverDifferences
                      );
                  }
              }
      0 < extraAttributes.size &&
        !0 !== props.suppressHydrationWarning &&
        warnForExtraAttributes(domElement, extraAttributes, serverDifferences);
      return 0 === Object.keys(serverDifferences).length
        ? null
        : serverDifferences;
    }
    function propNamesListJoin(list, combinator) {
      switch (list.length) {
        case 0:
          return "";
        case 1:
          return list[0];
        case 2:
          return list[0] + " " + combinator + " " + list[1];
        default:
          return (
            list.slice(0, -1).join(", ") +
            ", " +
            combinator +
            " " +
            list[list.length - 1]
          );
      }
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return 9 === rootContainerElement.nodeType
        ? rootContainerElement
        : rootContainerElement.ownerDocument;
    }
    function getOwnHostContext(namespaceURI) {
      switch (namespaceURI) {
        case SVG_NAMESPACE:
          return HostContextNamespaceSvg;
        case MATH_NAMESPACE:
          return HostContextNamespaceMath;
        default:
          return HostContextNamespaceNone;
      }
    }
    function getChildHostContextProd(parentNamespace, type) {
      if (parentNamespace === HostContextNamespaceNone)
        switch (type) {
          case "svg":
            return HostContextNamespaceSvg;
          case "math":
            return HostContextNamespaceMath;
          default:
            return HostContextNamespaceNone;
        }
      return parentNamespace === HostContextNamespaceSvg &&
        "foreignObject" === type
        ? HostContextNamespaceNone
        : parentNamespace;
    }
    function shouldSetTextContent(type, props) {
      return (
        "textarea" === type ||
        "noscript" === type ||
        "string" === typeof props.children ||
        "number" === typeof props.children ||
        "bigint" === typeof props.children ||
        ("object" === typeof props.dangerouslySetInnerHTML &&
          null !== props.dangerouslySetInnerHTML &&
          null != props.dangerouslySetInnerHTML.__html)
      );
    }
    function shouldAttemptEagerTransition() {
      var event = window.event;
      if (event && "popstate" === event.type) {
        if (event === currentPopstateTransitionEvent) return !1;
        currentPopstateTransitionEvent = event;
        return !0;
      }
      currentPopstateTransitionEvent = null;
      return !1;
    }
    function handleErrorInNextTick(error) {
      setTimeout(function () {
        throw error;
      });
    }
    function commitMount(domElement, type, newProps) {
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          newProps.autoFocus && domElement.focus();
          break;
        case "img":
          newProps.src
            ? (domElement.src = newProps.src)
            : newProps.srcSet && (domElement.srcset = newProps.srcSet);
      }
    }
    function commitUpdate(domElement, type, oldProps, newProps) {
      updateProperties(domElement, type, oldProps, newProps);
      domElement[internalPropsKey] = newProps;
    }
    function resetTextContent(domElement) {
      setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }
    function isSingletonScope(type) {
      return "head" === type;
    }
    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
      (9 === container.nodeType
        ? container.body
        : "HTML" === container.nodeName
          ? container.ownerDocument.body
          : container
      ).removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node = suspenseInstance,
        possiblePreambleContribution = 0,
        depth = 0;
      do {
        var nextNode = node.nextSibling;
        parentInstance.removeChild(node);
        if (nextNode && 8 === nextNode.nodeType)
          if (((node = nextNode.data), node === SUSPENSE_END_DATA)) {
            if (
              0 < possiblePreambleContribution &&
              8 > possiblePreambleContribution
            ) {
              node = possiblePreambleContribution;
              var ownerDocument = parentInstance.ownerDocument;
              node & PREAMBLE_CONTRIBUTION_HTML &&
                releaseSingletonInstance(ownerDocument.documentElement);
              node & PREAMBLE_CONTRIBUTION_BODY &&
                releaseSingletonInstance(ownerDocument.body);
              if (node & PREAMBLE_CONTRIBUTION_HEAD)
                for (
                  node = ownerDocument.head,
                    releaseSingletonInstance(node),
                    ownerDocument = node.firstChild;
                  ownerDocument;

                ) {
                  var nextNode$jscomp$0 = ownerDocument.nextSibling,
                    nodeName = ownerDocument.nodeName;
                  ownerDocument[internalHoistableMarker] ||
                    "SCRIPT" === nodeName ||
                    "STYLE" === nodeName ||
                    ("LINK" === nodeName &&
                      "stylesheet" === ownerDocument.rel.toLowerCase()) ||
                    node.removeChild(ownerDocument);
                  ownerDocument = nextNode$jscomp$0;
                }
            }
            if (0 === depth) {
              parentInstance.removeChild(nextNode);
              retryIfBlockedOn(suspenseInstance);
              return;
            }
            depth--;
          } else
            node === SUSPENSE_START_DATA ||
            node === SUSPENSE_PENDING_START_DATA ||
            node === SUSPENSE_FALLBACK_START_DATA
              ? depth++
              : (possiblePreambleContribution = node.charCodeAt(0) - 48);
        else possiblePreambleContribution = 0;
        node = nextNode;
      } while (node);
      retryIfBlockedOn(suspenseInstance);
    }
    function hideInstance(instance) {
      instance = instance.style;
      "function" === typeof instance.setProperty
        ? instance.setProperty("display", "none", "important")
        : (instance.display = "none");
    }
    function hideTextInstance(textInstance) {
      textInstance.nodeValue = "";
    }
    function unhideInstance(instance, props) {
      props = props[STYLE];
      props =
        void 0 !== props && null !== props && props.hasOwnProperty("display")
          ? props.display
          : null;
      instance.style.display =
        null == props || "boolean" === typeof props ? "" : ("" + props).trim();
    }
    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    }
    function clearContainerSparingly(container) {
      var nextNode = container.firstChild;
      nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
      for (; nextNode; ) {
        var node = nextNode;
        nextNode = nextNode.nextSibling;
        switch (node.nodeName) {
          case "HTML":
          case "HEAD":
          case "BODY":
            clearContainerSparingly(node);
            detachDeletedInstance(node);
            continue;
          case "SCRIPT":
          case "STYLE":
            continue;
          case "LINK":
            if ("stylesheet" === node.rel.toLowerCase()) continue;
        }
        container.removeChild(node);
      }
    }
    function canHydrateInstance(instance, type, props, inRootOrSingleton) {
      for (; 1 === instance.nodeType; ) {
        var anyProps = props;
        if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
          if (
            !inRootOrSingleton &&
            ("INPUT" !== instance.nodeName || "hidden" !== instance.type)
          )
            break;
        } else if (!inRootOrSingleton)
          if ("input" === type && "hidden" === instance.type) {
            checkAttributeStringCoercion(anyProps.name, "name");
            var name = null == anyProps.name ? null : "" + anyProps.name;
            if (
              "hidden" === anyProps.type &&
              instance.getAttribute("name") === name
            )
              return instance;
          } else return instance;
        else if (!instance[internalHoistableMarker])
          switch (type) {
            case "meta":
              if (!instance.hasAttribute("itemprop")) break;
              return instance;
            case "link":
              name = instance.getAttribute("rel");
              if (
                "stylesheet" === name &&
                instance.hasAttribute("data-precedence")
              )
                break;
              else if (
                name !== anyProps.rel ||
                instance.getAttribute("href") !==
                  (null == anyProps.href || "" === anyProps.href
                    ? null
                    : anyProps.href) ||
                instance.getAttribute("crossorigin") !==
                  (null == anyProps.crossOrigin
                    ? null
                    : anyProps.crossOrigin) ||
                instance.getAttribute("title") !==
                  (null == anyProps.title ? null : anyProps.title)
              )
                break;
              return instance;
            case "style":
              if (instance.hasAttribute("data-precedence")) break;
              return instance;
            case "script":
              name = instance.getAttribute("src");
              if (
                (name !== (null == anyProps.src ? null : anyProps.src) ||
                  instance.getAttribute("type") !==
                    (null == anyProps.type ? null : anyProps.type) ||
                  instance.getAttribute("crossorigin") !==
                    (null == anyProps.crossOrigin
                      ? null
                      : anyProps.crossOrigin)) &&
                name &&
                instance.hasAttribute("async") &&
                !instance.hasAttribute("itemprop")
              )
                break;
              return instance;
            default:
              return instance;
          }
        instance = getNextHydratable(instance.nextSibling);
        if (null === instance) break;
      }
      return null;
    }
    function canHydrateTextInstance(instance, text, inRootOrSingleton) {
      if ("" === text) return null;
      for (; 3 !== instance.nodeType; ) {
        if (
          (1 !== instance.nodeType ||
            "INPUT" !== instance.nodeName ||
            "hidden" !== instance.type) &&
          !inRootOrSingleton
        )
          return null;
        instance = getNextHydratable(instance.nextSibling);
        if (null === instance) return null;
      }
      return instance;
    }
    function isSuspenseInstanceFallback(instance) {
      return (
        instance.data === SUSPENSE_FALLBACK_START_DATA ||
        (instance.data === SUSPENSE_PENDING_START_DATA &&
          instance.ownerDocument.readyState === DOCUMENT_READY_STATE_COMPLETE)
      );
    }
    function registerSuspenseInstanceRetry(instance, callback) {
      var ownerDocument = instance.ownerDocument;
      if (
        instance.data !== SUSPENSE_PENDING_START_DATA ||
        ownerDocument.readyState === DOCUMENT_READY_STATE_COMPLETE
      )
        callback();
      else {
        var listener = function () {
          callback();
          ownerDocument.removeEventListener("DOMContentLoaded", listener);
        };
        ownerDocument.addEventListener("DOMContentLoaded", listener);
        instance._reactRetry = listener;
      }
    }
    function getNextHydratable(node) {
      for (; null != node; node = node.nextSibling) {
        var nodeType = node.nodeType;
        if (1 === nodeType || 3 === nodeType) break;
        if (8 === nodeType) {
          nodeType = node.data;
          if (
            nodeType === SUSPENSE_START_DATA ||
            nodeType === SUSPENSE_FALLBACK_START_DATA ||
            nodeType === SUSPENSE_PENDING_START_DATA ||
            nodeType === FORM_STATE_IS_MATCHING ||
            nodeType === FORM_STATE_IS_NOT_MATCHING
          )
            break;
          if (nodeType === SUSPENSE_END_DATA) return null;
        }
      }
      return node;
    }
    function describeHydratableInstanceForDevWarnings(instance) {
      if (1 === instance.nodeType) {
        for (
          var JSCompiler_temp_const = instance.nodeName.toLowerCase(),
            serverDifferences = {},
            attributes = instance.attributes,
            i = 0;
          i < attributes.length;
          i++
        ) {
          var attr = attributes[i];
          serverDifferences[getPropNameFromAttributeName(attr.name)] =
            "style" === attr.name.toLowerCase()
              ? getStylesObjectFromElement(instance)
              : attr.value;
        }
        return { type: JSCompiler_temp_const, props: serverDifferences };
      }
      return 8 === instance.nodeType
        ? { type: "Suspense", props: {} }
        : instance.nodeValue;
    }
    function diffHydratedTextForDevWarnings(textInstance, text, parentProps) {
      return null === parentProps ||
        !0 !== parentProps[SUPPRESS_HYDRATION_WARNING]
        ? (textInstance.nodeValue === text
            ? (textInstance = null)
            : ((text = normalizeMarkupForTextOrAttribute(text)),
              (textInstance =
                normalizeMarkupForTextOrAttribute(textInstance.nodeValue) ===
                text
                  ? null
                  : textInstance.nodeValue)),
          textInstance)
        : null;
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      suspenseInstance = suspenseInstance.nextSibling;
      for (var depth = 0; suspenseInstance; ) {
        if (8 === suspenseInstance.nodeType) {
          var data = suspenseInstance.data;
          if (data === SUSPENSE_END_DATA) {
            if (0 === depth)
              return getNextHydratable(suspenseInstance.nextSibling);
            depth--;
          } else
            (data !== SUSPENSE_START_DATA &&
              data !== SUSPENSE_FALLBACK_START_DATA &&
              data !== SUSPENSE_PENDING_START_DATA) ||
              depth++;
        }
        suspenseInstance = suspenseInstance.nextSibling;
      }
      return null;
    }
    function getParentSuspenseInstance(targetInstance) {
      targetInstance = targetInstance.previousSibling;
      for (var depth = 0; targetInstance; ) {
        if (8 === targetInstance.nodeType) {
          var data = targetInstance.data;
          if (
            data === SUSPENSE_START_DATA ||
            data === SUSPENSE_FALLBACK_START_DATA ||
            data === SUSPENSE_PENDING_START_DATA
          ) {
            if (0 === depth) return targetInstance;
            depth--;
          } else data === SUSPENSE_END_DATA && depth++;
        }
        targetInstance = targetInstance.previousSibling;
      }
      return null;
    }
    function commitHydratedContainer(container) {
      retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
      retryIfBlockedOn(suspenseInstance);
    }
    function resolveSingletonInstance(
      type,
      props,
      rootContainerInstance,
      hostContext,
      validateDOMNestingDev
    ) {
      validateDOMNestingDev &&
        validateDOMNesting(type, hostContext.ancestorInfo);
      props = getOwnerDocumentFromRootContainer(rootContainerInstance);
      switch (type) {
        case "html":
          type = props.documentElement;
          if (!type)
            throw Error(
              "React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page."
            );
          return type;
        case "head":
          type = props.head;
          if (!type)
            throw Error(
              "React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page."
            );
          return type;
        case "body":
          type = props.body;
          if (!type)
            throw Error(
              "React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page."
            );
          return type;
        default:
          throw Error(
            "resolveSingletonInstance was called with an element type that is not supported. This is a bug in React."
          );
      }
    }
    function acquireSingletonInstance(
      type,
      props,
      instance,
      internalInstanceHandle
    ) {
      if (
        !instance[internalContainerInstanceKey] &&
        getInstanceFromNode(instance)
      ) {
        var tagName = instance.tagName.toLowerCase();
        console.error(
          "You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",
          tagName,
          tagName,
          tagName
        );
      }
      switch (type) {
        case "html":
        case "head":
        case "body":
          break;
        default:
          console.error(
            "acquireSingletonInstance was called with an element type that is not supported. This is a bug in React."
          );
      }
      for (tagName = instance.attributes; tagName.length; )
        instance.removeAttributeNode(tagName[0]);
      setInitialProperties(instance, type, props);
      instance[internalInstanceKey] = internalInstanceHandle;
      instance[internalPropsKey] = props;
    }
    function releaseSingletonInstance(instance) {
      for (var attributes = instance.attributes; attributes.length; )
        instance.removeAttributeNode(attributes[0]);
      detachDeletedInstance(instance);
    }
    function getHoistableRoot(container) {
      return "function" === typeof container.getRootNode
        ? container.getRootNode()
        : 9 === container.nodeType
          ? container
          : container.ownerDocument;
    }
    function preconnectAs(rel, href, crossOrigin) {
      var ownerDocument = globalDocument;
      if (ownerDocument && "string" === typeof href && href) {
        var limitedEscapedHref =
          escapeSelectorAttributeValueInsideDoubleQuotes(href);
        limitedEscapedHref =
          'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
        "string" === typeof crossOrigin &&
          (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
        preconnectsSet.has(limitedEscapedHref) ||
          (preconnectsSet.add(limitedEscapedHref),
          (rel = { rel: rel, crossOrigin: crossOrigin, href: href }),
          null === ownerDocument.querySelector(limitedEscapedHref) &&
            ((href = ownerDocument.createElement("link")),
            setInitialProperties(href, "link", rel),
            markNodeAsHoistable(href),
            ownerDocument.head.appendChild(href)));
      }
    }
    function getResource(type, currentProps, pendingProps, currentResource) {
      var resourceRoot = (resourceRoot = rootInstanceStackCursor.current)
        ? getHoistableRoot(resourceRoot)
        : null;
      if (!resourceRoot)
        throw Error(
          '"resourceRoot" was expected to exist. This is a bug in React.'
        );
      switch (type) {
        case "meta":
        case "title":
          return null;
        case "style":
          return "string" === typeof pendingProps.precedence &&
            "string" === typeof pendingProps.href
            ? ((pendingProps = getStyleKey(pendingProps.href)),
              (currentProps =
                getResourcesFromRoot(resourceRoot).hoistableStyles),
              (currentResource = currentProps.get(pendingProps)),
              currentResource ||
                ((currentResource = {
                  type: "style",
                  instance: null,
                  count: 0,
                  state: null
                }),
                currentProps.set(pendingProps, currentResource)),
              currentResource)
            : { type: "void", instance: null, count: 0, state: null };
        case "link":
          if (
            "stylesheet" === pendingProps.rel &&
            "string" === typeof pendingProps.href &&
            "string" === typeof pendingProps.precedence
          ) {
            type = getStyleKey(pendingProps.href);
            var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles,
              _resource = _styles.get(type);
            if (
              !_resource &&
              ((resourceRoot = resourceRoot.ownerDocument || resourceRoot),
              (_resource = {
                type: "stylesheet",
                instance: null,
                count: 0,
                state: { loading: NotLoaded, preload: null }
              }),
              _styles.set(type, _resource),
              (_styles = resourceRoot.querySelector(
                getStylesheetSelectorFromKey(type)
              )) &&
                !_styles._p &&
                ((_resource.instance = _styles),
                (_resource.state.loading = Loaded | Inserted)),
              !preloadPropsMap.has(type))
            ) {
              var preloadProps = {
                rel: "preload",
                as: "style",
                href: pendingProps.href,
                crossOrigin: pendingProps.crossOrigin,
                integrity: pendingProps.integrity,
                media: pendingProps.media,
                hrefLang: pendingProps.hrefLang,
                referrerPolicy: pendingProps.referrerPolicy
              };
              preloadPropsMap.set(type, preloadProps);
              _styles ||
                preloadStylesheet(
                  resourceRoot,
                  type,
                  preloadProps,
                  _resource.state
                );
            }
            if (currentProps && null === currentResource)
              throw (
                ((pendingProps =
                  "\n\n  - " +
                  describeLinkForResourceErrorDEV(currentProps) +
                  "\n  + " +
                  describeLinkForResourceErrorDEV(pendingProps)),
                Error(
                  "Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." +
                    pendingProps
                ))
              );
            return _resource;
          }
          if (currentProps && null !== currentResource)
            throw (
              ((pendingProps =
                "\n\n  - " +
                describeLinkForResourceErrorDEV(currentProps) +
                "\n  + " +
                describeLinkForResourceErrorDEV(pendingProps)),
              Error(
                "Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." +
                  pendingProps
              ))
            );
          return null;
        case "script":
          return (
            (currentProps = pendingProps.async),
            (pendingProps = pendingProps.src),
            "string" === typeof pendingProps &&
            currentProps &&
            "function" !== typeof currentProps &&
            "symbol" !== typeof currentProps
              ? ((pendingProps = getScriptKey(pendingProps)),
                (currentProps =
                  getResourcesFromRoot(resourceRoot).hoistableScripts),
                (currentResource = currentProps.get(pendingProps)),
                currentResource ||
                  ((currentResource = {
                    type: "script",
                    instance: null,
                    count: 0,
                    state: null
                  }),
                  currentProps.set(pendingProps, currentResource)),
                currentResource)
              : { type: "void", instance: null, count: 0, state: null }
          );
        default:
          throw Error(
            'getResource encountered a type it did not expect: "' +
              type +
              '". this is a bug in React.'
          );
      }
    }
    function describeLinkForResourceErrorDEV(props) {
      var describedProps = 0,
        description = "<link";
      "string" === typeof props.rel
        ? (describedProps++, (description += ' rel="' + props.rel + '"'))
        : hasOwnProperty.call(props, "rel") &&
          (describedProps++,
          (description +=
            ' rel="' +
            (null === props.rel ? "null" : "invalid type " + typeof props.rel) +
            '"'));
      "string" === typeof props.href
        ? (describedProps++, (description += ' href="' + props.href + '"'))
        : hasOwnProperty.call(props, "href") &&
          (describedProps++,
          (description +=
            ' href="' +
            (null === props.href
              ? "null"
              : "invalid type " + typeof props.href) +
            '"'));
      "string" === typeof props.precedence
        ? (describedProps++,
          (description += ' precedence="' + props.precedence + '"'))
        : hasOwnProperty.call(props, "precedence") &&
          (describedProps++,
          (description +=
            " precedence={" +
            (null === props.precedence
              ? "null"
              : "invalid type " + typeof props.precedence) +
            "}"));
      Object.getOwnPropertyNames(props).length > describedProps &&
        (description += " ...");
      return description + " />";
    }
    function getStyleKey(href) {
      return (
        'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"'
      );
    }
    function getStylesheetSelectorFromKey(key) {
      return 'link[rel="stylesheet"][' + key + "]";
    }
    function stylesheetPropsFromRawProps(rawProps) {
      return assign({}, rawProps, {
        "data-precedence": rawProps.precedence,
        precedence: null
      });
    }
    function preloadStylesheet(ownerDocument, key, preloadProps, state) {
      ownerDocument.querySelector(
        'link[rel="preload"][as="style"][' + key + "]"
      )
        ? (state.loading = Loaded)
        : ((key = ownerDocument.createElement("link")),
          (state.preload = key),
          key.addEventListener("load", function () {
            return (state.loading |= Loaded);
          }),
          key.addEventListener("error", function () {
            return (state.loading |= Errored);
          }),
          setInitialProperties(key, "link", preloadProps),
          markNodeAsHoistable(key),
          ownerDocument.head.appendChild(key));
    }
    function getScriptKey(src) {
      return (
        '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]'
      );
    }
    function getScriptSelectorFromKey(key) {
      return "script[async]" + key;
    }
    function acquireResource(hoistableRoot, resource, props) {
      resource.count++;
      if (null === resource.instance)
        switch (resource.type) {
          case "style":
            var instance = hoistableRoot.querySelector(
              'style[data-href~="' +
                escapeSelectorAttributeValueInsideDoubleQuotes(props.href) +
                '"]'
            );
            if (instance)
              return (
                (resource.instance = instance),
                markNodeAsHoistable(instance),
                instance
              );
            var styleProps = assign({}, props, {
              "data-href": props.href,
              "data-precedence": props.precedence,
              href: null,
              precedence: null
            });
            instance = (
              hoistableRoot.ownerDocument || hoistableRoot
            ).createElement("style");
            markNodeAsHoistable(instance);
            setInitialProperties(instance, "style", styleProps);
            insertStylesheet(instance, props.precedence, hoistableRoot);
            return (resource.instance = instance);
          case "stylesheet":
            styleProps = getStyleKey(props.href);
            var _instance = hoistableRoot.querySelector(
              getStylesheetSelectorFromKey(styleProps)
            );
            if (_instance)
              return (
                (resource.state.loading |= Inserted),
                (resource.instance = _instance),
                markNodeAsHoistable(_instance),
                _instance
              );
            instance = stylesheetPropsFromRawProps(props);
            (styleProps = preloadPropsMap.get(styleProps)) &&
              adoptPreloadPropsForStylesheet(instance, styleProps);
            _instance = (
              hoistableRoot.ownerDocument || hoistableRoot
            ).createElement("link");
            markNodeAsHoistable(_instance);
            var linkInstance = _instance;
            linkInstance._p = new Promise(function (resolve, reject) {
              linkInstance.onload = resolve;
              linkInstance.onerror = reject;
            });
            setInitialProperties(_instance, "link", instance);
            resource.state.loading |= Inserted;
            insertStylesheet(_instance, props.precedence, hoistableRoot);
            return (resource.instance = _instance);
          case "script":
            _instance = getScriptKey(props.src);
            if (
              (styleProps = hoistableRoot.querySelector(
                getScriptSelectorFromKey(_instance)
              ))
            )
              return (
                (resource.instance = styleProps),
                markNodeAsHoistable(styleProps),
                styleProps
              );
            instance = props;
            if ((styleProps = preloadPropsMap.get(_instance)))
              (instance = assign({}, props)),
                adoptPreloadPropsForScript(instance, styleProps);
            hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
            styleProps = hoistableRoot.createElement("script");
            markNodeAsHoistable(styleProps);
            setInitialProperties(styleProps, "link", instance);
            hoistableRoot.head.appendChild(styleProps);
            return (resource.instance = styleProps);
          case "void":
            return null;
          default:
            throw Error(
              'acquireResource encountered a resource type it did not expect: "' +
                resource.type +
                '". this is a bug in React.'
            );
        }
      else
        "stylesheet" === resource.type &&
          (resource.state.loading & Inserted) === NotLoaded &&
          ((instance = resource.instance),
          (resource.state.loading |= Inserted),
          insertStylesheet(instance, props.precedence, hoistableRoot));
      return resource.instance;
    }
    function insertStylesheet(instance, precedence, root) {
      for (
        var nodes = root.querySelectorAll(
            'link[rel="stylesheet"][data-precedence],style[data-precedence]'
          ),
          last = nodes.length ? nodes[nodes.length - 1] : null,
          prior = last,
          i = 0;
        i < nodes.length;
        i++
      ) {
        var node = nodes[i];
        if (node.dataset.precedence === precedence) prior = node;
        else if (prior !== last) break;
      }
      prior
        ? prior.parentNode.insertBefore(instance, prior.nextSibling)
        : ((precedence = 9 === root.nodeType ? root.head : root),
          precedence.insertBefore(instance, precedence.firstChild));
    }
    function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
      null == stylesheetProps.crossOrigin &&
        (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
      null == stylesheetProps.referrerPolicy &&
        (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
      null == stylesheetProps.title &&
        (stylesheetProps.title = preloadProps.title);
    }
    function adoptPreloadPropsForScript(scriptProps, preloadProps) {
      null == scriptProps.crossOrigin &&
        (scriptProps.crossOrigin = preloadProps.crossOrigin);
      null == scriptProps.referrerPolicy &&
        (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
      null == scriptProps.integrity &&
        (scriptProps.integrity = preloadProps.integrity);
    }
    function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
      if (null === tagCaches) {
        var cache = new Map();
        var caches = (tagCaches = new Map());
        caches.set(ownerDocument, cache);
      } else
        (caches = tagCaches),
          (cache = caches.get(ownerDocument)),
          cache || ((cache = new Map()), caches.set(ownerDocument, cache));
      if (cache.has(type)) return cache;
      cache.set(type, null);
      ownerDocument = ownerDocument.getElementsByTagName(type);
      for (caches = 0; caches < ownerDocument.length; caches++) {
        var node = ownerDocument[caches];
        if (
          !(
            node[internalHoistableMarker] ||
            node[internalInstanceKey] ||
            ("link" === type && "stylesheet" === node.getAttribute("rel"))
          ) &&
          node.namespaceURI !== SVG_NAMESPACE
        ) {
          var nodeKey = node.getAttribute(keyAttribute) || "";
          nodeKey = type + nodeKey;
          var existing = cache.get(nodeKey);
          existing ? existing.push(node) : cache.set(nodeKey, [node]);
        }
      }
      return cache;
    }
    function mountHoistable(hoistableRoot, type, instance) {
      hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
      hoistableRoot.head.insertBefore(
        instance,
        "title" === type ? hoistableRoot.querySelector("head > title") : null
      );
    }
    function isHostHoistableType(type, props, hostContext) {
      var outsideHostContainerContext =
        !hostContext.ancestorInfo.containerTagInScope;
      if (
        hostContext.context === HostContextNamespaceSvg ||
        null != props.itemProp
      )
        return (
          !outsideHostContainerContext ||
            null == props.itemProp ||
            ("meta" !== type &&
              "title" !== type &&
              "style" !== type &&
              "link" !== type &&
              "script" !== type) ||
            console.error(
              "Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",
              type,
              type
            ),
          !1
        );
      switch (type) {
        case "meta":
        case "title":
          return !0;
        case "style":
          if (
            "string" !== typeof props.precedence ||
            "string" !== typeof props.href ||
            "" === props.href
          ) {
            outsideHostContainerContext &&
              console.error(
                'Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflict with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`.'
              );
            break;
          }
          return !0;
        case "link":
          if (
            "string" !== typeof props.rel ||
            "string" !== typeof props.href ||
            "" === props.href ||
            props.onLoad ||
            props.onError
          ) {
            if (
              "stylesheet" === props.rel &&
              "string" === typeof props.precedence
            ) {
              type = props.href;
              var onError = props.onError,
                disabled = props.disabled;
              hostContext = [];
              props.onLoad && hostContext.push("`onLoad`");
              onError && hostContext.push("`onError`");
              null != disabled && hostContext.push("`disabled`");
              onError = propNamesListJoin(hostContext, "and");
              onError += 1 === hostContext.length ? " prop" : " props";
              disabled =
                1 === hostContext.length ? "an " + onError : "the " + onError;
              hostContext.length &&
                console.error(
                  'React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',
                  type,
                  disabled,
                  onError
                );
            }
            outsideHostContainerContext &&
              ("string" !== typeof props.rel ||
              "string" !== typeof props.href ||
              "" === props.href
                ? console.error(
                    "Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"
                  )
                : (props.onError || props.onLoad) &&
                  console.error(
                    "Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
                  ));
            break;
          }
          switch (props.rel) {
            case "stylesheet":
              return (
                (type = props.precedence),
                (props = props.disabled),
                "string" !== typeof type &&
                  outsideHostContainerContext &&
                  console.error(
                    'Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'
                  ),
                "string" === typeof type && null == props
              );
            default:
              return !0;
          }
        case "script":
          type =
            props.async &&
            "function" !== typeof props.async &&
            "symbol" !== typeof props.async;
          if (
            !type ||
            props.onLoad ||
            props.onError ||
            !props.src ||
            "string" !== typeof props.src
          ) {
            outsideHostContainerContext &&
              (type
                ? props.onLoad || props.onError
                  ? console.error(
                      "Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
                    )
                  : console.error(
                      "Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."
                    )
                : console.error(
                    'Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'
                  ));
            break;
          }
          return !0;
        case "noscript":
        case "template":
          outsideHostContainerContext &&
            console.error(
              "Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",
              type
            );
      }
      return !1;
    }
    function preloadResource(resource) {
      return "stylesheet" === resource.type &&
        (resource.state.loading & Settled) === NotLoaded
        ? !1
        : !0;
    }
    function noop() {}
    function suspendResource(hoistableRoot, resource, props) {
      if (null === suspendedState)
        throw Error(
          "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
        );
      var state = suspendedState;
      if (
        "stylesheet" === resource.type &&
        ("string" !== typeof props.media ||
          !1 !== matchMedia(props.media).matches) &&
        (resource.state.loading & Inserted) === NotLoaded
      ) {
        if (null === resource.instance) {
          var key = getStyleKey(props.href),
            instance = hoistableRoot.querySelector(
              getStylesheetSelectorFromKey(key)
            );
          if (instance) {
            hoistableRoot = instance._p;
            null !== hoistableRoot &&
              "object" === typeof hoistableRoot &&
              "function" === typeof hoistableRoot.then &&
              (state.count++,
              (state = onUnsuspend.bind(state)),
              hoistableRoot.then(state, state));
            resource.state.loading |= Inserted;
            resource.instance = instance;
            markNodeAsHoistable(instance);
            return;
          }
          instance = hoistableRoot.ownerDocument || hoistableRoot;
          props = stylesheetPropsFromRawProps(props);
          (key = preloadPropsMap.get(key)) &&
            adoptPreloadPropsForStylesheet(props, key);
          instance = instance.createElement("link");
          markNodeAsHoistable(instance);
          var linkInstance = instance;
          linkInstance._p = new Promise(function (resolve, reject) {
            linkInstance.onload = resolve;
            linkInstance.onerror = reject;
          });
          setInitialProperties(instance, "link", props);
          resource.instance = instance;
        }
        null === state.stylesheets && (state.stylesheets = new Map());
        state.stylesheets.set(resource, hoistableRoot);
        (hoistableRoot = resource.state.preload) &&
          (resource.state.loading & Settled) === NotLoaded &&
          (state.count++,
          (resource = onUnsuspend.bind(state)),
          hoistableRoot.addEventListener("load", resource),
          hoistableRoot.addEventListener("error", resource));
      }
    }
    function waitForCommitToBeReady() {
      if (null === suspendedState)
        throw Error(
          "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
        );
      var state = suspendedState;
      state.stylesheets &&
        0 === state.count &&
        insertSuspendedStylesheets(state, state.stylesheets);
      return 0 < state.count
        ? function (commit) {
            var stylesheetTimer = setTimeout(function () {
              state.stylesheets &&
                insertSuspendedStylesheets(state, state.stylesheets);
              if (state.unsuspend) {
                var unsuspend = state.unsuspend;
                state.unsuspend = null;
                unsuspend();
              }
            }, 6e4);
            state.unsuspend = commit;
            return function () {
              state.unsuspend = null;
              clearTimeout(stylesheetTimer);
            };
          }
        : null;
    }
    function onUnsuspend() {
      this.count--;
      if (0 === this.count)
        if (this.stylesheets)
          insertSuspendedStylesheets(this, this.stylesheets);
        else if (this.unsuspend) {
          var unsuspend = this.unsuspend;
          this.unsuspend = null;
          unsuspend();
        }
    }
    function insertSuspendedStylesheets(state, resources) {
      state.stylesheets = null;
      null !== state.unsuspend &&
        (state.count++,
        (precedencesByRoot = new Map()),
        resources.forEach(insertStylesheetIntoRoot, state),
        (precedencesByRoot = null),
        onUnsuspend.call(state));
    }
    function insertStylesheetIntoRoot(root, resource) {
      if (!(resource.state.loading & Inserted)) {
        var precedences = precedencesByRoot.get(root);
        if (precedences) var last = precedences.get(LAST_PRECEDENCE);
        else {
          precedences = new Map();
          precedencesByRoot.set(root, precedences);
          for (
            var nodes = root.querySelectorAll(
                "link[data-precedence],style[data-precedence]"
              ),
              i = 0;
            i < nodes.length;
            i++
          ) {
            var node = nodes[i];
            if (
              "LINK" === node.nodeName ||
              "not all" !== node.getAttribute("media")
            )
              precedences.set(node.dataset.precedence, node), (last = node);
          }
          last && precedences.set(LAST_PRECEDENCE, last);
        }
        nodes = resource.instance;
        node = nodes.getAttribute("data-precedence");
        i = precedences.get(node) || last;
        i === last && precedences.set(LAST_PRECEDENCE, nodes);
        precedences.set(node, nodes);
        this.count++;
        last = onUnsuspend.bind(this);
        nodes.addEventListener("load", last);
        nodes.addEventListener("error", last);
        i
          ? i.parentNode.insertBefore(nodes, i.nextSibling)
          : ((root = 9 === root.nodeType ? root.head : root),
            root.insertBefore(nodes, root.firstChild));
        resource.state.loading |= Inserted;
      }
    }
    function FiberRootNode(
      containerInfo,
      tag,
      hydrate,
      identifierPrefix,
      onUncaughtError,
      onCaughtError,
      onRecoverableError,
      formState
    ) {
      this.tag = 1;
      this.containerInfo = containerInfo;
      this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = noTimeout;
      this.callbackNode =
        this.next =
        this.pendingContext =
        this.context =
        this.cancelPendingCommit =
          null;
      this.callbackPriority = 0;
      this.expirationTimes = createLaneMap(-1);
      this.entangledLanes =
        this.shellSuspendCounter =
        this.errorRecoveryDisabledLanes =
        this.expiredLanes =
        this.warmLanes =
        this.pingedLanes =
        this.suspendedLanes =
        this.pendingLanes =
          0;
      this.entanglements = createLaneMap(0);
      this.hiddenUpdates = createLaneMap(null);
      this.identifierPrefix = identifierPrefix;
      this.onUncaughtError = onUncaughtError;
      this.onCaughtError = onCaughtError;
      this.onRecoverableError = onRecoverableError;
      this.pooledCache = null;
      this.pooledCacheLanes = 0;
      this.formState = formState;
      this.incompleteTransitions = new Map();
      this.passiveEffectDuration = this.effectDuration = -0;
      this.memoizedUpdaters = new Set();
      containerInfo = this.pendingUpdatersLaneMap = [];
      for (tag = 0; 31 > tag; tag++) containerInfo.push(new Set());
      this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
    }
    function createFiberRoot(
      containerInfo,
      tag,
      hydrate,
      initialChildren,
      hydrationCallbacks,
      isStrictMode,
      identifierPrefix,
      onUncaughtError,
      onCaughtError,
      onRecoverableError,
      transitionCallbacks,
      formState
    ) {
      containerInfo = new FiberRootNode(
        containerInfo,
        tag,
        hydrate,
        identifierPrefix,
        onUncaughtError,
        onCaughtError,
        onRecoverableError,
        formState
      );
      tag = ConcurrentMode;
      !0 === isStrictMode && (tag |= StrictLegacyMode | StrictEffectsMode);
      isDevToolsPresent && (tag |= ProfileMode);
      isStrictMode = createFiber(3, null, null, tag);
      containerInfo.current = isStrictMode;
      isStrictMode.stateNode = containerInfo;
      tag = createCache();
      retainCache(tag);
      containerInfo.pooledCache = tag;
      retainCache(tag);
      isStrictMode.memoizedState = {
        element: initialChildren,
        isDehydrated: hydrate,
        cache: tag
      };
      initializeUpdateQueue(isStrictMode);
      return containerInfo;
    }
    function getContextForSubtree(parentComponent) {
      if (!parentComponent) return emptyContextObject;
      parentComponent = emptyContextObject;
      return parentComponent;
    }
    function updateContainerImpl(
      rootFiber,
      lane,
      element,
      container,
      parentComponent,
      callback
    ) {
      if (
        injectedHook &&
        "function" === typeof injectedHook.onScheduleFiberRoot
      )
        try {
          injectedHook.onScheduleFiberRoot(rendererID, container, element);
        } catch (err) {
          hasLoggedError ||
            ((hasLoggedError = !0),
            console.error(
              "React instrumentation encountered an error: %s",
              err
            ));
        }
      null !== injectedProfilingHooks &&
        "function" === typeof injectedProfilingHooks.markRenderScheduled &&
        injectedProfilingHooks.markRenderScheduled(lane);
      parentComponent = getContextForSubtree(parentComponent);
      null === container.context
        ? (container.context = parentComponent)
        : (container.pendingContext = parentComponent);
      isRendering &&
        null !== current &&
        !didWarnAboutNestedUpdates &&
        ((didWarnAboutNestedUpdates = !0),
        console.error(
          "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
          getComponentNameFromFiber(current) || "Unknown"
        ));
      container = createUpdate(lane);
      container.payload = { element: element };
      callback = void 0 === callback ? null : callback;
      null !== callback &&
        ("function" !== typeof callback &&
          console.error(
            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
            callback
          ),
        (container.callback = callback));
      element = enqueueUpdate(rootFiber, container, lane);
      null !== element &&
        (scheduleUpdateOnFiber(element, rootFiber, lane),
        entangleTransitions(element, rootFiber, lane));
    }
    function markRetryLaneImpl(fiber, retryLane) {
      fiber = fiber.memoizedState;
      if (null !== fiber && null !== fiber.dehydrated) {
        var a = fiber.retryLane;
        fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
      }
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
    }
    function attemptContinuousHydration(fiber) {
      if (13 === fiber.tag) {
        var root = enqueueConcurrentRenderForLane(fiber, 67108864);
        null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);
        markRetryLaneIfNotHydrated(fiber, 67108864);
      }
    }
    function getCurrentFiberForDevTools() {
      return current;
    }
    function getLaneLabelMap() {
      for (var map = new Map(), lane = 1, index = 0; 31 > index; index++) {
        var label = getLabelForLane(lane);
        map.set(lane, label);
        lane *= 2;
      }
      return map;
    }
    function dispatchDiscreteEvent(
      domEventName,
      eventSystemFlags,
      container,
      nativeEvent
    ) {
      var prevTransition = ReactSharedInternals.T;
      ReactSharedInternals.T = null;
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        (ReactDOMSharedInternals.p = DiscreteEventPriority),
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        (ReactDOMSharedInternals.p = previousPriority),
          (ReactSharedInternals.T = prevTransition);
      }
    }
    function dispatchContinuousEvent(
      domEventName,
      eventSystemFlags,
      container,
      nativeEvent
    ) {
      var prevTransition = ReactSharedInternals.T;
      ReactSharedInternals.T = null;
      var previousPriority = ReactDOMSharedInternals.p;
      try {
        (ReactDOMSharedInternals.p = ContinuousEventPriority),
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        (ReactDOMSharedInternals.p = previousPriority),
          (ReactSharedInternals.T = prevTransition);
      }
    }
    function dispatchEvent(
      domEventName,
      eventSystemFlags,
      targetContainer,
      nativeEvent
    ) {
      if (_enabled) {
        var blockedOn = findInstanceBlockingEvent(nativeEvent);
        if (null === blockedOn)
          dispatchEventForPluginEventSystem(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            return_targetInst,
            targetContainer
          ),
            clearIfContinuousEvent(domEventName, nativeEvent);
        else if (
          queueIfContinuousEvent(
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          )
        )
          nativeEvent.stopPropagation();
        else if (
          (clearIfContinuousEvent(domEventName, nativeEvent),
          eventSystemFlags & 4 &&
            -1 < discreteReplayableEvents.indexOf(domEventName))
        ) {
          for (; null !== blockedOn; ) {
            var fiber = getInstanceFromNode(blockedOn);
            if (null !== fiber)
              switch (fiber.tag) {
                case 3:
                  fiber = fiber.stateNode;
                  if (fiber.current.memoizedState.isDehydrated) {
                    var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                    if (0 !== lanes) {
                      var root = fiber;
                      root.pendingLanes |= 2;
                      for (root.entangledLanes |= 2; lanes; ) {
                        var lane = 1 << (31 - clz32(lanes));
                        root.entanglements[1] |= lane;
                        lanes &= ~lane;
                      }
                      ensureRootIsScheduled(fiber);
                      (executionContext & (RenderContext | CommitContext)) ===
                        NoContext &&
                        ((workInProgressRootRenderTargetTime =
                          now$1() + RENDER_TIMEOUT_MS),
                        flushSyncWorkAcrossRoots_impl(0, !1));
                    }
                  }
                  break;
                case 13:
                  (root = enqueueConcurrentRenderForLane(fiber, 2)),
                    null !== root && scheduleUpdateOnFiber(root, fiber, 2),
                    flushSyncWork$1(),
                    markRetryLaneIfNotHydrated(fiber, 2);
              }
            fiber = findInstanceBlockingEvent(nativeEvent);
            null === fiber &&
              dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                return_targetInst,
                targetContainer
              );
            if (fiber === blockedOn) break;
            blockedOn = fiber;
          }
          null !== blockedOn && nativeEvent.stopPropagation();
        } else
          dispatchEventForPluginEventSystem(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            null,
            targetContainer
          );
      }
    }
    function findInstanceBlockingEvent(nativeEvent) {
      nativeEvent = getEventTarget(nativeEvent);
      return findInstanceBlockingTarget(nativeEvent);
    }
    function findInstanceBlockingTarget(targetNode) {
      return_targetInst = null;
      targetNode = getClosestInstanceFromNode(targetNode);
      if (null !== targetNode) {
        var nearestMounted = getNearestMountedFiber(targetNode);
        if (null === nearestMounted) targetNode = null;
        else {
          var tag = nearestMounted.tag;
          if (13 === tag) {
            targetNode = getSuspenseInstanceFromFiber(nearestMounted);
            if (null !== targetNode) return targetNode;
            targetNode = null;
          } else if (3 === tag) {
            if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
              return 3 === nearestMounted.tag
                ? nearestMounted.stateNode.containerInfo
                : null;
            targetNode = null;
          } else nearestMounted !== targetNode && (targetNode = null);
        }
      }
      return_targetInst = targetNode;
      return null;
    }
    function getEventPriority(domEventName) {
      switch (domEventName) {
        case "beforetoggle":
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "toggle":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return DiscreteEventPriority;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return ContinuousEventPriority;
        case "message":
          switch (getCurrentPriorityLevel()) {
            case ImmediatePriority:
              return DiscreteEventPriority;
            case UserBlockingPriority:
              return ContinuousEventPriority;
            case NormalPriority$1:
            case LowPriority:
              return DefaultEventPriority;
            case IdlePriority:
              return IdleEventPriority;
            default:
              return DefaultEventPriority;
          }
        default:
          return DefaultEventPriority;
      }
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch (domEventName) {
        case "focusin":
        case "focusout":
          queuedFocus = null;
          break;
        case "dragenter":
        case "dragleave":
          queuedDrag = null;
          break;
        case "mouseover":
        case "mouseout":
          queuedMouse = null;
          break;
        case "pointerover":
        case "pointerout":
          queuedPointers.delete(nativeEvent.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          queuedPointerCaptures.delete(nativeEvent.pointerId);
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(
      existingQueuedEvent,
      blockedOn,
      domEventName,
      eventSystemFlags,
      targetContainer,
      nativeEvent
    ) {
      if (
        null === existingQueuedEvent ||
        existingQueuedEvent.nativeEvent !== nativeEvent
      )
        return (
          (existingQueuedEvent = {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags,
            nativeEvent: nativeEvent,
            targetContainers: [targetContainer]
          }),
          null !== blockedOn &&
            ((blockedOn = getInstanceFromNode(blockedOn)),
            null !== blockedOn && attemptContinuousHydration(blockedOn)),
          existingQueuedEvent
        );
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      blockedOn = existingQueuedEvent.targetContainers;
      null !== targetContainer &&
        -1 === blockedOn.indexOf(targetContainer) &&
        blockedOn.push(targetContainer);
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(
      blockedOn,
      domEventName,
      eventSystemFlags,
      targetContainer,
      nativeEvent
    ) {
      switch (domEventName) {
        case "focusin":
          return (
            (queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedFocus,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            )),
            !0
          );
        case "dragenter":
          return (
            (queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedDrag,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            )),
            !0
          );
        case "mouseover":
          return (
            (queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedMouse,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            )),
            !0
          );
        case "pointerover":
          var pointerId = nativeEvent.pointerId;
          queuedPointers.set(
            pointerId,
            accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedPointers.get(pointerId) || null,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            )
          );
          return !0;
        case "gotpointercapture":
          return (
            (pointerId = nativeEvent.pointerId),
            queuedPointerCaptures.set(
              pointerId,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointerCaptures.get(pointerId) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              )
            ),
            !0
          );
      }
      return !1;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (null !== targetInst) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (null !== nearestMounted)
          if (((targetInst = nearestMounted.tag), 13 === targetInst)) {
            if (
              ((targetInst = getSuspenseInstanceFromFiber(nearestMounted)),
              null !== targetInst)
            ) {
              queuedTarget.blockedOn = targetInst;
              runWithPriority(queuedTarget.priority, function () {
                if (13 === nearestMounted.tag) {
                  var lane = requestUpdateLane(nearestMounted);
                  lane = getBumpedLaneForHydrationByLane(lane);
                  var root = enqueueConcurrentRenderForLane(
                    nearestMounted,
                    lane
                  );
                  null !== root &&
                    scheduleUpdateOnFiber(root, nearestMounted, lane);
                  markRetryLaneIfNotHydrated(nearestMounted, lane);
                }
              });
              return;
            }
          } else if (
            3 === targetInst &&
            nearestMounted.stateNode.current.memoizedState.isDehydrated
          ) {
            queuedTarget.blockedOn =
              3 === nearestMounted.tag
                ? nearestMounted.stateNode.containerInfo
                : null;
            return;
          }
      }
      queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (null !== queuedEvent.blockedOn) return !1;
      for (
        var targetContainers = queuedEvent.targetContainers;
        0 < targetContainers.length;

      ) {
        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
        if (null === nextBlockedOn) {
          nextBlockedOn = queuedEvent.nativeEvent;
          var nativeEventClone = new nextBlockedOn.constructor(
              nextBlockedOn.type,
              nextBlockedOn
            ),
            event = nativeEventClone;
          null !== currentReplayingEvent &&
            console.error(
              "Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."
            );
          currentReplayingEvent = event;
          nextBlockedOn.target.dispatchEvent(nativeEventClone);
          null === currentReplayingEvent &&
            console.error(
              "Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."
            );
          currentReplayingEvent = null;
        } else
          return (
            (targetContainers = getInstanceFromNode(nextBlockedOn)),
            null !== targetContainers &&
              attemptContinuousHydration(targetContainers),
            (queuedEvent.blockedOn = nextBlockedOn),
            !1
          );
        targetContainers.shift();
      }
      return !0;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
      attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
    }
    function replayUnblockedEvents() {
      hasScheduledReplayAttempt = !1;
      null !== queuedFocus &&
        attemptReplayContinuousQueuedEvent(queuedFocus) &&
        (queuedFocus = null);
      null !== queuedDrag &&
        attemptReplayContinuousQueuedEvent(queuedDrag) &&
        (queuedDrag = null);
      null !== queuedMouse &&
        attemptReplayContinuousQueuedEvent(queuedMouse) &&
        (queuedMouse = null);
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      queuedEvent.blockedOn === unblocked &&
        ((queuedEvent.blockedOn = null),
        hasScheduledReplayAttempt ||
          ((hasScheduledReplayAttempt = !0),
          Scheduler.unstable_scheduleCallback(
            Scheduler.unstable_NormalPriority,
            replayUnblockedEvents
          )));
    }
    function scheduleReplayQueueIfNeeded(formReplayingQueue) {
      lastScheduledReplayQueue !== formReplayingQueue &&
        ((lastScheduledReplayQueue = formReplayingQueue),
        Scheduler.unstable_scheduleCallback(
          Scheduler.unstable_NormalPriority,
          function () {
            lastScheduledReplayQueue === formReplayingQueue &&
              (lastScheduledReplayQueue = null);
            for (var i = 0; i < formReplayingQueue.length; i += 3) {
              var form = formReplayingQueue[i],
                submitterOrAction = formReplayingQueue[i + 1],
                formData = formReplayingQueue[i + 2];
              if ("function" !== typeof submitterOrAction)
                if (
                  null === findInstanceBlockingTarget(submitterOrAction || form)
                )
                  continue;
                else break;
              var formInst = getInstanceFromNode(form);
              null !== formInst &&
                (formReplayingQueue.splice(i, 3),
                (i -= 3),
                (form = {
                  pending: !0,
                  data: formData,
                  method: form.method,
                  action: submitterOrAction
                }),
                Object.freeze(form),
                startHostTransition(
                  formInst,
                  form,
                  submitterOrAction,
                  formData
                ));
            }
          }
        ));
    }
    function retryIfBlockedOn(unblocked) {
      function unblock(queuedEvent) {
        return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
      }
      null !== queuedFocus &&
        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      null !== queuedMouse &&
        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      queuedPointers.forEach(unblock);
      queuedPointerCaptures.forEach(unblock);
      for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
        var queuedTarget = queuedExplicitHydrationTargets[i];
        queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
      }
      for (
        ;
        0 < queuedExplicitHydrationTargets.length &&
        ((i = queuedExplicitHydrationTargets[0]), null === i.blockedOn);

      )
        attemptExplicitHydrationTarget(i),
          null === i.blockedOn && queuedExplicitHydrationTargets.shift();
      i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
      if (null != i)
        for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
          var form = i[queuedTarget],
            submitterOrAction = i[queuedTarget + 1],
            formProps = form[internalPropsKey] || null;
          if ("function" === typeof submitterOrAction)
            formProps || scheduleReplayQueueIfNeeded(i);
          else if (formProps) {
            var action = null;
            if (
              submitterOrAction &&
              submitterOrAction.hasAttribute("formAction")
            )
              if (
                ((form = submitterOrAction),
                (formProps = submitterOrAction[internalPropsKey] || null))
              )
                action = formProps.formAction;
              else {
                if (null !== findInstanceBlockingTarget(form)) continue;
              }
            else action = formProps.action;
            "function" === typeof action
              ? (i[queuedTarget + 1] = action)
              : (i.splice(queuedTarget, 3), (queuedTarget -= 3));
            scheduleReplayQueueIfNeeded(i);
          }
        }
    }
    function ReactDOMRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function ReactDOMHydrationRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function warnIfReactDOMContainerInDEV(container) {
      container[internalContainerInstanceKey] &&
        (container._reactRootContainer
          ? console.error(
              "You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."
            )
          : console.error(
              "You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."
            ));
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
      "function" ===
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var Scheduler = __webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js"),
      React = __webpack_require__(/*! react */ "./node_modules/react/index.js"),
      ReactDOM = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js"),
      assign = Object.assign,
      REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"),
      REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
      REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
      REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
      REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
      REACT_MEMO_TYPE = Symbol.for("react.memo"),
      REACT_LAZY_TYPE = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.tracing_marker");
    var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
    Symbol.for("react.view_transition");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
      isArrayImpl = Array.isArray,
      ReactSharedInternals =
        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
      ReactDOMSharedInternals =
        ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
      NotPending = Object.freeze({
        pending: !1,
        data: null,
        method: null,
        action: null
      }),
      valueStack = [];
    var fiberStack = [];
    var index$jscomp$0 = -1,
      contextStackCursor = createCursor(null),
      contextFiberStackCursor = createCursor(null),
      rootInstanceStackCursor = createCursor(null),
      hostTransitionProviderCursor = createCursor(null),
      hasOwnProperty = Object.prototype.hasOwnProperty,
      scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
      cancelCallback$1 = Scheduler.unstable_cancelCallback,
      shouldYield = Scheduler.unstable_shouldYield,
      requestPaint = Scheduler.unstable_requestPaint,
      now$1 = Scheduler.unstable_now,
      getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
      ImmediatePriority = Scheduler.unstable_ImmediatePriority,
      UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
      NormalPriority$1 = Scheduler.unstable_NormalPriority,
      LowPriority = Scheduler.unstable_LowPriority,
      IdlePriority = Scheduler.unstable_IdlePriority,
      log$1 = Scheduler.log,
      unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
      rendererID = null,
      injectedHook = null,
      injectedProfilingHooks = null,
      hasLoggedError = !1,
      isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__,
      clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
      log = Math.log,
      LN2 = Math.LN2,
      nextTransitionLane = 256,
      nextRetryLane = 4194304,
      DiscreteEventPriority = 2,
      ContinuousEventPriority = 8,
      DefaultEventPriority = 32,
      IdleEventPriority = 268435456,
      randomKey = Math.random().toString(36).slice(2),
      internalInstanceKey = "__reactFiber$" + randomKey,
      internalPropsKey = "__reactProps$" + randomKey,
      internalContainerInstanceKey = "__reactContainer$" + randomKey,
      internalEventHandlersKey = "__reactEvents$" + randomKey,
      internalEventHandlerListenersKey = "__reactListeners$" + randomKey,
      internalEventHandlesSetKey = "__reactHandles$" + randomKey,
      internalRootNodeResourcesKey = "__reactResources$" + randomKey,
      internalHoistableMarker = "__reactMarker$" + randomKey,
      allNativeEvents = new Set(),
      registrationNameDependencies = {},
      possibleRegistrationNames = {},
      hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      },
      VALID_ATTRIBUTE_NAME_REGEX = RegExp(
        "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ),
      illegalAttributeNameCache = {},
      validatedAttributeNameCache = {},
      disabledDepth = 0,
      prevLog,
      prevInfo,
      prevWarn,
      prevError,
      prevGroup,
      prevGroupCollapsed,
      prevGroupEnd;
    disabledLog.__reactDisabledLog = !0;
    var prefix,
      suffix,
      reentry = !1;
    var componentFrameCache = new (
      "function" === typeof WeakMap ? WeakMap : Map
    )();
    var current = null,
      isRendering = !1,
      escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g,
      didWarnValueDefaultValue$1 = !1,
      didWarnCheckedDefaultChecked = !1,
      didWarnSelectedSetOnOption = !1,
      didWarnInvalidChild = !1,
      didWarnInvalidInnerHTML = !1;
    var didWarnValueDefaultValue = !1;
    var valuePropNames = ["value", "defaultValue"],
      didWarnValDefaultVal = !1,
      needsEscaping = /["'&<>\n\t]|^\s|\s$/,
      specialTags =
        "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(
          " "
        ),
      inScopeTags =
        "applet caption html table td th marquee object template foreignObject desc title".split(
          " "
        ),
      buttonScopeTags = inScopeTags.concat(["button"]),
      impliedEndTags = "dd dt li option optgroup p rp rt".split(" "),
      emptyAncestorInfoDev = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null,
        containerTagInScope: null,
        implicitRootScope: !1
      },
      didWarn = {},
      shorthandToLonghand = {
        animation:
          "animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(
            " "
          ),
        background:
          "backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(
            " "
          ),
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border:
          "borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(
            " "
          ),
        borderBlockEnd: [
          "borderBlockEndColor",
          "borderBlockEndStyle",
          "borderBlockEndWidth"
        ],
        borderBlockStart: [
          "borderBlockStartColor",
          "borderBlockStartStyle",
          "borderBlockStartWidth"
        ],
        borderBottom: [
          "borderBottomColor",
          "borderBottomStyle",
          "borderBottomWidth"
        ],
        borderColor: [
          "borderBottomColor",
          "borderLeftColor",
          "borderRightColor",
          "borderTopColor"
        ],
        borderImage: [
          "borderImageOutset",
          "borderImageRepeat",
          "borderImageSlice",
          "borderImageSource",
          "borderImageWidth"
        ],
        borderInlineEnd: [
          "borderInlineEndColor",
          "borderInlineEndStyle",
          "borderInlineEndWidth"
        ],
        borderInlineStart: [
          "borderInlineStartColor",
          "borderInlineStartStyle",
          "borderInlineStartWidth"
        ],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: [
          "borderBottomLeftRadius",
          "borderBottomRightRadius",
          "borderTopLeftRadius",
          "borderTopRightRadius"
        ],
        borderRight: [
          "borderRightColor",
          "borderRightStyle",
          "borderRightWidth"
        ],
        borderStyle: [
          "borderBottomStyle",
          "borderLeftStyle",
          "borderRightStyle",
          "borderTopStyle"
        ],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: [
          "borderBottomWidth",
          "borderLeftWidth",
          "borderRightWidth",
          "borderTopWidth"
        ],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: "fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(
          " "
        ),
        fontVariant:
          "fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(
            " "
          ),
        gap: ["columnGap", "rowGap"],
        grid: "gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(
          " "
        ),
        gridArea: [
          "gridColumnEnd",
          "gridColumnStart",
          "gridRowEnd",
          "gridRowStart"
        ],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: [
          "gridTemplateAreas",
          "gridTemplateColumns",
          "gridTemplateRows"
        ],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: "maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(
          " "
        ),
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: [
          "textDecorationColor",
          "textDecorationLine",
          "textDecorationStyle"
        ],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: [
          "transitionDelay",
          "transitionDuration",
          "transitionProperty",
          "transitionTimingFunction"
        ],
        wordWrap: ["overflowWrap"]
      },
      uppercasePattern = /([A-Z])/g,
      msPattern$1 = /^ms-/,
      badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/,
      msPattern = /^-ms-/,
      hyphenPattern = /-(.)/g,
      badStyleValueWithSemicolonPattern = /;\s*$/,
      warnedStyleNames = {},
      warnedStyleValues = {},
      warnedForNaNValue = !1,
      warnedForInfinityValue = !1,
      unitlessNumbers = new Set(
        "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
          " "
        )
      ),
      MATH_NAMESPACE = "https://www.w3.org/1998/Math/MathML",
      SVG_NAMESPACE = "https://www.w3.org/2000/svg",
      aliases = new Map([
        ["acceptCharset", "accept-charset"],
        ["htmlFor", "for"],
        ["httpEquiv", "http-equiv"],
        ["crossOrigin", "crossorigin"],
        ["accentHeight", "accent-height"],
        ["alignmentBaseline", "alignment-baseline"],
        ["arabicForm", "arabic-form"],
        ["baselineShift", "baseline-shift"],
        ["capHeight", "cap-height"],
        ["clipPath", "clip-path"],
        ["clipRule", "clip-rule"],
        ["colorInterpolation", "color-interpolation"],
        ["colorInterpolationFilters", "color-interpolation-filters"],
        ["colorProfile", "color-profile"],
        ["colorRendering", "color-rendering"],
        ["dominantBaseline", "dominant-baseline"],
        ["enableBackground", "enable-background"],
        ["fillOpacity", "fill-opacity"],
        ["fillRule", "fill-rule"],
        ["floodColor", "flood-color"],
        ["floodOpacity", "flood-opacity"],
        ["fontFamily", "font-family"],
        ["fontSize", "font-size"],
        ["fontSizeAdjust", "font-size-adjust"],
        ["fontStretch", "font-stretch"],
        ["fontStyle", "font-style"],
        ["fontVariant", "font-variant"],
        ["fontWeight", "font-weight"],
        ["glyphName", "glyph-name"],
        ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
        ["glyphOrientationVertical", "glyph-orientation-vertical"],
        ["horizAdvX", "horiz-adv-x"],
        ["horizOriginX", "horiz-origin-x"],
        ["imageRendering", "image-rendering"],
        ["letterSpacing", "letter-spacing"],
        ["lightingColor", "lighting-color"],
        ["markerEnd", "marker-end"],
        ["markerMid", "marker-mid"],
        ["markerStart", "marker-start"],
        ["overlinePosition", "overline-position"],
        ["overlineThickness", "overline-thickness"],
        ["paintOrder", "paint-order"],
        ["panose-1", "panose-1"],
        ["pointerEvents", "pointer-events"],
        ["renderingIntent", "rendering-intent"],
        ["shapeRendering", "shape-rendering"],
        ["stopColor", "stop-color"],
        ["stopOpacity", "stop-opacity"],
        ["strikethroughPosition", "strikethrough-position"],
        ["strikethroughThickness", "strikethrough-thickness"],
        ["strokeDasharray", "stroke-dasharray"],
        ["strokeDashoffset", "stroke-dashoffset"],
        ["strokeLinecap", "stroke-linecap"],
        ["strokeLinejoin", "stroke-linejoin"],
        ["strokeMiterlimit", "stroke-miterlimit"],
        ["strokeOpacity", "stroke-opacity"],
        ["strokeWidth", "stroke-width"],
        ["textAnchor", "text-anchor"],
        ["textDecoration", "text-decoration"],
        ["textRendering", "text-rendering"],
        ["transformOrigin", "transform-origin"],
        ["underlinePosition", "underline-position"],
        ["underlineThickness", "underline-thickness"],
        ["unicodeBidi", "unicode-bidi"],
        ["unicodeRange", "unicode-range"],
        ["unitsPerEm", "units-per-em"],
        ["vAlphabetic", "v-alphabetic"],
        ["vHanging", "v-hanging"],
        ["vIdeographic", "v-ideographic"],
        ["vMathematical", "v-mathematical"],
        ["vectorEffect", "vector-effect"],
        ["vertAdvY", "vert-adv-y"],
        ["vertOriginX", "vert-origin-x"],
        ["vertOriginY", "vert-origin-y"],
        ["wordSpacing", "word-spacing"],
        ["writingMode", "writing-mode"],
        ["xmlnsXlink", "xmlns:xlink"],
        ["xHeight", "x-height"]
      ]),
      possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        fetchpriority: "fetchPriority",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        inert: "inert",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        popover: "popover",
        popovertarget: "popoverTarget",
        popovertargetaction: "popoverTargetAction",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        transformorigin: "transformOrigin",
        "transform-origin": "transformOrigin",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      },
      ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      },
      warnedProperties$1 = {},
      rARIA$1 = RegExp(
        "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ),
      rARIACamel$1 = RegExp(
        "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ),
      didWarnValueNull = !1,
      warnedProperties = {},
      EVENT_NAME_REGEX = /^on./,
      INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/,
      rARIA = RegExp(
        "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ),
      rARIACamel = RegExp(
        "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ),
      isJavaScriptProtocol =
        /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i,
      currentReplayingEvent = null,
      restoreTarget = null,
      restoreQueue = null,
      isInsideEventHandler = !1,
      canUseDOM = !(
        "undefined" === typeof window ||
        "undefined" === typeof window.document ||
        "undefined" === typeof window.document.createElement
      ),
      passiveBrowserEventsSupported = !1;
    if (canUseDOM)
      try {
        var options$jscomp$0 = {};
        Object.defineProperty(options$jscomp$0, "passive", {
          get: function () {
            passiveBrowserEventsSupported = !0;
          }
        });
        window.addEventListener("test", options$jscomp$0, options$jscomp$0);
        window.removeEventListener("test", options$jscomp$0, options$jscomp$0);
      } catch (e) {
        passiveBrowserEventsSupported = !1;
      }
    var root = null,
      startText = null,
      fallbackText = null,
      EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function (event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      },
      SyntheticEvent = createSyntheticEvent(EventInterface),
      UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }),
      SyntheticUIEvent = createSyntheticEvent(UIEventInterface),
      lastMovementX,
      lastMovementY,
      lastMouseEvent,
      MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function (event) {
          return void 0 === event.relatedTarget
            ? event.fromElement === event.srcElement
              ? event.toElement
              : event.fromElement
            : event.relatedTarget;
        },
        movementX: function (event) {
          if ("movementX" in event) return event.movementX;
          event !== lastMouseEvent &&
            (lastMouseEvent && "mousemove" === event.type
              ? ((lastMovementX = event.screenX - lastMouseEvent.screenX),
                (lastMovementY = event.screenY - lastMouseEvent.screenY))
              : (lastMovementY = lastMovementX = 0),
            (lastMouseEvent = event));
          return lastMovementX;
        },
        movementY: function (event) {
          return "movementY" in event ? event.movementY : lastMovementY;
        }
      }),
      SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface),
      DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }),
      SyntheticDragEvent = createSyntheticEvent(DragEventInterface),
      FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }),
      SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface),
      AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }),
      SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface),
      ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function (event) {
          return "clipboardData" in event
            ? event.clipboardData
            : window.clipboardData;
        }
      }),
      SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface),
      CompositionEventInterface = assign({}, EventInterface, { data: 0 }),
      SyntheticCompositionEvent = createSyntheticEvent(
        CompositionEventInterface
      ),
      SyntheticInputEvent = SyntheticCompositionEvent,
      normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      },
      translateToKey = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      },
      modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      },
      KeyboardEventInterface = assign({}, UIEventInterface, {
        key: function (nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if ("Unidentified" !== key) return key;
          }
          return "keypress" === nativeEvent.type
            ? ((nativeEvent = getEventCharCode(nativeEvent)),
              13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent))
            : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type
              ? translateToKey[nativeEvent.keyCode] || "Unidentified"
              : "";
        },
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function (event) {
          return "keypress" === event.type ? getEventCharCode(event) : 0;
        },
        keyCode: function (event) {
          return "keydown" === event.type || "keyup" === event.type
            ? event.keyCode
            : 0;
        },
        which: function (event) {
          return "keypress" === event.type
            ? getEventCharCode(event)
            : "keydown" === event.type || "keyup" === event.type
              ? event.keyCode
              : 0;
        }
      }),
      SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface),
      PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      }),
      SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface),
      TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      }),
      SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface),
      TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }),
      SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface),
      WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function (event) {
          return "deltaX" in event
            ? event.deltaX
            : "wheelDeltaX" in event
              ? -event.wheelDeltaX
              : 0;
        },
        deltaY: function (event) {
          return "deltaY" in event
            ? event.deltaY
            : "wheelDeltaY" in event
              ? -event.wheelDeltaY
              : "wheelDelta" in event
                ? -event.wheelDelta
                : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      }),
      SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface),
      ToggleEventInterface = assign({}, EventInterface, {
        newState: 0,
        oldState: 0
      }),
      SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface),
      END_KEYCODES = [9, 13, 27, 32],
      START_KEYCODE = 229,
      canUseCompositionEvent = canUseDOM && "CompositionEvent" in window,
      documentMode = null;
    canUseDOM &&
      "documentMode" in document &&
      (documentMode = document.documentMode);
    var canUseTextInputEvent =
        canUseDOM && "TextEvent" in window && !documentMode,
      useFallbackCompositionData =
        canUseDOM &&
        (!canUseCompositionEvent ||
          (documentMode && 8 < documentMode && 11 >= documentMode)),
      SPACEBAR_CODE = 32,
      SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE),
      hasSpaceKeypress = !1,
      isComposing = !1,
      supportedInputTypes = {
        color: !0,
        date: !0,
        datetime: !0,
        "datetime-local": !0,
        email: !0,
        month: !0,
        number: !0,
        password: !0,
        range: !0,
        search: !0,
        tel: !0,
        text: !0,
        time: !0,
        url: !0,
        week: !0
      },
      activeElement$1 = null,
      activeElementInst$1 = null,
      isInputEventSupported = !1;
    canUseDOM &&
      (isInputEventSupported =
        isEventSupported("input") &&
        (!document.documentMode || 9 < document.documentMode));
    var objectIs = "function" === typeof Object.is ? Object.is : is,
      skipSelectionChangeEvent =
        canUseDOM && "documentMode" in document && 11 >= document.documentMode,
      activeElement = null,
      activeElementInst = null,
      lastSelection = null,
      mouseDown = !1,
      vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionrun: makePrefixMap("Transition", "TransitionRun"),
        transitionstart: makePrefixMap("Transition", "TransitionStart"),
        transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      },
      prefixedEventNames = {},
      style = {};
    canUseDOM &&
      ((style = document.createElement("div").style),
      "AnimationEvent" in window ||
        (delete vendorPrefixes.animationend.animation,
        delete vendorPrefixes.animationiteration.animation,
        delete vendorPrefixes.animationstart.animation),
      "TransitionEvent" in window ||
        delete vendorPrefixes.transitionend.transition);
    var ANIMATION_END = getVendorPrefixedEventName("animationend"),
      ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"),
      ANIMATION_START = getVendorPrefixedEventName("animationstart"),
      TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"),
      TRANSITION_START = getVendorPrefixedEventName("transitionstart"),
      TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"),
      TRANSITION_END = getVendorPrefixedEventName("transitionend"),
      topLevelEventsToReactNames = new Map(),
      simpleEventPluginEvents =
        "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
          " "
        );
    simpleEventPluginEvents.push("scrollEnd");
    var CapturedStacks = new WeakMap(),
      OffscreenVisible = 1,
      OffscreenPassiveEffectsConnected = 2,
      concurrentQueues = [],
      concurrentQueuesIndex = 0,
      concurrentlyUpdatedLanes = 0,
      emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var resolveFamily = null,
      failedBoundaries = null,
      NoMode = 0,
      ConcurrentMode = 1,
      ProfileMode = 2,
      StrictLegacyMode = 8,
      StrictEffectsMode = 16,
      NoStrictPassiveEffectsMode = 64;
    var hasBadMapPolyfill = !1;
    try {
      var nonExtensibleObject = Object.preventExtensions({});
      new Map([[nonExtensibleObject, null]]);
      new Set([nonExtensibleObject]);
    } catch (e$3) {
      hasBadMapPolyfill = !0;
    }
    var forkStack = [],
      forkStackIndex = 0,
      treeForkProvider = null,
      treeForkCount = 0,
      idStack = [],
      idStackIndex = 0,
      treeContextProvider = null,
      treeContextId = 1,
      treeContextOverflow = "",
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = !1,
      didSuspendOrErrorDEV = !1,
      hydrationDiffRootDEV = null,
      hydrationErrors = null,
      rootOrSingletonContext = !1,
      HydrationMismatchException = Error(
        "Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
      ),
      lastResetTime = 0;
    if (
      "object" === typeof performance &&
      "function" === typeof performance.now
    ) {
      var localPerformance = performance;
      var getCurrentTime = function () {
        return localPerformance.now();
      };
    } else {
      var localDate = Date;
      getCurrentTime = function () {
        return localDate.now();
      };
    }
    var valueCursor = createCursor(null);
    var rendererCursorDEV = createCursor(null);
    var rendererSigil = {};
    var currentlyRenderingFiber$1 = null,
      lastContextDependency = null,
      isDisallowedContextReadInDEV = !1,
      AbortControllerLocal =
        "undefined" !== typeof AbortController
          ? AbortController
          : function () {
              var listeners = [],
                signal = (this.signal = {
                  aborted: !1,
                  addEventListener: function (type, listener) {
                    listeners.push(listener);
                  }
                });
              this.abort = function () {
                signal.aborted = !0;
                listeners.forEach(function (listener) {
                  return listener();
                });
              };
            },
      scheduleCallback$2 = Scheduler.unstable_scheduleCallback,
      NormalPriority = Scheduler.unstable_NormalPriority,
      CacheContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0,
        _currentRenderer: null,
        _currentRenderer2: null
      },
      now = Scheduler.unstable_now,
      renderStartTime = -0,
      commitStartTime = -0,
      profilerStartTime = -1.1,
      profilerEffectDuration = -0,
      currentUpdateIsNested = !1,
      nestedUpdateScheduled = !1,
      currentEntangledListeners = null,
      currentEntangledPendingCount = 0,
      currentEntangledLane = 0,
      currentEntangledActionThenable = null,
      prevOnStartTransitionFinish = ReactSharedInternals.S;
    ReactSharedInternals.S = function (transition, returnValue) {
      "object" === typeof returnValue &&
        null !== returnValue &&
        "function" === typeof returnValue.then &&
        entangleAsyncAction(transition, returnValue);
      null !== prevOnStartTransitionFinish &&
        prevOnStartTransitionFinish(transition, returnValue);
    };
    var resumedCache = createCursor(null),
      ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function () {},
        flushPendingUnsafeLifecycleWarnings: function () {},
        recordLegacyContextWarning: function () {},
        flushLegacyContextWarning: function () {},
        discardPendingWarnings: function () {}
      },
      pendingComponentWillMountWarnings = [],
      pendingUNSAFE_ComponentWillMountWarnings = [],
      pendingComponentWillReceivePropsWarnings = [],
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [],
      pendingComponentWillUpdateWarnings = [],
      pendingUNSAFE_ComponentWillUpdateWarnings = [],
      didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (
      fiber,
      instance
    ) {
      didWarnAboutUnsafeLifecycles.has(fiber.type) ||
        ("function" === typeof instance.componentWillMount &&
          !0 !== instance.componentWillMount.__suppressDeprecationWarning &&
          pendingComponentWillMountWarnings.push(fiber),
        fiber.mode & StrictLegacyMode &&
          "function" === typeof instance.UNSAFE_componentWillMount &&
          pendingUNSAFE_ComponentWillMountWarnings.push(fiber),
        "function" === typeof instance.componentWillReceiveProps &&
          !0 !==
            instance.componentWillReceiveProps.__suppressDeprecationWarning &&
          pendingComponentWillReceivePropsWarnings.push(fiber),
        fiber.mode & StrictLegacyMode &&
          "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber),
        "function" === typeof instance.componentWillUpdate &&
          !0 !== instance.componentWillUpdate.__suppressDeprecationWarning &&
          pendingComponentWillUpdateWarnings.push(fiber),
        fiber.mode & StrictLegacyMode &&
          "function" === typeof instance.UNSAFE_componentWillUpdate &&
          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
      var componentWillMountUniqueNames = new Set();
      0 < pendingComponentWillMountWarnings.length &&
        (pendingComponentWillMountWarnings.forEach(function (fiber) {
          componentWillMountUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }),
        (pendingComponentWillMountWarnings = []));
      var UNSAFE_componentWillMountUniqueNames = new Set();
      0 < pendingUNSAFE_ComponentWillMountWarnings.length &&
        (pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
          UNSAFE_componentWillMountUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }),
        (pendingUNSAFE_ComponentWillMountWarnings = []));
      var componentWillReceivePropsUniqueNames = new Set();
      0 < pendingComponentWillReceivePropsWarnings.length &&
        (pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
          componentWillReceivePropsUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }),
        (pendingComponentWillReceivePropsWarnings = []));
      var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
      0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length &&
        (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
          function (fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(
              getComponentNameFromFiber(fiber) || "Component"
            );
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          }
        ),
        (pendingUNSAFE_ComponentWillReceivePropsWarnings = []));
      var componentWillUpdateUniqueNames = new Set();
      0 < pendingComponentWillUpdateWarnings.length &&
        (pendingComponentWillUpdateWarnings.forEach(function (fiber) {
          componentWillUpdateUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }),
        (pendingComponentWillUpdateWarnings = []));
      var UNSAFE_componentWillUpdateUniqueNames = new Set();
      0 < pendingUNSAFE_ComponentWillUpdateWarnings.length &&
        (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
          UNSAFE_componentWillUpdateUniqueNames.add(
            getComponentNameFromFiber(fiber) || "Component"
          );
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        }),
        (pendingUNSAFE_ComponentWillUpdateWarnings = []));
      if (0 < UNSAFE_componentWillMountUniqueNames.size) {
        var sortedNames = setToSortedString(
          UNSAFE_componentWillMountUniqueNames
        );
        console.error(
          "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
          sortedNames
        );
      }
      0 < UNSAFE_componentWillReceivePropsUniqueNames.size &&
        ((sortedNames = setToSortedString(
          UNSAFE_componentWillReceivePropsUniqueNames
        )),
        console.error(
          "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",
          sortedNames
        ));
      0 < UNSAFE_componentWillUpdateUniqueNames.size &&
        ((sortedNames = setToSortedString(
          UNSAFE_componentWillUpdateUniqueNames
        )),
        console.error(
          "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
          sortedNames
        ));
      0 < componentWillMountUniqueNames.size &&
        ((sortedNames = setToSortedString(componentWillMountUniqueNames)),
        console.warn(
          "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
          sortedNames
        ));
      0 < componentWillReceivePropsUniqueNames.size &&
        ((sortedNames = setToSortedString(
          componentWillReceivePropsUniqueNames
        )),
        console.warn(
          "componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
          sortedNames
        ));
      0 < componentWillUpdateUniqueNames.size &&
        ((sortedNames = setToSortedString(componentWillUpdateUniqueNames)),
        console.warn(
          "componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
          sortedNames
        ));
    };
    var pendingLegacyContextWarning = new Map(),
      didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function (
      fiber,
      instance
    ) {
      var strictRoot = null;
      for (var node = fiber; null !== node; )
        node.mode & StrictLegacyMode && (strictRoot = node),
          (node = node.return);
      null === strictRoot
        ? console.error(
            "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
          )
        : !didWarnAboutLegacyContext.has(fiber.type) &&
          ((node = pendingLegacyContextWarning.get(strictRoot)),
          null != fiber.type.contextTypes ||
            null != fiber.type.childContextTypes ||
            (null !== instance &&
              "function" === typeof instance.getChildContext)) &&
          (void 0 === node &&
            ((node = []), pendingLegacyContextWarning.set(strictRoot, node)),
          node.push(fiber));
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function () {
      pendingLegacyContextWarning.forEach(function (fiberArray) {
        if (0 !== fiberArray.length) {
          var firstFiber = fiberArray[0],
            uniqueNames = new Set();
          fiberArray.forEach(function (fiber) {
            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          runWithFiberInDEV(firstFiber, function () {
            console.error(
              "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",
              sortedNames
            );
          });
        }
      });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function () {
      pendingComponentWillMountWarnings = [];
      pendingUNSAFE_ComponentWillMountWarnings = [];
      pendingComponentWillReceivePropsWarnings = [];
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      pendingComponentWillUpdateWarnings = [];
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
      pendingLegacyContextWarning = new Map();
    };
    var SuspenseException = Error(
        "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`."
      ),
      SuspenseyCommitException = Error(
        "Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
      ),
      SuspenseActionException = Error(
        "Suspense Exception: This is not a real error! It's an implementation detail of `useActionState` to interrupt the current render. You must either rethrow it immediately, or move the `useActionState` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary."
      ),
      noopSuspenseyCommitThenable = {
        then: function () {
          console.error(
            'Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.'
          );
        }
      },
      suspendedThenable = null,
      needsToResetSuspendedThenableDEV = !1,
      NoFlags = 0,
      HasEffect = 1,
      Insertion = 2,
      Layout = 4,
      Passive = 8,
      UpdateState = 0,
      ReplaceState = 1,
      ForceUpdate = 2,
      CaptureUpdate = 3,
      hasForceUpdate = !1;
    var didWarnUpdateInsideUpdate = !1;
    var currentlyProcessingQueue = null;
    var didReadFromEntangledAsyncAction = !1,
      currentTreeHiddenStackCursor = createCursor(null),
      prevEntangledRenderLanesCursor = createCursor(0),
      didWarnUncachedGetSnapshot;
    var didWarnAboutMismatchedHooksForComponent = new Set();
    var didWarnAboutUseWrappedInTryCatch = new Set();
    var didWarnAboutAsyncClientComponent = new Set();
    var didWarnAboutUseFormState = new Set();
    var renderLanes = 0,
      currentlyRenderingFiber = null,
      currentHook = null,
      workInProgressHook = null,
      didScheduleRenderPhaseUpdate = !1,
      didScheduleRenderPhaseUpdateDuringThisPass = !1,
      shouldDoubleInvokeUserFnsInHooksDEV = !1,
      localIdCounter = 0,
      thenableIndexCounter$1 = 0,
      thenableState$1 = null,
      globalClientIdCounter = 0,
      RE_RENDER_LIMIT = 25,
      currentHookNameInDev = null,
      hookTypesDev = null,
      hookTypesUpdateIndexDev = -1,
      ignorePreviousDependencies = !1,
      ContextOnlyDispatcher = {
        readContext: readContext,
        use: use,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        useHostTransitionStatus: throwInvalidHookError,
        useFormState: throwInvalidHookError,
        useActionState: throwInvalidHookError,
        useOptimistic: throwInvalidHookError,
        useMemoCache: throwInvalidHookError,
        useCacheRefresh: throwInvalidHookError
      },
      HooksDispatcherOnMountInDEV = null,
      HooksDispatcherOnMountWithHookTypesInDEV = null,
      HooksDispatcherOnUpdateInDEV = null,
      HooksDispatcherOnRerenderInDEV = null,
      InvalidNestedHooksDispatcherOnMountInDEV = null,
      InvalidNestedHooksDispatcherOnUpdateInDEV = null,
      InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    HooksDispatcherOnMountInDEV = {
      readContext: function (context) {
        return readContext(context);
      },
      use: use,
      useCallback: function (callback, deps) {
        currentHookNameInDev = "useCallback";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountCallback(callback, deps);
      },
      useContext: function (context) {
        currentHookNameInDev = "useContext";
        mountHookTypesDev();
        return readContext(context);
      },
      useEffect: function (create, createDeps) {
        currentHookNameInDev = "useEffect";
        mountHookTypesDev();
        checkDepsAreArrayDev(createDeps);
        return mountEffect(create, createDeps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function (create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        mountEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = "useMemo";
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        mountHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = "useRef";
        mountHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function (initialState) {
        currentHookNameInDev = "useState";
        mountHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountState(initialState);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function () {
        currentHookNameInDev = "useDebugValue";
        mountHookTypesDev();
      },
      useDeferredValue: function (value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        mountHookTypesDev();
        return mountDeferredValue(value, initialValue);
      },
      useTransition: function () {
        currentHookNameInDev = "useTransition";
        mountHookTypesDev();
        return mountTransition();
      },
      useSyncExternalStore: function (
        subscribe,
        getSnapshot,
        getServerSnapshot
      ) {
        currentHookNameInDev = "useSyncExternalStore";
        mountHookTypesDev();
        return mountSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      },
      useId: function () {
        currentHookNameInDev = "useId";
        mountHookTypesDev();
        return mountId();
      },
      useFormState: function (action, initialState) {
        currentHookNameInDev = "useFormState";
        mountHookTypesDev();
        warnOnUseFormStateInDev();
        return mountActionState(action, initialState);
      },
      useActionState: function (action, initialState) {
        currentHookNameInDev = "useActionState";
        mountHookTypesDev();
        return mountActionState(action, initialState);
      },
      useOptimistic: function (passthrough) {
        currentHookNameInDev = "useOptimistic";
        mountHookTypesDev();
        return mountOptimistic(passthrough);
      },
      useHostTransitionStatus: useHostTransitionStatus,
      useMemoCache: useMemoCache,
      useCacheRefresh: function () {
        currentHookNameInDev = "useCacheRefresh";
        mountHookTypesDev();
        return mountRefresh();
      }
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
      readContext: function (context) {
        return readContext(context);
      },
      use: use,
      useCallback: function (callback, deps) {
        currentHookNameInDev = "useCallback";
        updateHookTypesDev();
        return mountCallback(callback, deps);
      },
      useContext: function (context) {
        currentHookNameInDev = "useContext";
        updateHookTypesDev();
        return readContext(context);
      },
      useEffect: function (create, createDeps) {
        currentHookNameInDev = "useEffect";
        updateHookTypesDev();
        return mountEffect(create, createDeps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        updateHookTypesDev();
        return mountImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function (create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        updateHookTypesDev();
        mountEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        updateHookTypesDev();
        return mountLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = "useMemo";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = "useRef";
        updateHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function (initialState) {
        currentHookNameInDev = "useState";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountState(initialState);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function () {
        currentHookNameInDev = "useDebugValue";
        updateHookTypesDev();
      },
      useDeferredValue: function (value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        updateHookTypesDev();
        return mountDeferredValue(value, initialValue);
      },
      useTransition: function () {
        currentHookNameInDev = "useTransition";
        updateHookTypesDev();
        return mountTransition();
      },
      useSyncExternalStore: function (
        subscribe,
        getSnapshot,
        getServerSnapshot
      ) {
        currentHookNameInDev = "useSyncExternalStore";
        updateHookTypesDev();
        return mountSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      },
      useId: function () {
        currentHookNameInDev = "useId";
        updateHookTypesDev();
        return mountId();
      },
      useActionState: function (action, initialState) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return mountActionState(action, initialState);
      },
      useFormState: function (action, initialState) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return mountActionState(action, initialState);
      },
      useOptimistic: function (passthrough) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return mountOptimistic(passthrough);
      },
      useHostTransitionStatus: useHostTransitionStatus,
      useMemoCache: useMemoCache,
      useCacheRefresh: function () {
        currentHookNameInDev = "useCacheRefresh";
        updateHookTypesDev();
        return mountRefresh();
      }
    };
    HooksDispatcherOnUpdateInDEV = {
      readContext: function (context) {
        return readContext(context);
      },
      use: use,
      useCallback: function (callback, deps) {
        currentHookNameInDev = "useCallback";
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context) {
        currentHookNameInDev = "useContext";
        updateHookTypesDev();
        return readContext(context);
      },
      useEffect: function (create, createDeps) {
        currentHookNameInDev = "useEffect";
        updateHookTypesDev();
        updateEffectImpl(2048, Passive, create, createDeps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function (create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        updateHookTypesDev();
        return updateEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        updateHookTypesDev();
        return updateEffectImpl(4, Layout, create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = "useMemo";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function () {
        currentHookNameInDev = "useRef";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useState: function () {
        currentHookNameInDev = "useState";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateReducer(basicStateReducer);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function () {
        currentHookNameInDev = "useDebugValue";
        updateHookTypesDev();
      },
      useDeferredValue: function (value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        updateHookTypesDev();
        return updateDeferredValue(value, initialValue);
      },
      useTransition: function () {
        currentHookNameInDev = "useTransition";
        updateHookTypesDev();
        return updateTransition();
      },
      useSyncExternalStore: function (
        subscribe,
        getSnapshot,
        getServerSnapshot
      ) {
        currentHookNameInDev = "useSyncExternalStore";
        updateHookTypesDev();
        return updateSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      },
      useId: function () {
        currentHookNameInDev = "useId";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useFormState: function (action) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return updateActionState(action);
      },
      useActionState: function (action) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return updateActionState(action);
      },
      useOptimistic: function (passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return updateOptimistic(passthrough, reducer);
      },
      useHostTransitionStatus: useHostTransitionStatus,
      useMemoCache: useMemoCache,
      useCacheRefresh: function () {
        currentHookNameInDev = "useCacheRefresh";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      }
    };
    HooksDispatcherOnRerenderInDEV = {
      readContext: function (context) {
        return readContext(context);
      },
      use: use,
      useCallback: function (callback, deps) {
        currentHookNameInDev = "useCallback";
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context) {
        currentHookNameInDev = "useContext";
        updateHookTypesDev();
        return readContext(context);
      },
      useEffect: function (create, createDeps) {
        currentHookNameInDev = "useEffect";
        updateHookTypesDev();
        updateEffectImpl(2048, Passive, create, createDeps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function (create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        updateHookTypesDev();
        return updateEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        updateHookTypesDev();
        return updateEffectImpl(4, Layout, create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = "useMemo";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
        try {
          return rerenderReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function () {
        currentHookNameInDev = "useRef";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useState: function () {
        currentHookNameInDev = "useState";
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
        try {
          return rerenderReducer(basicStateReducer);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function () {
        currentHookNameInDev = "useDebugValue";
        updateHookTypesDev();
      },
      useDeferredValue: function (value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        updateHookTypesDev();
        return rerenderDeferredValue(value, initialValue);
      },
      useTransition: function () {
        currentHookNameInDev = "useTransition";
        updateHookTypesDev();
        return rerenderTransition();
      },
      useSyncExternalStore: function (
        subscribe,
        getSnapshot,
        getServerSnapshot
      ) {
        currentHookNameInDev = "useSyncExternalStore";
        updateHookTypesDev();
        return updateSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      },
      useId: function () {
        currentHookNameInDev = "useId";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useFormState: function (action) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return rerenderActionState(action);
      },
      useActionState: function (action) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return rerenderActionState(action);
      },
      useOptimistic: function (passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return rerenderOptimistic(passthrough, reducer);
      },
      useHostTransitionStatus: useHostTransitionStatus,
      useMemoCache: useMemoCache,
      useCacheRefresh: function () {
        currentHookNameInDev = "useCacheRefresh";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      }
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
      readContext: function (context) {
        warnInvalidContextAccess();
        return readContext(context);
      },
      use: function (usable) {
        warnInvalidHookAccess();
        return use(usable);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = "useCallback";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountCallback(callback, deps);
      },
      useContext: function (context) {
        currentHookNameInDev = "useContext";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return readContext(context);
      },
      useEffect: function (create, createDeps) {
        currentHookNameInDev = "useEffect";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountEffect(create, createDeps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function (create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        warnInvalidHookAccess();
        mountHookTypesDev();
        mountEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = "useMemo";
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = "useRef";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function (initialState) {
        currentHookNameInDev = "useState";
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
        try {
          return mountState(initialState);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function () {
        currentHookNameInDev = "useDebugValue";
        warnInvalidHookAccess();
        mountHookTypesDev();
      },
      useDeferredValue: function (value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountDeferredValue(value, initialValue);
      },
      useTransition: function () {
        currentHookNameInDev = "useTransition";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountTransition();
      },
      useSyncExternalStore: function (
        subscribe,
        getSnapshot,
        getServerSnapshot
      ) {
        currentHookNameInDev = "useSyncExternalStore";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      },
      useId: function () {
        currentHookNameInDev = "useId";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountId();
      },
      useFormState: function (action, initialState) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountActionState(action, initialState);
      },
      useActionState: function (action, initialState) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountActionState(action, initialState);
      },
      useOptimistic: function (passthrough) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountOptimistic(passthrough);
      },
      useMemoCache: function (size) {
        warnInvalidHookAccess();
        return useMemoCache(size);
      },
      useHostTransitionStatus: useHostTransitionStatus,
      useCacheRefresh: function () {
        currentHookNameInDev = "useCacheRefresh";
        mountHookTypesDev();
        return mountRefresh();
      }
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
      readContext: function (context) {
        warnInvalidContextAccess();
        return readContext(context);
      },
      use: function (usable) {
        warnInvalidHookAccess();
        return use(usable);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = "useCallback";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context) {
        currentHookNameInDev = "useContext";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return readContext(context);
      },
      useEffect: function (create, createDeps) {
        currentHookNameInDev = "useEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        updateEffectImpl(2048, Passive, create, createDeps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function (create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffectImpl(4, Layout, create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = "useMemo";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function () {
        currentHookNameInDev = "useRef";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useState: function () {
        currentHookNameInDev = "useState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateReducer(basicStateReducer);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function () {
        currentHookNameInDev = "useDebugValue";
        warnInvalidHookAccess();
        updateHookTypesDev();
      },
      useDeferredValue: function (value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateDeferredValue(value, initialValue);
      },
      useTransition: function () {
        currentHookNameInDev = "useTransition";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateTransition();
      },
      useSyncExternalStore: function (
        subscribe,
        getSnapshot,
        getServerSnapshot
      ) {
        currentHookNameInDev = "useSyncExternalStore";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      },
      useId: function () {
        currentHookNameInDev = "useId";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useFormState: function (action) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateActionState(action);
      },
      useActionState: function (action) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateActionState(action);
      },
      useOptimistic: function (passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateOptimistic(passthrough, reducer);
      },
      useMemoCache: function (size) {
        warnInvalidHookAccess();
        return useMemoCache(size);
      },
      useHostTransitionStatus: useHostTransitionStatus,
      useCacheRefresh: function () {
        currentHookNameInDev = "useCacheRefresh";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      }
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
      readContext: function (context) {
        warnInvalidContextAccess();
        return readContext(context);
      },
      use: function (usable) {
        warnInvalidHookAccess();
        return use(usable);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = "useCallback";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context) {
        currentHookNameInDev = "useContext";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return readContext(context);
      },
      useEffect: function (create, createDeps) {
        currentHookNameInDev = "useEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        updateEffectImpl(2048, Passive, create, createDeps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = "useImperativeHandle";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useInsertionEffect: function (create, deps) {
        currentHookNameInDev = "useInsertionEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffectImpl(4, Insertion, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = "useLayoutEffect";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffectImpl(4, Layout, create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = "useMemo";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return updateMemo(create, deps);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = "useReducer";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return rerenderReducer(reducer, initialArg, init);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useRef: function () {
        currentHookNameInDev = "useRef";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useState: function () {
        currentHookNameInDev = "useState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
        try {
          return rerenderReducer(basicStateReducer);
        } finally {
          ReactSharedInternals.H = prevDispatcher;
        }
      },
      useDebugValue: function () {
        currentHookNameInDev = "useDebugValue";
        warnInvalidHookAccess();
        updateHookTypesDev();
      },
      useDeferredValue: function (value, initialValue) {
        currentHookNameInDev = "useDeferredValue";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderDeferredValue(value, initialValue);
      },
      useTransition: function () {
        currentHookNameInDev = "useTransition";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderTransition();
      },
      useSyncExternalStore: function (
        subscribe,
        getSnapshot,
        getServerSnapshot
      ) {
        currentHookNameInDev = "useSyncExternalStore";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      },
      useId: function () {
        currentHookNameInDev = "useId";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      },
      useFormState: function (action) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderActionState(action);
      },
      useActionState: function (action) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderActionState(action);
      },
      useOptimistic: function (passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderOptimistic(passthrough, reducer);
      },
      useMemoCache: function (size) {
        warnInvalidHookAccess();
        return useMemoCache(size);
      },
      useHostTransitionStatus: useHostTransitionStatus,
      useCacheRefresh: function () {
        currentHookNameInDev = "useCacheRefresh";
        updateHookTypesDev();
        return updateWorkInProgressHook().memoizedState;
      }
    };
    var callComponent = {
        "react-stack-bottom-frame": function (Component, props, secondArg) {
          var wasRendering = isRendering;
          isRendering = !0;
          try {
            return Component(props, secondArg);
          } finally {
            isRendering = wasRendering;
          }
        }
      },
      callComponentInDEV =
        callComponent["react-stack-bottom-frame"].bind(callComponent),
      callRender = {
        "react-stack-bottom-frame": function (instance) {
          var wasRendering = isRendering;
          isRendering = !0;
          try {
            return instance.render();
          } finally {
            isRendering = wasRendering;
          }
        }
      },
      callRenderInDEV = callRender["react-stack-bottom-frame"].bind(callRender),
      callComponentDidMount = {
        "react-stack-bottom-frame": function (finishedWork, instance) {
          try {
            instance.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      },
      callComponentDidMountInDEV = callComponentDidMount[
        "react-stack-bottom-frame"
      ].bind(callComponentDidMount),
      callComponentDidUpdate = {
        "react-stack-bottom-frame": function (
          finishedWork,
          instance,
          prevProps,
          prevState,
          snapshot
        ) {
          try {
            instance.componentDidUpdate(prevProps, prevState, snapshot);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      },
      callComponentDidUpdateInDEV = callComponentDidUpdate[
        "react-stack-bottom-frame"
      ].bind(callComponentDidUpdate),
      callComponentDidCatch = {
        "react-stack-bottom-frame": function (instance, errorInfo) {
          var stack = errorInfo.stack;
          instance.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : ""
          });
        }
      },
      callComponentDidCatchInDEV = callComponentDidCatch[
        "react-stack-bottom-frame"
      ].bind(callComponentDidCatch),
      callComponentWillUnmount = {
        "react-stack-bottom-frame": function (
          current,
          nearestMountedAncestor,
          instance
        ) {
          try {
            instance.componentWillUnmount();
          } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
          }
        }
      },
      callComponentWillUnmountInDEV = callComponentWillUnmount[
        "react-stack-bottom-frame"
      ].bind(callComponentWillUnmount),
      callCreate = {
        "react-stack-bottom-frame": function (effect) {
          null != effect.resourceKind &&
            console.error(
              "Expected only SimpleEffects when enableUseEffectCRUDOverload is disabled, got %s",
              effect.resourceKind
            );
          var create = effect.create;
          effect = effect.inst;
          create = create();
          return (effect.destroy = create);
        }
      },
      callCreateInDEV = callCreate["react-stack-bottom-frame"].bind(callCreate),
      callDestroy = {
        "react-stack-bottom-frame": function (
          current,
          nearestMountedAncestor,
          destroy
        ) {
          try {
            destroy();
          } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
          }
        }
      },
      callDestroyInDEV =
        callDestroy["react-stack-bottom-frame"].bind(callDestroy),
      callLazyInit = {
        "react-stack-bottom-frame": function (lazy) {
          var init = lazy._init;
          return init(lazy._payload);
        }
      },
      callLazyInitInDEV =
        callLazyInit["react-stack-bottom-frame"].bind(callLazyInit),
      thenableState = null,
      thenableIndexCounter = 0,
      currentDebugInfo = null,
      didWarnAboutMaps;
    var didWarnAboutGenerators = (didWarnAboutMaps = !1);
    var ownerHasKeyUseWarning = {};
    var ownerHasFunctionTypeWarning = {};
    var ownerHasSymbolTypeWarning = {};
    warnForMissingKey = function (returnFiber, workInProgress, child) {
      if (
        null !== child &&
        "object" === typeof child &&
        child._store &&
        ((!child._store.validated && null == child.key) ||
          2 === child._store.validated)
      ) {
        if ("object" !== typeof child._store)
          throw Error(
            "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
          );
        child._store.validated = 1;
        var componentName = getComponentNameFromFiber(returnFiber),
          componentKey = componentName || "null";
        if (!ownerHasKeyUseWarning[componentKey]) {
          ownerHasKeyUseWarning[componentKey] = !0;
          child = child._owner;
          returnFiber = returnFiber._debugOwner;
          var currentComponentErrorInfo = "";
          returnFiber &&
            "number" === typeof returnFiber.tag &&
            (componentKey = getComponentNameFromFiber(returnFiber)) &&
            (currentComponentErrorInfo =
              "\n\nCheck the render method of `" + componentKey + "`.");
          currentComponentErrorInfo ||
            (componentName &&
              (currentComponentErrorInfo =
                "\n\nCheck the top-level render call using <" +
                componentName +
                ">."));
          var childOwnerAppendix = "";
          null != child &&
            returnFiber !== child &&
            ((componentName = null),
            "number" === typeof child.tag
              ? (componentName = getComponentNameFromFiber(child))
              : "string" === typeof child.name && (componentName = child.name),
            componentName &&
              (childOwnerAppendix =
                " It was passed a child from " + componentName + "."));
          runWithFiberInDEV(workInProgress, function () {
            console.error(
              'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
              currentComponentErrorInfo,
              childOwnerAppendix
            );
          });
        }
      }
    };
    var reconcileChildFibers = createChildReconciler(!0),
      mountChildFibers = createChildReconciler(!1),
      suspenseHandlerStackCursor = createCursor(null),
      shellBoundary = null,
      SubtreeSuspenseContextMask = 1,
      ForceSuspenseFallback = 2,
      suspenseStackCursor = createCursor(0),
      fakeInternalInstance = {};
    var didWarnAboutStateAssignmentForComponent = new Set();
    var didWarnAboutUninitializedState = new Set();
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    var didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    var didWarnAboutDirectlyAssigningPropsToState = new Set();
    var didWarnAboutUndefinedDerivedState = new Set();
    var didWarnAboutContextTypes$1 = new Set();
    var didWarnAboutChildContextTypes = new Set();
    var didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    Object.freeze(fakeInternalInstance);
    var classComponentUpdater = {
        enqueueSetState: function (inst, payload, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(inst),
            update = createUpdate(lane);
          update.payload = payload;
          void 0 !== callback &&
            null !== callback &&
            (warnOnInvalidCallback(callback), (update.callback = callback));
          payload = enqueueUpdate(inst, update, lane);
          null !== payload &&
            (scheduleUpdateOnFiber(payload, inst, lane),
            entangleTransitions(payload, inst, lane));
          markStateUpdateScheduled(inst, lane);
        },
        enqueueReplaceState: function (inst, payload, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(inst),
            update = createUpdate(lane);
          update.tag = ReplaceState;
          update.payload = payload;
          void 0 !== callback &&
            null !== callback &&
            (warnOnInvalidCallback(callback), (update.callback = callback));
          payload = enqueueUpdate(inst, update, lane);
          null !== payload &&
            (scheduleUpdateOnFiber(payload, inst, lane),
            entangleTransitions(payload, inst, lane));
          markStateUpdateScheduled(inst, lane);
        },
        enqueueForceUpdate: function (inst, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(inst),
            update = createUpdate(lane);
          update.tag = ForceUpdate;
          void 0 !== callback &&
            null !== callback &&
            (warnOnInvalidCallback(callback), (update.callback = callback));
          callback = enqueueUpdate(inst, update, lane);
          null !== callback &&
            (scheduleUpdateOnFiber(callback, inst, lane),
            entangleTransitions(callback, inst, lane));
          null !== injectedProfilingHooks &&
            "function" ===
              typeof injectedProfilingHooks.markForceUpdateScheduled &&
            injectedProfilingHooks.markForceUpdateScheduled(inst, lane);
        }
      },
      reportGlobalError =
        "function" === typeof reportError
          ? reportError
          : function (error) {
              if (
                "object" === typeof window &&
                "function" === typeof window.ErrorEvent
              ) {
                var event = new window.ErrorEvent("error", {
                  bubbles: !0,
                  cancelable: !0,
                  message:
                    "object" === typeof error &&
                    null !== error &&
                    "string" === typeof error.message
                      ? String(error.message)
                      : String(error),
                  error: error
                });
                if (!window.dispatchEvent(event)) return;
              } else if (
                "object" === typeof process &&
                "function" === typeof process.emit
              ) {
                process.emit("uncaughtException", error);
                return;
              }
              console.error(error);
            },
      componentName = null,
      errorBoundaryName = null,
      SelectiveHydrationException = Error(
        "This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."
      ),
      didReceiveUpdate = !1;
    var didWarnAboutBadClass = {};
    var didWarnAboutContextTypeOnFunctionComponent = {};
    var didWarnAboutContextTypes = {};
    var didWarnAboutGetDerivedStateOnFunctionComponent = {};
    var didWarnAboutReassigningProps = !1;
    var didWarnAboutRevealOrder = {};
    var didWarnAboutTailOptions = {};
    var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: 0,
        hydrationErrors: null
      },
      hasWarnedAboutUsingNoValuePropOnContextProvider = !1,
      didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var offscreenSubtreeIsHidden = !1,
      offscreenSubtreeWasHidden = !1,
      needsFormReset = !1,
      PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
      nextEffect = null,
      inProgressLanes = null,
      inProgressRoot = null,
      hostParent = null,
      hostParentIsContainer = !1,
      currentHoistableRoot = null,
      suspenseyCommitFlag = 8192,
      DefaultAsyncDispatcher = {
        getCacheForType: function (resourceType) {
          var cache = readContext(CacheContext),
            cacheForType = cache.data.get(resourceType);
          void 0 === cacheForType &&
            ((cacheForType = resourceType()),
            cache.data.set(resourceType, cacheForType));
          return cacheForType;
        },
        getOwner: function () {
          return current;
        }
      };
    if ("function" === typeof Symbol && Symbol.for) {
      var symbolFor = Symbol.for;
      symbolFor("selector.component");
      symbolFor("selector.has_pseudo_class");
      symbolFor("selector.role");
      symbolFor("selector.test_id");
      symbolFor("selector.text");
    }
    var commitHooks = [],
      PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map,
      NoContext = 0,
      RenderContext = 2,
      CommitContext = 4,
      RootInProgress = 0,
      RootFatalErrored = 1,
      RootErrored = 2,
      RootSuspended = 3,
      RootSuspendedWithDelay = 4,
      RootSuspendedAtTheShell = 6,
      RootCompleted = 5,
      executionContext = NoContext,
      workInProgressRoot = null,
      workInProgress = null,
      workInProgressRootRenderLanes = 0,
      NotSuspended = 0,
      SuspendedOnError = 1,
      SuspendedOnData = 2,
      SuspendedOnImmediate = 3,
      SuspendedOnInstance = 4,
      SuspendedOnInstanceAndReadyToContinue = 5,
      SuspendedOnDeprecatedThrowPromise = 6,
      SuspendedAndReadyToContinue = 7,
      SuspendedOnHydration = 8,
      SuspendedOnAction = 9,
      workInProgressSuspendedReason = NotSuspended,
      workInProgressThrownValue = null,
      workInProgressRootDidSkipSuspendedSiblings = !1,
      workInProgressRootIsPrerendering = !1,
      workInProgressRootDidAttachPingListener = !1,
      entangledRenderLanes = 0,
      workInProgressRootExitStatus = RootInProgress,
      workInProgressRootSkippedLanes = 0,
      workInProgressRootInterleavedUpdatedLanes = 0,
      workInProgressRootPingedLanes = 0,
      workInProgressDeferredLane = 0,
      workInProgressSuspendedRetryLanes = 0,
      workInProgressRootConcurrentErrors = null,
      workInProgressRootRecoverableErrors = null,
      workInProgressRootDidIncludeRecursiveRenderUpdate = !1,
      globalMostRecentFallbackTime = 0,
      FALLBACK_THROTTLE_MS = 300,
      workInProgressRootRenderTargetTime = Infinity,
      RENDER_TIMEOUT_MS = 500,
      workInProgressTransitions = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      IMMEDIATE_COMMIT = 0,
      SUSPENDED_COMMIT = 1,
      THROTTLED_COMMIT = 2,
      NO_PENDING_EFFECTS = 0,
      PENDING_MUTATION_PHASE = 1,
      PENDING_LAYOUT_PHASE = 2,
      PENDING_AFTER_MUTATION_PHASE = 3,
      PENDING_SPAWNED_WORK = 4,
      PENDING_PASSIVE_PHASE = 5,
      pendingEffectsStatus = 0,
      pendingEffectsRoot = null,
      pendingFinishedWork = null,
      pendingEffectsLanes = 0,
      pendingEffectsRemainingLanes = 0,
      pendingPassiveTransitions = null,
      pendingRecoverableErrors = null,
      NESTED_UPDATE_LIMIT = 50,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      isFlushingPassiveEffects = !1,
      didScheduleUpdateDuringPassiveEffects = !1,
      NESTED_PASSIVE_UPDATE_LIMIT = 50,
      nestedPassiveUpdateCount = 0,
      rootWithPassiveNestedUpdates = null,
      isRunningInsertionEffect = !1,
      didWarnStateUpdateForNotYetMountedComponent = null,
      didWarnAboutUpdateInRender = !1;
    var didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    var fakeActCallbackNode$1 = {},
      firstScheduledRoot = null,
      lastScheduledRoot = null,
      didScheduleMicrotask = !1,
      didScheduleMicrotask_act = !1,
      mightHavePendingSyncWork = !1,
      isFlushingWork = !1,
      currentEventTransitionLane = 0,
      fakeActCallbackNode = {};
    (function () {
      for (var i = 0; i < simpleEventPluginEvents.length; i++) {
        var eventName = simpleEventPluginEvents[i],
          domEventName = eventName.toLowerCase();
        eventName = eventName[0].toUpperCase() + eventName.slice(1);
        registerSimpleEvent(domEventName, "on" + eventName);
      }
      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
      registerSimpleEvent("dblclick", "onDoubleClick");
      registerSimpleEvent("focusin", "onFocus");
      registerSimpleEvent("focusout", "onBlur");
      registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
      registerSimpleEvent(TRANSITION_START, "onTransitionStart");
      registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    })();
    registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
    registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
    registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
    registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
    registerTwoPhaseEvent(
      "onChange",
      "change click focusin focusout input keydown keyup selectionchange".split(
        " "
      )
    );
    registerTwoPhaseEvent(
      "onSelect",
      "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
        " "
      )
    );
    registerTwoPhaseEvent("onBeforeInput", [
      "compositionend",
      "keypress",
      "textInput",
      "paste"
    ]);
    registerTwoPhaseEvent(
      "onCompositionEnd",
      "compositionend focusout keydown keypress keyup mousedown".split(" ")
    );
    registerTwoPhaseEvent(
      "onCompositionStart",
      "compositionstart focusout keydown keypress keyup mousedown".split(" ")
    );
    registerTwoPhaseEvent(
      "onCompositionUpdate",
      "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
    );
    var mediaEventTypes =
        "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
          " "
        ),
      nonDelegatedEvents = new Set(
        "beforetoggle cancel close invalid load scroll scrollend toggle"
          .split(" ")
          .concat(mediaEventTypes)
      ),
      listeningMarker = "_reactListening" + Math.random().toString(36).slice(2),
      didWarnControlledToUncontrolled = !1,
      didWarnUncontrolledToControlled = !1,
      didWarnFormActionType = !1,
      didWarnFormActionName = !1,
      didWarnFormActionTarget = !1,
      didWarnFormActionMethod = !1,
      didWarnPopoverTargetObject = !1;
    var didWarnForNewBooleanPropsWithEmptyValue = {};
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g,
      NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g,
      xlinkNamespace = "https://www.w3.org/1999/xlink",
      xmlNamespace = "https://www.w3.org/XML/1998/namespace",
      EXPECTED_FORM_ACTION_URL =
        "javascript:throw new Error('React form unexpectedly submitted.')",
      SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning",
      SUSPENSE_START_DATA = "$",
      SUSPENSE_END_DATA = "/$",
      SUSPENSE_PENDING_START_DATA = "$?",
      SUSPENSE_FALLBACK_START_DATA = "$!",
      PREAMBLE_CONTRIBUTION_HTML = 1,
      PREAMBLE_CONTRIBUTION_BODY = 2,
      PREAMBLE_CONTRIBUTION_HEAD = 4,
      FORM_STATE_IS_MATCHING = "F!",
      FORM_STATE_IS_NOT_MATCHING = "F",
      DOCUMENT_READY_STATE_COMPLETE = "complete",
      STYLE = "style",
      HostContextNamespaceNone = 0,
      HostContextNamespaceSvg = 1,
      HostContextNamespaceMath = 2,
      eventsEnabled = null,
      selectionInformation = null,
      warnedUnknownTags = { dialog: !0, webview: !0 },
      currentPopstateTransitionEvent = null,
      scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0,
      cancelTimeout =
        "function" === typeof clearTimeout ? clearTimeout : void 0,
      noTimeout = -1,
      localPromise = "function" === typeof Promise ? Promise : void 0,
      scheduleMicrotask =
        "function" === typeof queueMicrotask
          ? queueMicrotask
          : "undefined" !== typeof localPromise
            ? function (callback) {
                return localPromise
                  .resolve(null)
                  .then(callback)
                  .catch(handleErrorInNextTick);
              }
            : scheduleTimeout,
      previousHydratableOnEnteringScopedSingleton = null,
      NotLoaded = 0,
      Loaded = 1,
      Errored = 2,
      Settled = 3,
      Inserted = 4,
      preloadPropsMap = new Map(),
      preconnectsSet = new Set(),
      previousDispatcher = ReactDOMSharedInternals.d;
    ReactDOMSharedInternals.d = {
      f: function () {
        var previousWasRendering = previousDispatcher.f(),
          wasRendering = flushSyncWork$1();
        return previousWasRendering || wasRendering;
      },
      r: function (form) {
        var formInst = getInstanceFromNode(form);
        null !== formInst && 5 === formInst.tag && "form" === formInst.type
          ? requestFormReset$1(formInst)
          : previousDispatcher.r(form);
      },
      D: function (href) {
        previousDispatcher.D(href);
        preconnectAs("dns-prefetch", href, null);
      },
      C: function (href, crossOrigin) {
        previousDispatcher.C(href, crossOrigin);
        preconnectAs("preconnect", href, crossOrigin);
      },
      L: function (href, as, options) {
        previousDispatcher.L(href, as, options);
        var ownerDocument = globalDocument;
        if (ownerDocument && href && as) {
          var preloadSelector =
            'link[rel="preload"][as="' +
            escapeSelectorAttributeValueInsideDoubleQuotes(as) +
            '"]';
          "image" === as
            ? options && options.imageSrcSet
              ? ((preloadSelector +=
                  '[imagesrcset="' +
                  escapeSelectorAttributeValueInsideDoubleQuotes(
                    options.imageSrcSet
                  ) +
                  '"]'),
                "string" === typeof options.imageSizes &&
                  (preloadSelector +=
                    '[imagesizes="' +
                    escapeSelectorAttributeValueInsideDoubleQuotes(
                      options.imageSizes
                    ) +
                    '"]'))
              : (preloadSelector +=
                  '[href="' +
                  escapeSelectorAttributeValueInsideDoubleQuotes(href) +
                  '"]')
            : (preloadSelector +=
                '[href="' +
                escapeSelectorAttributeValueInsideDoubleQuotes(href) +
                '"]');
          var key = preloadSelector;
          switch (as) {
            case "style":
              key = getStyleKey(href);
              break;
            case "script":
              key = getScriptKey(href);
          }
          preloadPropsMap.has(key) ||
            ((href = assign(
              {
                rel: "preload",
                href:
                  "image" === as && options && options.imageSrcSet
                    ? void 0
                    : href,
                as: as
              },
              options
            )),
            preloadPropsMap.set(key, href),
            null !== ownerDocument.querySelector(preloadSelector) ||
              ("style" === as &&
                ownerDocument.querySelector(
                  getStylesheetSelectorFromKey(key)
                )) ||
              ("script" === as &&
                ownerDocument.querySelector(getScriptSelectorFromKey(key))) ||
              ((as = ownerDocument.createElement("link")),
              setInitialProperties(as, "link", href),
              markNodeAsHoistable(as),
              ownerDocument.head.appendChild(as)));
        }
      },
      m: function (href, options) {
        previousDispatcher.m(href, options);
        var ownerDocument = globalDocument;
        if (ownerDocument && href) {
          var as =
              options && "string" === typeof options.as ? options.as : "script",
            preloadSelector =
              'link[rel="modulepreload"][as="' +
              escapeSelectorAttributeValueInsideDoubleQuotes(as) +
              '"][href="' +
              escapeSelectorAttributeValueInsideDoubleQuotes(href) +
              '"]',
            key = preloadSelector;
          switch (as) {
            case "audioworklet":
            case "paintworklet":
            case "serviceworker":
            case "sharedworker":
            case "worker":
            case "script":
              key = getScriptKey(href);
          }
          if (
            !preloadPropsMap.has(key) &&
            ((href = assign({ rel: "modulepreload", href: href }, options)),
            preloadPropsMap.set(key, href),
            null === ownerDocument.querySelector(preloadSelector))
          ) {
            switch (as) {
              case "audioworklet":
              case "paintworklet":
              case "serviceworker":
              case "sharedworker":
              case "worker":
              case "script":
                if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
                  return;
            }
            as = ownerDocument.createElement("link");
            setInitialProperties(as, "link", href);
            markNodeAsHoistable(as);
            ownerDocument.head.appendChild(as);
          }
        }
      },
      X: function (src, options) {
        previousDispatcher.X(src, options);
        var ownerDocument = globalDocument;
        if (ownerDocument && src) {
          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
            key = getScriptKey(src),
            resource = scripts.get(key);
          resource ||
            ((resource = ownerDocument.querySelector(
              getScriptSelectorFromKey(key)
            )),
            resource ||
              ((src = assign({ src: src, async: !0 }, options)),
              (options = preloadPropsMap.get(key)) &&
                adoptPreloadPropsForScript(src, options),
              (resource = ownerDocument.createElement("script")),
              markNodeAsHoistable(resource),
              setInitialProperties(resource, "link", src),
              ownerDocument.head.appendChild(resource)),
            (resource = {
              type: "script",
              instance: resource,
              count: 1,
              state: null
            }),
            scripts.set(key, resource));
        }
      },
      S: function (href, precedence, options) {
        previousDispatcher.S(href, precedence, options);
        var ownerDocument = globalDocument;
        if (ownerDocument && href) {
          var styles = getResourcesFromRoot(ownerDocument).hoistableStyles,
            key = getStyleKey(href);
          precedence = precedence || "default";
          var resource = styles.get(key);
          if (!resource) {
            var state = { loading: NotLoaded, preload: null };
            if (
              (resource = ownerDocument.querySelector(
                getStylesheetSelectorFromKey(key)
              ))
            )
              state.loading = Loaded | Inserted;
            else {
              href = assign(
                {
                  rel: "stylesheet",
                  href: href,
                  "data-precedence": precedence
                },
                options
              );
              (options = preloadPropsMap.get(key)) &&
                adoptPreloadPropsForStylesheet(href, options);
              var link = (resource = ownerDocument.createElement("link"));
              markNodeAsHoistable(link);
              setInitialProperties(link, "link", href);
              link._p = new Promise(function (resolve, reject) {
                link.onload = resolve;
                link.onerror = reject;
              });
              link.addEventListener("load", function () {
                state.loading |= Loaded;
              });
              link.addEventListener("error", function () {
                state.loading |= Errored;
              });
              state.loading |= Inserted;
              insertStylesheet(resource, precedence, ownerDocument);
            }
            resource = {
              type: "stylesheet",
              instance: resource,
              count: 1,
              state: state
            };
            styles.set(key, resource);
          }
        }
      },
      M: function (src, options) {
        previousDispatcher.M(src, options);
        var ownerDocument = globalDocument;
        if (ownerDocument && src) {
          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
            key = getScriptKey(src),
            resource = scripts.get(key);
          resource ||
            ((resource = ownerDocument.querySelector(
              getScriptSelectorFromKey(key)
            )),
            resource ||
              ((src = assign({ src: src, async: !0, type: "module" }, options)),
              (options = preloadPropsMap.get(key)) &&
                adoptPreloadPropsForScript(src, options),
              (resource = ownerDocument.createElement("script")),
              markNodeAsHoistable(resource),
              setInitialProperties(resource, "link", src),
              ownerDocument.head.appendChild(resource)),
            (resource = {
              type: "script",
              instance: resource,
              count: 1,
              state: null
            }),
            scripts.set(key, resource));
        }
      }
    };
    var globalDocument = "undefined" === typeof document ? null : document,
      tagCaches = null,
      suspendedState = null,
      LAST_PRECEDENCE = null,
      precedencesByRoot = null,
      NotPendingTransition = NotPending,
      HostTransitionContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Provider: null,
        Consumer: null,
        _currentValue: NotPendingTransition,
        _currentValue2: NotPendingTransition,
        _threadCount: 0
      },
      badgeFormat = "%c%s%c ",
      badgeStyle =
        "background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px",
      resetStyle = "",
      pad = " ",
      bind = Function.prototype.bind;
    var didWarnAboutNestedUpdates = !1;
    var overrideHookState = null,
      overrideHookStateDeletePath = null,
      overrideHookStateRenamePath = null,
      overrideProps = null,
      overridePropsDeletePath = null,
      overridePropsRenamePath = null,
      scheduleUpdate = null,
      setErrorHandler = null,
      setSuspenseHandler = null;
    overrideHookState = function (fiber, id, path, value) {
      id = findHook(fiber, id);
      null !== id &&
        ((path = copyWithSetImpl(id.memoizedState, path, 0, value)),
        (id.memoizedState = path),
        (id.baseState = path),
        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
        (path = enqueueConcurrentRenderForLane(fiber, 2)),
        null !== path && scheduleUpdateOnFiber(path, fiber, 2));
    };
    overrideHookStateDeletePath = function (fiber, id, path) {
      id = findHook(fiber, id);
      null !== id &&
        ((path = copyWithDeleteImpl(id.memoizedState, path, 0)),
        (id.memoizedState = path),
        (id.baseState = path),
        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
        (path = enqueueConcurrentRenderForLane(fiber, 2)),
        null !== path && scheduleUpdateOnFiber(path, fiber, 2));
    };
    overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
      id = findHook(fiber, id);
      null !== id &&
        ((oldPath = copyWithRename(id.memoizedState, oldPath, newPath)),
        (id.memoizedState = oldPath),
        (id.baseState = oldPath),
        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
        (oldPath = enqueueConcurrentRenderForLane(fiber, 2)),
        null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2));
    };
    overrideProps = function (fiber, path, value) {
      fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
      path = enqueueConcurrentRenderForLane(fiber, 2);
      null !== path && scheduleUpdateOnFiber(path, fiber, 2);
    };
    overridePropsDeletePath = function (fiber, path) {
      fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
      path = enqueueConcurrentRenderForLane(fiber, 2);
      null !== path && scheduleUpdateOnFiber(path, fiber, 2);
    };
    overridePropsRenamePath = function (fiber, oldPath, newPath) {
      fiber.pendingProps = copyWithRename(
        fiber.memoizedProps,
        oldPath,
        newPath
      );
      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
      oldPath = enqueueConcurrentRenderForLane(fiber, 2);
      null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2);
    };
    scheduleUpdate = function (fiber) {
      var root = enqueueConcurrentRenderForLane(fiber, 2);
      null !== root && scheduleUpdateOnFiber(root, fiber, 2);
    };
    setErrorHandler = function (newShouldErrorImpl) {
      shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function (newShouldSuspendImpl) {
      shouldSuspendImpl = newShouldSuspendImpl;
    };
    var _enabled = !0,
      return_targetInst = null,
      hasScheduledReplayAttempt = !1,
      queuedFocus = null,
      queuedDrag = null,
      queuedMouse = null,
      queuedPointers = new Map(),
      queuedPointerCaptures = new Map(),
      queuedExplicitHydrationTargets = [],
      discreteReplayableEvents =
        "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
          " "
        ),
      lastScheduledReplayQueue = null;
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
      function (children) {
        var root = this._internalRoot;
        if (null === root) throw Error("Cannot update an unmounted root.");
        var args = arguments;
        "function" === typeof args[1]
          ? console.error(
              "does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
            )
          : isValidContainer(args[1])
            ? console.error(
                "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."
              )
            : "undefined" !== typeof args[1] &&
              console.error(
                "You passed a second argument to root.render(...) but it only accepts one argument."
              );
        args = children;
        var current = root.current,
          lane = requestUpdateLane(current);
        updateContainerImpl(current, lane, args, root, null, null);
      };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =
      function () {
        var args = arguments;
        "function" === typeof args[0] &&
          console.error(
            "does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
          );
        args = this._internalRoot;
        if (null !== args) {
          this._internalRoot = null;
          var container = args.containerInfo;
          (executionContext & (RenderContext | CommitContext)) !== NoContext &&
            console.error(
              "Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."
            );
          updateContainerImpl(args.current, 2, null, args, null, null);
          flushSyncWork$1();
          container[internalContainerInstanceKey] = null;
        }
      };
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (
      target
    ) {
      if (target) {
        var updatePriority = resolveUpdatePriority();
        target = { blockedOn: null, target: target, priority: updatePriority };
        for (
          var i = 0;
          i < queuedExplicitHydrationTargets.length &&
          0 !== updatePriority &&
          updatePriority < queuedExplicitHydrationTargets[i].priority;
          i++
        );
        queuedExplicitHydrationTargets.splice(i, 0, target);
        0 === i && attemptExplicitHydrationTarget(target);
      }
    };
    (function () {
      var isomorphicReactPackageVersion = React.version;
      if ("19.1.0" !== isomorphicReactPackageVersion)
        throw Error(
          'Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      ' +
            (isomorphicReactPackageVersion +
              "\n  - react-dom:  19.1.0\nLearn more: https://react.dev/warnings/version-mismatch")
        );
    })();
    ("function" === typeof Map &&
      null != Map.prototype &&
      "function" === typeof Map.prototype.forEach &&
      "function" === typeof Set &&
      null != Set.prototype &&
      "function" === typeof Set.prototype.clear &&
      "function" === typeof Set.prototype.forEach) ||
      console.error(
        "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"
      );
    ReactDOMSharedInternals.findDOMNode = function (componentOrElement) {
      var fiber = componentOrElement._reactInternals;
      if (void 0 === fiber) {
        if ("function" === typeof componentOrElement.render)
          throw Error("Unable to find node on an unmounted component.");
        componentOrElement = Object.keys(componentOrElement).join(",");
        throw Error(
          "Argument appears to not be a ReactComponent. Keys: " +
            componentOrElement
        );
      }
      componentOrElement = findCurrentFiberUsingSlowPath(fiber);
      componentOrElement =
        null !== componentOrElement
          ? findCurrentHostFiberImpl(componentOrElement)
          : null;
      componentOrElement =
        null === componentOrElement ? null : componentOrElement.stateNode;
      return componentOrElement;
    };
    if (
      !(function () {
        var internals = {
          bundleType: 1,
          version: "19.1.0",
          rendererPackageName: "react-dom",
          currentDispatcherRef: ReactSharedInternals,
          reconcilerVersion: "19.1.0"
        };
        internals.overrideHookState = overrideHookState;
        internals.overrideHookStateDeletePath = overrideHookStateDeletePath;
        internals.overrideHookStateRenamePath = overrideHookStateRenamePath;
        internals.overrideProps = overrideProps;
        internals.overridePropsDeletePath = overridePropsDeletePath;
        internals.overridePropsRenamePath = overridePropsRenamePath;
        internals.scheduleUpdate = scheduleUpdate;
        internals.setErrorHandler = setErrorHandler;
        internals.setSuspenseHandler = setSuspenseHandler;
        internals.scheduleRefresh = scheduleRefresh;
        internals.scheduleRoot = scheduleRoot;
        internals.setRefreshHandler = setRefreshHandler;
        internals.getCurrentFiber = getCurrentFiberForDevTools;
        internals.getLaneLabelMap = getLaneLabelMap;
        internals.injectProfilingHooks = injectProfilingHooks;
        return injectInternals(internals);
      })() &&
      canUseDOM &&
      window.top === window.self &&
      ((-1 < navigator.userAgent.indexOf("Chrome") &&
        -1 === navigator.userAgent.indexOf("Edge")) ||
        -1 < navigator.userAgent.indexOf("Firefox"))
    ) {
      var protocol = window.location.protocol;
      /^(https?|file):$/.test(protocol) &&
        console.info(
          "%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools" +
            ("file:" === protocol
              ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq"
              : ""),
          "font-weight:bold"
        );
    }
    exports.createRoot = function (container, options) {
      if (!isValidContainer(container))
        throw Error("Target container is not a DOM element.");
      warnIfReactDOMContainerInDEV(container);
      var isStrictMode = !1,
        identifierPrefix = "",
        onUncaughtError = defaultOnUncaughtError,
        onCaughtError = defaultOnCaughtError,
        onRecoverableError = defaultOnRecoverableError,
        transitionCallbacks = null;
      null !== options &&
        void 0 !== options &&
        (options.hydrate
          ? console.warn(
              "hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."
            )
          : "object" === typeof options &&
            null !== options &&
            options.$$typeof === REACT_ELEMENT_TYPE &&
            console.error(
              "You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"
            ),
        !0 === options.unstable_strictMode && (isStrictMode = !0),
        void 0 !== options.identifierPrefix &&
          (identifierPrefix = options.identifierPrefix),
        void 0 !== options.onUncaughtError &&
          (onUncaughtError = options.onUncaughtError),
        void 0 !== options.onCaughtError &&
          (onCaughtError = options.onCaughtError),
        void 0 !== options.onRecoverableError &&
          (onRecoverableError = options.onRecoverableError),
        void 0 !== options.unstable_transitionCallbacks &&
          (transitionCallbacks = options.unstable_transitionCallbacks));
      options = createFiberRoot(
        container,
        1,
        !1,
        null,
        null,
        isStrictMode,
        identifierPrefix,
        onUncaughtError,
        onCaughtError,
        onRecoverableError,
        transitionCallbacks,
        null
      );
      container[internalContainerInstanceKey] = options.current;
      listenToAllSupportedEvents(container);
      return new ReactDOMRoot(options);
    };
    exports.hydrateRoot = function (container, initialChildren, options) {
      if (!isValidContainer(container))
        throw Error("Target container is not a DOM element.");
      warnIfReactDOMContainerInDEV(container);
      void 0 === initialChildren &&
        console.error(
          "Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)"
        );
      var isStrictMode = !1,
        identifierPrefix = "",
        onUncaughtError = defaultOnUncaughtError,
        onCaughtError = defaultOnCaughtError,
        onRecoverableError = defaultOnRecoverableError,
        transitionCallbacks = null,
        formState = null;
      null !== options &&
        void 0 !== options &&
        (!0 === options.unstable_strictMode && (isStrictMode = !0),
        void 0 !== options.identifierPrefix &&
          (identifierPrefix = options.identifierPrefix),
        void 0 !== options.onUncaughtError &&
          (onUncaughtError = options.onUncaughtError),
        void 0 !== options.onCaughtError &&
          (onCaughtError = options.onCaughtError),
        void 0 !== options.onRecoverableError &&
          (onRecoverableError = options.onRecoverableError),
        void 0 !== options.unstable_transitionCallbacks &&
          (transitionCallbacks = options.unstable_transitionCallbacks),
        void 0 !== options.formState && (formState = options.formState));
      initialChildren = createFiberRoot(
        container,
        1,
        !0,
        initialChildren,
        null != options ? options : null,
        isStrictMode,
        identifierPrefix,
        onUncaughtError,
        onCaughtError,
        onRecoverableError,
        transitionCallbacks,
        formState
      );
      initialChildren.context = getContextForSubtree(null);
      options = initialChildren.current;
      isStrictMode = requestUpdateLane(options);
      isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
      identifierPrefix = createUpdate(isStrictMode);
      identifierPrefix.callback = null;
      enqueueUpdate(options, identifierPrefix, isStrictMode);
      options = isStrictMode;
      initialChildren.current.lanes = options;
      markRootUpdated$1(initialChildren, options);
      ensureRootIsScheduled(initialChildren);
      container[internalContainerInstanceKey] = initialChildren.current;
      listenToAllSupportedEvents(container);
      return new ReactDOMHydrationRoot(initialChildren);
    };
    exports.version = "19.1.0";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
      "function" ===
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();


/***/ }),

/***/ "./node_modules/react-dom/cjs/react-dom.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


 true &&
  (function () {
    function noop() {}
    function testStringCoercion(value) {
      return "" + value;
    }
    function createPortal$1(children, containerInfo, implementation) {
      var key =
        3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      try {
        testStringCoercion(key);
        var JSCompiler_inline_result = !1;
      } catch (e) {
        JSCompiler_inline_result = !0;
      }
      JSCompiler_inline_result &&
        (console.error(
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          ("function" === typeof Symbol &&
            Symbol.toStringTag &&
            key[Symbol.toStringTag]) ||
            key.constructor.name ||
            "Object"
        ),
        testStringCoercion(key));
      return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
      };
    }
    function getCrossOriginStringAs(as, input) {
      if ("font" === as) return "";
      if ("string" === typeof input)
        return "use-credentials" === input ? input : "";
    }
    function getValueDescriptorExpectingObjectForWarning(thing) {
      return null === thing
        ? "`null`"
        : void 0 === thing
          ? "`undefined`"
          : "" === thing
            ? "an empty string"
            : 'something with type "' + typeof thing + '"';
    }
    function getValueDescriptorExpectingEnumForWarning(thing) {
      return null === thing
        ? "`null`"
        : void 0 === thing
          ? "`undefined`"
          : "" === thing
            ? "an empty string"
            : "string" === typeof thing
              ? JSON.stringify(thing)
              : "number" === typeof thing
                ? "`" + thing + "`"
                : 'something with type "' + typeof thing + '"';
    }
    function resolveDispatcher() {
      var dispatcher = ReactSharedInternals.H;
      null === dispatcher &&
        console.error(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
      return dispatcher;
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
      "function" ===
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var React = __webpack_require__(/*! react */ "./node_modules/react/index.js"),
      Internals = {
        d: {
          f: noop,
          r: function () {
            throw Error(
              "Invalid form element. requestFormReset must be passed a form that was rendered by React."
            );
          },
          D: noop,
          C: noop,
          L: noop,
          m: noop,
          X: noop,
          S: noop,
          M: noop
        },
        p: 0,
        findDOMNode: null
      },
      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
      ReactSharedInternals =
        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    ("function" === typeof Map &&
      null != Map.prototype &&
      "function" === typeof Map.prototype.forEach &&
      "function" === typeof Set &&
      null != Set.prototype &&
      "function" === typeof Set.prototype.clear &&
      "function" === typeof Set.prototype.forEach) ||
      console.error(
        "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
      );
    exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
      Internals;
    exports.createPortal = function (children, container) {
      var key =
        2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (
        !container ||
        (1 !== container.nodeType &&
          9 !== container.nodeType &&
          11 !== container.nodeType)
      )
        throw Error("Target container is not a DOM element.");
      return createPortal$1(children, container, null, key);
    };
    exports.flushSync = function (fn) {
      var previousTransition = ReactSharedInternals.T,
        previousUpdatePriority = Internals.p;
      try {
        if (((ReactSharedInternals.T = null), (Internals.p = 2), fn))
          return fn();
      } finally {
        (ReactSharedInternals.T = previousTransition),
          (Internals.p = previousUpdatePriority),
          Internals.d.f() &&
            console.error(
              "flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."
            );
      }
    };
    exports.preconnect = function (href, options) {
      "string" === typeof href && href
        ? null != options && "object" !== typeof options
          ? console.error(
              "ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",
              getValueDescriptorExpectingEnumForWarning(options)
            )
          : null != options &&
            "string" !== typeof options.crossOrigin &&
            console.error(
              "ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",
              getValueDescriptorExpectingObjectForWarning(options.crossOrigin)
            )
        : console.error(
            "ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
            getValueDescriptorExpectingObjectForWarning(href)
          );
      "string" === typeof href &&
        (options
          ? ((options = options.crossOrigin),
            (options =
              "string" === typeof options
                ? "use-credentials" === options
                  ? options
                  : ""
                : void 0))
          : (options = null),
        Internals.d.C(href, options));
    };
    exports.prefetchDNS = function (href) {
      if ("string" !== typeof href || !href)
        console.error(
          "ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
          getValueDescriptorExpectingObjectForWarning(href)
        );
      else if (1 < arguments.length) {
        var options = arguments[1];
        "object" === typeof options && options.hasOwnProperty("crossOrigin")
          ? console.error(
              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
              getValueDescriptorExpectingEnumForWarning(options)
            )
          : console.error(
              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
              getValueDescriptorExpectingEnumForWarning(options)
            );
      }
      "string" === typeof href && Internals.d.D(href);
    };
    exports.preinit = function (href, options) {
      "string" === typeof href && href
        ? null == options || "object" !== typeof options
          ? console.error(
              "ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",
              getValueDescriptorExpectingEnumForWarning(options)
            )
          : "style" !== options.as &&
            "script" !== options.as &&
            console.error(
              'ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',
              getValueDescriptorExpectingEnumForWarning(options.as)
            )
        : console.error(
            "ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
            getValueDescriptorExpectingObjectForWarning(href)
          );
      if (
        "string" === typeof href &&
        options &&
        "string" === typeof options.as
      ) {
        var as = options.as,
          crossOrigin = getCrossOriginStringAs(as, options.crossOrigin),
          integrity =
            "string" === typeof options.integrity ? options.integrity : void 0,
          fetchPriority =
            "string" === typeof options.fetchPriority
              ? options.fetchPriority
              : void 0;
        "style" === as
          ? Internals.d.S(
              href,
              "string" === typeof options.precedence
                ? options.precedence
                : void 0,
              {
                crossOrigin: crossOrigin,
                integrity: integrity,
                fetchPriority: fetchPriority
              }
            )
          : "script" === as &&
            Internals.d.X(href, {
              crossOrigin: crossOrigin,
              integrity: integrity,
              fetchPriority: fetchPriority,
              nonce: "string" === typeof options.nonce ? options.nonce : void 0
            });
      }
    };
    exports.preinitModule = function (href, options) {
      var encountered = "";
      ("string" === typeof href && href) ||
        (encountered +=
          " The `href` argument encountered was " +
          getValueDescriptorExpectingObjectForWarning(href) +
          ".");
      void 0 !== options && "object" !== typeof options
        ? (encountered +=
            " The `options` argument encountered was " +
            getValueDescriptorExpectingObjectForWarning(options) +
            ".")
        : options &&
          "as" in options &&
          "script" !== options.as &&
          (encountered +=
            " The `as` option encountered was " +
            getValueDescriptorExpectingEnumForWarning(options.as) +
            ".");
      if (encountered)
        console.error(
          "ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",
          encountered
        );
      else
        switch (
          ((encountered =
            options && "string" === typeof options.as ? options.as : "script"),
          encountered)
        ) {
          case "script":
            break;
          default:
            (encountered =
              getValueDescriptorExpectingEnumForWarning(encountered)),
              console.error(
                'ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',
                encountered,
                href
              );
        }
      if ("string" === typeof href)
        if ("object" === typeof options && null !== options) {
          if (null == options.as || "script" === options.as)
            (encountered = getCrossOriginStringAs(
              options.as,
              options.crossOrigin
            )),
              Internals.d.M(href, {
                crossOrigin: encountered,
                integrity:
                  "string" === typeof options.integrity
                    ? options.integrity
                    : void 0,
                nonce:
                  "string" === typeof options.nonce ? options.nonce : void 0
              });
        } else null == options && Internals.d.M(href);
    };
    exports.preload = function (href, options) {
      var encountered = "";
      ("string" === typeof href && href) ||
        (encountered +=
          " The `href` argument encountered was " +
          getValueDescriptorExpectingObjectForWarning(href) +
          ".");
      null == options || "object" !== typeof options
        ? (encountered +=
            " The `options` argument encountered was " +
            getValueDescriptorExpectingObjectForWarning(options) +
            ".")
        : ("string" === typeof options.as && options.as) ||
          (encountered +=
            " The `as` option encountered was " +
            getValueDescriptorExpectingObjectForWarning(options.as) +
            ".");
      encountered &&
        console.error(
          'ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',
          encountered
        );
      if (
        "string" === typeof href &&
        "object" === typeof options &&
        null !== options &&
        "string" === typeof options.as
      ) {
        encountered = options.as;
        var crossOrigin = getCrossOriginStringAs(
          encountered,
          options.crossOrigin
        );
        Internals.d.L(href, encountered, {
          crossOrigin: crossOrigin,
          integrity:
            "string" === typeof options.integrity ? options.integrity : void 0,
          nonce: "string" === typeof options.nonce ? options.nonce : void 0,
          type: "string" === typeof options.type ? options.type : void 0,
          fetchPriority:
            "string" === typeof options.fetchPriority
              ? options.fetchPriority
              : void 0,
          referrerPolicy:
            "string" === typeof options.referrerPolicy
              ? options.referrerPolicy
              : void 0,
          imageSrcSet:
            "string" === typeof options.imageSrcSet
              ? options.imageSrcSet
              : void 0,
          imageSizes:
            "string" === typeof options.imageSizes
              ? options.imageSizes
              : void 0,
          media: "string" === typeof options.media ? options.media : void 0
        });
      }
    };
    exports.preloadModule = function (href, options) {
      var encountered = "";
      ("string" === typeof href && href) ||
        (encountered +=
          " The `href` argument encountered was " +
          getValueDescriptorExpectingObjectForWarning(href) +
          ".");
      void 0 !== options && "object" !== typeof options
        ? (encountered +=
            " The `options` argument encountered was " +
            getValueDescriptorExpectingObjectForWarning(options) +
            ".")
        : options &&
          "as" in options &&
          "string" !== typeof options.as &&
          (encountered +=
            " The `as` option encountered was " +
            getValueDescriptorExpectingObjectForWarning(options.as) +
            ".");
      encountered &&
        console.error(
          'ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',
          encountered
        );
      "string" === typeof href &&
        (options
          ? ((encountered = getCrossOriginStringAs(
              options.as,
              options.crossOrigin
            )),
            Internals.d.m(href, {
              as:
                "string" === typeof options.as && "script" !== options.as
                  ? options.as
                  : void 0,
              crossOrigin: encountered,
              integrity:
                "string" === typeof options.integrity
                  ? options.integrity
                  : void 0
            }))
          : Internals.d.m(href));
    };
    exports.requestFormReset = function (form) {
      Internals.d.r(form);
    };
    exports.unstable_batchedUpdates = function (fn, a) {
      return fn(a);
    };
    exports.useFormState = function (action, initialState, permalink) {
      return resolveDispatcher().useFormState(action, initialState, permalink);
    };
    exports.useFormStatus = function () {
      return resolveDispatcher().useHostTransitionStatus();
    };
    exports.version = "19.1.0";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
      "function" ===
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();


/***/ }),

/***/ "./node_modules/react-dom/client.js":
/*!******************************************!*\
  !*** ./node_modules/react-dom/client.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  // removed by dead control flow
{}
}

if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/react-dom-client.development.js */ "./node_modules/react-dom/cjs/react-dom-client.development.js");
}


/***/ }),

/***/ "./node_modules/react-dom/index.js":
/*!*****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  // removed by dead control flow
{}
}

if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ "./node_modules/react-dom/cjs/react-dom.development.js");
}


/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/Draggable.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/Draggable.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "DraggableCore", ({
  enumerable: true,
  get: function () {
    return _DraggableCore.default;
  }
}));
exports["default"] = void 0;
var React = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));
var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));
var _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js"));
var _clsx = _interopRequireDefault(__webpack_require__(/*! clsx */ "./node_modules/clsx/dist/clsx.m.js"));
var _domFns = __webpack_require__(/*! ./utils/domFns */ "./node_modules/react-draggable/build/cjs/utils/domFns.js");
var _positionFns = __webpack_require__(/*! ./utils/positionFns */ "./node_modules/react-draggable/build/cjs/utils/positionFns.js");
var _shims = __webpack_require__(/*! ./utils/shims */ "./node_modules/react-draggable/build/cjs/utils/shims.js");
var _DraggableCore = _interopRequireDefault(__webpack_require__(/*! ./DraggableCore */ "./node_modules/react-draggable/build/cjs/DraggableCore.js"));
var _log = _interopRequireDefault(__webpack_require__(/*! ./utils/log */ "./node_modules/react-draggable/build/cjs/utils/log.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*:: import type {ControlPosition, PositionOffsetControlPosition, DraggableCoreProps, DraggableCoreDefaultProps} from './DraggableCore';*/
/*:: import type {Bounds, DraggableEventHandler} from './utils/types';*/
/*:: import type {Element as ReactElement} from 'react';*/
/*:: type DraggableState = {
  dragging: boolean,
  dragged: boolean,
  x: number, y: number,
  slackX: number, slackY: number,
  isElementSVG: boolean,
  prevPropsPosition: ?ControlPosition,
};*/
/*:: export type DraggableDefaultProps = {
  ...DraggableCoreDefaultProps,
  axis: 'both' | 'x' | 'y' | 'none',
  bounds: Bounds | string | false,
  defaultClassName: string,
  defaultClassNameDragging: string,
  defaultClassNameDragged: string,
  defaultPosition: ControlPosition,
  scale: number,
};*/
/*:: export type DraggableProps = {
  ...DraggableCoreProps,
  ...DraggableDefaultProps,
  positionOffset: PositionOffsetControlPosition,
  position: ControlPosition,
};*/
//
// Define <Draggable>
//
class Draggable extends React.Component /*:: <DraggableProps, DraggableState>*/{
  // React 16.3+
  // Arity (props, state)
  static getDerivedStateFromProps(_ref /*:: */, _ref2 /*:: */) /*: ?Partial<DraggableState>*/{
    let {
      position
    } /*: DraggableProps*/ = _ref /*: DraggableProps*/;
    let {
      prevPropsPosition
    } /*: DraggableState*/ = _ref2 /*: DraggableState*/;
    // Set x/y if a new position is provided in props that is different than the previous.
    if (position && (!prevPropsPosition || position.x !== prevPropsPosition.x || position.y !== prevPropsPosition.y)) {
      (0, _log.default)('Draggable: getDerivedStateFromProps %j', {
        position,
        prevPropsPosition
      });
      return {
        x: position.x,
        y: position.y,
        prevPropsPosition: {
          ...position
        }
      };
    }
    return null;
  }
  constructor(props /*: DraggableProps*/) {
    super(props);
    _defineProperty(this, "onDragStart", (e, coreData) => {
      (0, _log.default)('Draggable: onDragStart: %j', coreData);

      // Short-circuit if user's callback killed it.
      const shouldStart = this.props.onStart(e, (0, _positionFns.createDraggableData)(this, coreData));
      // Kills start event on core as well, so move handlers are never bound.
      if (shouldStart === false) return false;
      this.setState({
        dragging: true,
        dragged: true
      });
    });
    _defineProperty(this, "onDrag", (e, coreData) => {
      if (!this.state.dragging) return false;
      (0, _log.default)('Draggable: onDrag: %j', coreData);
      const uiData = (0, _positionFns.createDraggableData)(this, coreData);
      const newState = {
        x: uiData.x,
        y: uiData.y,
        slackX: 0,
        slackY: 0
      };

      // Keep within bounds.
      if (this.props.bounds) {
        // Save original x and y.
        const {
          x,
          y
        } = newState;

        // Add slack to the values used to calculate bound position. This will ensure that if
        // we start removing slack, the element won't react to it right away until it's been
        // completely removed.
        newState.x += this.state.slackX;
        newState.y += this.state.slackY;

        // Get bound position. This will ceil/floor the x and y within the boundaries.
        const [newStateX, newStateY] = (0, _positionFns.getBoundPosition)(this, newState.x, newState.y);
        newState.x = newStateX;
        newState.y = newStateY;

        // Recalculate slack by noting how much was shaved by the boundPosition handler.
        newState.slackX = this.state.slackX + (x - newState.x);
        newState.slackY = this.state.slackY + (y - newState.y);

        // Update the event we fire to reflect what really happened after bounds took effect.
        uiData.x = newState.x;
        uiData.y = newState.y;
        uiData.deltaX = newState.x - this.state.x;
        uiData.deltaY = newState.y - this.state.y;
      }

      // Short-circuit if user's callback killed it.
      const shouldUpdate = this.props.onDrag(e, uiData);
      if (shouldUpdate === false) return false;
      this.setState(newState);
    });
    _defineProperty(this, "onDragStop", (e, coreData) => {
      if (!this.state.dragging) return false;

      // Short-circuit if user's callback killed it.
      const shouldContinue = this.props.onStop(e, (0, _positionFns.createDraggableData)(this, coreData));
      if (shouldContinue === false) return false;
      (0, _log.default)('Draggable: onDragStop: %j', coreData);
      const newState /*: Partial<DraggableState>*/ = {
        dragging: false,
        slackX: 0,
        slackY: 0
      };

      // If this is a controlled component, the result of this operation will be to
      // revert back to the old position. We expect a handler on `onDragStop`, at the least.
      const controlled = Boolean(this.props.position);
      if (controlled) {
        const {
          x,
          y
        } = this.props.position;
        newState.x = x;
        newState.y = y;
      }
      this.setState(newState);
    });
    this.state = {
      // Whether or not we are currently dragging.
      dragging: false,
      // Whether or not we have been dragged before.
      dragged: false,
      // Current transform x and y.
      x: props.position ? props.position.x : props.defaultPosition.x,
      y: props.position ? props.position.y : props.defaultPosition.y,
      prevPropsPosition: {
        ...props.position
      },
      // Used for compensating for out-of-bounds drags
      slackX: 0,
      slackY: 0,
      // Can only determine if SVG after mounting
      isElementSVG: false
    };
    if (props.position && !(props.onDrag || props.onStop)) {
      // eslint-disable-next-line no-console
      console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' + 'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' + '`position` of this element.');
    }
  }
  componentDidMount() {
    // Check to see if the element passed is an instanceof SVGElement
    if (typeof window.SVGElement !== 'undefined' && this.findDOMNode() instanceof window.SVGElement) {
      this.setState({
        isElementSVG: true
      });
    }
  }
  componentWillUnmount() {
    this.setState({
      dragging: false
    }); // prevents invariant if unmounted while dragging
  }

  // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
  // the underlying DOM node ourselves. See the README for more information.
  findDOMNode() /*: ?HTMLElement*/{
    var _this$props$nodeRef$c, _this$props;
    return (_this$props$nodeRef$c = (_this$props = this.props) === null || _this$props === void 0 || (_this$props = _this$props.nodeRef) === null || _this$props === void 0 ? void 0 : _this$props.current) !== null && _this$props$nodeRef$c !== void 0 ? _this$props$nodeRef$c : _reactDom.default.findDOMNode(this);
  }
  render() /*: ReactElement<any>*/{
    const {
      axis,
      bounds,
      children,
      defaultPosition,
      defaultClassName,
      defaultClassNameDragging,
      defaultClassNameDragged,
      position,
      positionOffset,
      scale,
      ...draggableCoreProps
    } = this.props;
    let style = {};
    let svgTransform = null;

    // If this is controlled, we don't want to move it - unless it's dragging.
    const controlled = Boolean(position);
    const draggable = !controlled || this.state.dragging;
    const validPosition = position || defaultPosition;
    const transformOpts = {
      // Set left if horizontal drag is enabled
      x: (0, _positionFns.canDragX)(this) && draggable ? this.state.x : validPosition.x,
      // Set top if vertical drag is enabled
      y: (0, _positionFns.canDragY)(this) && draggable ? this.state.y : validPosition.y
    };

    // If this element was SVG, we use the `transform` attribute.
    if (this.state.isElementSVG) {
      svgTransform = (0, _domFns.createSVGTransform)(transformOpts, positionOffset);
    } else {
      // Add a CSS transform to move the element around. This allows us to move the element around
      // without worrying about whether or not it is relatively or absolutely positioned.
      // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>
      // has a clean slate.
      style = (0, _domFns.createCSSTransform)(transformOpts, positionOffset);
    }

    // Mark with class while dragging
    const className = (0, _clsx.default)(children.props.className || '', defaultClassName, {
      [defaultClassNameDragging]: this.state.dragging,
      [defaultClassNameDragged]: this.state.dragged
    });

    // Reuse the child provided
    // This makes it flexible to use whatever element is wanted (div, ul, etc)
    return /*#__PURE__*/React.createElement(_DraggableCore.default, _extends({}, draggableCoreProps, {
      onStart: this.onDragStart,
      onDrag: this.onDrag,
      onStop: this.onDragStop
    }), /*#__PURE__*/React.cloneElement(React.Children.only(children), {
      className: className,
      style: {
        ...children.props.style,
        ...style
      },
      transform: svgTransform
    }));
  }
}
exports["default"] = Draggable;
_defineProperty(Draggable, "displayName", 'Draggable');
_defineProperty(Draggable, "propTypes", {
  // Accepts all props <DraggableCore> accepts.
  ..._DraggableCore.default.propTypes,
  /**
   * `axis` determines which axis the draggable can move.
   *
   *  Note that all callbacks will still return data as normal. This only
   *  controls flushing to the DOM.
   *
   * 'both' allows movement horizontally and vertically.
   * 'x' limits movement to horizontal axis.
   * 'y' limits movement to vertical axis.
   * 'none' limits all movement.
   *
   * Defaults to 'both'.
   */
  axis: _propTypes.default.oneOf(['both', 'x', 'y', 'none']),
  /**
   * `bounds` determines the range of movement available to the element.
   * Available values are:
   *
   * 'parent' restricts movement within the Draggable's parent node.
   *
   * Alternatively, pass an object with the following properties, all of which are optional:
   *
   * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
   *
   * All values are in px.
   *
   * Example:
   *
   * ```jsx
   *   let App = React.createClass({
   *       render: function () {
   *         return (
   *            <Draggable bounds={{right: 300, bottom: 300}}>
   *              <div>Content</div>
   *           </Draggable>
   *         );
   *       }
   *   });
   * ```
   */
  bounds: _propTypes.default.oneOfType([_propTypes.default.shape({
    left: _propTypes.default.number,
    right: _propTypes.default.number,
    top: _propTypes.default.number,
    bottom: _propTypes.default.number
  }), _propTypes.default.string, _propTypes.default.oneOf([false])]),
  defaultClassName: _propTypes.default.string,
  defaultClassNameDragging: _propTypes.default.string,
  defaultClassNameDragged: _propTypes.default.string,
  /**
   * `defaultPosition` specifies the x and y that the dragged item should start at
   *
   * Example:
   *
   * ```jsx
   *      let App = React.createClass({
   *          render: function () {
   *              return (
   *                  <Draggable defaultPosition={{x: 25, y: 25}}>
   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
   *                  </Draggable>
   *              );
   *          }
   *      });
   * ```
   */
  defaultPosition: _propTypes.default.shape({
    x: _propTypes.default.number,
    y: _propTypes.default.number
  }),
  positionOffset: _propTypes.default.shape({
    x: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    y: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
  }),
  /**
   * `position`, if present, defines the current position of the element.
   *
   *  This is similar to how form elements in React work - if no `position` is supplied, the component
   *  is uncontrolled.
   *
   * Example:
   *
   * ```jsx
   *      let App = React.createClass({
   *          render: function () {
   *              return (
   *                  <Draggable position={{x: 25, y: 25}}>
   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
   *                  </Draggable>
   *              );
   *          }
   *      });
   * ```
   */
  position: _propTypes.default.shape({
    x: _propTypes.default.number,
    y: _propTypes.default.number
  }),
  /**
   * These properties should be defined on the child, not here.
   */
  className: _shims.dontSetMe,
  style: _shims.dontSetMe,
  transform: _shims.dontSetMe
});
_defineProperty(Draggable, "defaultProps", {
  ..._DraggableCore.default.defaultProps,
  axis: 'both',
  bounds: false,
  defaultClassName: 'react-draggable',
  defaultClassNameDragging: 'react-draggable-dragging',
  defaultClassNameDragged: 'react-draggable-dragged',
  defaultPosition: {
    x: 0,
    y: 0
  },
  scale: 1
});

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/DraggableCore.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/DraggableCore.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var React = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));
var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));
var _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js"));
var _domFns = __webpack_require__(/*! ./utils/domFns */ "./node_modules/react-draggable/build/cjs/utils/domFns.js");
var _positionFns = __webpack_require__(/*! ./utils/positionFns */ "./node_modules/react-draggable/build/cjs/utils/positionFns.js");
var _shims = __webpack_require__(/*! ./utils/shims */ "./node_modules/react-draggable/build/cjs/utils/shims.js");
var _log = _interopRequireDefault(__webpack_require__(/*! ./utils/log */ "./node_modules/react-draggable/build/cjs/utils/log.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/*:: import type {EventHandler, MouseTouchEvent} from './utils/types';*/
/*:: import type {Element as ReactElement} from 'react';*/
// Simple abstraction for dragging events names.
const eventsFor = {
  touch: {
    start: 'touchstart',
    move: 'touchmove',
    stop: 'touchend'
  },
  mouse: {
    start: 'mousedown',
    move: 'mousemove',
    stop: 'mouseup'
  }
};

// Default to mouse events.
let dragEventFor = eventsFor.mouse;
/*:: export type DraggableData = {
  node: HTMLElement,
  x: number, y: number,
  deltaX: number, deltaY: number,
  lastX: number, lastY: number,
};*/
/*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void | false;*/
/*:: export type ControlPosition = {x: number, y: number};*/
/*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/
/*:: export type DraggableCoreDefaultProps = {
  allowAnyClick: boolean,
  disabled: boolean,
  enableUserSelectHack: boolean,
  onStart: DraggableEventHandler,
  onDrag: DraggableEventHandler,
  onStop: DraggableEventHandler,
  onMouseDown: (e: MouseEvent) => void,
  scale: number,
};*/
/*:: export type DraggableCoreProps = {
  ...DraggableCoreDefaultProps,
  cancel: string,
  children: ReactElement<any>,
  offsetParent: HTMLElement,
  grid: [number, number],
  handle: string,
  nodeRef?: ?React.ElementRef<any>,
};*/
//
// Define <DraggableCore>.
//
// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can
// work well with libraries that require more control over the element.
//

class DraggableCore extends React.Component /*:: <DraggableCoreProps>*/{
  constructor() {
    super(...arguments);
    _defineProperty(this, "dragging", false);
    // Used while dragging to determine deltas.
    _defineProperty(this, "lastX", NaN);
    _defineProperty(this, "lastY", NaN);
    _defineProperty(this, "touchIdentifier", null);
    _defineProperty(this, "mounted", false);
    _defineProperty(this, "handleDragStart", e => {
      // Make it possible to attach event handlers on top of this one.
      this.props.onMouseDown(e);

      // Only accept left-clicks.
      if (!this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false;

      // Get nodes. Be sure to grab relative document (could be iframed)
      const thisNode = this.findDOMNode();
      if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {
        throw new Error('<DraggableCore> not mounted on DragStart!');
      }
      const {
        ownerDocument
      } = thisNode;

      // Short circuit if handle or cancel prop was provided and selector doesn't match.
      if (this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.handle, thisNode) || this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.cancel, thisNode)) {
        return;
      }

      // Prevent scrolling on mobile devices, like ipad/iphone.
      // Important that this is after handle/cancel.
      if (e.type === 'touchstart') e.preventDefault();

      // Set touch identifier in component state if this is a touch event. This allows us to
      // distinguish between individual touches on multitouch screens by identifying which
      // touchpoint was set to this element.
      const touchIdentifier = (0, _domFns.getTouchIdentifier)(e);
      this.touchIdentifier = touchIdentifier;

      // Get the current drag point from the event. This is used as the offset.
      const position = (0, _positionFns.getControlPosition)(e, touchIdentifier, this);
      if (position == null) return; // not possible but satisfies flow
      const {
        x,
        y
      } = position;

      // Create an event object with all the data parents need to make a decision here.
      const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
      (0, _log.default)('DraggableCore: handleDragStart: %j', coreEvent);

      // Call event handler. If it returns explicit false, cancel.
      (0, _log.default)('calling', this.props.onStart);
      const shouldUpdate = this.props.onStart(e, coreEvent);
      if (shouldUpdate === false || this.mounted === false) return;

      // Add a style to the body to disable user-select. This prevents text from
      // being selected all over the page.
      if (this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument);

      // Initiate dragging. Set the current x and y as offsets
      // so we know how much we've moved during the drag. This allows us
      // to drag elements around even if they have been moved, without issue.
      this.dragging = true;
      this.lastX = x;
      this.lastY = y;

      // Add events to the document directly so we catch when the user's mouse/touch moves outside of
      // this element. We use different events depending on whether or not we have detected that this
      // is a touch-capable device.
      (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, this.handleDrag);
      (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, this.handleDragStop);
    });
    _defineProperty(this, "handleDrag", e => {
      // Get the current drag point from the event. This is used as the offset.
      const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);
      if (position == null) return;
      let {
        x,
        y
      } = position;

      // Snap to grid if prop has been provided
      if (Array.isArray(this.props.grid)) {
        let deltaX = x - this.lastX,
          deltaY = y - this.lastY;
        [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);
        if (!deltaX && !deltaY) return; // skip useless drag
        x = this.lastX + deltaX, y = this.lastY + deltaY;
      }
      const coreEvent = (0, _positionFns.createCoreData)(this, x, y);
      (0, _log.default)('DraggableCore: handleDrag: %j', coreEvent);

      // Call event handler. If it returns explicit false, trigger end.
      const shouldUpdate = this.props.onDrag(e, coreEvent);
      if (shouldUpdate === false || this.mounted === false) {
        try {
          // $FlowIgnore
          this.handleDragStop(new MouseEvent('mouseup'));
        } catch (err) {
          // Old browsers
          const event = ((document.createEvent('MouseEvents') /*: any*/) /*: MouseTouchEvent*/);
          // I see why this insanity was deprecated
          // $FlowIgnore
          event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
          this.handleDragStop(event);
        }
        return;
      }
      this.lastX = x;
      this.lastY = y;
    });
    _defineProperty(this, "handleDragStop", e => {
      if (!this.dragging) return;
      const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);
      if (position == null) return;
      let {
        x,
        y
      } = position;

      // Snap to grid if prop has been provided
      if (Array.isArray(this.props.grid)) {
        let deltaX = x - this.lastX || 0;
        let deltaY = y - this.lastY || 0;
        [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);
        x = this.lastX + deltaX, y = this.lastY + deltaY;
      }
      const coreEvent = (0, _positionFns.createCoreData)(this, x, y);

      // Call event handler
      const shouldContinue = this.props.onStop(e, coreEvent);
      if (shouldContinue === false || this.mounted === false) return false;
      const thisNode = this.findDOMNode();
      if (thisNode) {
        // Remove user-select hack
        if (this.props.enableUserSelectHack) (0, _domFns.removeUserSelectStyles)(thisNode.ownerDocument);
      }
      (0, _log.default)('DraggableCore: handleDragStop: %j', coreEvent);

      // Reset the el.
      this.dragging = false;
      this.lastX = NaN;
      this.lastY = NaN;
      if (thisNode) {
        // Remove event handlers
        (0, _log.default)('DraggableCore: Removing handlers');
        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, this.handleDrag);
        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, this.handleDragStop);
      }
    });
    _defineProperty(this, "onMouseDown", e => {
      dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse

      return this.handleDragStart(e);
    });
    _defineProperty(this, "onMouseUp", e => {
      dragEventFor = eventsFor.mouse;
      return this.handleDragStop(e);
    });
    // Same as onMouseDown (start drag), but now consider this a touch device.
    _defineProperty(this, "onTouchStart", e => {
      // We're on a touch device now, so change the event handlers
      dragEventFor = eventsFor.touch;
      return this.handleDragStart(e);
    });
    _defineProperty(this, "onTouchEnd", e => {
      // We're on a touch device now, so change the event handlers
      dragEventFor = eventsFor.touch;
      return this.handleDragStop(e);
    });
  }
  componentDidMount() {
    this.mounted = true;
    // Touch handlers must be added with {passive: false} to be cancelable.
    // https://developers.google.com/web/updates/2017/01/scrolling-intervention
    const thisNode = this.findDOMNode();
    if (thisNode) {
      (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
        passive: false
      });
    }
  }
  componentWillUnmount() {
    this.mounted = false;
    // Remove any leftover event handlers. Remove both touch and mouse handlers in case
    // some browser quirk caused a touch event to fire during a mouse move, or vice versa.
    const thisNode = this.findDOMNode();
    if (thisNode) {
      const {
        ownerDocument
      } = thisNode;
      (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);
      (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);
      (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
      (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
      (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
        passive: false
      });
      if (this.props.enableUserSelectHack) (0, _domFns.removeUserSelectStyles)(ownerDocument);
    }
  }

  // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
  // the underlying DOM node ourselves. See the README for more information.
  findDOMNode() /*: ?HTMLElement*/{
    var _this$props, _this$props2;
    return (_this$props = this.props) !== null && _this$props !== void 0 && _this$props.nodeRef ? (_this$props2 = this.props) === null || _this$props2 === void 0 || (_this$props2 = _this$props2.nodeRef) === null || _this$props2 === void 0 ? void 0 : _this$props2.current : _reactDom.default.findDOMNode(this);
  }
  render() /*: React.Element<any>*/{
    // Reuse the child provided
    // This makes it flexible to use whatever element is wanted (div, ul, etc)
    return /*#__PURE__*/React.cloneElement(React.Children.only(this.props.children), {
      // Note: mouseMove handler is attached to document so it will still function
      // when the user drags quickly and leaves the bounds of the element.
      onMouseDown: this.onMouseDown,
      onMouseUp: this.onMouseUp,
      // onTouchStart is added on `componentDidMount` so they can be added with
      // {passive: false}, which allows it to cancel. See
      // https://developers.google.com/web/updates/2017/01/scrolling-intervention
      onTouchEnd: this.onTouchEnd
    });
  }
}
exports["default"] = DraggableCore;
_defineProperty(DraggableCore, "displayName", 'DraggableCore');
_defineProperty(DraggableCore, "propTypes", {
  /**
   * `allowAnyClick` allows dragging using any mouse button.
   * By default, we only accept the left button.
   *
   * Defaults to `false`.
   */
  allowAnyClick: _propTypes.default.bool,
  children: _propTypes.default.node.isRequired,
  /**
   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
   * with the exception of `onMouseDown`, will not fire.
   */
  disabled: _propTypes.default.bool,
  /**
   * By default, we add 'user-select:none' attributes to the document body
   * to prevent ugly text selection during drag. If this is causing problems
   * for your app, set this to `false`.
   */
  enableUserSelectHack: _propTypes.default.bool,
  /**
   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
   * instead of using the parent node.
   */
  offsetParent: function (props /*: DraggableCoreProps*/, propName /*: $Keys<DraggableCoreProps>*/) {
    if (props[propName] && props[propName].nodeType !== 1) {
      throw new Error('Draggable\'s offsetParent must be a DOM Node.');
    }
  },
  /**
   * `grid` specifies the x and y that dragging should snap to.
   */
  grid: _propTypes.default.arrayOf(_propTypes.default.number),
  /**
   * `handle` specifies a selector to be used as the handle that initiates drag.
   *
   * Example:
   *
   * ```jsx
   *   let App = React.createClass({
   *       render: function () {
   *         return (
   *            <Draggable handle=".handle">
   *              <div>
   *                  <div className="handle">Click me to drag</div>
   *                  <div>This is some other content</div>
   *              </div>
   *           </Draggable>
   *         );
   *       }
   *   });
   * ```
   */
  handle: _propTypes.default.string,
  /**
   * `cancel` specifies a selector to be used to prevent drag initialization.
   *
   * Example:
   *
   * ```jsx
   *   let App = React.createClass({
   *       render: function () {
   *           return(
   *               <Draggable cancel=".cancel">
   *                   <div>
   *                     <div className="cancel">You can't drag from here</div>
   *                     <div>Dragging here works fine</div>
   *                   </div>
   *               </Draggable>
   *           );
   *       }
   *   });
   * ```
   */
  cancel: _propTypes.default.string,
  /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.
   * Unfortunately, in order for <Draggable> to work properly, we need raw access
   * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`
   * as in this example:
   *
   * function MyComponent() {
   *   const nodeRef = React.useRef(null);
   *   return (
   *     <Draggable nodeRef={nodeRef}>
   *       <div ref={nodeRef}>Example Target</div>
   *     </Draggable>
   *   );
   * }
   *
   * This can be used for arbitrarily nested components, so long as the ref ends up
   * pointing to the actual child DOM node and not a custom component.
   */
  nodeRef: _propTypes.default.object,
  /**
   * Called when dragging starts.
   * If this function returns the boolean false, dragging will be canceled.
   */
  onStart: _propTypes.default.func,
  /**
   * Called while dragging.
   * If this function returns the boolean false, dragging will be canceled.
   */
  onDrag: _propTypes.default.func,
  /**
   * Called when dragging stops.
   * If this function returns the boolean false, the drag will remain active.
   */
  onStop: _propTypes.default.func,
  /**
   * A workaround option which can be passed if onMouseDown needs to be accessed,
   * since it'll always be blocked (as there is internal use of onMouseDown)
   */
  onMouseDown: _propTypes.default.func,
  /**
   * `scale`, if set, applies scaling while dragging an element
   */
  scale: _propTypes.default.number,
  /**
   * These properties should be defined on the child, not here.
   */
  className: _shims.dontSetMe,
  style: _shims.dontSetMe,
  transform: _shims.dontSetMe
});
_defineProperty(DraggableCore, "defaultProps", {
  allowAnyClick: false,
  // by default only accept left click
  disabled: false,
  enableUserSelectHack: true,
  onStart: function () {},
  onDrag: function () {},
  onStop: function () {},
  onMouseDown: function () {},
  scale: 1
});

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/cjs.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/cjs.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  default: Draggable,
  DraggableCore
} = __webpack_require__(/*! ./Draggable */ "./node_modules/react-draggable/build/cjs/Draggable.js");

// Previous versions of this lib exported <Draggable> as the root export. As to no-// them, or TypeScript, we export *both* as the root and as 'default'.
// See https://github.com/mzabriskie/react-draggable/pull/254
// and https://github.com/mzabriskie/react-draggable/issues/266
module.exports = Draggable;
module.exports["default"] = Draggable;
module.exports.DraggableCore = DraggableCore;

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/utils/domFns.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/domFns.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.addClassName = addClassName;
exports.addEvent = addEvent;
exports.addUserSelectStyles = addUserSelectStyles;
exports.createCSSTransform = createCSSTransform;
exports.createSVGTransform = createSVGTransform;
exports.getTouch = getTouch;
exports.getTouchIdentifier = getTouchIdentifier;
exports.getTranslation = getTranslation;
exports.innerHeight = innerHeight;
exports.innerWidth = innerWidth;
exports.matchesSelector = matchesSelector;
exports.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;
exports.offsetXYFromParent = offsetXYFromParent;
exports.outerHeight = outerHeight;
exports.outerWidth = outerWidth;
exports.removeClassName = removeClassName;
exports.removeEvent = removeEvent;
exports.removeUserSelectStyles = removeUserSelectStyles;
var _shims = __webpack_require__(/*! ./shims */ "./node_modules/react-draggable/build/cjs/utils/shims.js");
var _getPrefix = _interopRequireWildcard(__webpack_require__(/*! ./getPrefix */ "./node_modules/react-draggable/build/cjs/utils/getPrefix.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*:: import type {ControlPosition, PositionOffsetControlPosition, MouseTouchEvent} from './types';*/
let matchesSelectorFunc = '';
function matchesSelector(el /*: Node*/, selector /*: string*/) /*: boolean*/{
  if (!matchesSelectorFunc) {
    matchesSelectorFunc = (0, _shims.findInArray)(['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'], function (method) {
      // $FlowIgnore: Doesn't think elements are indexable
      return (0, _shims.isFunction)(el[method]);
    });
  }

  // Might not be found entirely (not an Element?) - in that case, bail
  // $FlowIgnore: Doesn't think elements are indexable
  if (!(0, _shims.isFunction)(el[matchesSelectorFunc])) return false;

  // $FlowIgnore: Doesn't think elements are indexable
  return el[matchesSelectorFunc](selector);
}

// Works up the tree to the draggable itself attempting to match selector.
function matchesSelectorAndParentsTo(el /*: Node*/, selector /*: string*/, baseNode /*: Node*/) /*: boolean*/{
  let node = el;
  do {
    if (matchesSelector(node, selector)) return true;
    if (node === baseNode) return false;
    // $FlowIgnore[incompatible-type]
    node = node.parentNode;
  } while (node);
  return false;
}
function addEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/, inputOptions /*: Object*/) /*: void*/{
  if (!el) return;
  const options = {
    capture: true,
    ...inputOptions
  };
  // $FlowIgnore[method-unbinding]
  if (el.addEventListener) {
    el.addEventListener(event, handler, options);
  } else if (el.attachEvent) {
    el.attachEvent('on' + event, handler);
  } else {
    // $FlowIgnore: Doesn't think elements are indexable
    el['on' + event] = handler;
  }
}
function removeEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/, inputOptions /*: Object*/) /*: void*/{
  if (!el) return;
  const options = {
    capture: true,
    ...inputOptions
  };
  // $FlowIgnore[method-unbinding]
  if (el.removeEventListener) {
    el.removeEventListener(event, handler, options);
  } else if (el.detachEvent) {
    el.detachEvent('on' + event, handler);
  } else {
    // $FlowIgnore: Doesn't think elements are indexable
    el['on' + event] = null;
  }
}
function outerHeight(node /*: HTMLElement*/) /*: number*/{
  // This is deliberately excluding margin for our calculations, since we are using
  // offsetTop which is including margin. See getBoundPosition
  let height = node.clientHeight;
  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
  height += (0, _shims.int)(computedStyle.borderTopWidth);
  height += (0, _shims.int)(computedStyle.borderBottomWidth);
  return height;
}
function outerWidth(node /*: HTMLElement*/) /*: number*/{
  // This is deliberately excluding margin for our calculations, since we are using
  // offsetLeft which is including margin. See getBoundPosition
  let width = node.clientWidth;
  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
  width += (0, _shims.int)(computedStyle.borderLeftWidth);
  width += (0, _shims.int)(computedStyle.borderRightWidth);
  return width;
}
function innerHeight(node /*: HTMLElement*/) /*: number*/{
  let height = node.clientHeight;
  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
  height -= (0, _shims.int)(computedStyle.paddingTop);
  height -= (0, _shims.int)(computedStyle.paddingBottom);
  return height;
}
function innerWidth(node /*: HTMLElement*/) /*: number*/{
  let width = node.clientWidth;
  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
  width -= (0, _shims.int)(computedStyle.paddingLeft);
  width -= (0, _shims.int)(computedStyle.paddingRight);
  return width;
}
/*:: interface EventWithOffset {
  clientX: number, clientY: number
}*/
// Get from offsetParent
function offsetXYFromParent(evt /*: EventWithOffset*/, offsetParent /*: HTMLElement*/, scale /*: number*/) /*: ControlPosition*/{
  const isBody = offsetParent === offsetParent.ownerDocument.body;
  const offsetParentRect = isBody ? {
    left: 0,
    top: 0
  } : offsetParent.getBoundingClientRect();
  const x = (evt.clientX + offsetParent.scrollLeft - offsetParentRect.left) / scale;
  const y = (evt.clientY + offsetParent.scrollTop - offsetParentRect.top) / scale;
  return {
    x,
    y
  };
}
function createCSSTransform(controlPos /*: ControlPosition*/, positionOffset /*: PositionOffsetControlPosition*/) /*: Object*/{
  const translation = getTranslation(controlPos, positionOffset, 'px');
  return {
    [(0, _getPrefix.browserPrefixToKey)('transform', _getPrefix.default)]: translation
  };
}
function createSVGTransform(controlPos /*: ControlPosition*/, positionOffset /*: PositionOffsetControlPosition*/) /*: string*/{
  const translation = getTranslation(controlPos, positionOffset, '');
  return translation;
}
function getTranslation(_ref /*:: */, positionOffset /*: PositionOffsetControlPosition*/, unitSuffix /*: string*/) /*: string*/{
  let {
    x,
    y
  } /*: ControlPosition*/ = _ref /*: ControlPosition*/;
  let translation = "translate(".concat(x).concat(unitSuffix, ",").concat(y).concat(unitSuffix, ")");
  if (positionOffset) {
    const defaultX = "".concat(typeof positionOffset.x === 'string' ? positionOffset.x : positionOffset.x + unitSuffix);
    const defaultY = "".concat(typeof positionOffset.y === 'string' ? positionOffset.y : positionOffset.y + unitSuffix);
    translation = "translate(".concat(defaultX, ", ").concat(defaultY, ")") + translation;
  }
  return translation;
}
function getTouch(e /*: MouseTouchEvent*/, identifier /*: number*/) /*: ?{clientX: number, clientY: number}*/{
  return e.targetTouches && (0, _shims.findInArray)(e.targetTouches, t => identifier === t.identifier) || e.changedTouches && (0, _shims.findInArray)(e.changedTouches, t => identifier === t.identifier);
}
function getTouchIdentifier(e /*: MouseTouchEvent*/) /*: ?number*/{
  if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;
  if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;
}

// User-select Hacks:
//
// Useful for preventing blue highlights all over everything when dragging.

// Note we're passing `document` b/c we could be iframed
function addUserSelectStyles(doc /*: ?Document*/) {
  if (!doc) return;
  let styleEl = doc.getElementById('react-draggable-style-el');
  if (!styleEl) {
    styleEl = doc.createElement('style');
    styleEl.type = 'text/css';
    styleEl.id = 'react-draggable-style-el';
    styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n';
    styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {all: inherit;}\n';
    doc.getElementsByTagName('head')[0].appendChild(styleEl);
  }
  if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');
}
function removeUserSelectStyles(doc /*: ?Document*/) {
  if (!doc) return;
  try {
    if (doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection');
    // $FlowIgnore: IE
    if (doc.selection) {
      // $FlowIgnore: IE
      doc.selection.empty();
    } else {
      // Remove selection caused by scroll, unless it's a focused input
      // (we use doc.defaultView in case we're in an iframe)
      const selection = (doc.defaultView || window).getSelection();
      if (selection && selection.type !== 'Caret') {
        selection.removeAllRanges();
      }
    }
  } catch (e) {
    // probably IE
  }
}
function addClassName(el /*: HTMLElement*/, className /*: string*/) {
  if (el.classList) {
    el.classList.add(className);
  } else {
    if (!el.className.match(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)")))) {
      el.className += " ".concat(className);
    }
  }
}
function removeClassName(el /*: HTMLElement*/, className /*: string*/) {
  if (el.classList) {
    el.classList.remove(className);
  } else {
    el.className = el.className.replace(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)"), 'g'), '');
  }
}

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/utils/getPrefix.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/getPrefix.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.browserPrefixToKey = browserPrefixToKey;
exports.browserPrefixToStyle = browserPrefixToStyle;
exports["default"] = void 0;
exports.getPrefix = getPrefix;
const prefixes = ['Moz', 'Webkit', 'O', 'ms'];
function getPrefix() /*: string*/{
  var _window$document;
  let prop /*: string*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';
  // Ensure we're running in an environment where there is actually a global
  // `window` obj
  if (typeof window === 'undefined') return '';

  // If we're in a pseudo-browser server-side environment, this access
  // path may not exist, so bail out if it doesn't.
  const style = (_window$document = window.document) === null || _window$document === void 0 || (_window$document = _window$document.documentElement) === null || _window$document === void 0 ? void 0 : _window$document.style;
  if (!style) return '';
  if (prop in style) return '';
  for (let i = 0; i < prefixes.length; i++) {
    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];
  }
  return '';
}
function browserPrefixToKey(prop /*: string*/, prefix /*: string*/) /*: string*/{
  return prefix ? "".concat(prefix).concat(kebabToTitleCase(prop)) : prop;
}
function browserPrefixToStyle(prop /*: string*/, prefix /*: string*/) /*: string*/{
  return prefix ? "-".concat(prefix.toLowerCase(), "-").concat(prop) : prop;
}
function kebabToTitleCase(str /*: string*/) /*: string*/{
  let out = '';
  let shouldCapitalize = true;
  for (let i = 0; i < str.length; i++) {
    if (shouldCapitalize) {
      out += str[i].toUpperCase();
      shouldCapitalize = false;
    } else if (str[i] === '-') {
      shouldCapitalize = true;
    } else {
      out += str[i];
    }
  }
  return out;
}

// Default export is the prefix itself, like 'Moz', 'Webkit', etc
// Note that you may have to re-test for certain things; for instance, Chrome 50
// can handle unprefixed `transform`, but not unprefixed `user-select`
var _default = exports["default"] = (getPrefix() /*: string*/);

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/log.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = log;
/*eslint no-console:0*/
function log() {
  if (false) // removed by dead control flow
{}
}

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/utils/positionFns.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/positionFns.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.canDragX = canDragX;
exports.canDragY = canDragY;
exports.createCoreData = createCoreData;
exports.createDraggableData = createDraggableData;
exports.getBoundPosition = getBoundPosition;
exports.getControlPosition = getControlPosition;
exports.snapToGrid = snapToGrid;
var _shims = __webpack_require__(/*! ./shims */ "./node_modules/react-draggable/build/cjs/utils/shims.js");
var _domFns = __webpack_require__(/*! ./domFns */ "./node_modules/react-draggable/build/cjs/utils/domFns.js");
/*:: import type Draggable from '../Draggable';*/
/*:: import type {Bounds, ControlPosition, DraggableData, MouseTouchEvent} from './types';*/
/*:: import type DraggableCore from '../DraggableCore';*/
function getBoundPosition(draggable /*: Draggable*/, x /*: number*/, y /*: number*/) /*: [number, number]*/{
  // If no bounds, short-circuit and move on
  if (!draggable.props.bounds) return [x, y];

  // Clone new bounds
  let {
    bounds
  } = draggable.props;
  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);
  const node = findDOMNode(draggable);
  if (typeof bounds === 'string') {
    const {
      ownerDocument
    } = node;
    const ownerWindow = ownerDocument.defaultView;
    let boundNode;
    if (bounds === 'parent') {
      boundNode = node.parentNode;
    } else {
      boundNode = ownerDocument.querySelector(bounds);
    }
    if (!(boundNode instanceof ownerWindow.HTMLElement)) {
      throw new Error('Bounds selector "' + bounds + '" could not find an element.');
    }
    const boundNodeEl /*: HTMLElement*/ = boundNode; // for Flow, can't seem to refine correctly
    const nodeStyle = ownerWindow.getComputedStyle(node);
    const boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl);
    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.
    bounds = {
      left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),
      top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),
      right: (0, _domFns.innerWidth)(boundNodeEl) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),
      bottom: (0, _domFns.innerHeight)(boundNodeEl) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)
    };
  }

  // Keep x and y below right and bottom limits...
  if ((0, _shims.isNum)(bounds.right)) x = Math.min(x, bounds.right);
  if ((0, _shims.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom);

  // But above left and top limits.
  if ((0, _shims.isNum)(bounds.left)) x = Math.max(x, bounds.left);
  if ((0, _shims.isNum)(bounds.top)) y = Math.max(y, bounds.top);
  return [x, y];
}
function snapToGrid(grid /*: [number, number]*/, pendingX /*: number*/, pendingY /*: number*/) /*: [number, number]*/{
  const x = Math.round(pendingX / grid[0]) * grid[0];
  const y = Math.round(pendingY / grid[1]) * grid[1];
  return [x, y];
}
function canDragX(draggable /*: Draggable*/) /*: boolean*/{
  return draggable.props.axis === 'both' || draggable.props.axis === 'x';
}
function canDragY(draggable /*: Draggable*/) /*: boolean*/{
  return draggable.props.axis === 'both' || draggable.props.axis === 'y';
}

// Get {x, y} positions from event.
function getControlPosition(e /*: MouseTouchEvent*/, touchIdentifier /*: ?number*/, draggableCore /*: DraggableCore*/) /*: ?ControlPosition*/{
  const touchObj = typeof touchIdentifier === 'number' ? (0, _domFns.getTouch)(e, touchIdentifier) : null;
  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch
  const node = findDOMNode(draggableCore);
  // User can provide an offsetParent if desired.
  const offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
  return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);
}

// Create an data object exposed by <DraggableCore>'s events
function createCoreData(draggable /*: DraggableCore*/, x /*: number*/, y /*: number*/) /*: DraggableData*/{
  const isStart = !(0, _shims.isNum)(draggable.lastX);
  const node = findDOMNode(draggable);
  if (isStart) {
    // If this is our first move, use the x and y as last coords.
    return {
      node,
      deltaX: 0,
      deltaY: 0,
      lastX: x,
      lastY: y,
      x,
      y
    };
  } else {
    // Otherwise calculate proper values.
    return {
      node,
      deltaX: x - draggable.lastX,
      deltaY: y - draggable.lastY,
      lastX: draggable.lastX,
      lastY: draggable.lastY,
      x,
      y
    };
  }
}

// Create an data exposed by <Draggable>'s events
function createDraggableData(draggable /*: Draggable*/, coreData /*: DraggableData*/) /*: DraggableData*/{
  const scale = draggable.props.scale;
  return {
    node: coreData.node,
    x: draggable.state.x + coreData.deltaX / scale,
    y: draggable.state.y + coreData.deltaY / scale,
    deltaX: coreData.deltaX / scale,
    deltaY: coreData.deltaY / scale,
    lastX: draggable.state.x,
    lastY: draggable.state.y
  };
}

// A lot faster than stringify/parse
function cloneBounds(bounds /*: Bounds*/) /*: Bounds*/{
  return {
    left: bounds.left,
    top: bounds.top,
    right: bounds.right,
    bottom: bounds.bottom
  };
}
function findDOMNode(draggable /*: Draggable | DraggableCore*/) /*: HTMLElement*/{
  const node = draggable.findDOMNode();
  if (!node) {
    throw new Error('<DraggableCore>: Unmounted during event!');
  }
  // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME
  return node;
}

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/utils/shims.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/shims.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dontSetMe = dontSetMe;
exports.findInArray = findInArray;
exports.int = int;
exports.isFunction = isFunction;
exports.isNum = isNum;
// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
function findInArray(array /*: Array<any> | TouchList*/, callback /*: Function*/) /*: any*/{
  for (let i = 0, length = array.length; i < length; i++) {
    if (callback.apply(callback, [array[i], i, array])) return array[i];
  }
}
function isFunction(func /*: any*/) /*: boolean %checks*/{
  // $FlowIgnore[method-unbinding]
  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';
}
function isNum(num /*: any*/) /*: boolean %checks*/{
  return typeof num === 'number' && !isNaN(num);
}
function int(a /*: string*/) /*: number*/{
  return parseInt(a, 10);
}
function dontSetMe(props /*: Object*/, propName /*: string*/, componentName /*: string*/) /*: ?Error*/{
  if (props[propName]) {
    return new Error("Invalid prop ".concat(propName, " passed to ").concat(componentName, " - do not set this, set it on the child."));
  }
}

/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}


/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-is/cjs/react-is.development.js");
}


/***/ }),

/***/ "./node_modules/react-rnd/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/react-rnd/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Rnd: () => (/* binding */ Rnd)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_draggable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-draggable */ "./node_modules/react-draggable/build/cjs/cjs.js");
/* harmony import */ var react_draggable__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_draggable__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var re_resizable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! re-resizable */ "./node_modules/re-resizable/lib/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");





/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at https://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var resizableStyle = {
    width: "auto",
    height: "auto",
    display: "inline-block",
    position: "absolute",
    top: 0,
    left: 0,
};
var getEnableResizingByFlag = function (flag) { return ({
    bottom: flag,
    bottomLeft: flag,
    bottomRight: flag,
    left: flag,
    right: flag,
    top: flag,
    topLeft: flag,
    topRight: flag,
}); };
var Rnd = /** @class */ (function (_super) {
    __extends(Rnd, _super);
    function Rnd(props) {
        var _this = _super.call(this, props) || this;
        _this.resizingPosition = { x: 0, y: 0 };
        _this.offsetFromParent = { left: 0, top: 0 };
        _this.resizableElement = { current: null };
        _this.originalPosition = { x: 0, y: 0 };
        _this.state = {
            resizing: false,
            bounds: {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0,
            },
            maxWidth: props.maxWidth,
            maxHeight: props.maxHeight,
        };
        _this.onResizeStart = _this.onResizeStart.bind(_this);
        _this.onResize = _this.onResize.bind(_this);
        _this.onResizeStop = _this.onResizeStop.bind(_this);
        _this.onDragStart = _this.onDragStart.bind(_this);
        _this.onDrag = _this.onDrag.bind(_this);
        _this.onDragStop = _this.onDragStop.bind(_this);
        _this.getMaxSizesFromProps = _this.getMaxSizesFromProps.bind(_this);
        return _this;
    }
    Rnd.prototype.componentDidMount = function () {
        this.updateOffsetFromParent();
        var _a = this.offsetFromParent, left = _a.left, top = _a.top;
        var _b = this.getDraggablePosition(), x = _b.x, y = _b.y;
        this.draggable.setState({
            x: x - left,
            y: y - top,
        });
        // HACK: Apply position adjustment
        this.forceUpdate();
    };
    // HACK: To get `react-draggable` state x and y.
    Rnd.prototype.getDraggablePosition = function () {
        var _a = this.draggable.state, x = _a.x, y = _a.y;
        return { x: x, y: y };
    };
    Rnd.prototype.getParent = function () {
        return this.resizable && this.resizable.parentNode;
    };
    Rnd.prototype.getParentSize = function () {
        return this.resizable.getParentSize();
    };
    Rnd.prototype.getMaxSizesFromProps = function () {
        var maxWidth = typeof this.props.maxWidth === "undefined" ? Number.MAX_SAFE_INTEGER : this.props.maxWidth;
        var maxHeight = typeof this.props.maxHeight === "undefined" ? Number.MAX_SAFE_INTEGER : this.props.maxHeight;
        return { maxWidth: maxWidth, maxHeight: maxHeight };
    };
    Rnd.prototype.getSelfElement = function () {
        return this.resizable && this.resizable.resizable;
    };
    Rnd.prototype.getOffsetHeight = function (boundary) {
        var scale = this.props.scale;
        switch (this.props.bounds) {
            case "window":
                return window.innerHeight / scale;
            case "body":
                return document.body.offsetHeight / scale;
            default:
                return boundary.offsetHeight;
        }
    };
    Rnd.prototype.getOffsetWidth = function (boundary) {
        var scale = this.props.scale;
        switch (this.props.bounds) {
            case "window":
                return window.innerWidth / scale;
            case "body":
                return document.body.offsetWidth / scale;
            default:
                return boundary.offsetWidth;
        }
    };
    Rnd.prototype.onDragStart = function (e, data) {
        if (this.props.onDragStart) {
            this.props.onDragStart(e, data);
        }
        var pos = this.getDraggablePosition();
        this.originalPosition = pos;
        if (!this.props.bounds)
            return;
        var parent = this.getParent();
        var scale = this.props.scale;
        var boundary;
        if (this.props.bounds === "parent") {
            boundary = parent;
        }
        else if (this.props.bounds === "body") {
            var parentRect_1 = parent.getBoundingClientRect();
            var parentLeft_1 = parentRect_1.left;
            var parentTop_1 = parentRect_1.top;
            var bodyRect = document.body.getBoundingClientRect();
            var left_1 = -(parentLeft_1 - parent.offsetLeft * scale - bodyRect.left) / scale;
            var top_1 = -(parentTop_1 - parent.offsetTop * scale - bodyRect.top) / scale;
            var right = (document.body.offsetWidth - this.resizable.size.width * scale) / scale + left_1;
            var bottom = (document.body.offsetHeight - this.resizable.size.height * scale) / scale + top_1;
            return this.setState({ bounds: { top: top_1, right: right, bottom: bottom, left: left_1 } });
        }
        else if (this.props.bounds === "window") {
            if (!this.resizable)
                return;
            var parentRect_2 = parent.getBoundingClientRect();
            var parentLeft_2 = parentRect_2.left;
            var parentTop_2 = parentRect_2.top;
            var left_2 = -(parentLeft_2 - parent.offsetLeft * scale) / scale;
            var top_2 = -(parentTop_2 - parent.offsetTop * scale) / scale;
            var right = (window.innerWidth - this.resizable.size.width * scale) / scale + left_2;
            var bottom = (window.innerHeight - this.resizable.size.height * scale) / scale + top_2;
            return this.setState({ bounds: { top: top_2, right: right, bottom: bottom, left: left_2 } });
        }
        else if (typeof this.props.bounds === "string") {
            boundary = document.querySelector(this.props.bounds);
        }
        else if (this.props.bounds instanceof HTMLElement) {
            boundary = this.props.bounds;
        }
        if (!(boundary instanceof HTMLElement) || !(parent instanceof HTMLElement)) {
            return;
        }
        var boundaryRect = boundary.getBoundingClientRect();
        var boundaryLeft = boundaryRect.left;
        var boundaryTop = boundaryRect.top;
        var parentRect = parent.getBoundingClientRect();
        var parentLeft = parentRect.left;
        var parentTop = parentRect.top;
        var left = (boundaryLeft - parentLeft) / scale;
        var top = boundaryTop - parentTop;
        if (!this.resizable)
            return;
        this.updateOffsetFromParent();
        var offset = this.offsetFromParent;
        this.setState({
            bounds: {
                top: top - offset.top,
                right: left + (boundary.offsetWidth - this.resizable.size.width) - offset.left / scale,
                bottom: top + (boundary.offsetHeight - this.resizable.size.height) - offset.top,
                left: left - offset.left / scale,
            },
        });
    };
    Rnd.prototype.onDrag = function (e, data) {
        if (!this.props.onDrag)
            return;
        var _a = this.offsetFromParent, left = _a.left, top = _a.top;
        if (!this.props.dragAxis || this.props.dragAxis === "both") {
            return this.props.onDrag(e, __assign(__assign({}, data), { x: data.x + left, y: data.y + top }));
        }
        else if (this.props.dragAxis === "x") {
            return this.props.onDrag(e, __assign(__assign({}, data), { x: data.x + left, y: this.originalPosition.y + top, deltaY: 0 }));
        }
        else if (this.props.dragAxis === "y") {
            return this.props.onDrag(e, __assign(__assign({}, data), { x: this.originalPosition.x + left, y: data.y + top, deltaX: 0 }));
        }
    };
    Rnd.prototype.onDragStop = function (e, data) {
        if (!this.props.onDragStop)
            return;
        var _a = this.offsetFromParent, left = _a.left, top = _a.top;
        if (!this.props.dragAxis || this.props.dragAxis === "both") {
            return this.props.onDragStop(e, __assign(__assign({}, data), { x: data.x + left, y: data.y + top }));
        }
        else if (this.props.dragAxis === "x") {
            return this.props.onDragStop(e, __assign(__assign({}, data), { x: data.x + left, y: this.originalPosition.y + top, deltaY: 0 }));
        }
        else if (this.props.dragAxis === "y") {
            return this.props.onDragStop(e, __assign(__assign({}, data), { x: this.originalPosition.x + left, y: data.y + top, deltaX: 0 }));
        }
    };
    Rnd.prototype.onResizeStart = function (e, dir, elementRef) {
        e.stopPropagation();
        this.setState({
            resizing: true,
        });
        var scale = this.props.scale;
        var offset = this.offsetFromParent;
        var pos = this.getDraggablePosition();
        this.resizingPosition = { x: pos.x + offset.left, y: pos.y + offset.top };
        this.originalPosition = pos;
        if (this.props.bounds) {
            var parent_1 = this.getParent();
            var boundary = void 0;
            if (this.props.bounds === "parent") {
                boundary = parent_1;
            }
            else if (this.props.bounds === "body") {
                boundary = document.body;
            }
            else if (this.props.bounds === "window") {
                boundary = window;
            }
            else if (typeof this.props.bounds === "string") {
                boundary = document.querySelector(this.props.bounds);
            }
            else if (this.props.bounds instanceof HTMLElement) {
                boundary = this.props.bounds;
            }
            var self_1 = this.getSelfElement();
            if (self_1 instanceof Element &&
                (boundary instanceof HTMLElement || boundary === window) &&
                parent_1 instanceof HTMLElement) {
                var _a = this.getMaxSizesFromProps(), maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;
                var parentSize = this.getParentSize();
                if (maxWidth && typeof maxWidth === "string") {
                    if (maxWidth.endsWith("%")) {
                        var ratio = Number(maxWidth.replace("%", "")) / 100;
                        maxWidth = parentSize.width * ratio;
                    }
                    else if (maxWidth.endsWith("px")) {
                        maxWidth = Number(maxWidth.replace("px", ""));
                    }
                }
                if (maxHeight && typeof maxHeight === "string") {
                    if (maxHeight.endsWith("%")) {
                        var ratio = Number(maxHeight.replace("%", "")) / 100;
                        maxHeight = parentSize.height * ratio;
                    }
                    else if (maxHeight.endsWith("px")) {
                        maxHeight = Number(maxHeight.replace("px", ""));
                    }
                }
                var selfRect = self_1.getBoundingClientRect();
                var selfLeft = selfRect.left;
                var selfTop = selfRect.top;
                var boundaryRect = this.props.bounds === "window" ? { left: 0, top: 0 } : boundary.getBoundingClientRect();
                var boundaryLeft = boundaryRect.left;
                var boundaryTop = boundaryRect.top;
                var offsetWidth = this.getOffsetWidth(boundary);
                var offsetHeight = this.getOffsetHeight(boundary);
                var hasLeft = dir.toLowerCase().endsWith("left");
                var hasRight = dir.toLowerCase().endsWith("right");
                var hasTop = dir.startsWith("top");
                var hasBottom = dir.startsWith("bottom");
                if ((hasLeft || hasTop) && this.resizable) {
                    var max = (selfLeft - boundaryLeft) / scale + this.resizable.size.width;
                    this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });
                }
                // INFO: To set bounds in `lock aspect ratio with bounds` case. See also that story.
                if (hasRight || (this.props.lockAspectRatio && !hasLeft && !hasTop)) {
                    var max = offsetWidth + (boundaryLeft - selfLeft) / scale;
                    this.setState({ maxWidth: max > Number(maxWidth) ? maxWidth : max });
                }
                if ((hasTop || hasLeft) && this.resizable) {
                    var max = (selfTop - boundaryTop) / scale + this.resizable.size.height;
                    this.setState({
                        maxHeight: max > Number(maxHeight) ? maxHeight : max,
                    });
                }
                // INFO: To set bounds in `lock aspect ratio with bounds` case. See also that story.
                if (hasBottom || (this.props.lockAspectRatio && !hasTop && !hasLeft)) {
                    var max = offsetHeight + (boundaryTop - selfTop) / scale;
                    this.setState({
                        maxHeight: max > Number(maxHeight) ? maxHeight : max,
                    });
                }
            }
        }
        else {
            this.setState({
                maxWidth: this.props.maxWidth,
                maxHeight: this.props.maxHeight,
            });
        }
        if (this.props.onResizeStart) {
            this.props.onResizeStart(e, dir, elementRef);
        }
    };
    Rnd.prototype.onResize = function (e, direction, elementRef, delta) {
        var _this = this;
        // INFO: Apply x and y position adjustments caused by resizing to draggable
        var newPos = { x: this.originalPosition.x, y: this.originalPosition.y };
        var left = -delta.width;
        var top = -delta.height;
        var directions = ["top", "left", "topLeft", "bottomLeft", "topRight"];
        if (directions.includes(direction)) {
            if (direction === "bottomLeft") {
                newPos.x += left;
            }
            else if (direction === "topRight") {
                newPos.y += top;
            }
            else {
                newPos.x += left;
                newPos.y += top;
            }
        }
        var draggableState = this.draggable.state;
        if (newPos.x !== draggableState.x || newPos.y !== draggableState.y) {
            (0,react_dom__WEBPACK_IMPORTED_MODULE_3__.flushSync)(function () {
                _this.draggable.setState(newPos);
            });
        }
        this.updateOffsetFromParent();
        var offset = this.offsetFromParent;
        var x = this.getDraggablePosition().x + offset.left;
        var y = this.getDraggablePosition().y + offset.top;
        this.resizingPosition = { x: x, y: y };
        if (!this.props.onResize)
            return;
        this.props.onResize(e, direction, elementRef, delta, {
            x: x,
            y: y,
        });
    };
    Rnd.prototype.onResizeStop = function (e, direction, elementRef, delta) {
        this.setState({
            resizing: false,
        });
        var _a = this.getMaxSizesFromProps(), maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;
        this.setState({ maxWidth: maxWidth, maxHeight: maxHeight });
        if (this.props.onResizeStop) {
            this.props.onResizeStop(e, direction, elementRef, delta, this.resizingPosition);
        }
    };
    Rnd.prototype.updateSize = function (size) {
        if (!this.resizable)
            return;
        this.resizable.updateSize({ width: size.width, height: size.height });
    };
    Rnd.prototype.updatePosition = function (position) {
        this.draggable.setState(position);
    };
    Rnd.prototype.updateOffsetFromParent = function () {
        var scale = this.props.scale;
        var parent = this.getParent();
        var self = this.getSelfElement();
        if (!parent || self === null) {
            return {
                top: 0,
                left: 0,
            };
        }
        var parentRect = parent.getBoundingClientRect();
        var parentLeft = parentRect.left;
        var parentTop = parentRect.top;
        var selfRect = self.getBoundingClientRect();
        var position = this.getDraggablePosition();
        var scrollLeft = parent.scrollLeft;
        var scrollTop = parent.scrollTop;
        this.offsetFromParent = {
            left: selfRect.left - parentLeft + scrollLeft - position.x * scale,
            top: selfRect.top - parentTop + scrollTop - position.y * scale,
        };
    };
    Rnd.prototype.render = function () {
        var _this = this;
        var _a = this.props, disableDragging = _a.disableDragging, style = _a.style, dragHandleClassName = _a.dragHandleClassName, position = _a.position, onMouseDown = _a.onMouseDown, onMouseUp = _a.onMouseUp, dragAxis = _a.dragAxis, dragGrid = _a.dragGrid, bounds = _a.bounds, enableUserSelectHack = _a.enableUserSelectHack, cancel = _a.cancel, children = _a.children, onResizeStart = _a.onResizeStart, onResize = _a.onResize, onResizeStop = _a.onResizeStop, onDragStart = _a.onDragStart, onDrag = _a.onDrag, onDragStop = _a.onDragStop, resizeHandleStyles = _a.resizeHandleStyles, resizeHandleClasses = _a.resizeHandleClasses, resizeHandleComponent = _a.resizeHandleComponent, enableResizing = _a.enableResizing, resizeGrid = _a.resizeGrid, resizeHandleWrapperClass = _a.resizeHandleWrapperClass, resizeHandleWrapperStyle = _a.resizeHandleWrapperStyle, scale = _a.scale, allowAnyClick = _a.allowAnyClick, dragPositionOffset = _a.dragPositionOffset, resizableProps = __rest(_a, ["disableDragging", "style", "dragHandleClassName", "position", "onMouseDown", "onMouseUp", "dragAxis", "dragGrid", "bounds", "enableUserSelectHack", "cancel", "children", "onResizeStart", "onResize", "onResizeStop", "onDragStart", "onDrag", "onDragStop", "resizeHandleStyles", "resizeHandleClasses", "resizeHandleComponent", "enableResizing", "resizeGrid", "resizeHandleWrapperClass", "resizeHandleWrapperStyle", "scale", "allowAnyClick", "dragPositionOffset"]);
        var defaultValue = this.props.default ? __assign({}, this.props.default) : undefined;
        // Remove unknown props, see also https://reactjs.org/warnings/unknown-prop.html
        delete resizableProps.default;
        var cursorStyle = disableDragging || dragHandleClassName ? { cursor: "auto" } : { cursor: "move" };
        var innerStyle = __assign(__assign(__assign({}, resizableStyle), cursorStyle), style);
        var _b = this.offsetFromParent, left = _b.left, top = _b.top;
        var draggablePosition;
        if (position) {
            draggablePosition = {
                x: position.x - left,
                y: position.y - top,
            };
        }
        // INFO: Make uncontorolled component when resizing to control position by setPostion.
        var pos = this.state.resizing ? undefined : draggablePosition;
        var dragAxisOrUndefined = this.state.resizing ? "both" : dragAxis;
        return ((0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)((react_draggable__WEBPACK_IMPORTED_MODULE_1___default()), { ref: function (c) {
                if (!c)
                    return;
                _this.draggable = c;
            }, handle: dragHandleClassName ? ".".concat(dragHandleClassName) : undefined, defaultPosition: defaultValue, onMouseDown: onMouseDown, 
            // @ts-expect-error
            onMouseUp: onMouseUp, onStart: this.onDragStart, onDrag: this.onDrag, onStop: this.onDragStop, axis: dragAxisOrUndefined, disabled: disableDragging, grid: dragGrid, bounds: bounds ? this.state.bounds : undefined, position: pos, enableUserSelectHack: enableUserSelectHack, cancel: cancel, scale: scale, allowAnyClick: allowAnyClick, nodeRef: this.resizableElement, positionOffset: dragPositionOffset },
            (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(re_resizable__WEBPACK_IMPORTED_MODULE_2__.Resizable, __assign({}, resizableProps, { ref: function (c) {
                    if (!c)
                        return;
                    _this.resizable = c;
                    _this.resizableElement.current = c.resizable;
                }, defaultSize: defaultValue, size: this.props.size, enable: typeof enableResizing === "boolean" ? getEnableResizingByFlag(enableResizing) : enableResizing, onResizeStart: this.onResizeStart, onResize: this.onResize, onResizeStop: this.onResizeStop, style: innerStyle, minWidth: this.props.minWidth, minHeight: this.props.minHeight, maxWidth: this.state.resizing ? this.state.maxWidth : this.props.maxWidth, maxHeight: this.state.resizing ? this.state.maxHeight : this.props.maxHeight, grid: resizeGrid, handleWrapperClass: resizeHandleWrapperClass, handleWrapperStyle: resizeHandleWrapperStyle, lockAspectRatio: this.props.lockAspectRatio, lockAspectRatioExtraWidth: this.props.lockAspectRatioExtraWidth, lockAspectRatioExtraHeight: this.props.lockAspectRatioExtraHeight, handleStyles: resizeHandleStyles, handleClasses: resizeHandleClasses, handleComponent: resizeHandleComponent, scale: this.props.scale }), children)));
    };
    Rnd.defaultProps = {
        maxWidth: Number.MAX_SAFE_INTEGER,
        maxHeight: Number.MAX_SAFE_INTEGER,
        scale: 1,
        onResizeStart: function () { },
        onResize: function () { },
        onResizeStop: function () { },
        onDragStart: function () { },
        onDrag: function () { },
        onDragStop: function () { },
    };
    return Rnd;
}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));




/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-runtime.development.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-runtime.development.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


 true &&
  (function () {
    function getComponentNameFromType(type) {
      if (null == type) return null;
      if ("function" === typeof type)
        return type.$$typeof === REACT_CLIENT_REFERENCE
          ? null
          : type.displayName || type.name || null;
      if ("string" === typeof type) return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
        case REACT_ACTIVITY_TYPE:
          return "Activity";
      }
      if ("object" === typeof type)
        switch (
          ("number" === typeof type.tag &&
            console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ),
          type.$$typeof)
        ) {
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type ||
              ((type = innerType.displayName || innerType.name || ""),
              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
            return type;
          case REACT_MEMO_TYPE:
            return (
              (innerType = type.displayName || null),
              null !== innerType
                ? innerType
                : getComponentNameFromType(type.type) || "Memo"
            );
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {}
        }
      return null;
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      try {
        testStringCoercion(value);
        var JSCompiler_inline_result = !1;
      } catch (e) {
        JSCompiler_inline_result = !0;
      }
      if (JSCompiler_inline_result) {
        JSCompiler_inline_result = console;
        var JSCompiler_temp_const = JSCompiler_inline_result.error;
        var JSCompiler_inline_result$jscomp$0 =
          ("function" === typeof Symbol &&
            Symbol.toStringTag &&
            value[Symbol.toStringTag]) ||
          value.constructor.name ||
          "Object";
        JSCompiler_temp_const.call(
          JSCompiler_inline_result,
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          JSCompiler_inline_result$jscomp$0
        );
        return testStringCoercion(value);
      }
    }
    function getTaskName(type) {
      if (type === REACT_FRAGMENT_TYPE) return "<>";
      if (
        "object" === typeof type &&
        null !== type &&
        type.$$typeof === REACT_LAZY_TYPE
      )
        return "<...>";
      try {
        var name = getComponentNameFromType(type);
        return name ? "<" + name + ">" : "<...>";
      } catch (x) {
        return "<...>";
      }
    }
    function getOwner() {
      var dispatcher = ReactSharedInternals.A;
      return null === dispatcher ? null : dispatcher.getOwner();
    }
    function UnknownOwner() {
      return Error("react-stack-top-frame");
    }
    function hasValidKey(config) {
      if (hasOwnProperty.call(config, "key")) {
        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
        if (getter && getter.isReactWarning) return !1;
      }
      return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      function warnAboutAccessingKey() {
        specialPropKeyWarningShown ||
          ((specialPropKeyWarningShown = !0),
          console.error(
            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
            displayName
          ));
      }
      warnAboutAccessingKey.isReactWarning = !0;
      Object.defineProperty(props, "key", {
        get: warnAboutAccessingKey,
        configurable: !0
      });
    }
    function elementRefGetterWithDeprecationWarning() {
      var componentName = getComponentNameFromType(this.type);
      didWarnAboutElementRef[componentName] ||
        ((didWarnAboutElementRef[componentName] = !0),
        console.error(
          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
        ));
      componentName = this.props.ref;
      return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(
      type,
      key,
      self,
      source,
      owner,
      props,
      debugStack,
      debugTask
    ) {
      self = props.ref;
      type = {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        props: props,
        _owner: owner
      };
      null !== (void 0 !== self ? self : null)
        ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
          })
        : Object.defineProperty(type, "ref", { enumerable: !1, value: null });
      type._store = {};
      Object.defineProperty(type._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: 0
      });
      Object.defineProperty(type, "_debugInfo", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: null
      });
      Object.defineProperty(type, "_debugStack", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: debugStack
      });
      Object.defineProperty(type, "_debugTask", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: debugTask
      });
      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
      return type;
    }
    function jsxDEVImpl(
      type,
      config,
      maybeKey,
      isStaticChildren,
      source,
      self,
      debugStack,
      debugTask
    ) {
      var children = config.children;
      if (void 0 !== children)
        if (isStaticChildren)
          if (isArrayImpl(children)) {
            for (
              isStaticChildren = 0;
              isStaticChildren < children.length;
              isStaticChildren++
            )
              validateChildKeys(children[isStaticChildren]);
            Object.freeze && Object.freeze(children);
          } else
            console.error(
              "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
            );
        else validateChildKeys(children);
      if (hasOwnProperty.call(config, "key")) {
        children = getComponentNameFromType(type);
        var keys = Object.keys(config).filter(function (k) {
          return "key" !== k;
        });
        isStaticChildren =
          0 < keys.length
            ? "{key: someKey, " + keys.join(": ..., ") + ": ...}"
            : "{key: someKey}";
        didWarnAboutKeySpread[children + isStaticChildren] ||
          ((keys =
            0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}"),
          console.error(
            'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
            isStaticChildren,
            children,
            keys,
            children
          ),
          (didWarnAboutKeySpread[children + isStaticChildren] = !0));
      }
      children = null;
      void 0 !== maybeKey &&
        (checkKeyStringCoercion(maybeKey), (children = "" + maybeKey));
      hasValidKey(config) &&
        (checkKeyStringCoercion(config.key), (children = "" + config.key));
      if ("key" in config) {
        maybeKey = {};
        for (var propName in config)
          "key" !== propName && (maybeKey[propName] = config[propName]);
      } else maybeKey = config;
      children &&
        defineKeyPropWarningGetter(
          maybeKey,
          "function" === typeof type
            ? type.displayName || type.name || "Unknown"
            : type
        );
      return ReactElement(
        type,
        children,
        self,
        source,
        getOwner(),
        maybeKey,
        debugStack,
        debugTask
      );
    }
    function validateChildKeys(node) {
      "object" === typeof node &&
        null !== node &&
        node.$$typeof === REACT_ELEMENT_TYPE &&
        node._store &&
        (node._store.validated = 1);
    }
    var React = __webpack_require__(/*! react */ "./node_modules/react/index.js"),
      REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
      REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
      REACT_MEMO_TYPE = Symbol.for("react.memo"),
      REACT_LAZY_TYPE = Symbol.for("react.lazy"),
      REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
      ReactSharedInternals =
        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
      hasOwnProperty = Object.prototype.hasOwnProperty,
      isArrayImpl = Array.isArray,
      createTask = console.createTask
        ? console.createTask
        : function () {
            return null;
          };
    React = {
      "react-stack-bottom-frame": function (callStackForError) {
        return callStackForError();
      }
    };
    var specialPropKeyWarningShown;
    var didWarnAboutElementRef = {};
    var unknownOwnerDebugStack = React["react-stack-bottom-frame"].bind(
      React,
      UnknownOwner
    )();
    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
    var didWarnAboutKeySpread = {};
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsx = function (type, config, maybeKey, source, self) {
      var trackActualOwner =
        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
      return jsxDEVImpl(
        type,
        config,
        maybeKey,
        !1,
        source,
        self,
        trackActualOwner
          ? Error("react-stack-top-frame")
          : unknownOwnerDebugStack,
        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
      );
    };
    exports.jsxs = function (type, config, maybeKey, source, self) {
      var trackActualOwner =
        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
      return jsxDEVImpl(
        type,
        config,
        maybeKey,
        !0,
        source,
        self,
        trackActualOwner
          ? Error("react-stack-top-frame")
          : unknownOwnerDebugStack,
        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
      );
    };
  })();


/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


 true &&
  (function () {
    function defineDeprecationWarning(methodName, info) {
      Object.defineProperty(Component.prototype, methodName, {
        get: function () {
          console.warn(
            "%s(...) is deprecated in plain JavaScript React classes. %s",
            info[0],
            info[1]
          );
        }
      });
    }
    function getIteratorFn(maybeIterable) {
      if (null === maybeIterable || "object" !== typeof maybeIterable)
        return null;
      maybeIterable =
        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
        maybeIterable["@@iterator"];
      return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    function warnNoop(publicInstance, callerName) {
      publicInstance =
        ((publicInstance = publicInstance.constructor) &&
          (publicInstance.displayName || publicInstance.name)) ||
        "ReactClass";
      var warningKey = publicInstance + "." + callerName;
      didWarnStateUpdateForUnmountedComponent[warningKey] ||
        (console.error(
          "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
          callerName,
          publicInstance
        ),
        (didWarnStateUpdateForUnmountedComponent[warningKey] = !0));
    }
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    function ComponentDummy() {}
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      try {
        testStringCoercion(value);
        var JSCompiler_inline_result = !1;
      } catch (e) {
        JSCompiler_inline_result = !0;
      }
      if (JSCompiler_inline_result) {
        JSCompiler_inline_result = console;
        var JSCompiler_temp_const = JSCompiler_inline_result.error;
        var JSCompiler_inline_result$jscomp$0 =
          ("function" === typeof Symbol &&
            Symbol.toStringTag &&
            value[Symbol.toStringTag]) ||
          value.constructor.name ||
          "Object";
        JSCompiler_temp_const.call(
          JSCompiler_inline_result,
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          JSCompiler_inline_result$jscomp$0
        );
        return testStringCoercion(value);
      }
    }
    function getComponentNameFromType(type) {
      if (null == type) return null;
      if ("function" === typeof type)
        return type.$$typeof === REACT_CLIENT_REFERENCE
          ? null
          : type.displayName || type.name || null;
      if ("string" === typeof type) return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
        case REACT_ACTIVITY_TYPE:
          return "Activity";
      }
      if ("object" === typeof type)
        switch (
          ("number" === typeof type.tag &&
            console.error(
              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
            ),
          type.$$typeof)
        ) {
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type ||
              ((type = innerType.displayName || innerType.name || ""),
              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
            return type;
          case REACT_MEMO_TYPE:
            return (
              (innerType = type.displayName || null),
              null !== innerType
                ? innerType
                : getComponentNameFromType(type.type) || "Memo"
            );
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {}
        }
      return null;
    }
    function getTaskName(type) {
      if (type === REACT_FRAGMENT_TYPE) return "<>";
      if (
        "object" === typeof type &&
        null !== type &&
        type.$$typeof === REACT_LAZY_TYPE
      )
        return "<...>";
      try {
        var name = getComponentNameFromType(type);
        return name ? "<" + name + ">" : "<...>";
      } catch (x) {
        return "<...>";
      }
    }
    function getOwner() {
      var dispatcher = ReactSharedInternals.A;
      return null === dispatcher ? null : dispatcher.getOwner();
    }
    function UnknownOwner() {
      return Error("react-stack-top-frame");
    }
    function hasValidKey(config) {
      if (hasOwnProperty.call(config, "key")) {
        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
        if (getter && getter.isReactWarning) return !1;
      }
      return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      function warnAboutAccessingKey() {
        specialPropKeyWarningShown ||
          ((specialPropKeyWarningShown = !0),
          console.error(
            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
            displayName
          ));
      }
      warnAboutAccessingKey.isReactWarning = !0;
      Object.defineProperty(props, "key", {
        get: warnAboutAccessingKey,
        configurable: !0
      });
    }
    function elementRefGetterWithDeprecationWarning() {
      var componentName = getComponentNameFromType(this.type);
      didWarnAboutElementRef[componentName] ||
        ((didWarnAboutElementRef[componentName] = !0),
        console.error(
          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
        ));
      componentName = this.props.ref;
      return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(
      type,
      key,
      self,
      source,
      owner,
      props,
      debugStack,
      debugTask
    ) {
      self = props.ref;
      type = {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        props: props,
        _owner: owner
      };
      null !== (void 0 !== self ? self : null)
        ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
          })
        : Object.defineProperty(type, "ref", { enumerable: !1, value: null });
      type._store = {};
      Object.defineProperty(type._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: 0
      });
      Object.defineProperty(type, "_debugInfo", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: null
      });
      Object.defineProperty(type, "_debugStack", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: debugStack
      });
      Object.defineProperty(type, "_debugTask", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: debugTask
      });
      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
      return type;
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      newKey = ReactElement(
        oldElement.type,
        newKey,
        void 0,
        void 0,
        oldElement._owner,
        oldElement.props,
        oldElement._debugStack,
        oldElement._debugTask
      );
      oldElement._store &&
        (newKey._store.validated = oldElement._store.validated);
      return newKey;
    }
    function isValidElement(object) {
      return (
        "object" === typeof object &&
        null !== object &&
        object.$$typeof === REACT_ELEMENT_TYPE
      );
    }
    function escape(key) {
      var escaperLookup = { "=": "=0", ":": "=2" };
      return (
        "$" +
        key.replace(/[=:]/g, function (match) {
          return escaperLookup[match];
        })
      );
    }
    function getElementKey(element, index) {
      return "object" === typeof element &&
        null !== element &&
        null != element.key
        ? (checkKeyStringCoercion(element.key), escape("" + element.key))
        : index.toString(36);
    }
    function noop$1() {}
    function resolveThenable(thenable) {
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenable.reason;
        default:
          switch (
            ("string" === typeof thenable.status
              ? thenable.then(noop$1, noop$1)
              : ((thenable.status = "pending"),
                thenable.then(
                  function (fulfilledValue) {
                    "pending" === thenable.status &&
                      ((thenable.status = "fulfilled"),
                      (thenable.value = fulfilledValue));
                  },
                  function (error) {
                    "pending" === thenable.status &&
                      ((thenable.status = "rejected"),
                      (thenable.reason = error));
                  }
                )),
            thenable.status)
          ) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
          }
      }
      throw thenable;
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if ("undefined" === type || "boolean" === type) children = null;
      var invokeCallback = !1;
      if (null === children) invokeCallback = !0;
      else
        switch (type) {
          case "bigint":
          case "string":
          case "number":
            invokeCallback = !0;
            break;
          case "object":
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = !0;
                break;
              case REACT_LAZY_TYPE:
                return (
                  (invokeCallback = children._init),
                  mapIntoArray(
                    invokeCallback(children._payload),
                    array,
                    escapedPrefix,
                    nameSoFar,
                    callback
                  )
                );
            }
        }
      if (invokeCallback) {
        invokeCallback = children;
        callback = callback(invokeCallback);
        var childKey =
          "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
        isArrayImpl(callback)
          ? ((escapedPrefix = ""),
            null != childKey &&
              (escapedPrefix =
                childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"),
            mapIntoArray(callback, array, escapedPrefix, "", function (c) {
              return c;
            }))
          : null != callback &&
            (isValidElement(callback) &&
              (null != callback.key &&
                ((invokeCallback && invokeCallback.key === callback.key) ||
                  checkKeyStringCoercion(callback.key)),
              (escapedPrefix = cloneAndReplaceKey(
                callback,
                escapedPrefix +
                  (null == callback.key ||
                  (invokeCallback && invokeCallback.key === callback.key)
                    ? ""
                    : ("" + callback.key).replace(
                        userProvidedKeyEscapeRegex,
                        "$&/"
                      ) + "/") +
                  childKey
              )),
              "" !== nameSoFar &&
                null != invokeCallback &&
                isValidElement(invokeCallback) &&
                null == invokeCallback.key &&
                invokeCallback._store &&
                !invokeCallback._store.validated &&
                (escapedPrefix._store.validated = 2),
              (callback = escapedPrefix)),
            array.push(callback));
        return 1;
      }
      invokeCallback = 0;
      childKey = "" === nameSoFar ? "." : nameSoFar + ":";
      if (isArrayImpl(children))
        for (var i = 0; i < children.length; i++)
          (nameSoFar = children[i]),
            (type = childKey + getElementKey(nameSoFar, i)),
            (invokeCallback += mapIntoArray(
              nameSoFar,
              array,
              escapedPrefix,
              type,
              callback
            ));
      else if (((i = getIteratorFn(children)), "function" === typeof i))
        for (
          i === children.entries &&
            (didWarnAboutMaps ||
              console.warn(
                "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
              ),
            (didWarnAboutMaps = !0)),
            children = i.call(children),
            i = 0;
          !(nameSoFar = children.next()).done;

        )
          (nameSoFar = nameSoFar.value),
            (type = childKey + getElementKey(nameSoFar, i++)),
            (invokeCallback += mapIntoArray(
              nameSoFar,
              array,
              escapedPrefix,
              type,
              callback
            ));
      else if ("object" === type) {
        if ("function" === typeof children.then)
          return mapIntoArray(
            resolveThenable(children),
            array,
            escapedPrefix,
            nameSoFar,
            callback
          );
        array = String(children);
        throw Error(
          "Objects are not valid as a React child (found: " +
            ("[object Object]" === array
              ? "object with keys {" + Object.keys(children).join(", ") + "}"
              : array) +
            "). If you meant to render a collection of children, use an array instead."
        );
      }
      return invokeCallback;
    }
    function mapChildren(children, func, context) {
      if (null == children) return children;
      var result = [],
        count = 0;
      mapIntoArray(children, result, "", "", function (child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    function lazyInitializer(payload) {
      if (-1 === payload._status) {
        var ctor = payload._result;
        ctor = ctor();
        ctor.then(
          function (moduleObject) {
            if (0 === payload._status || -1 === payload._status)
              (payload._status = 1), (payload._result = moduleObject);
          },
          function (error) {
            if (0 === payload._status || -1 === payload._status)
              (payload._status = 2), (payload._result = error);
          }
        );
        -1 === payload._status &&
          ((payload._status = 0), (payload._result = ctor));
      }
      if (1 === payload._status)
        return (
          (ctor = payload._result),
          void 0 === ctor &&
            console.error(
              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
              ctor
            ),
          "default" in ctor ||
            console.error(
              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
              ctor
            ),
          ctor.default
        );
      throw payload._result;
    }
    function resolveDispatcher() {
      var dispatcher = ReactSharedInternals.H;
      null === dispatcher &&
        console.error(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
      return dispatcher;
    }
    function noop() {}
    function enqueueTask(task) {
      if (null === enqueueTaskImpl)
        try {
          var requireString = ("require" + Math.random()).slice(0, 7);
          enqueueTaskImpl = (module && module[requireString]).call(
            module,
            "timers"
          ).setImmediate;
        } catch (_err) {
          enqueueTaskImpl = function (callback) {
            !1 === didWarnAboutMessageChannel &&
              ((didWarnAboutMessageChannel = !0),
              "undefined" === typeof MessageChannel &&
                console.error(
                  "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
                ));
            var channel = new MessageChannel();
            channel.port1.onmessage = callback;
            channel.port2.postMessage(void 0);
          };
        }
      return enqueueTaskImpl(task);
    }
    function aggregateErrors(errors) {
      return 1 < errors.length && "function" === typeof AggregateError
        ? new AggregateError(errors)
        : errors[0];
    }
    function popActScope(prevActQueue, prevActScopeDepth) {
      prevActScopeDepth !== actScopeDepth - 1 &&
        console.error(
          "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
        );
      actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
      var queue = ReactSharedInternals.actQueue;
      if (null !== queue)
        if (0 !== queue.length)
          try {
            flushActQueue(queue);
            enqueueTask(function () {
              return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
            return;
          } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
          }
        else ReactSharedInternals.actQueue = null;
      0 < ReactSharedInternals.thrownErrors.length
        ? ((queue = aggregateErrors(ReactSharedInternals.thrownErrors)),
          (ReactSharedInternals.thrownErrors.length = 0),
          reject(queue))
        : resolve(returnValue);
    }
    function flushActQueue(queue) {
      if (!isFlushing) {
        isFlushing = !0;
        var i = 0;
        try {
          for (; i < queue.length; i++) {
            var callback = queue[i];
            do {
              ReactSharedInternals.didUsePromise = !1;
              var continuation = callback(!1);
              if (null !== continuation) {
                if (ReactSharedInternals.didUsePromise) {
                  queue[i] = callback;
                  queue.splice(0, i);
                  return;
                }
                callback = continuation;
              } else break;
            } while (1);
          }
          queue.length = 0;
        } catch (error) {
          queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
        } finally {
          isFlushing = !1;
        }
      }
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
      "function" ===
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
      REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
      REACT_MEMO_TYPE = Symbol.for("react.memo"),
      REACT_LAZY_TYPE = Symbol.for("react.lazy"),
      REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
      didWarnStateUpdateForUnmountedComponent = {},
      ReactNoopUpdateQueue = {
        isMounted: function () {
          return !1;
        },
        enqueueForceUpdate: function (publicInstance) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function (publicInstance) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function (publicInstance) {
          warnNoop(publicInstance, "setState");
        }
      },
      assign = Object.assign,
      emptyObject = {};
    Object.freeze(emptyObject);
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function (partialState, callback) {
      if (
        "object" !== typeof partialState &&
        "function" !== typeof partialState &&
        null != partialState
      )
        throw Error(
          "takes an object of state variables to update or a function which returns an object of state variables."
        );
      this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {
        isMounted: [
          "isMounted",
          "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
          "replaceState",
          "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
      },
      fnName;
    for (fnName in deprecatedAPIs)
      deprecatedAPIs.hasOwnProperty(fnName) &&
        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    ComponentDummy.prototype = Component.prototype;
    deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
    deprecatedAPIs.constructor = PureComponent;
    assign(deprecatedAPIs, Component.prototype);
    deprecatedAPIs.isPureReactComponent = !0;
    var isArrayImpl = Array.isArray,
      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
      ReactSharedInternals = {
        H: null,
        A: null,
        T: null,
        S: null,
        V: null,
        actQueue: null,
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1,
        didUsePromise: !1,
        thrownErrors: [],
        getCurrentStack: null,
        recentlyCreatedOwnerStacks: 0
      },
      hasOwnProperty = Object.prototype.hasOwnProperty,
      createTask = console.createTask
        ? console.createTask
        : function () {
            return null;
          };
    deprecatedAPIs = {
      "react-stack-bottom-frame": function (callStackForError) {
        return callStackForError();
      }
    };
    var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
    var didWarnAboutElementRef = {};
    var unknownOwnerDebugStack = deprecatedAPIs[
      "react-stack-bottom-frame"
    ].bind(deprecatedAPIs, UnknownOwner)();
    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
    var didWarnAboutMaps = !1,
      userProvidedKeyEscapeRegex = /\/+/g,
      reportGlobalError =
        "function" === typeof reportError
          ? reportError
          : function (error) {
              if (
                "object" === typeof window &&
                "function" === typeof window.ErrorEvent
              ) {
                var event = new window.ErrorEvent("error", {
                  bubbles: !0,
                  cancelable: !0,
                  message:
                    "object" === typeof error &&
                    null !== error &&
                    "string" === typeof error.message
                      ? String(error.message)
                      : String(error),
                  error: error
                });
                if (!window.dispatchEvent(event)) return;
              } else if (
                "object" === typeof process &&
                "function" === typeof process.emit
              ) {
                process.emit("uncaughtException", error);
                return;
              }
              console.error(error);
            },
      didWarnAboutMessageChannel = !1,
      enqueueTaskImpl = null,
      actScopeDepth = 0,
      didWarnNoAwaitAct = !1,
      isFlushing = !1,
      queueSeveralMicrotasks =
        "function" === typeof queueMicrotask
          ? function (callback) {
              queueMicrotask(function () {
                return queueMicrotask(callback);
              });
            }
          : enqueueTask;
    deprecatedAPIs = Object.freeze({
      __proto__: null,
      c: function (size) {
        return resolveDispatcher().useMemoCache(size);
      }
    });
    exports.Children = {
      map: mapChildren,
      forEach: function (children, forEachFunc, forEachContext) {
        mapChildren(
          children,
          function () {
            forEachFunc.apply(this, arguments);
          },
          forEachContext
        );
      },
      count: function (children) {
        var n = 0;
        mapChildren(children, function () {
          n++;
        });
        return n;
      },
      toArray: function (children) {
        return (
          mapChildren(children, function (child) {
            return child;
          }) || []
        );
      },
      only: function (children) {
        if (!isValidElement(children))
          throw Error(
            "React.Children.only expected to receive a single React element child."
          );
        return children;
      }
    };
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
      ReactSharedInternals;
    exports.__COMPILER_RUNTIME = deprecatedAPIs;
    exports.act = function (callback) {
      var prevActQueue = ReactSharedInternals.actQueue,
        prevActScopeDepth = actScopeDepth;
      actScopeDepth++;
      var queue = (ReactSharedInternals.actQueue =
          null !== prevActQueue ? prevActQueue : []),
        didAwaitActCall = !1;
      try {
        var result = callback();
      } catch (error) {
        ReactSharedInternals.thrownErrors.push(error);
      }
      if (0 < ReactSharedInternals.thrownErrors.length)
        throw (
          (popActScope(prevActQueue, prevActScopeDepth),
          (callback = aggregateErrors(ReactSharedInternals.thrownErrors)),
          (ReactSharedInternals.thrownErrors.length = 0),
          callback)
        );
      if (
        null !== result &&
        "object" === typeof result &&
        "function" === typeof result.then
      ) {
        var thenable = result;
        queueSeveralMicrotasks(function () {
          didAwaitActCall ||
            didWarnNoAwaitAct ||
            ((didWarnNoAwaitAct = !0),
            console.error(
              "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
            ));
        });
        return {
          then: function (resolve, reject) {
            didAwaitActCall = !0;
            thenable.then(
              function (returnValue) {
                popActScope(prevActQueue, prevActScopeDepth);
                if (0 === prevActScopeDepth) {
                  try {
                    flushActQueue(queue),
                      enqueueTask(function () {
                        return recursivelyFlushAsyncActWork(
                          returnValue,
                          resolve,
                          reject
                        );
                      });
                  } catch (error$0) {
                    ReactSharedInternals.thrownErrors.push(error$0);
                  }
                  if (0 < ReactSharedInternals.thrownErrors.length) {
                    var _thrownError = aggregateErrors(
                      ReactSharedInternals.thrownErrors
                    );
                    ReactSharedInternals.thrownErrors.length = 0;
                    reject(_thrownError);
                  }
                } else resolve(returnValue);
              },
              function (error) {
                popActScope(prevActQueue, prevActScopeDepth);
                0 < ReactSharedInternals.thrownErrors.length
                  ? ((error = aggregateErrors(
                      ReactSharedInternals.thrownErrors
                    )),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    reject(error))
                  : reject(error);
              }
            );
          }
        };
      }
      var returnValue$jscomp$0 = result;
      popActScope(prevActQueue, prevActScopeDepth);
      0 === prevActScopeDepth &&
        (flushActQueue(queue),
        0 !== queue.length &&
          queueSeveralMicrotasks(function () {
            didAwaitActCall ||
              didWarnNoAwaitAct ||
              ((didWarnNoAwaitAct = !0),
              console.error(
                "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"
              ));
          }),
        (ReactSharedInternals.actQueue = null));
      if (0 < ReactSharedInternals.thrownErrors.length)
        throw (
          ((callback = aggregateErrors(ReactSharedInternals.thrownErrors)),
          (ReactSharedInternals.thrownErrors.length = 0),
          callback)
        );
      return {
        then: function (resolve, reject) {
          didAwaitActCall = !0;
          0 === prevActScopeDepth
            ? ((ReactSharedInternals.actQueue = queue),
              enqueueTask(function () {
                return recursivelyFlushAsyncActWork(
                  returnValue$jscomp$0,
                  resolve,
                  reject
                );
              }))
            : resolve(returnValue$jscomp$0);
        }
      };
    };
    exports.cache = function (fn) {
      return function () {
        return fn.apply(null, arguments);
      };
    };
    exports.captureOwnerStack = function () {
      var getCurrentStack = ReactSharedInternals.getCurrentStack;
      return null === getCurrentStack ? null : getCurrentStack();
    };
    exports.cloneElement = function (element, config, children) {
      if (null === element || void 0 === element)
        throw Error(
          "The argument must be a React element, but you passed " +
            element +
            "."
        );
      var props = assign({}, element.props),
        key = element.key,
        owner = element._owner;
      if (null != config) {
        var JSCompiler_inline_result;
        a: {
          if (
            hasOwnProperty.call(config, "ref") &&
            (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(
              config,
              "ref"
            ).get) &&
            JSCompiler_inline_result.isReactWarning
          ) {
            JSCompiler_inline_result = !1;
            break a;
          }
          JSCompiler_inline_result = void 0 !== config.ref;
        }
        JSCompiler_inline_result && (owner = getOwner());
        hasValidKey(config) &&
          (checkKeyStringCoercion(config.key), (key = "" + config.key));
        for (propName in config)
          !hasOwnProperty.call(config, propName) ||
            "key" === propName ||
            "__self" === propName ||
            "__source" === propName ||
            ("ref" === propName && void 0 === config.ref) ||
            (props[propName] = config[propName]);
      }
      var propName = arguments.length - 2;
      if (1 === propName) props.children = children;
      else if (1 < propName) {
        JSCompiler_inline_result = Array(propName);
        for (var i = 0; i < propName; i++)
          JSCompiler_inline_result[i] = arguments[i + 2];
        props.children = JSCompiler_inline_result;
      }
      props = ReactElement(
        element.type,
        key,
        void 0,
        void 0,
        owner,
        props,
        element._debugStack,
        element._debugTask
      );
      for (key = 2; key < arguments.length; key++)
        (owner = arguments[key]),
          isValidElement(owner) && owner._store && (owner._store.validated = 1);
      return props;
    };
    exports.createContext = function (defaultValue) {
      defaultValue = {
        $$typeof: REACT_CONTEXT_TYPE,
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        _threadCount: 0,
        Provider: null,
        Consumer: null
      };
      defaultValue.Provider = defaultValue;
      defaultValue.Consumer = {
        $$typeof: REACT_CONSUMER_TYPE,
        _context: defaultValue
      };
      defaultValue._currentRenderer = null;
      defaultValue._currentRenderer2 = null;
      return defaultValue;
    };
    exports.createElement = function (type, config, children) {
      for (var i = 2; i < arguments.length; i++) {
        var node = arguments[i];
        isValidElement(node) && node._store && (node._store.validated = 1);
      }
      i = {};
      node = null;
      if (null != config)
        for (propName in (didWarnAboutOldJSXRuntime ||
          !("__self" in config) ||
          "key" in config ||
          ((didWarnAboutOldJSXRuntime = !0),
          console.warn(
            "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform"
          )),
        hasValidKey(config) &&
          (checkKeyStringCoercion(config.key), (node = "" + config.key)),
        config))
          hasOwnProperty.call(config, propName) &&
            "key" !== propName &&
            "__self" !== propName &&
            "__source" !== propName &&
            (i[propName] = config[propName]);
      var childrenLength = arguments.length - 2;
      if (1 === childrenLength) i.children = children;
      else if (1 < childrenLength) {
        for (
          var childArray = Array(childrenLength), _i = 0;
          _i < childrenLength;
          _i++
        )
          childArray[_i] = arguments[_i + 2];
        Object.freeze && Object.freeze(childArray);
        i.children = childArray;
      }
      if (type && type.defaultProps)
        for (propName in ((childrenLength = type.defaultProps), childrenLength))
          void 0 === i[propName] && (i[propName] = childrenLength[propName]);
      node &&
        defineKeyPropWarningGetter(
          i,
          "function" === typeof type
            ? type.displayName || type.name || "Unknown"
            : type
        );
      var propName = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
      return ReactElement(
        type,
        node,
        void 0,
        void 0,
        getOwner(),
        i,
        propName ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
        propName ? createTask(getTaskName(type)) : unknownOwnerDebugTask
      );
    };
    exports.createRef = function () {
      var refObject = { current: null };
      Object.seal(refObject);
      return refObject;
    };
    exports.forwardRef = function (render) {
      null != render && render.$$typeof === REACT_MEMO_TYPE
        ? console.error(
            "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
          )
        : "function" !== typeof render
          ? console.error(
              "forwardRef requires a render function but was given %s.",
              null === render ? "null" : typeof render
            )
          : 0 !== render.length &&
            2 !== render.length &&
            console.error(
              "forwardRef render functions accept exactly two parameters: props and ref. %s",
              1 === render.length
                ? "Did you forget to use the ref parameter?"
                : "Any additional parameter will be undefined."
            );
      null != render &&
        null != render.defaultProps &&
        console.error(
          "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?"
        );
      var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render: render },
        ownName;
      Object.defineProperty(elementType, "displayName", {
        enumerable: !1,
        configurable: !0,
        get: function () {
          return ownName;
        },
        set: function (name) {
          ownName = name;
          render.name ||
            render.displayName ||
            (Object.defineProperty(render, "name", { value: name }),
            (render.displayName = name));
        }
      });
      return elementType;
    };
    exports.isValidElement = isValidElement;
    exports.lazy = function (ctor) {
      return {
        $$typeof: REACT_LAZY_TYPE,
        _payload: { _status: -1, _result: ctor },
        _init: lazyInitializer
      };
    };
    exports.memo = function (type, compare) {
      null == type &&
        console.error(
          "memo: The first argument must be a component. Instead received: %s",
          null === type ? "null" : typeof type
        );
      compare = {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: void 0 === compare ? null : compare
      };
      var ownName;
      Object.defineProperty(compare, "displayName", {
        enumerable: !1,
        configurable: !0,
        get: function () {
          return ownName;
        },
        set: function (name) {
          ownName = name;
          type.name ||
            type.displayName ||
            (Object.defineProperty(type, "name", { value: name }),
            (type.displayName = name));
        }
      });
      return compare;
    };
    exports.startTransition = function (scope) {
      var prevTransition = ReactSharedInternals.T,
        currentTransition = {};
      ReactSharedInternals.T = currentTransition;
      currentTransition._updatedFibers = new Set();
      try {
        var returnValue = scope(),
          onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish &&
          onStartTransitionFinish(currentTransition, returnValue);
        "object" === typeof returnValue &&
          null !== returnValue &&
          "function" === typeof returnValue.then &&
          returnValue.then(noop, reportGlobalError);
      } catch (error) {
        reportGlobalError(error);
      } finally {
        null === prevTransition &&
          currentTransition._updatedFibers &&
          ((scope = currentTransition._updatedFibers.size),
          currentTransition._updatedFibers.clear(),
          10 < scope &&
            console.warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            )),
          (ReactSharedInternals.T = prevTransition);
      }
    };
    exports.unstable_useCacheRefresh = function () {
      return resolveDispatcher().useCacheRefresh();
    };
    exports.use = function (usable) {
      return resolveDispatcher().use(usable);
    };
    exports.useActionState = function (action, initialState, permalink) {
      return resolveDispatcher().useActionState(
        action,
        initialState,
        permalink
      );
    };
    exports.useCallback = function (callback, deps) {
      return resolveDispatcher().useCallback(callback, deps);
    };
    exports.useContext = function (Context) {
      var dispatcher = resolveDispatcher();
      Context.$$typeof === REACT_CONSUMER_TYPE &&
        console.error(
          "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"
        );
      return dispatcher.useContext(Context);
    };
    exports.useDebugValue = function (value, formatterFn) {
      return resolveDispatcher().useDebugValue(value, formatterFn);
    };
    exports.useDeferredValue = function (value, initialValue) {
      return resolveDispatcher().useDeferredValue(value, initialValue);
    };
    exports.useEffect = function (create, createDeps, update) {
      null == create &&
        console.warn(
          "React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?"
        );
      var dispatcher = resolveDispatcher();
      if ("function" === typeof update)
        throw Error(
          "useEffect CRUD overload is not enabled in this build of React."
        );
      return dispatcher.useEffect(create, createDeps);
    };
    exports.useId = function () {
      return resolveDispatcher().useId();
    };
    exports.useImperativeHandle = function (ref, create, deps) {
      return resolveDispatcher().useImperativeHandle(ref, create, deps);
    };
    exports.useInsertionEffect = function (create, deps) {
      null == create &&
        console.warn(
          "React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?"
        );
      return resolveDispatcher().useInsertionEffect(create, deps);
    };
    exports.useLayoutEffect = function (create, deps) {
      null == create &&
        console.warn(
          "React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?"
        );
      return resolveDispatcher().useLayoutEffect(create, deps);
    };
    exports.useMemo = function (create, deps) {
      return resolveDispatcher().useMemo(create, deps);
    };
    exports.useOptimistic = function (passthrough, reducer) {
      return resolveDispatcher().useOptimistic(passthrough, reducer);
    };
    exports.useReducer = function (reducer, initialArg, init) {
      return resolveDispatcher().useReducer(reducer, initialArg, init);
    };
    exports.useRef = function (initialValue) {
      return resolveDispatcher().useRef(initialValue);
    };
    exports.useState = function (initialState) {
      return resolveDispatcher().useState(initialState);
    };
    exports.useSyncExternalStore = function (
      subscribe,
      getSnapshot,
      getServerSnapshot
    ) {
      return resolveDispatcher().useSyncExternalStore(
        subscribe,
        getSnapshot,
        getServerSnapshot
      );
    };
    exports.useTransition = function () {
      return resolveDispatcher().useTransition();
    };
    exports.version = "19.1.0";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
      "function" ===
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();


/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "./node_modules/react/jsx-runtime.js":
/*!*******************************************!*\
  !*** ./node_modules/react/jsx-runtime.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/react-jsx-runtime.development.js */ "./node_modules/react/cjs/react-jsx-runtime.development.js");
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


 true &&
  (function () {
    function performWorkUntilDeadline() {
      needsPaint = !1;
      if (isMessageLoopRunning) {
        var currentTime = exports.unstable_now();
        startTime = currentTime;
        var hasMoreWork = !0;
        try {
          a: {
            isHostCallbackScheduled = !1;
            isHostTimeoutScheduled &&
              ((isHostTimeoutScheduled = !1),
              localClearTimeout(taskTimeoutID),
              (taskTimeoutID = -1));
            isPerformingWork = !0;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              b: {
                advanceTimers(currentTime);
                for (
                  currentTask = peek(taskQueue);
                  null !== currentTask &&
                  !(
                    currentTask.expirationTime > currentTime &&
                    shouldYieldToHost()
                  );

                ) {
                  var callback = currentTask.callback;
                  if ("function" === typeof callback) {
                    currentTask.callback = null;
                    currentPriorityLevel = currentTask.priorityLevel;
                    var continuationCallback = callback(
                      currentTask.expirationTime <= currentTime
                    );
                    currentTime = exports.unstable_now();
                    if ("function" === typeof continuationCallback) {
                      currentTask.callback = continuationCallback;
                      advanceTimers(currentTime);
                      hasMoreWork = !0;
                      break b;
                    }
                    currentTask === peek(taskQueue) && pop(taskQueue);
                    advanceTimers(currentTime);
                  } else pop(taskQueue);
                  currentTask = peek(taskQueue);
                }
                if (null !== currentTask) hasMoreWork = !0;
                else {
                  var firstTimer = peek(timerQueue);
                  null !== firstTimer &&
                    requestHostTimeout(
                      handleTimeout,
                      firstTimer.startTime - currentTime
                    );
                  hasMoreWork = !1;
                }
              }
              break a;
            } finally {
              (currentTask = null),
                (currentPriorityLevel = previousPriorityLevel),
                (isPerformingWork = !1);
            }
            hasMoreWork = void 0;
          }
        } finally {
          hasMoreWork
            ? schedulePerformWorkUntilDeadline()
            : (isMessageLoopRunning = !1);
        }
      }
    }
    function push(heap, node) {
      var index = heap.length;
      heap.push(node);
      a: for (; 0 < index; ) {
        var parentIndex = (index - 1) >>> 1,
          parent = heap[parentIndex];
        if (0 < compare(parent, node))
          (heap[parentIndex] = node),
            (heap[index] = parent),
            (index = parentIndex);
        else break a;
      }
    }
    function peek(heap) {
      return 0 === heap.length ? null : heap[0];
    }
    function pop(heap) {
      if (0 === heap.length) return null;
      var first = heap[0],
        last = heap.pop();
      if (last !== first) {
        heap[0] = last;
        a: for (
          var index = 0, length = heap.length, halfLength = length >>> 1;
          index < halfLength;

        ) {
          var leftIndex = 2 * (index + 1) - 1,
            left = heap[leftIndex],
            rightIndex = leftIndex + 1,
            right = heap[rightIndex];
          if (0 > compare(left, last))
            rightIndex < length && 0 > compare(right, left)
              ? ((heap[index] = right),
                (heap[rightIndex] = last),
                (index = rightIndex))
              : ((heap[index] = left),
                (heap[leftIndex] = last),
                (index = leftIndex));
          else if (rightIndex < length && 0 > compare(right, last))
            (heap[index] = right),
              (heap[rightIndex] = last),
              (index = rightIndex);
          else break a;
        }
      }
      return first;
    }
    function compare(a, b) {
      var diff = a.sortIndex - b.sortIndex;
      return 0 !== diff ? diff : a.id - b.id;
    }
    function advanceTimers(currentTime) {
      for (var timer = peek(timerQueue); null !== timer; ) {
        if (null === timer.callback) pop(timerQueue);
        else if (timer.startTime <= currentTime)
          pop(timerQueue),
            (timer.sortIndex = timer.expirationTime),
            push(taskQueue, timer);
        else break;
        timer = peek(timerQueue);
      }
    }
    function handleTimeout(currentTime) {
      isHostTimeoutScheduled = !1;
      advanceTimers(currentTime);
      if (!isHostCallbackScheduled)
        if (null !== peek(taskQueue))
          (isHostCallbackScheduled = !0),
            isMessageLoopRunning ||
              ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline());
        else {
          var firstTimer = peek(timerQueue);
          null !== firstTimer &&
            requestHostTimeout(
              handleTimeout,
              firstTimer.startTime - currentTime
            );
        }
    }
    function shouldYieldToHost() {
      return needsPaint
        ? !0
        : exports.unstable_now() - startTime < frameInterval
          ? !1
          : !0;
    }
    function requestHostTimeout(callback, ms) {
      taskTimeoutID = localSetTimeout(function () {
        callback(exports.unstable_now());
      }, ms);
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
      "function" ===
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    exports.unstable_now = void 0;
    if (
      "object" === typeof performance &&
      "function" === typeof performance.now
    ) {
      var localPerformance = performance;
      exports.unstable_now = function () {
        return localPerformance.now();
      };
    } else {
      var localDate = Date,
        initialTime = localDate.now();
      exports.unstable_now = function () {
        return localDate.now() - initialTime;
      };
    }
    var taskQueue = [],
      timerQueue = [],
      taskIdCounter = 1,
      currentTask = null,
      currentPriorityLevel = 3,
      isPerformingWork = !1,
      isHostCallbackScheduled = !1,
      isHostTimeoutScheduled = !1,
      needsPaint = !1,
      localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
      localClearTimeout =
        "function" === typeof clearTimeout ? clearTimeout : null,
      localSetImmediate =
        "undefined" !== typeof setImmediate ? setImmediate : null,
      isMessageLoopRunning = !1,
      taskTimeoutID = -1,
      frameInterval = 5,
      startTime = -1;
    if ("function" === typeof localSetImmediate)
      var schedulePerformWorkUntilDeadline = function () {
        localSetImmediate(performWorkUntilDeadline);
      };
    else if ("undefined" !== typeof MessageChannel) {
      var channel = new MessageChannel(),
        port = channel.port2;
      channel.port1.onmessage = performWorkUntilDeadline;
      schedulePerformWorkUntilDeadline = function () {
        port.postMessage(null);
      };
    } else
      schedulePerformWorkUntilDeadline = function () {
        localSetTimeout(performWorkUntilDeadline, 0);
      };
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function (task) {
      task.callback = null;
    };
    exports.unstable_forceFrameRate = function (fps) {
      0 > fps || 125 < fps
        ? console.error(
            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
          )
        : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
    };
    exports.unstable_getCurrentPriorityLevel = function () {
      return currentPriorityLevel;
    };
    exports.unstable_next = function (eventHandler) {
      switch (currentPriorityLevel) {
        case 1:
        case 2:
        case 3:
          var priorityLevel = 3;
          break;
        default:
          priorityLevel = currentPriorityLevel;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
    exports.unstable_requestPaint = function () {
      needsPaint = !0;
    };
    exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          priorityLevel = 3;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
    exports.unstable_scheduleCallback = function (
      priorityLevel,
      callback,
      options
    ) {
      var currentTime = exports.unstable_now();
      "object" === typeof options && null !== options
        ? ((options = options.delay),
          (options =
            "number" === typeof options && 0 < options
              ? currentTime + options
              : currentTime))
        : (options = currentTime);
      switch (priorityLevel) {
        case 1:
          var timeout = -1;
          break;
        case 2:
          timeout = 250;
          break;
        case 5:
          timeout = 1073741823;
          break;
        case 4:
          timeout = 1e4;
          break;
        default:
          timeout = 5e3;
      }
      timeout = options + timeout;
      priorityLevel = {
        id: taskIdCounter++,
        callback: callback,
        priorityLevel: priorityLevel,
        startTime: options,
        expirationTime: timeout,
        sortIndex: -1
      };
      options > currentTime
        ? ((priorityLevel.sortIndex = options),
          push(timerQueue, priorityLevel),
          null === peek(taskQueue) &&
            priorityLevel === peek(timerQueue) &&
            (isHostTimeoutScheduled
              ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
              : (isHostTimeoutScheduled = !0),
            requestHostTimeout(handleTimeout, options - currentTime)))
        : ((priorityLevel.sortIndex = timeout),
          push(taskQueue, priorityLevel),
          isHostCallbackScheduled ||
            isPerformingWork ||
            ((isHostCallbackScheduled = !0),
            isMessageLoopRunning ||
              ((isMessageLoopRunning = !0),
              schedulePerformWorkUntilDeadline())));
      return priorityLevel;
    };
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = function (callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = parentPriorityLevel;
        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
    };
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
      "function" ===
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();


/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) // removed by dead control flow
{} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./templates/360Slider.js":
/*!********************************!*\
  !*** ./templates/360Slider.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["assetLoading", "assetError"],
  _excluded2 = ["imageAssetLoading", "imageAssetError", "imageS3Url", "imageAssetDims"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* Product Explore – multi-screen template with per-element animations,
delay control & interactive Message Button  (v1.3 – fakeBox full elements)
MODIFIED TO INCLUDE 360-SLIDER FUNCTIONALITY
------------------------------------------------------------------------------ */
var API_BASE_URL = "https://localhost:3001" || 0;

 // Added useRef


// --- BEGIN S3/BACKEND INTEGRATION HELPERS ---

// IMPORTANT: Implement this function in your application to retrieve the JWT token.

var getAuthToken = function getAuthToken() {
  if (typeof window !== "undefined") {
    return localStorage.getItem("jwt");
  }
  return null;
};
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(fileObject) {
    var assetType,
      formData,
      token,
      headers,
      response,
      errorData,
      result,
      _args2 = arguments,
      _t3,
      _t4;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          assetType = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : "image";
          // assetType can be 'image' or 'video'
          formData = new FormData();
          formData.append("assetFile", fileObject);
          // Optional: pass assetType to backend if it needs to differentiate
          // formData.append("assetType", assetType);
          _context2.p = 1;
          token = getAuthToken();
          headers = {};
          if (token) {
            headers["Authorization"] = "Bearer ".concat(token);
          }
          _context2.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData,
            headers: headers
          });
        case 2:
          response = _context2.v;
          if (response.ok) {
            _context2.n = 7;
            break;
          }
          _context2.p = 3;
          _context2.n = 4;
          return response.json();
        case 4:
          errorData = _context2.v;
          _context2.n = 6;
          break;
        case 5:
          _context2.p = 5;
          _t3 = _context2.v;
          errorData = {
            message: "Upload failed: ".concat(response.statusText || response.status)
          };
        case 6:
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 7:
          _context2.n = 8;
          return response.json();
        case 8:
          result = _context2.v;
          if (result.url) {
            _context2.n = 9;
            break;
          }
          throw new Error("Upload successful, but no URL was returned from the backend.");
        case 9:
          return _context2.a(2, result.url);
        case 10:
          _context2.p = 10;
          _t4 = _context2.v;
          console.error("Error uploading ".concat(assetType, " file to backend:"), _t4);
          if (!(_t4 instanceof Error)) {
            _context2.n = 11;
            break;
          }
          throw _t4;
        case 11:
          throw new Error(String(_t4 || "An unknown error occurred during ".concat(assetType, " file upload.")));
        case 12:
          return _context2.a(2);
      }
    }, _callee2, null, [[3, 5], [1, 10]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
function measureImageDimensions(_x2) {
  return _measureImageDimensions.apply(this, arguments);
} // --- END S3/BACKEND INTEGRATION HELPERS ---
/* ---------- meta ---------- */
function _measureImageDimensions() {
  _measureImageDimensions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(s3Url) {
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          return _context3.a(2, new Promise(function (resolve, reject) {
            if (!s3Url) {
              reject(new Error("S3 URL is required to measure dimensions."));
              return;
            }
            var img = new Image();
            img.onload = function () {
              resolve({
                width: img.naturalWidth,
                height: img.naturalHeight
              });
            };
            img.onerror = function (err) {
              console.error("Error loading image for measurement:", s3Url, err);
              reject(new Error("Could not load image to measure dimensions. Check S3 URL and CORS."));
            };
            img.crossOrigin = "anonymous";
            img.src = s3Url;
          }));
      }
    }, _callee3);
  }));
  return _measureImageDimensions.apply(this, arguments);
}
var meta = {
  id: "product-explore",
  name: "360-slider",
  description: "Drag/resize anything, per-element one-shot anims, delay & message button, with 360 capabilities.",
  canvas: {
    w: 378,
    h: 648
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'"];
var FONT_WEIGHTS = ["normal", "bold"];
var FONT_STYLES = ["normal", "italic"];
var EFFECTS = ["fade", "zoom-in", "zoom-out", "slide-left", "slide-right", "slide-up", "slide-down", "rotate", "flip"];
var BOX_DIMS = function BOX_DIMS(t) {
  return {
    image: {
      w: 120,
      h: 80
    },
    video: {
      w: 160,
      h: 90
    },
    gallery: {
      w: 160,
      h: 90
    }
  }[t] || {
    w: 120,
    h: 36
  };
};
var startState = function startState() {
  return {
    bg: "#ffffff",
    current: 0,
    selected: null,
    animKey: 0,
    transition: "fade",
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }]
  };
};
var baseEl = function baseEl(type) {
  return {
    id: crypto.randomUUID(),
    type: type,
    x: 10,
    y: 10,
    w: 100,
    h: 30,
    effect: "fade",
    delay: 0
  };
};

/* -------------- element factory -------------- */
var newElement = function newElement(type) {
  switch (type) {
    case "button":
      // This is for top-level buttons and serves as base for item buttons
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          text: "Click me",
          color: "#2563eb",
          // Background color for top-level, can be bgColor for items
          textColor: "#ffffff",
          // Text color
          font: "Arial",
          size: 14,
          fontWeight: "normal",
          fontStyle: "normal",
          radius: 6,
          action: "url",
          // For top-level buttons
          url: "",
          target: null // For top-level buttons (screen navigation)
        }
      });
    case "title":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          text: "Title",
          color: "#000",
          font: "Georgia",
          size: 20
        }
      });
    case "subtitle":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          text: "Subtitle",
          color: "#111827",
          font: "Georgia",
          size: 16
        }
      });
    case "image":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          s3Url: "",
          assetLoading: false,
          assetError: null,
          assetDims: null,
          radius: 0,
          url: ""
        }
      });
    case "video":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 200,
        h: 120,
        props: {
          s3Url: "",
          assetLoading: false,
          assetError: null
        }
      });
    case "textbox":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        h: 80,
        props: {
          text: "Long text…",
          color: "#000",
          font: "Arial",
          size: 14,
          bold: false,
          // Legacy, prefer fontWeight
          align: "left",
          bg: "#ffffff"
        }
      });
    case "gallery":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 200,
        h: 80,
        props: {
          radius: 0,
          imageH: 70,
          gap: 4,
          images: []
        }
      });
    case "xbutton":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 32,
        h: 32,
        props: {
          target: null,
          color: "rgba(0,0,0,.6)",
          // This is for the 'X' symbol and border
          bgColor: "rgba(255,255,255,0.3)" // Default background color (semi-transparent white)
        }
      });
    case "360container":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: meta.canvas.w - 20,
        h: 300,
        props: {
          bg: "#dddddd",
          radius: 0,
          items: [],
          timeVisible: 0,
          // In seconds, 0 for indefinite
          images360: [],
          editingVisible: true,
          // Whether it's visible in editor when not selected
          threeSixtyImageFrame: {
            x: 0,
            y: 0,
            w: meta.canvas.w - 20,
            h: 200,
            zIndex: 10
          }
        }
      });
    case "render360Again":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 200,
        h: 150,
        // Adjusted height for potential image
        props: {
          bgColor: "#e9ecef",
          showButton: true,
          buttonText: "View 360°",
          buttonFontSize: 14,
          buttonFont: "Arial",
          buttonTextColor: "#FFFFFF",
          buttonBgColor: "#007bff",
          buttonRadius: 6,
          buttonUrl: "",
          // URL for the button
          showText: true,
          textContent: "Explore in 360 degrees",
          textFontSize: 12,
          textFont: "Arial",
          textColor: "#343a40",
          showArrow: true,
          arrowColor: "#007bff",
          // New image props
          showImage: false,
          imageS3Url: "",
          imageAssetLoading: false,
          imageAssetError: null,
          imageAssetDims: null,
          imageFrame: {
            x: 10,
            y: 50,
            w: 80,
            h: 60,
            zIndex: 5
          } // Default position below text/button
        }
      });
    case "text":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          text: "Text",
          color: "#000",
          font: "Arial",
          size: 14
        }
      });
    default:
      return baseEl(type);
  }
};
var newFakeItem = function newFakeItem(type) {
  var el = newElement(type);
  // For item buttons, simplify props (no screen navigation, primary action is URL)
  if (type === "button") {
    el.props = {
      text: "Button",
      bgColor: "#007bff",
      // Use bgColor for clarity
      textColor: "#ffffff",
      font: "Arial",
      size: 12,
      fontWeight: "normal",
      fontStyle: "normal",
      radius: 4,
      url: ""
    };
  }
  return {
    id: crypto.randomUUID(),
    type: type,
    props: el.props
  };
};

/* ═════════════════════ EDITOR ═════════════════════ /
/ ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _sel$props$target, _sel$props$imageFrame, _sel$props$imageFrame2;
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });
  var setCurrent = function setCurrent(i) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: i,
      selected: null
    }));
  };
  var addScreen = function addScreen() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: safe.screens.length,
      selected: null,
      screens: [].concat(_toConsumableArray(safe.screens), [{
        id: crypto.randomUUID(),
        elements: []
      }])
    }));
  };
  var duplicateScreen = function duplicateScreen() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: safe.screens.length,
      selected: null,
      screens: [].concat(_toConsumableArray(safe.screens), [JSON.parse(JSON.stringify(scr))])
    }));
  };
  var delScreen = function delScreen(idx) {
    if (safe.screens.length === 1) return;
    var arr = safe.screens.slice();
    arr.splice(idx, 1);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: arr,
      current: Math.max(0, idx - 1),
      selected: null
    }));
  };
  var add = function add(t) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newElement(t)])
        }) : sc;
      })
    }));
  };
  var patchSel = function patchSel(fn) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc, i) {
        return i !== safe.current ? sc : _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === safe.selected ? fn(e) : e;
          })
        });
      })
    }));
  };
  var delSel = function delSel() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc, i) {
        return i !== safe.current ? sc : _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.filter(function (e) {
            return e.id !== safe.selected;
          })
        });
      })
    }));
  };
  var duplicateSel = function duplicateSel() {
    if (!sel) return;
    var copy = JSON.parse(JSON.stringify(sel));
    copy.id = crypto.randomUUID();
    copy.x += 10;
    copy.y += 10;
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [copy])
        }) : sc;
      })
    }));
  };
  var handleAssetUpload = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(file, elementType, updateFn) {
      var s3Url, dims, _t, _t2;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            if (file) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            updateFn(_objectSpread({
              assetLoading: true,
              assetError: null,
              s3Url: ""
            }, elementType === "image" && {
              assetDims: null
            }));
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file, elementType);
          case 3:
            s3Url = _context.v;
            dims = null;
            if (!(elementType === "image" && file.type.startsWith("image/"))) {
              _context.n = 7;
              break;
            }
            _context.p = 4;
            _context.n = 5;
            return measureImageDimensions(s3Url);
          case 5:
            dims = _context.v;
            _context.n = 7;
            break;
          case 6:
            _context.p = 6;
            _t = _context.v;
            console.warn("Could not measure image dimensions:", _t.message);
          case 7:
            updateFn({
              s3Url: s3Url,
              assetDims: dims,
              assetLoading: false,
              assetError: null
            });
            _context.n = 9;
            break;
          case 8:
            _context.p = 8;
            _t2 = _context.v;
            updateFn({
              assetLoading: false,
              assetError: _t2.message || "Upload failed.",
              s3Url: "",
              assetDims: null
            });
          case 9:
            return _context.a(2);
        }
      }, _callee, null, [[4, 6], [2, 8]]);
    }));
    return function handleAssetUpload(_x3, _x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Background", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "flex flex-wrap gap-2",
      children: ["xbutton", "360container", "render360Again"].map(function (t) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          onClick: function onClick() {
            return add(t);
          },
          className: "btn",
          children: [" ", "+ ", t, " "]
        }, t);
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "flex items-center gap-2 overflow-x-auto pb-2",
      children: [safe.screens.map(function (sc, i) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "relative w-10 h-16 border ".concat(i === safe.current ? "border-blue-600" : "border-gray-300", " rounded flex-shrink-0 cursor-pointer"),
          onClick: function onClick() {
            return setCurrent(i);
          },
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            className: "absolute -top-1 -right-1 text-xs text-red-600 cursor-pointer",
            onClick: function onClick(e) {
              e.stopPropagation();
              delScreen(i);
            },
            children: "\xD7"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            className: "absolute inset-0 flex items-center justify-center text-[10px]",
            children: i + 1
          })]
        }, sc.id);
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: addScreen,
        className: "btn-secondary text-xs",
        children: "+ new"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: duplicateScreen,
        className: "btn-secondary text-xs",
        children: "+ dup"
      })]
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex justify-between items-center",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "capitalize font-medium",
          children: sel.type
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "space-x-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: duplicateSel,
            className: "text-blue-600",
            children: "copy"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: delSel,
            className: "text-red-600",
            children: "delete"
          })]
        })]
      }), sel.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: (_sel$props$target = sel.props.target) !== null && _sel$props$target !== void 0 ? _sel$props$target : "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  target: e.target.value === "" ? null : +e.target.value
                })
              });
            });
          },
          className: "border w-full",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "",
            children: "Go to next screen"
          }), safe.screens.map(function (_, i) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: i,
              children: [" ", "Screen ", i + 1, " "]
            }, i);
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: [" ", "Symbol/Border Color", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: [" ", " Background Color \"2px solid #3b82f6\"", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bgColor || "rgba(255,255,255,0.3)" // Provide a default if loading old data
            ,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgColor: e.target.value
                  })
                });
              });
            }
          })]
        })]
      }), sel.type === "360container" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "BG", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bg,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bg: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Radius", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: meta.canvas.w / 2,
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), " ", "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-xs font-medium",
          children: "360 Container Options"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Time Visible (s, 0=indefinite)", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            step: "1",
            value: sel.props.timeVisible,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    timeVisible: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-20"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Visible while editing", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.editingVisible,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    editingVisible: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "block font-medium mt-2",
          children: "360 Images (for the draggable frame)"
        }), sel.props.images360.map(function (img, idx) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "border p-1 my-1 rounded space-y-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              className: "flex items-center justify-between",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span", {
                className: "text-xs",
                children: ["Image ", idx + 1]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
                className: "text-red-600 text-xs",
                onClick: function onClick() {
                  return patchSel(function (o) {
                    var arr = o.props.images360.slice();
                    arr.splice(idx, 1);
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        images360: arr
                      })
                    });
                  });
                },
                children: [" ", "\xD7 delete", " "]
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "file",
              accept: "image/*",
              disabled: img.assetLoading,
              onChange: function onChange(e) {
                var _e$target$files;
                var file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];
                handleAssetUpload(file, "image", function (updatePayload) {
                  patchSel(function (o) {
                    var newImages360 = _toConsumableArray(o.props.images360);
                    newImages360[idx] = _objectSpread(_objectSpread({}, newImages360[idx]), updatePayload);
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        images360: newImages360
                      })
                    });
                  });
                });
              },
              className: "block w-full text-xs"
            }), img.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
              className: "text-xs text-blue-500 italic",
              children: "Uploading..."
            }), img.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
              className: "text-xs text-red-500 italic",
              children: ["Error: ", img.assetError]
            }), img.s3Url && !img.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              className: "mt-1",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                src: img.s3Url,
                alt: "360 item ".concat(idx),
                className: "max-w-[80px] max-h-[60px] border"
              }), img.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                className: "text-xs text-gray-500",
                children: [img.assetDims.width, "x", img.assetDims.height, "px"]
              })]
            })]
          }, idx);
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          className: "btn-secondary text-xs",
          onClick: function onClick() {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  images360: [].concat(_toConsumableArray(o.props.images360), [{
                    s3Url: "",
                    assetLoading: false,
                    assetError: null,
                    assetDims: null
                  }])
                })
              });
            });
          },
          children: [" ", "+ Add 360 Image", " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "block font-medium mt-2",
          children: "Elements Inside 360 Container (Items)"
        }), sel.props.items.map(function (it, iIdx) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "border p-1 my-1 rounded space-y-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              className: "flex justify-between items-center",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
                value: it.type,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    var T = e.target.value;
                    var arr = o.props.items.slice();
                    var newItemStructure = newFakeItem(T);
                    arr[iIdx] = {
                      id: arr[iIdx].id,
                      type: T,
                      props: newItemStructure.props,
                      x: arr[iIdx].x,
                      y: arr[iIdx].y,
                      w: BOX_DIMS(T).w,
                      h: BOX_DIMS(T).h
                    };
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        items: arr
                      })
                    });
                  });
                },
                className: "border text-xs",
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "text",
                  children: "text"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "title",
                  children: "title"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "subtitle",
                  children: "subtitle"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "textbox",
                  children: "textbox"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "button",
                  children: "button"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "image",
                  children: "image"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "video",
                  children: "video"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "gallery",
                  children: "gallery"
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                className: "flex space-x-1",
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
                  onClick: function onClick() {
                    return patchSel(function (o) {
                      var items = _toConsumableArray(o.props.items);
                      var originalItem = items[iIdx];
                      var copy = JSON.parse(JSON.stringify(originalItem));
                      copy.id = crypto.randomUUID();
                      copy.x = (originalItem.x || 0) + 5;
                      copy.y = (originalItem.y || 0) + 5;
                      items.splice(iIdx + 1, 0, copy);
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          items: items
                        })
                      });
                    });
                  },
                  className: "text-blue-600 text-xs",
                  children: [" ", "Duplicate", " "]
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
                  onClick: function onClick() {
                    return patchSel(function (o) {
                      var arr = o.props.items.slice();
                      arr.splice(iIdx, 1);
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          items: arr
                        })
                      });
                    });
                  },
                  className: "text-red-600 text-xs",
                  children: [" ", "\xD7", " "]
                })]
              })]
            }), function () {
              var patchItem = function patchItem(itemUpdateFn) {
                patchSel(function (o) {
                  var items = o.props.items.map(function (item, index) {
                    return index === iIdx ? itemUpdateFn(item) : item;
                  });
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      items: items
                    })
                  });
                });
              };
              var currentItemProps = it.props || {};
              switch (it.type) {
                case "text":
                case "title":
                case "subtitle":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      placeholder: "Text",
                      value: currentItemProps.text || "",
                      onChange: function onChange(e) {
                        return patchItem(function (p) {
                          return _objectSpread(_objectSpread({}, p), {}, {
                            props: _objectSpread(_objectSpread({}, p.props), {}, {
                              text: e.target.value
                            })
                          });
                        });
                      },
                      className: "border w-full px-1"
                    })
                  });
                case "button":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      placeholder: "Button Text",
                      value: currentItemProps.text || "",
                      onChange: function onChange(e) {
                        return patchItem(function (p) {
                          return _objectSpread(_objectSpread({}, p), {}, {
                            props: _objectSpread(_objectSpread({}, p.props), {}, {
                              text: e.target.value
                            })
                          });
                        });
                      },
                      className: "border w-full px-1 mb-1"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      placeholder: "URL",
                      value: currentItemProps.url || "",
                      onChange: function onChange(e) {
                        return patchItem(function (p) {
                          return _objectSpread(_objectSpread({}, p), {}, {
                            props: _objectSpread(_objectSpread({}, p.props), {}, {
                              url: e.target.value
                            })
                          });
                        });
                      },
                      className: "border w-full px-1 mb-1"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                      className: "grid grid-cols-2 gap-1",
                      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                        children: [" ", "BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                          type: "color",
                          value: currentItemProps.bgColor || "#007bff",
                          onChange: function onChange(e) {
                            return patchItem(function (p) {
                              return _objectSpread(_objectSpread({}, p), {}, {
                                props: _objectSpread(_objectSpread({}, p.props), {}, {
                                  bgColor: e.target.value
                                })
                              });
                            });
                          }
                        }), " "]
                      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                        children: [" ", "Text Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                          type: "color",
                          value: currentItemProps.textColor || "#ffffff",
                          onChange: function onChange(e) {
                            return patchItem(function (p) {
                              return _objectSpread(_objectSpread({}, p), {}, {
                                props: _objectSpread(_objectSpread({}, p.props), {}, {
                                  textColor: e.target.value
                                })
                              });
                            });
                          }
                        }), " "]
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
                      value: currentItemProps.font || "Arial",
                      onChange: function onChange(e) {
                        return patchItem(function (p) {
                          return _objectSpread(_objectSpread({}, p), {}, {
                            props: _objectSpread(_objectSpread({}, p.props), {}, {
                              font: e.target.value
                            })
                          });
                        });
                      },
                      className: "border w-full mt-1",
                      children: [" ", FONTS.map(function (f) {
                        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
                          value: f,
                          children: [" ", f.replace(/'/g, ""), " "]
                        }, f);
                      }), " "]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "number",
                      placeholder: "Font Size",
                      value: currentItemProps.size || 12,
                      onChange: function onChange(e) {
                        return patchItem(function (p) {
                          return _objectSpread(_objectSpread({}, p), {}, {
                            props: _objectSpread(_objectSpread({}, p.props), {}, {
                              size: +e.target.value
                            })
                          });
                        });
                      },
                      className: "border w-full px-1 mt-1"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                      className: "grid grid-cols-2 gap-1 mt-1",
                      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
                        value: currentItemProps.fontWeight || "normal",
                        onChange: function onChange(e) {
                          return patchItem(function (p) {
                            return _objectSpread(_objectSpread({}, p), {}, {
                              props: _objectSpread(_objectSpread({}, p.props), {}, {
                                fontWeight: e.target.value
                              })
                            });
                          });
                        },
                        className: "border w-full",
                        children: [" ", FONT_WEIGHTS.map(function (w) {
                          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                            value: w,
                            children: w
                          }, w);
                        }), " "]
                      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
                        value: currentItemProps.fontStyle || "normal",
                        onChange: function onChange(e) {
                          return patchItem(function (p) {
                            return _objectSpread(_objectSpread({}, p), {}, {
                              props: _objectSpread(_objectSpread({}, p.props), {}, {
                                fontStyle: e.target.value
                              })
                            });
                          });
                        },
                        className: "border w-full",
                        children: [" ", FONT_STYLES.map(function (s) {
                          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                            value: s,
                            children: s
                          }, s);
                        }), " "]
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "mt-1",
                      children: [" ", "Radius:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        value: currentItemProps.radius || 4,
                        onChange: function onChange(e) {
                          return patchItem(function (p) {
                            return _objectSpread(_objectSpread({}, p), {}, {
                              props: _objectSpread(_objectSpread({}, p.props), {}, {
                                radius: +e.target.value
                              })
                            });
                          });
                        },
                        className: "border px-1 w-16"
                      }), " ", "px", " "]
                    })]
                  });
                case "image":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
                      className: "block text-xs font-medium",
                      children: "Item Image:"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "file",
                      accept: "image/*",
                      disabled: currentItemProps.assetLoading,
                      onChange: function onChange(e) {
                        var _e$target$files2;
                        var file = (_e$target$files2 = e.target.files) === null || _e$target$files2 === void 0 ? void 0 : _e$target$files2[0];
                        handleAssetUpload(file, "image", function (updatePayload) {
                          patchItem(function (p) {
                            return _objectSpread(_objectSpread({}, p), {}, {
                              props: _objectSpread(_objectSpread({}, p.props), updatePayload)
                            });
                          });
                        });
                      },
                      className: "block w-full text-xs"
                    }), " ", currentItemProps.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
                      className: "text-xs text-blue-500 italic",
                      children: "Uploading..."
                    }), " ", currentItemProps.s3Url && !currentItemProps.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                      src: currentItemProps.s3Url,
                      alt: "Item Preview",
                      className: "max-w-[50px] max-h-[40px] border my-1"
                    })]
                  });
                case "video":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
                      className: "block text-xs font-medium",
                      children: "Item Video:"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "file",
                      accept: "video/*",
                      disabled: currentItemProps.assetLoading,
                      onChange: function onChange(e) {
                        var _e$target$files3;
                        var file = (_e$target$files3 = e.target.files) === null || _e$target$files3 === void 0 ? void 0 : _e$target$files3[0];
                        handleAssetUpload(file, "video", function (updatePayload) {
                          patchItem(function (p) {
                            return _objectSpread(_objectSpread({}, p), {}, {
                              props: _objectSpread(_objectSpread({}, p.props), updatePayload)
                            });
                          });
                        });
                      },
                      className: "block w-full text-xs"
                    }), " ", currentItemProps.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
                      className: "text-xs text-blue-500 italic",
                      children: "Uploading..."
                    }), " ", currentItemProps.s3Url && !currentItemProps.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
                      src: currentItemProps.s3Url,
                      controls: true,
                      className: "max-w-[80px] max-h-[60px] border my-1"
                    })]
                  });
                default:
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                    className: "text-xs text-gray-400",
                    children: ["Configure item type: ", it.type]
                  });
              }
            }()]
          }, it.id || iIdx);
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
          className: "flex flex-wrap gap-2 mt-2",
          children: ["text", "title", "subtitle", "textbox", "button", "image", "video", "gallery"].map(function (k) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
              className: "btn-secondary text-xs",
              onClick: function onClick() {
                return patchSel(function (o) {
                  var newItemFull = newElement(k);
                  var newItemForContainer = {
                    id: crypto.randomUUID(),
                    type: k,
                    // Use props from newFakeItem for button to get simplified structure
                    props: k === "button" ? newFakeItem(k).props : newItemFull.props,
                    x: 0,
                    y: 0,
                    w: BOX_DIMS(k).w,
                    h: BOX_DIMS(k).h
                  };
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      items: [].concat(_toConsumableArray(o.props.items), [newItemForContainer])
                    })
                  });
                });
              },
              children: ["+ ", k]
            }, k);
          })
        })]
      }), sel.type === "render360Again" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "space-y-2",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block text-xs font-medium",
          children: [" ", "Container BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bgColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgColor: e.target.value
                  })
                });
              });
            }
          }), " "]
        }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "block font-medium",
          children: "Button"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Show Button", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.showButton,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    showButton: e.target.checked
                  })
                });
              });
            }
          }), " "]
        }), sel.props.showButton && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
          children: [" ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            placeholder: "Button Text",
            value: sel.props.buttonText,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    buttonText: e.target.value
                  })
                });
              });
            },
            className: "border w-full px-1"
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
            value: sel.props.buttonFont,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    buttonFont: e.target.value
                  })
                });
              });
            },
            className: "border w-full",
            children: [" ", FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            }), " "]
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            placeholder: "Font Size",
            value: sel.props.buttonFontSize,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    buttonFontSize: +e.target.value
                  })
                });
              });
            },
            className: "border w-full px-1"
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            children: [" ", "Text Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.buttonTextColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      buttonTextColor: e.target.value
                    })
                  });
                });
              }
            }), " "]
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            children: [" ", "BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.buttonBgColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      buttonBgColor: e.target.value
                    })
                  });
                });
              }
            }), " "]
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            children: [" ", "Radius:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              value: sel.props.buttonRadius,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      buttonRadius: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            }), " ", "px", " "]
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            placeholder: "Button URL (optional)",
            value: sel.props.buttonUrl,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    buttonUrl: e.target.value
                  })
                });
              });
            },
            className: "border w-full px-1"
          }), " "]
        }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "block font-medium",
          children: "Text"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Show Text", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.showText,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    showText: e.target.checked
                  })
                });
              });
            }
          }), " "]
        }), sel.props.showText && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
          children: [" ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
            placeholder: "Text Content",
            value: sel.props.textContent,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textContent: e.target.value
                  })
                });
              });
            },
            className: "border w-full px-1",
            rows: "2"
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
            value: sel.props.textFont,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textFont: e.target.value
                  })
                });
              });
            },
            className: "border w-full",
            children: [" ", FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            }), " "]
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            placeholder: "Font Size",
            value: sel.props.textFontSize,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textFontSize: +e.target.value
                  })
                });
              });
            },
            className: "border w-full px-1"
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            children: [" ", "Text Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.textColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textColor: e.target.value
                    })
                  });
                });
              }
            }), " "]
          }), " "]
        }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "block font-medium",
          children: "Arrow"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Show Arrow", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.showArrow,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    showArrow: e.target.checked
                  })
                });
              });
            }
          }), " "]
        }), sel.props.showArrow && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
          children: [" ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            children: [" ", "Arrow Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.arrowColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      arrowColor: e.target.value
                    })
                  });
                });
              }
            }), " "]
          }), " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "block font-medium",
          children: "Image"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Show Image", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.showImage,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    showImage: e.target.checked
                  })
                });
              });
            }
          })]
        }), sel.props.showImage && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "file",
            accept: "image/*",
            disabled: sel.props.imageAssetLoading,
            onChange: function onChange(e) {
              var _e$target$files4;
              var file = (_e$target$files4 = e.target.files) === null || _e$target$files4 === void 0 ? void 0 : _e$target$files4[0];
              handleAssetUpload(file, "image", function (updatePayload) {
                patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      imageS3Url: updatePayload.s3Url,
                      imageAssetLoading: updatePayload.assetLoading,
                      imageAssetError: updatePayload.assetError,
                      imageAssetDims: updatePayload.assetDims
                    })
                  });
                });
              });
            },
            className: "block w-full text-xs"
          }), sel.props.imageAssetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
            className: "text-xs text-blue-500 italic",
            children: "Uploading..."
          }), sel.props.imageAssetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-red-500 italic",
            children: ["Error: ", sel.props.imageAssetError]
          }), sel.props.imageS3Url && !sel.props.imageAssetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "my-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
              src: sel.props.imageS3Url,
              alt: "Render Again Image",
              className: "max-w-[80px] max-h-[60px] border"
            }), sel.props.imageAssetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
              className: "text-xs text-gray-500",
              children: [sel.props.imageAssetDims.width, "x", sel.props.imageAssetDims.height, "px"]
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            children: [" ", "Image Width:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              value: ((_sel$props$imageFrame = sel.props.imageFrame) === null || _sel$props$imageFrame === void 0 ? void 0 : _sel$props$imageFrame.w) || 80,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      imageFrame: _objectSpread(_objectSpread({}, o.props.imageFrame), {}, {
                        w: +e.target.value
                      })
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            }), " ", "px", " "]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            children: [" ", "Image Height:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              value: ((_sel$props$imageFrame2 = sel.props.imageFrame) === null || _sel$props$imageFrame2 === void 0 ? void 0 : _sel$props$imageFrame2.h) || 60,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      imageFrame: _objectSpread(_objectSpread({}, o.props.imageFrame), {}, {
                        h: +e.target.value
                      })
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            }), " ", "px", " "]
          })]
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
        className: "block",
        children: [" ", "Effect", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: sel.effect,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                effect: e.target.value
              });
            });
          },
          className: "border w-full",
          children: EFFECTS.map(function (ef) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: ef,
              children: ef
            }, ef);
          })
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
        className: "block",
        children: [" ", "Delay (s)", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "number",
          min: "0",
          step: "0.1",
          value: sel.delay,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                delay: +e.target.value
              });
            });
          },
          className: "border w-full px-1"
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500",
      children: "Click an element to edit\u2026"
    })]
  });
}

/* ═════════════════════ PREVIEW ═════════════════════ /
/ ═════════════════════ PREVIEW ═════════════════════ */
var ROTATION_INTERVAL = 1200; // ms for 360 image rotation

function Preview(_ref3) {
  var state = _ref3.state,
    setState = _ref3.setState,
    readOnly = _ref3.readOnly;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({}),
    _useState2 = _slicedToArray(_useState, 2),
    threeSixtyStates = _useState2[0],
    setThreeSixtyStates = _useState2[1];
  var commit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (id, patch) {
    return setState && setState(function (currentSafeState) {
      var currentScreenIndex = currentSafeState.current;
      var currentScreen = currentSafeState.screens[currentScreenIndex];
      return _objectSpread(_objectSpread({}, currentSafeState), {}, {
        screens: currentSafeState.screens.map(function (sc, index) {
          return index === currentScreenIndex ? _objectSpread(_objectSpread({}, sc), {}, {
            elements: currentScreen.elements.map(function (e) {
              return e.id === id ? _objectSpread(_objectSpread({}, e), patch) : e;
            })
          }) : sc;
        })
      });
    });
  }, [setState]);
  var commitFrameChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (elementId, newFrameProps) {
    if (!setState) return;
    setState(function (currentSafeState) {
      var currentScreenIndex = currentSafeState.current;
      return _objectSpread(_objectSpread({}, currentSafeState), {}, {
        screens: currentSafeState.screens.map(function (s, index) {
          if (index !== currentScreenIndex) return s;
          return _objectSpread(_objectSpread({}, s), {}, {
            elements: s.elements.map(function (el) {
              if (el.id !== elementId || el.type !== "360container") return el;
              var existingFrameProps = el.props.threeSixtyImageFrame || {
                x: 0,
                y: 0,
                w: 200,
                h: 150,
                zIndex: 10
              };
              return _objectSpread(_objectSpread({}, el), {}, {
                props: _objectSpread(_objectSpread({}, el.props), {}, {
                  threeSixtyImageFrame: _objectSpread(_objectSpread({}, existingFrameProps), newFrameProps)
                })
              });
            })
          });
        })
      });
    });
  }, [setState]);
  var commitItemChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (parentId, itemChanges) {
    setState && setState(function (currentSafeState) {
      var currentScreenIndex = currentSafeState.current;
      return _objectSpread(_objectSpread({}, currentSafeState), {}, {
        screens: currentSafeState.screens.map(function (s, screenIdx) {
          if (screenIdx !== currentScreenIndex) return s;
          return _objectSpread(_objectSpread({}, s), {}, {
            elements: s.elements.map(function (el) {
              if (el.id !== parentId) return el;
              return _objectSpread(_objectSpread({}, el), {}, {
                props: _objectSpread(_objectSpread({}, el.props), {}, {
                  items: itemChanges
                })
              });
            })
          });
        })
      });
    });
  }, [setState]);

  // Commit changes for render360Again image frame
  var commitRender360AgainImageFrameChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (elementId, newImageFrameProps) {
    if (!setState) return;
    setState(function (currentSafeState) {
      var currentScreenIndex = currentSafeState.current;
      return _objectSpread(_objectSpread({}, currentSafeState), {}, {
        screens: currentSafeState.screens.map(function (s, screenIdx) {
          if (screenIdx !== currentScreenIndex) return s;
          return _objectSpread(_objectSpread({}, s), {}, {
            elements: s.elements.map(function (el) {
              if (el.id !== elementId || el.type !== "render360Again") return el;
              return _objectSpread(_objectSpread({}, el), {}, {
                props: _objectSpread(_objectSpread({}, el.props), {}, {
                  imageFrame: _objectSpread(_objectSpread({}, el.props.imageFrame || {}), newImageFrameProps)
                })
              });
            })
          });
        })
      });
    });
  }, [setState]);
  var select = function select(id) {
    return !readOnly && (setState === null || setState === void 0 ? void 0 : setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: id
    })));
  };
  var runLink = function runLink(url) {
    return url && window.open(url, "_blank");
  };
  var _goto = function _goto(idx) {
    return setState === null || setState === void 0 ? void 0 : setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: (idx !== null && idx !== void 0 ? idx : safe.current + 1) % safe.screens.length,
      selected: null,
      animKey: safe.animKey + 1
    }));
  };
  var galleryDragRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});
  var startDrag = function startDrag(elRef, x) {
    if (!elRef) return;
    elRef.dataset.drag = "1";
    elRef.dataset.sx = x;
    elRef.dataset.sl = elRef.scrollLeft;
    elRef.style.cursor = "grabbing";
  };
  var moveDrag = function moveDrag(elRef, x) {
    if (!elRef || elRef.dataset.drag !== "1") return;
    elRef.scrollLeft = Number(elRef.dataset.sl) - (x - Number(elRef.dataset.sx));
  };
  var endDrag = function endDrag(elRef) {
    if (!elRef) return;
    elRef.dataset.drag = "0";
    elRef.style.cursor = "grab";
  };

  // Initialize and manage states for 360 containers
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    var initialStates = {};
    ((scr === null || scr === void 0 ? void 0 : scr.elements) || []).forEach(function (el) {
      if (el.type === "360container") {
        initialStates[el.id] = {
          visible: true,
          forcedOpen: false,
          // True if user clicked "render again", stays visible
          currentImageIndex: 0,
          timerId: null,
          // For visibility timeout
          autoRotateTimerId: null,
          // For image rotation
          isDraggingImage: false,
          // User is dragging the 360 image
          isInteractedWith: false // User has interacted (dragged), stops auto-rotation for the session
        };
      }
    });
    setThreeSixtyStates(initialStates);
    return function () {
      // Cleanup on component unmount or screen change
      Object.values(initialStates).forEach(function (s) {
        if (s.timerId) clearTimeout(s.timerId);
        if (s.autoRotateTimerId) clearInterval(s.autoRotateTimerId);
      });
    };
  }, [scr === null || scr === void 0 ? void 0 : scr.id, safe.animKey]); // Re-init if screen changes

  // Effect for 360container visibility timer
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    ((scr === null || scr === void 0 ? void 0 : scr.elements) || []).forEach(function (el) {
      if (el.type === "360container") {
        var elState = threeSixtyStates[el.id];
        if (elState && elState.visible && !elState.forcedOpen &&
        // Only time out if not forced open
        el.props.timeVisible > 0 && !elState.timerId // No existing timer
        ) {
          var timerId = setTimeout(function () {
            setThreeSixtyStates(function (prev) {
              return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, el.id, _objectSpread(_objectSpread({}, prev[el.id] || {}), {}, {
                visible: false,
                timerId: null
              })));
            });
          }, el.props.timeVisible * 1000);
          setThreeSixtyStates(function (prev) {
            return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, el.id, _objectSpread(_objectSpread({}, prev[el.id] || {}), {}, {
              timerId: timerId
            })));
          });
        } else if (elState && elState.timerId && (elState.forcedOpen || !elState.visible || el.props.timeVisible <= 0)) {
          // Clear timer if forced open, or becomes invisible for other reasons, or timeVisible is 0
          clearTimeout(elState.timerId);
          setThreeSixtyStates(function (prev) {
            return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, el.id, _objectSpread(_objectSpread({}, prev[el.id] || {}), {}, {
              timerId: null
            })));
          });
        }
      }
    });
    // No explicit cleanup needed here as timers are managed above or in main cleanup
  }, [scr === null || scr === void 0 ? void 0 : scr.elements, threeSixtyStates, readOnly]); // Rerun if elements or their states change

  // Effect for 360 image auto-rotation
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (!readOnly) return; // Auto-rotation only in preview mode

    ((scr === null || scr === void 0 ? void 0 : scr.elements) || []).forEach(function (el) {
      if (el.type === "360container") {
        var elState = threeSixtyStates[el.id];
        if (elState && elState.visible && el.props.images360 && el.props.images360.length > 1 && !elState.isDraggingImage && !elState.isInteractedWith &&
        // Stop if user has interacted
        !elState.autoRotateTimerId // No existing rotation timer
        ) {
          var autoRotateTimerId = setInterval(function () {
            setThreeSixtyStates(function (prev) {
              var currentElState = prev[el.id];
              // Check again inside interval in case state changed rapidly
              if (!currentElState || !currentElState.visible || currentElState.isDraggingImage || currentElState.isInteractedWith) {
                clearInterval(autoRotateTimerId); // Clear self if conditions no longer met
                return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, el.id, _objectSpread(_objectSpread({}, currentElState || {}), {}, {
                  autoRotateTimerId: null
                })));
              }
              return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, el.id, _objectSpread(_objectSpread({}, currentElState), {}, {
                currentImageIndex: (currentElState.currentImageIndex + 1) %
                // Rotate left (increment index)
                el.props.images360.length
              })));
            });
          }, ROTATION_INTERVAL);
          setThreeSixtyStates(function (prev) {
            return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, el.id, _objectSpread(_objectSpread({}, prev[el.id] || {}), {}, {
              autoRotateTimerId: autoRotateTimerId
            })));
          });
        } else if (elState && elState.autoRotateTimerId && (!elState.visible || elState.isDraggingImage || elState.isInteractedWith || !el.props.images360 || el.props.images360.length <= 1)) {
          clearInterval(elState.autoRotateTimerId);
          setThreeSixtyStates(function (prev) {
            return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, el.id, _objectSpread(_objectSpread({}, prev[el.id] || {}), {}, {
              autoRotateTimerId: null
            })));
          });
        }
      }
    });
    // No explicit cleanup here, managed above or in main cleanup
  }, [scr === null || scr === void 0 ? void 0 : scr.elements, threeSixtyStates, readOnly]);
  var handleRender360AgainClick = function handleRender360AgainClick() {
    // Assuming one primary 360container per screen for this action
    var threeSixtyEl = scr.elements.find(function (e) {
      return e.type === "360container";
    });
    if (threeSixtyEl) {
      setThreeSixtyStates(function (prev) {
        var currentElState = prev[threeSixtyEl.id] || {};
        if (currentElState.timerId) clearTimeout(currentElState.timerId);
        if (currentElState.autoRotateTimerId) clearInterval(currentElState.autoRotateTimerId);
        return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, threeSixtyEl.id, _objectSpread(_objectSpread({}, currentElState), {}, {
          visible: true,
          forcedOpen: true,
          // Keep it open indefinitely
          currentImageIndex: 0,
          timerId: null,
          autoRotateTimerId: null,
          // Will be restarted by useEffect if conditions met
          isInteractedWith: false,
          // Reset interaction to allow auto-rotation again
          isDraggingImage: false
        })));
      });
    }
  };
  var handle360MouseDown = function handle360MouseDown(elId, e) {
    e.preventDefault();
    e.stopPropagation();
    var clientX = e.clientX || e.touches && e.touches[0].clientX;
    setThreeSixtyStates(function (prev) {
      var elState = prev[elId];
      if (!elState) return prev;
      if (elState.autoRotateTimerId) clearInterval(elState.autoRotateTimerId);
      return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, elId, _objectSpread(_objectSpread({}, elState), {}, {
        isDraggingImage: true,
        isInteractedWith: true,
        // Mark as interacted
        dragStartX: clientX,
        autoRotateTimerId: null // Stop rotation
      })));
    });
  };
  var handle360MouseMove = function handle360MouseMove(elId, e, numImages) {
    var elState = threeSixtyStates[elId];
    if (!elState || !elState.isDraggingImage || numImages <= 1) return;
    e.preventDefault();
    e.stopPropagation();
    var clientX = e.clientX || e.touches && e.touches[0].clientX;
    var dx = clientX - elState.dragStartX;
    var sensitivity = 15; // Pixels to move before changing image
    if (Math.abs(dx) > sensitivity) {
      var direction = dx > 0 ? -1 : 1; // Drag right (dx > 0) -> view moves left (image index decreases or wraps around)
      // Drag left (dx < 0) -> view moves right (image index increases or wraps around)
      // This depends on how images are ordered. Standard is usually drag right = see more to the right.
      // Let's assume: drag right means increment index (see next image in sequence)
      setThreeSixtyStates(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, elId, _objectSpread(_objectSpread({}, prev[elId]), {}, {
          currentImageIndex: (prev[elId].currentImageIndex - direction + numImages) % numImages,
          // Adjusted for intuitive drag
          dragStartX: clientX
        })));
      });
    }
  };
  var handle360MouseUp = function handle360MouseUp(elId, e) {
    if (e) e.stopPropagation();
    setThreeSixtyStates(function (prev) {
      if (!prev[elId] || !prev[elId].isDraggingImage) return prev;
      return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, elId, _objectSpread(_objectSpread({}, prev[elId]), {}, {
        isDraggingImage: false
      })));
      // Auto-rotation does not restart automatically after drag, as per isInteractedWith flag
    });
  };

  // Determine state of the primary 360container for visibility toggling
  var primary360Container = scr === null || scr === void 0 ? void 0 : scr.elements.find(function (e) {
    return e.type === "360container";
  });
  var primary360StateForToggle = null;
  if (primary360Container && threeSixtyStates) {
    primary360StateForToggle = threeSixtyStates[primary360Container.id];
  }
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      dangerouslySetInnerHTML: {
        __html: "@keyframes delayAppear { to { visibility: visible; } } @keyframes fade   {0% {opacity: 0; visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; visibility: visible;}} @keyframes zoomIn {0% {opacity: 0; transform: scale(.8); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: scale(1); visibility: visible;}} @keyframes zoomOut{0% {opacity: 0; transform: scale(1.2); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: scale(1); visibility: visible;}} @keyframes slideL {0% {opacity: 0; transform: translateX(100%); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: translateX(0); visibility: visible;}} @keyframes slideR {0% {opacity: 0; transform: translateX(-100%); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: translateX(0); visibility: visible;}} @keyframes slideU {0% {opacity: 0; transform: translateY(100%); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: translateY(0); visibility: visible;}} @keyframes slideD {0% {opacity: 0; transform: translateY(-100%); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: translateY(0); visibility: visible;}} @keyframes rotateK{0% {opacity: 0; transform: perspective(400px) rotateY(90deg); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: perspective(400px) rotateY(0deg); visibility: visible;}} @keyframes flipK  {0% {opacity: 0; transform: perspective(400px) rotateX(90deg); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: perspective(400px) rotateX(0deg); visibility: visible;}} .anim-fade {animation-name: fade; animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} .anim-zoom-in {animation-name: zoomIn; animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} .anim-zoom-out {animation-name: zoomOut; animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} .anim-slide-left {animation-name: slideR; animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} .anim-slide-right {animation-name: slideL; animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} .anim-slide-up {animation-name: slideD; animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} .anim-slide-down {animation-name: slideU; animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} .anim-rotate {animation-name: rotateK; animation-duration: .4s; animation-timing-function: ease; animation-fill-mode: forwards;} .anim-flip {animation-name: flipK; animation-duration: .4s; animation-timing-function: ease; animation-fill-mode: forwards;} @keyframes bounceRepeatArrow { 0%, 20%, 50%, 80%, 100% { transform: translateY(0) rotate(90deg); } 40% { transform: translateY(-10px) rotate(90deg); } 60% { transform: translateY(-5px) rotate(90deg); } } .arrow-bounce-repeat { animation: bounceRepeatArrow 2s infinite; display: inline-block; } .hide-scroll::-webkit-scrollbar { display: none; } .hide-scroll { -ms-overflow-style: none; scrollbar-width: none; }"
      }
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      id: "main-canvas-preview",
      className: "anim-".concat(safe.transition),
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: safe.bg,
        position: "relative",
        overflow: "hidden"
      },
      children: [((scr === null || scr === void 0 ? void 0 : scr.elements) || []).map(function (el) {
        var delayValue = el.delay || 0;
        var getAnimationName = function getAnimationName(effectName) {
          if (!effectName || effectName === "none") return "none";
          var map = {
            fade: "fade",
            "zoom-in": "zoomIn",
            "zoom-out": "zoomOut",
            "slide-left": "slideL",
            "slide-right": "slideR",
            "slide-up": "slideU",
            "slide-down": "slideD",
            rotate: "rotateK",
            flip: "flipK"
          };
          return map[effectName] || "none";
        };
        var currentAnimationName = getAnimationName(el.effect);
        var animationDuration = currentAnimationName === "rotateK" || currentAnimationName === "flipK" ? "0.4s" : "0.35s";
        var animationDivKey = "".concat(el.id, "-").concat(currentAnimationName, "-").concat(delayValue, "-").concat(safe.animKey);
        if (el.type === "360container") {
          var el360State = threeSixtyStates[el.id];
          if (readOnly && el360State && !el360State.visible && !el360State.forcedOpen) {
            return null;
          }
          if (!readOnly && !el.props.editingVisible && safe.selected !== el.id) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
              size: {
                width: el.w,
                height: el.h
              },
              position: {
                x: el.x,
                y: el.y
              },
              bounds: "parent",
              disableDragging: readOnly,
              enableResizing: !readOnly,
              onDragStop: function onDragStop(_, d) {
                return commit(el.id, {
                  x: d.x,
                  y: d.y
                });
              },
              onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
                return commit(el.id, {
                  w: ref.offsetWidth,
                  h: ref.offsetHeight,
                  x: pos.x,
                  y: pos.y
                });
              },
              onClick: function onClick(e) {
                e.stopPropagation();
                select(el.id);
              },
              style: {
                outline: "1px dashed #ccc",
                cursor: "move",
                zIndex: safe.selected === el.id ? 1000 : el.zIndex || "auto"
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                style: {
                  width: "100%",
                  height: "100%",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  background: "rgba(200,200,200,0.1)",
                  color: "#aaa",
                  fontSize: "10px",
                  overflow: "hidden",
                  boxSizing: "border-box",
                  border: "1px solid #eee"
                },
                children: [" ", "360 Container (Hidden in Editor - Click to select)", " "]
              })
            }, "".concat(el.id, "-placeholder"));
          }
        }
        if (el.type === "render360Again") {
          if (readOnly) {
            if (primary360StateForToggle && primary360StateForToggle.visible) {
              return null;
            }
          }
        }
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly,
          enableResizing: !readOnly,
          onDragStop: function onDragStop(_, d) {
            return commit(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            return commit(el.id, {
              w: ref.offsetWidth,
              h: ref.offsetHeight,
              x: pos.x,
              y: pos.y
            });
          },
          onClick: function onClick(e) {
            e.stopPropagation();
            select(el.id);
          },
          style: {
            outline: safe.selected === el.id ? "2px solid #3b82f6" : "none",
            cursor: readOnly ? "default" : "move",
            zIndex: el.type === "xbutton" ? safe.selected === el.id ? 2001 : 2000 // High zIndex for xbutton
            : safe.selected === el.id ? 1000 : el.zIndex || "auto"
          },
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            style: {
              width: "100%",
              height: "100%",
              opacity: currentAnimationName !== "none" ? 0 : 1,
              visibility: currentAnimationName !== "none" ? "hidden" : "visible",
              animationName: currentAnimationName,
              animationDuration: animationDuration,
              animationTimingFunction: "ease",
              animationDelay: "".concat(delayValue, "s"),
              animationFillMode: "forwards",
              animationIterationCount: 1,
              overflow: "visible"
            },
            children: [el.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              onClick: function onClick() {
                return _goto(el.props.target);
              },
              style: {
                borderRadius: "50%",
                border: "2px solid ".concat(el.props.color),
                color: el.props.color,
                background: el.props.bgColor || "rgba(255,255,255,0.3)",
                // Use bgColor from props
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: "20px",
                cursor: "pointer",
                width: "100%",
                height: "100%",
                userSelect: "none",
                boxSizing: "border-box"
              },
              children: [" ", "\xD7", " "]
            }), el.type === "360container" && function (_el$props$images, _el$props$images2, _el$props$images3, _el$props$images4, _el$props$images5, _el$props$images6, _el$props$images7, _el$props$images8, _el$props$images9) {
              /* ... existing 360container rendering logic (frame RND, items RNDs) ... */
              var el360State = threeSixtyStates[el.id];
              var bgImageUrl = "none";
              if (el360State && ((_el$props$images = el.props.images360) === null || _el$props$images === void 0 ? void 0 : _el$props$images.length) > 0) {
                var currentImage = el.props.images360[el360State.currentImageIndex];
                if (currentImage !== null && currentImage !== void 0 && currentImage.s3Url) {
                  bgImageUrl = "url(".concat(currentImage.s3Url, ")");
                }
              }
              var frameProps = el.props.threeSixtyImageFrame || {
                x: 0,
                y: 0,
                w: el.w,
                h: el.h * 0.66,
                zIndex: 10
              };
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                style: {
                  position: "relative",
                  width: "100%",
                  height: "100%",
                  background: el.props.bg,
                  borderRadius: el.props.radius,
                  overflow: "visible",
                  boxSizing: "border-box"
                },
                children: [el.props.images360 && el.props.images360.length > 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
                  size: {
                    width: frameProps.w,
                    height: frameProps.h
                  },
                  position: {
                    x: el.x + frameProps.x,
                    y: el.y + frameProps.y
                  },
                  bounds: "#main-canvas-preview",
                  disableDragging: readOnly,
                  enableResizing: !readOnly,
                  onDragStart: function onDragStart(e) {
                    return e.stopPropagation();
                  },
                  onDragStop: function onDragStop(_, d) {
                    return commitFrameChange(el.id, {
                      x: d.x - el.x,
                      y: d.y - el.y
                    });
                  },
                  onResizeStop: function onResizeStop(_, __, ref, delta, pos) {
                    return commitFrameChange(el.id, {
                      w: ref.offsetWidth,
                      h: ref.offsetHeight,
                      x: pos.x - el.x,
                      y: pos.y - el.y
                    });
                  },
                  onClick: function onClick(e) {
                    e.stopPropagation();
                  },
                  style: {
                    zIndex: frameProps.zIndex + (safe.selected === el.id ? 1 : 0),
                    outline: !readOnly && safe.selected === el.id ? "1px dashed #00FFFF" : "none",
                    boxSizing: "border-box"
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                    style: {
                      width: "100%",
                      height: "100%",
                      backgroundImage: bgImageUrl,
                      backgroundSize: "cover",
                      backgroundPosition: "center",
                      cursor: readOnly && ((_el$props$images2 = el.props.images360) === null || _el$props$images2 === void 0 ? void 0 : _el$props$images2.length) > 1 ? el360State !== null && el360State !== void 0 && el360State.isDraggingImage ? "grabbing" : "grab" : "default",
                      overflow: "hidden",
                      userSelect: "none"
                    },
                    onMouseDown: readOnly && ((_el$props$images3 = el.props.images360) === null || _el$props$images3 === void 0 ? void 0 : _el$props$images3.length) > 1 ? function (e) {
                      return handle360MouseDown(el.id, e);
                    } : undefined,
                    onMouseMove: readOnly && ((_el$props$images4 = el.props.images360) === null || _el$props$images4 === void 0 ? void 0 : _el$props$images4.length) > 1 ? function (e) {
                      return handle360MouseMove(el.id, e, el.props.images360.length);
                    } : undefined,
                    onMouseUp: readOnly && ((_el$props$images5 = el.props.images360) === null || _el$props$images5 === void 0 ? void 0 : _el$props$images5.length) > 1 ? function (e) {
                      return handle360MouseUp(el.id, e);
                    } : undefined,
                    onMouseLeave: readOnly && ((_el$props$images6 = el.props.images360) === null || _el$props$images6 === void 0 ? void 0 : _el$props$images6.length) > 1 && el360State !== null && el360State !== void 0 && el360State.isDraggingImage ? function (e) {
                      return handle360MouseUp(el.id, e);
                    } : undefined,
                    onTouchStart: readOnly && ((_el$props$images7 = el.props.images360) === null || _el$props$images7 === void 0 ? void 0 : _el$props$images7.length) > 1 ? function (e) {
                      return handle360MouseDown(el.id, e);
                    } : undefined,
                    onTouchMove: readOnly && ((_el$props$images8 = el.props.images360) === null || _el$props$images8 === void 0 ? void 0 : _el$props$images8.length) > 1 ? function (e) {
                      return handle360MouseMove(el.id, e, el.props.images360.length);
                    } : undefined,
                    onTouchEnd: readOnly && ((_el$props$images9 = el.props.images360) === null || _el$props$images9 === void 0 ? void 0 : _el$props$images9.length) > 1 ? function (e) {
                      return handle360MouseUp(el.id, e);
                    } : undefined,
                    children: bgImageUrl === "none" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                      style: {
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        width: "100%",
                        height: "100%",
                        background: "rgba(0,0,0,0.2)",
                        color: "white",
                        fontSize: "12px"
                      },
                      children: [" ", "360 Image Loading...", " "]
                    })
                  })
                }, "".concat(el.id, "-360imageframe")), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  className: "hide-scroll",
                  style: {
                    position: "absolute",
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    overflow: "auto",
                    zIndex: 1
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                    style: {
                      position: "relative",
                      width: "100%",
                      minHeight: "100%"
                    },
                    children: (el.props.items || []).map(function (it, iIdx) {
                      var _it$x, _it$y, _itemProps$bg;
                      var itemProps = it.props || {};
                      var _BOX_DIMS$w$h = _objectSpread(_objectSpread({}, BOX_DIMS(it.type)), {}, {
                          w: it.w || BOX_DIMS(it.type).w,
                          h: it.h || BOX_DIMS(it.type).h
                        }),
                        w = _BOX_DIMS$w$h.w,
                        h = _BOX_DIMS$w$h.h;
                      var x = (_it$x = it.x) !== null && _it$x !== void 0 ? _it$x : 0;
                      var y = (_it$y = it.y) !== null && _it$y !== void 0 ? _it$y : 0;
                      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
                        bounds: "parent",
                        size: {
                          width: w,
                          height: h
                        },
                        position: {
                          x: x,
                          y: y
                        },
                        enableResizing: !readOnly,
                        disableDragging: readOnly,
                        onDragStart: function onDragStart(e) {
                          return e.stopPropagation();
                        },
                        onDragStop: function onDragStop(_, d) {
                          var newItems = _toConsumableArray(el.props.items);
                          newItems[iIdx] = _objectSpread(_objectSpread({}, newItems[iIdx]), {}, {
                            x: d.x,
                            y: d.y
                          });
                          commitItemChange(el.id, newItems);
                        },
                        onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
                          var newItems = _toConsumableArray(el.props.items);
                          newItems[iIdx] = _objectSpread(_objectSpread({}, newItems[iIdx]), {}, {
                            w: ref.offsetWidth,
                            h: ref.offsetHeight,
                            x: pos.x,
                            y: pos.y
                          });
                          commitItemChange(el.id, newItems);
                        },
                        style: {
                          position: "absolute",
                          cursor: readOnly ? "default" : "move",
                          background: (_itemProps$bg = itemProps.bg) !== null && _itemProps$bg !== void 0 ? _itemProps$bg : "transparent",
                          border: !readOnly && typeof window !== "undefined" && window.location.href.includes("customize") ? "1px dashed #888" : "none",
                          boxSizing: "border-box",
                          zIndex: 2 + (safe.selected === el.id ? 1 : 0)
                        },
                        children: [it.type === "text" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                          style: {
                            color: itemProps.color,
                            fontSize: itemProps.size,
                            fontFamily: itemProps.font,
                            padding: 2,
                            whiteSpace: "pre-wrap",
                            overflowY: "auto",
                            width: "100%",
                            height: "100%"
                          },
                          className: "hide-scroll box-border",
                          children: [" ", itemProps.text, " "]
                        }), it.type === "title" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                          style: {
                            color: itemProps.color,
                            fontSize: itemProps.size,
                            fontFamily: itemProps.font,
                            fontWeight: "bold",
                            textAlign: "center",
                            width: "100%",
                            height: "100%",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center"
                          },
                          className: "p-1 box-border",
                          children: [" ", itemProps.text, " "]
                        }), it.type === "subtitle" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                          style: {
                            color: itemProps.color,
                            fontSize: itemProps.size,
                            fontFamily: itemProps.font,
                            textAlign: "center",
                            width: "100%",
                            height: "100%",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center"
                          },
                          className: "p-1 box-border",
                          children: [" ", itemProps.text, " "]
                        }), it.type === "textbox" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                          style: {
                            color: itemProps.color,
                            fontSize: itemProps.size,
                            fontFamily: itemProps.font,
                            fontWeight: itemProps.bold ? "bold" : "normal",
                            textAlign: itemProps.align,
                            background: itemProps.bg,
                            whiteSpace: "pre-wrap",
                            overflowY: "auto",
                            padding: 2,
                            width: "100%",
                            height: "100%"
                          },
                          className: "hide-scroll box-border",
                          children: [" ", itemProps.text, " "]
                        }), it.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
                          onClick: function onClick() {
                            return itemProps.url && runLink(itemProps.url);
                          },
                          style: {
                            background: itemProps.bgColor,
                            borderRadius: itemProps.radius,
                            fontFamily: itemProps.font,
                            fontSize: itemProps.size,
                            fontWeight: itemProps.fontWeight,
                            fontStyle: itemProps.fontStyle,
                            color: itemProps.textColor,
                            width: "100%",
                            height: "100%",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                            border: "none",
                            cursor: "pointer"
                          },
                          className: "p-1 box-border",
                          children: [" ", itemProps.text, " "]
                        }), it.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                          src: itemProps.s3Url || "https://dummyimage.com/".concat(w, "x").concat(h, "/eee/aaa&text=img"),
                          onError: function onError(e) {
                            e.target.src = "https://dummyimage.com/".concat(w, "x").concat(h, "/eee/aaa&text=Error");
                          },
                          onClick: function onClick() {
                            return runLink(itemProps.url);
                          },
                          style: {
                            borderRadius: itemProps.radius,
                            cursor: itemProps.url ? "pointer" : "default",
                            width: "100%",
                            height: "100%",
                            objectFit: "cover"
                          },
                          alt: itemProps.text || "Image"
                        }), it.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
                          src: itemProps.s3Url || "",
                          onError: function onError(e) {
                            console.error("Video item load error:", e);
                          },
                          style: {
                            width: "100%",
                            height: "100%",
                            objectFit: "cover"
                          },
                          controls: true,
                          autoPlay: true,
                          playsInline: true,
                          muted: true,
                          loop: true
                        }), it.type === "gallery" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                          className: "hide-scroll w-full h-full overflow-x-auto whitespace-nowrap cursor-grab",
                          style: {
                            scrollSnapType: "x mandatory",
                            gap: itemProps.gap
                          },
                          ref: function ref(r) {
                            return galleryDragRefs.current[it.id] = r;
                          },
                          onMouseDown: function onMouseDown(e) {
                            return startDrag(galleryDragRefs.current[it.id], e.clientX);
                          },
                          onMouseMove: function onMouseMove(e) {
                            return moveDrag(galleryDragRefs.current[it.id], e.clientX);
                          },
                          onMouseUp: function onMouseUp() {
                            return endDrag(galleryDragRefs.current[it.id]);
                          },
                          onMouseLeave: function onMouseLeave() {
                            return endDrag(galleryDragRefs.current[it.id]);
                          },
                          children: [" ", (itemProps.images || []).map(function (img, idx) {
                            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                              src: img.s3Url || "https://dummyimage.com/100x".concat(itemProps.imageH, "/ccc/888&text=G"),
                              style: {
                                height: itemProps.imageH,
                                borderRadius: itemProps.radius,
                                scrollSnapAlign: "start",
                                marginRight: itemProps.gap,
                                display: "inline-block"
                              },
                              alt: "Gallery ".concat(idx)
                            }, idx);
                          }), " "]
                        })]
                      }, it.id || iIdx);
                    })
                  })
                })]
              });
            }(), el.type === "render360Again" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                width: "100%",
                height: "100%",
                backgroundColor: el.props.bgColor,
                boxSizing: "border-box",
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                // Center content as image is now external
                textAlign: "center",
                padding: "10px"
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                style: {
                  zIndex: 10,
                  position: "relative"
                },
                children: [" ", el.props.showText && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                  style: {
                    fontFamily: el.props.textFont,
                    fontSize: el.props.textFontSize,
                    color: el.props.textColor,
                    marginTop: "45%" // You might want to adjust or remove top margin if adding paddingTop
                    // marginBottom: "-", // <--- ADDED THIS LINE
                  },
                  onClick: readOnly ? handleRender360AgainClick : undefined,
                  children: [" ", el.props.textContent, " "]
                }), el.props.showArrow && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  onClick: readOnly ? handleRender360AgainClick : undefined,
                  style: {
                    cursor: "pointer",
                    margin: "5px 0",
                    color: el.props.arrowColor,
                    marginTop: "5%"
                  },
                  className: "arrow-bounce-repeat",
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("svg", {
                    width: "24",
                    height: "24",
                    viewBox: "0 0 24 24",
                    fill: "currentColor",
                    children: [" ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("path", {
                      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 14.5l-5-5h3V8h4v3.5h3l-5 5z"
                    }), " "]
                  })
                }), el.props.showButton && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
                  onClick: function onClick() {
                    if (readOnly) handleRender360AgainClick();
                    if (el.props.buttonUrl) runLink(el.props.buttonUrl);
                  },
                  style: {
                    fontFamily: el.props.buttonFont,
                    fontSize: el.props.buttonFontSize,
                    color: el.props.buttonTextColor,
                    backgroundColor: el.props.buttonBgColor,
                    borderRadius: el.props.buttonRadius,
                    padding: "8px 15px",
                    border: "none",
                    cursor: "pointer",
                    marginTop: "-15%"
                  },
                  children: [" ", el.props.buttonText, " "]
                })]
              })
            })]
          }, animationDivKey)
        }, el.id);
      }), ((scr === null || scr === void 0 ? void 0 : scr.elements) || []).map(function (parentEl) {
        if (parentEl.type === "render360Again" && parentEl.props.showImage && parentEl.props.imageS3Url) {
          var parentIsActuallyVisible = true;
          if (readOnly) {
            if (primary360StateForToggle && primary360StateForToggle.visible) {
              parentIsActuallyVisible = false;
            }
          }
          if (!parentIsActuallyVisible) return null;
          var imageFrame = parentEl.props.imageFrame || {
            x: 10,
            y: 10,
            w: 80,
            h: 60,
            zIndex: 5
          };

          // Get animation properties from the parent render360Again element
          var delayValue = parentEl.delay || 0;
          // getAnimationName is available from the outer scope of Preview's main map
          var getAnimationName = function getAnimationName(effectName) {
            if (!effectName || effectName === "none") return "none";
            var map = {
              fade: "fade",
              "zoom-in": "zoomIn",
              "zoom-out": "zoomOut",
              "slide-left": "slideL",
              "slide-right": "slideR",
              "slide-up": "slideU",
              "slide-down": "slideD",
              rotate: "rotateK",
              flip: "flipK"
            };
            return map[effectName] || "none";
          };
          var currentAnimationName = getAnimationName(parentEl.effect);
          var animationDuration = currentAnimationName === "rotateK" || currentAnimationName === "flipK" ? "0.4s" : "0.35s";
          var animationDivKey = "".concat(parentEl.id, "-satellite-image-anim-").concat(currentAnimationName, "-").concat(delayValue, "-").concat(safe.animKey);
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
            size: {
              width: imageFrame.w,
              height: imageFrame.h
            },
            position: {
              x: parentEl.x + imageFrame.x,
              y: parentEl.y + imageFrame.y
            },
            bounds: "#main-canvas-preview",
            disableDragging: readOnly,
            enableResizing: !readOnly,
            onDragStart: function onDragStart(e) {
              return e.stopPropagation();
            },
            onDragStop: function onDragStop(_, d) {
              if (!readOnly) {
                commitRender360AgainImageFrameChange(parentEl.id, {
                  x: d.x - parentEl.x,
                  y: d.y - parentEl.y
                });
              }
            },
            onResizeStop: function onResizeStop(_, __, ref, delta, pos) {
              if (!readOnly) {
                commitRender360AgainImageFrameChange(parentEl.id, {
                  w: ref.offsetWidth,
                  h: ref.offsetHeight,
                  x: pos.x - parentEl.x,
                  y: pos.y - parentEl.y
                });
              }
            },
            onClick: function onClick(e) {
              e.stopPropagation();
              if (!readOnly) select(parentEl.id);
            },
            style: {
              zIndex: (safe.selected === parentEl.id ? 1000 : parentEl.zIndex || 0) + (imageFrame.zIndex || 5) + 1,
              outline: !readOnly && safe.selected === parentEl.id ? "1px dashed hotpink" : "none",
              cursor: readOnly ? "default" : "move",
              // Make Rnd container itself visible only after its delay using delayAppear
              visibility: currentAnimationName !== "none" ? "hidden" : "visible",
              animationName: currentAnimationName !== "none" ? "delayAppear" : undefined,
              animationDelay: "".concat(delayValue, "s"),
              animationFillMode: "forwards",
              animationDuration: "0.01s" // Very short, just to trigger visibility
            },
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                width: "100%",
                height: "100%",
                opacity: currentAnimationName !== "none" ? 0 : 1,
                visibility: currentAnimationName !== "none" ? "hidden" : "visible",
                // Will be made visible by animation
                animationName: currentAnimationName,
                // The actual visual animation from parent
                animationDuration: animationDuration,
                animationTimingFunction: "ease",
                animationDelay: "".concat(delayValue, "s"),
                // Same delay as parent
                animationFillMode: "forwards",
                animationIterationCount: 1,
                overflow: "visible" // Allow content to animate freely if needed (e.g. zoom)
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                src: parentEl.props.imageS3Url,
                alt: "Customizable preview",
                style: {
                  width: "100%",
                  height: "100%",
                  objectFit: "cover",
                  display: "block"
                }
              })
            }, animationDivKey)
          }, "".concat(parentEl.id, "-image-satellite"));
        }
        return null; // Important to return null if not rendering the image
      })]
    }, safe.animKey)]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */
function serialize(currentState) {
  if (!currentState || !currentState.screens || !Array.isArray(currentState.screens)) {
    console.warn("Serialize: Invalid or empty state provided.", currentState);
    return _objectSpread(_objectSpread({}, startState()), {}, {
      _thumbnailHintUrl: null,
      selected: null
    });
  }
  var bestThumbnailUrl = null;
  var screensToPersist = currentState.screens.map(function (sc) {
    if (!sc || !Array.isArray(sc.elements)) return _objectSpread(_objectSpread({}, sc), {}, {
      elements: []
    });
    var elementsToPersist = sc.elements.map(function (el) {
      var newEl = _objectSpread({}, el);
      var newProps = el.props ? _objectSpread({}, el.props) : {};
      var findS3UrlForThumbnail = function findS3UrlForThumbnail(s3Url) {
        if (!bestThumbnailUrl && s3Url && typeof s3Url === "string" && s3Url.trim() !== "") {
          if (s3Url.match(/\.(jpeg|jpg|gif|png|webp|svg)$/i)) bestThumbnailUrl = s3Url;else if (!bestThumbnailUrl && s3Url.match(/\.(mp4|webm|ogg)$/i)) bestThumbnailUrl = s3Url;
        }
      };

      // Clean transient asset state from element props
      var cleanAssetProps = function cleanAssetProps(propsObject) {
        var assetLoading = propsObject.assetLoading,
          assetError = propsObject.assetError,
          persistentProps = _objectWithoutProperties(propsObject, _excluded);
        findS3UrlForThumbnail(persistentProps.s3Url);
        return persistentProps;
      };
      if (el.type === "image" || el.type === "video") {
        newProps = cleanAssetProps(newProps);
      } else if (el.type === "gallery") {
        newProps.images = (newProps.images || []).map(function (img) {
          return cleanAssetProps(img);
        });
      } else if (el.type === "360container") {
        newProps.images360 = (newProps.images360 || []).map(function (img) {
          return cleanAssetProps(img);
        });
        if (newProps.items) {
          newProps.items = newProps.items.map(function (item) {
            var newItem = _objectSpread({}, item);
            if (item.type === "image" || item.type === "video") {
              newItem.props = cleanAssetProps(item.props || {});
            } else if (item.type === "gallery") {
              var _item$props;
              newItem.props = _objectSpread(_objectSpread({}, item.props || {}), {}, {
                images: (((_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.images) || []).map(function (gImg) {
                  return cleanAssetProps(gImg);
                })
              });
            }
            return newItem;
          });
        }
      } else if (el.type === "render360Again") {
        // Clean asset props for the image in render360Again
        var _newProps = newProps,
          imageAssetLoading = _newProps.imageAssetLoading,
          imageAssetError = _newProps.imageAssetError,
          imageS3Url = _newProps.imageS3Url,
          imageAssetDims = _newProps.imageAssetDims,
          restProps = _objectWithoutProperties(_newProps, _excluded2);
        findS3UrlForThumbnail(imageS3Url);
        newProps = _objectSpread(_objectSpread({}, restProps), {}, {
          imageS3Url: imageS3Url,
          imageAssetDims: imageAssetDims
        }); // Keep s3Url and dims
      }
      newEl.props = newProps;
      return newEl;
    });
    return _objectSpread(_objectSpread({}, sc), {}, {
      elements: elementsToPersist
    });
  });
  var dataToSave = _objectSpread(_objectSpread({}, currentState), {}, {
    selected: null,
    // Always clear selection on save
    animKey: currentState.animKey || 0,
    screens: screensToPersist
  });
  return _objectSpread(_objectSpread({}, dataToSave), {}, {
    _thumbnailHintUrl: bestThumbnailUrl
  });
}
var deserialize = function deserialize() {
  var backendData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  if (backendData && backendData.screens && Array.isArray(backendData.screens)) {
    var deserializedScreens = backendData.screens.map(function (screen) {
      if (!screen || !Array.isArray(screen.elements)) return _objectSpread(_objectSpread({}, screen), {}, {
        elements: []
      });
      return _objectSpread(_objectSpread({}, screen), {}, {
        elements: screen.elements.map(function (el) {
          var newEl = _objectSpread({}, el);
          var newProps = el.props ? _objectSpread({}, el.props) : {};
          var ensureAssetStates = function ensureAssetStates(propsObject) {
            var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            return _objectSpread(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(prefix, "s3Url"), propsObject["".concat(prefix, "s3Url")] || ""), "".concat(prefix, "assetLoading"), false), "".concat(prefix, "assetError"), null), "".concat(prefix, "assetDims"), propsObject["".concat(prefix, "assetDims")] || null), propsObject);
          };
          if (el.type === "image" || el.type === "video") {
            newProps = ensureAssetStates(newProps);
          } else if (el.type === "gallery") {
            newProps.images = (newProps.images || []).map(function (img) {
              return ensureAssetStates(img);
            });
          } else if (el.type === "360container") {
            var default360 = newElement("360container").props;
            newProps.images360 = (newProps.images360 || []).map(function (img) {
              return ensureAssetStates(img);
            });
            newProps.threeSixtyImageFrame = _objectSpread(_objectSpread({}, default360.threeSixtyImageFrame), newProps.threeSixtyImageFrame || {});
            newProps.items = (newProps.items || []).map(function (item) {
              var newItem = _objectSpread({}, item);
              if (item.type === "image" || item.type === "video") {
                newItem.props = ensureAssetStates(item.props || {});
              } else if (item.type === "gallery") {
                var _item$props2;
                newItem.props = _objectSpread(_objectSpread({}, item.props || {}), {}, {
                  images: (((_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : _item$props2.images) || []).map(function (gImg) {
                    return ensureAssetStates(gImg);
                  })
                });
              } else if (item.type === "button") {
                // Ensure defaults for item buttons if loading old data
                var defaultItemButton = newFakeItem("button").props;
                newItem.props = _objectSpread(_objectSpread({}, defaultItemButton), item.props || {});
              }
              return newItem;
            });
          } else if (el.type === "render360Again") {
            var defaultRender360 = newElement("render360Again").props;
            newProps = ensureAssetStates(newProps, "image"); // Prefixed asset states for image
            newProps.imageFrame = _objectSpread(_objectSpread({}, defaultRender360.imageFrame), newProps.imageFrame || {});
            // Ensure other props have defaults if missing
            Object.keys(defaultRender360).forEach(function (key) {
              if (newProps[key] === undefined) {
                newProps[key] = defaultRender360[key];
              }
            });
          }
          newEl.props = newProps;
          return newEl;
        })
      });
    });
    return _objectSpread(_objectSpread(_objectSpread({}, startState()), backendData), {}, {
      selected: null,
      animKey: backendData.animKey || 0,
      screens: deserializedScreens
    });
  }
  return startState();
};

/***/ }),

/***/ "./templates/breakout.js":
/*!*******************************!*\
  !*** ./templates/breakout.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _excluded = ["hidden"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* BreakOut – multi-element canvas with images, text, buttons, and dismiss (v1.3)
   --------------------------------------------------------------------------- 
   Modified for S3/Backend File Handling & Thumbnail Hint
*/


 // Added useState, useEffect

// I. Editor Component Modifications & V. Global Considerations

var API_BASE_URL = "https://localhost:3001" || 0;
var getAuthToken = function getAuthToken() {
  if (typeof window !== "undefined") {
    return localStorage.getItem("jwt");
  }
  return null;
};
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(fileObject) {
    var formData, token, headers, response, errorData, result, _t3, _t4;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          formData = new FormData();
          formData.append("assetFile", fileObject);
          _context2.p = 1;
          token = getAuthToken();
          headers = {};
          if (token) {
            headers["Authorization"] = "Bearer ".concat(token);
          }
          _context2.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData,
            headers: headers
          });
        case 2:
          response = _context2.v;
          if (response.ok) {
            _context2.n = 7;
            break;
          }
          _context2.p = 3;
          _context2.n = 4;
          return response.json();
        case 4:
          errorData = _context2.v;
          _context2.n = 6;
          break;
        case 5:
          _context2.p = 5;
          _t3 = _context2.v;
          errorData = {
            message: "Upload failed: ".concat(response.statusText || response.status)
          };
        case 6:
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 7:
          _context2.n = 8;
          return response.json();
        case 8:
          result = _context2.v;
          if (result.url) {
            _context2.n = 9;
            break;
          }
          throw new Error("Upload successful, but no URL was returned from the backend.");
        case 9:
          return _context2.a(2, result.url);
        case 10:
          _context2.p = 10;
          _t4 = _context2.v;
          console.error("Error uploading file to backend:", _t4);
          if (!(_t4 instanceof Error)) {
            _context2.n = 11;
            break;
          }
          throw _t4;
        case 11:
          throw new Error(String(_t4 || "An unknown error occurred during file upload."));
        case 12:
          return _context2.a(2);
      }
    }, _callee2, null, [[3, 5], [1, 10]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
function measureImageDimensions(_x2) {
  return _measureImageDimensions.apply(this, arguments);
}
/* ---------- meta ---------- */
function _measureImageDimensions() {
  _measureImageDimensions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(s3Url) {
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          return _context3.a(2, new Promise(function (resolve, reject) {
            var img = new Image();
            img.onload = function () {
              resolve({
                width: img.naturalWidth,
                height: img.naturalHeight
              });
            };
            img.onerror = function (err) {
              console.error("Error loading image for measurement:", s3Url, err);
              reject(new Error("Could not load image to measure dimensions. Check the S3 URL and CORS policy for S3 bucket."));
            };
            img.crossOrigin = "anonymous";
            img.src = s3Url;
          }));
      }
    }, _callee3);
  }));
  return _measureImageDimensions.apply(this, arguments);
}
var meta = {
  id: "break-out",
  name: "BreakOut",
  description: "Canvas template supporting multiple images, text, buttons, and dismiss",
  canvas: {
    w: 378,
    h: 628
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'", "'Roboto'", "'Open Sans'"];
var EFFECTS = ["none", "fade-in", "fade-out", "zoom-in", "zoom-out", "slide-in-left", "slide-in-right", "slide-in-up", "slide-in-down", "slide-out-left", "slide-out-right", "slide-out-up", "slide-out-down", "spin", "shake", "flip", "bounce", "bounce-up"];
var buttonStyle = function buttonStyle(btn) {
  return {
    borderRadius: btn.radius,
    border: "".concat(btn.borderWidth, "px solid ").concat(btn.borderColor),
    background: btn.color,
    color: btn.textColor,
    fontFamily: btn.font,
    fontSize: btn.size,
    fontWeight: btn.bold ? "bold" : "normal"
  };
};
var startState = function startState() {
  return {
    bg: "#ffffff",
    selected: null,
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }]
  };
};
var newElement = function newElement(type) {
  var baseY = meta.canvas.h - 140;
  var base = {
    id: crypto.randomUUID(),
    type: type,
    x: 20,
    y: baseY,
    w: 100,
    h: 100,
    hidden: false // Initialize hidden state, primarily for editor logic if needed, not for X button
  };
  switch (type) {
    case "image":
      return _objectSpread(_objectSpread({}, base), {}, {
        props: {
          s3Url: "",
          imageLoading: false,
          imageError: null,
          imageDims: null,
          url: "",
          effect: "none",
          delay: 0
        }
      });
    case "button":
      return _objectSpread(_objectSpread({}, base), {}, {
        h: 40,
        w: 150,
        props: {
          text: "Click me",
          color: "#2563eb",
          textColor: "#ffffff",
          font: "Arial",
          size: 16,
          bold: false,
          borderWidth: 2,
          borderColor: "#000000",
          url: "",
          effect: "none",
          delay: 0
        }
      });
    case "text":
      return _objectSpread(_objectSpread({}, base), {}, {
        h: 40,
        w: 200,
        props: {
          text: "Sample text",
          color: "#000000",
          font: "Arial",
          size: 16,
          bold: false,
          effect: "none",
          delay: 0
        }
      });
    case "xbutton":
      return _objectSpread(_objectSpread({}, base), {}, {
        x: meta.canvas.w - 40,
        y: 10,
        w: 30,
        h: 30,
        props: {
          color: "#000000",
          bg: "transparent",
          size: 24,
          effect: "none",
          delay: 0
        }
      });
    default:
      return base;
  }
};

/* ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens && state.screens.length > 0 ? state : startState();
  var scr = safe.screens[0];
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });
  var patchSel = function patchSel(fn) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === safe.selected ? fn(e) : e;
          })
        }) : sc;
      })
    }));
  };
  var delSel = function delSel() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.filter(function (e) {
            return e.id !== safe.selected;
          })
        }) : sc;
      })
    }));
  };
  var add = function add(t) {
    var newElem = newElement(t);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: newElem.id,
      screens: safe.screens.map(function (sc, i) {
        return i === 0 ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newElem])
        }) : sc;
      })
    }));
  };
  var duplicateSel = function duplicateSel() {
    if (!sel) return;
    var copy = _objectSpread(_objectSpread({}, sel), {}, {
      id: crypto.randomUUID(),
      x: sel.x + 20,
      y: sel.y + 20,
      props: _objectSpread({}, sel.props)
    });
    if (copy.type === "image") {
      copy.props.imageLoading = false;
      copy.props.imageError = null;
    }
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: copy.id,
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [copy])
        }) : sc;
      })
    }));
  };
  var handleFileChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(event) {
      var _event$target$files;
      var file, s3Url, dimensions, _t, _t2;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];
            if (!(!file || !sel)) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            patchSel(function (currentElement) {
              return _objectSpread(_objectSpread({}, currentElement), {}, {
                props: _objectSpread(_objectSpread({}, currentElement.props), {}, {
                  imageLoading: true,
                  imageError: null,
                  s3Url: "",
                  imageDims: null
                })
              });
            });
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file);
          case 3:
            s3Url = _context.v;
            dimensions = null;
            if (!file.type.startsWith("image/")) {
              _context.n = 7;
              break;
            }
            _context.p = 4;
            _context.n = 5;
            return measureImageDimensions(s3Url);
          case 5:
            dimensions = _context.v;
            _context.n = 7;
            break;
          case 6:
            _context.p = 6;
            _t = _context.v;
            console.warn("Could not measure image dimensions:", _t.message);
          case 7:
            patchSel(function (currentElement) {
              return _objectSpread(_objectSpread({}, currentElement), {}, {
                props: _objectSpread(_objectSpread({}, currentElement.props), {}, {
                  s3Url: s3Url,
                  imageDims: dimensions,
                  imageLoading: false
                })
              });
            });
            _context.n = 9;
            break;
          case 8:
            _context.p = 8;
            _t2 = _context.v;
            patchSel(function (currentElement) {
              return _objectSpread(_objectSpread({}, currentElement), {}, {
                props: _objectSpread(_objectSpread({}, currentElement.props), {}, {
                  imageLoading: false,
                  imageError: _t2.message || "Upload failed. Please try again."
                })
              });
            });
          case 9:
            return _context.a(2);
        }
      }, _callee, null, [[4, 6], [2, 8]]);
    }));
    return function handleFileChange(_x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Canvas background:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "flex gap-2",
      children: ["image", "button", "text", "xbutton"].map(function (t) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          onClick: function onClick() {
            return add(t);
          },
          className: "btn",
          children: ["+ ", t]
        }, t);
      })
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded space-y-2 text-xs",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex justify-between items-center",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "capitalize",
          children: sel.type
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "flex gap-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: duplicateSel,
            className: "text-blue-600 hover:text-blue-800",
            children: "Duplicate"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: delSel,
            className: "text-red-600 hover:text-red-800",
            children: "Delete"
          })]
        })]
      }), sel.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Upload Image/Video Asset:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*,video/*",
          disabled: sel.props.imageLoading,
          onChange: handleFileChange,
          className: "block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 disabled:opacity-50"
        }), sel.props.imageLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-blue-500 italic mt-1",
          children: "Uploading, please wait..."
        }), sel.props.imageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
          className: "text-xs text-red-500 italic mt-1",
          children: ["Error: ", sel.props.imageError]
        }), sel.props.s3Url && !sel.props.imageLoading && !sel.props.imageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "mt-2 p-2 border border-gray-200 rounded",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
            className: "text-xs font-semibold",
            children: "Current Asset:"
          }), sel.props.s3Url.match(/\.(jpeg|jpg|gif|png|webp)$/i) ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.s3Url,
            alt: "Uploaded preview",
            style: {
              maxWidth: "100px",
              maxHeight: "100px",
              border: "1px solid #ccc",
              objectFit: "contain",
              marginTop: "4px"
            }
          }) : sel.props.s3Url.match(/\.(mp4|webm|ogg)$/i) ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
            src: sel.props.s3Url,
            controls: true,
            style: {
              maxWidth: "150px",
              maxHeight: "100px",
              border: "1px solid #ccc",
              marginTop: "4px"
            },
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
              children: "Your browser does not support the video tag."
            })
          }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-gray-500 mt-1",
            children: ["Preview not available for this file type. Link:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("a", {
              href: sel.props.s3Url,
              target: "_blank",
              rel: "noopener noreferrer",
              className: "text-blue-500 hover:underline",
              children: "Open asset"
            })]
          }), sel.props.imageDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-gray-500 mt-1",
            children: ["Dimensions: ", sel.props.imageDims.width, " x", " ", sel.props.imageDims.height, " px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-2",
          children: "Image Click-through URL (optional):"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "url",
          placeholder: "https://example.com/your-link",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 text-xs rounded"
        })]
      }), sel.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Button Text:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 rounded"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-2 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Text", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.textColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textColor: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["BG", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.color,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      color: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Border", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.borderColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      borderColor: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Width", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              value: sel.props.borderWidth,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      borderWidth: +e.target.value
                    })
                  });
                });
              },
              className: "w-12 border px-1 rounded"
            }), "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-2 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Font", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
              value: sel.props.font,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      font: e.target.value
                    })
                  });
                });
              },
              className: "border rounded text-xs p-0.5",
              children: FONTS.map(function (f) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: f,
                  children: f.replace(/'/g, "")
                }, f);
              })
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Size", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "72",
              value: sel.props.size,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      size: +e.target.value
                    })
                  });
                });
              },
              className: "w-12 border px-1 rounded"
            }), "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold: e.target.checked
                  })
                });
              });
            }
          }), " ", "Bold"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Button Click-through URL:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "url",
          placeholder: "https://example.com/your-link",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 rounded"
        })]
      }), sel.type === "text" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Text Content:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 rounded",
          rows: 3
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-2 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Color", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.color,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      color: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Font", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
              value: sel.props.font,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      font: e.target.value
                    })
                  });
                });
              },
              className: "border rounded text-xs p-0.5",
              children: FONTS.map(function (f) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: f,
                  children: f.replace(/'/g, "")
                }, f);
              })
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Size", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "72",
              value: sel.props.size,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      size: +e.target.value
                    })
                  });
                });
              },
              className: "w-12 border px-1 rounded"
            }), "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold: e.target.checked
                  })
                });
              });
            }
          }), " ", "Bold"]
        })]
      }), sel.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-2 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Icon Color", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.color,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      color: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Background", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.bg,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      bg: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Icon Size", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "100",
              value: sel.props.size,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      size: +e.target.value
                    })
                  });
                });
              },
              className: "w-12 border px-1 rounded"
            }), "px"]
          })]
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "mt-2 pt-2 border-t",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium",
          children: "Animation Effect:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: sel.props.effect,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  effect: e.target.value
                })
              });
            });
          },
          className: "border w-full rounded text-xs p-1 mt-0.5",
          children: EFFECTS.map(function (ef) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: ef,
              children: ef
            }, ef);
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Animation Delay (seconds):"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "number",
          min: "0",
          step: "0.1",
          value: sel.props.delay,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  delay: +e.target.value
                })
              });
            });
          },
          className: "w-20 border px-1 rounded mt-0.5"
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500 italic",
      children: "Click an element on the canvas to edit its properties."
    })]
  });
}

/* ═════════════════════ PREVIEW ═════════════════════ */
function Preview(_ref3) {
  var _ref3$state = _ref3.state,
    state = _ref3$state === void 0 ? startState() : _ref3$state,
    setState = _ref3.setState,
    readOnly = _ref3.readOnly;
  var safe = state.screens && state.screens.length > 0 ? state : startState();
  var scr = safe.screens[0];
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    allElementsHiddenForDemo = _useState2[0],
    setAllElementsHiddenForDemo = _useState2[1];
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (readOnly) {
      setAllElementsHiddenForDemo(false);
    }
  }, [scr.id, scr.elements.length, readOnly]);
  var commit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (id, patch) {
    if (readOnly || !setState) return;
    setState === null || setState === void 0 || setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === id ? _objectSpread(_objectSpread({}, e), patch) : e;
          })
        }) : sc;
      })
    }));
  }, [safe, scr, setState, readOnly]);
  var selectElement = function selectElement(id) {
    // This function is ONLY for selecting elements in the editor.
    if (!readOnly && setState) {
      setState(_objectSpread(_objectSpread({}, safe), {}, {
        selected: id
      }));
    }
  };
  var openUrl = function openUrl(url) {
    return url && window.open(url, "_blank");
  };
  var dismissAllElements = function dismissAllElements() {
    // This function is ONLY for the demo page's X button.
    if (readOnly) {
      setAllElementsHiddenForDemo(true);
    }
  };
  var handleElementClick = function handleElementClick(e, el) {
    e.stopPropagation(); // Important to prevent canvas deselect
    if (!readOnly) {
      selectElement(el.id); // In editor, always select
    } else {
      // In readOnly (demo) mode, handle element-specific actions
      if (el.type === "xbutton") {
        dismissAllElements();
      } else if (el.props.url && (el.type === "button" || el.type === "image")) {
        openUrl(el.props.url);
      }
      // Other types might have different interactions in readOnly mode
    }
  };
  var extraCss = "\n    @keyframes fade-in{0%{opacity:0;visibility:visible;}100%{opacity:1;visibility:visible;}}\n    @keyframes fade-out{0%{opacity:1;visibility:visible;}100%{opacity:0;visibility:hidden;}}\n    @keyframes zoom-in{0%{transform:scale(0.5);visibility:visible;}100%{transform:scale(1);visibility:visible;}}\n    @keyframes zoom-out{0%{transform:scale(1.5);visibility:visible;}100%{transform:scale(1);visibility:visible;}}\n    @keyframes slide-in-left{0%{transform:translateX(-100%);visibility:visible;}100%{transform:translateX(0);visibility:visible;}}\n    @keyframes slide-in-right{0%{transform:translateX(100%);visibility:visible;}100%{transform:translateX(0);visibility:visible;}}\n    @keyframes slide-in-up{0%{transform:translateY(-100%);visibility:visible;}100%{transform:translateY(0);visibility:visible;}}\n    @keyframes slide-in-down{0%{transform:translateY(100%);visibility:visible;}100%{transform:translateY(0);visibility:visible;}}\n    @keyframes slide-out-left{0%{transform:translateX(0);visibility:visible;}100%{transform:translateX(-100%);visibility:hidden;}}\n    @keyframes slide-out-right{0%{transform:translateX(0);visibility:visible;}100%{transform:translateX(100%);visibility:hidden;}}\n    @keyframes slide-out-up{0%{transform:translateY(0);visibility:visible;}100%{transform:translateY(-100%);visibility:hidden;}}\n    @keyframes slide-out-down{0%{transform:translateY(0);visibility:visible;}100%{transform:translateY(100%);visibility:hidden;}}\n    @keyframes spin{0%{transform:rotate(0);visibility:visible;}100%{transform:rotate(360deg);visibility:visible;}}\n    @keyframes shake{0%{visibility:visible;}10%,90%{transform:translateX(-1px);}20%,80%{transform:translateX(2px);}30%,50%,70%{transform:translateX(-4px);}40%,60%{transform:translateX(4px);}}\n    @keyframes flip{0%{transform:rotateY(90deg);visibility:visible;}100%{transform:rotateY(0);visibility:visible;}}\n    @keyframes bounce{0%,20%,50%,80%,100%{transform:translateY(0);visibility:visible;}40%{transform:translateY(-30px);}}\n    @keyframes bounce-up{0%{transform:translateY(100%);visibility:visible;}60%{transform:translateY(-10%);}100%{transform:translateY(0);visibility:visible;}}\n  ";
  var baseStyle = function baseStyle(el) {
    var eff = el.props.effect;
    var hasEff = eff !== "none";
    var vis = hasEff ? "hidden" : "visible";
    var initOpacity = !hasEff ? 1 : eff === "fade-in" ? 0 : 1;
    return {
      visibility: vis,
      opacity: initOpacity,
      animation: hasEff ? "".concat(eff, " 1s ease forwards") : undefined,
      animationDelay: "".concat(el.props.delay || 0, "s"),
      animationFillMode: "forwards"
    };
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      children: extraCss
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: safe.bg,
        position: "relative",
        overflow: "hidden"
      },
      onClick: function onClick() {
        return selectElement(null);
      } // Deselect on canvas click (only in editor)
      ,
      children: scr.elements.filter(function (el) {
        if (readOnly) {
          return !allElementsHiddenForDemo && !el.hidden;
        }
        return !el.hidden;
      }).map(function (el) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly,
          enableResizing: !readOnly && el.type !== "xbutton",
          onDragStop: function onDragStop(_, d) {
            return commit(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            return commit(el.id, {
              w: ref.offsetWidth,
              h: ref.offsetHeight,
              x: pos.x,
              y: pos.y
            });
          }
          // The main click handler is now on the inner content for more control
          // onClick={(e) => handleElementClick(e, el)} // MOVED TO INNER ELEMENTS
          ,
          style: {
            outline: safe.selected === el.id && !readOnly ? "2px solid #3b82f6" : "none",
            cursor: !readOnly ? "move" : el.props.url || el.type === "xbutton" ? "pointer" : "default"
          },
          children: [el.type === "image" && (el.props.s3Url && el.props.s3Url.match(/\.(jpeg|jpg|gif|png|webp|svg)$/i) ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: el.props.s3Url,
            alt: "User content ".concat(el.id),
            onClick: function onClick(e) {
              return handleElementClick(e, el);
            },
            style: _objectSpread({
              width: "100%",
              height: "100%",
              objectFit: "cover"
            }, baseStyle(el)),
            onError: function onError(e) {
              e.target.src = "https://dummyimage.com/".concat(el.w || 100, "x").concat(el.h || 100, "/eee/aaa&text=Error");
            }
          }) : el.props.s3Url && el.props.s3Url.match(/\.(mp4|webm|ogg)$/i) ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
            src: el.props.s3Url,
            controls: !readOnly,
            autoPlay: true,
            muted: true,
            loop: true,
            onClick: function onClick(e) {
              return handleElementClick(e, el);
            },
            style: _objectSpread({
              width: "100%",
              height: "100%",
              objectFit: "contain"
            }, baseStyle(el)),
            onError: function onError(e) {
              /* TODO: Handle video error */
            },
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
              children: "Your browser does not support the video tag."
            })
          }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: "https://dummyimage.com/".concat(el.w || 100, "x").concat(el.h || 100, "/eee/aaa&text=Asset"),
            alt: "Placeholder ".concat(el.id),
            onClick: function onClick(e) {
              return handleElementClick(e, el);
            },
            style: _objectSpread({
              width: "100%",
              height: "100%",
              objectFit: "contain"
            }, baseStyle(el))
          })), el.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: function onClick(e) {
              return handleElementClick(e, el);
            },
            style: _objectSpread(_objectSpread({}, buttonStyle(el.props)), baseStyle(el)),
            className: "w-full h-full flex items-center justify-center select-none",
            children: el.props.text
          }), el.type === "text" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            onClick: function onClick(e) {
              return handleElementClick(e, el);
            },
            style: _objectSpread({
              color: el.props.color,
              fontFamily: el.props.font,
              fontSize: el.props.size,
              fontWeight: el.props.bold ? "bold" : "normal",
              width: "100%",
              height: "100%",
              overflow: "hidden",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              textAlign: "center",
              padding: "2px"
            }, baseStyle(el)),
            children: el.props.text
          }), el.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            onClick: function onClick(e) {
              return handleElementClick(e, el);
            },
            style: _objectSpread({
              width: "100%",
              height: "100%",
              borderRadius: "50%",
              border: "2px solid ".concat(el.props.color),
              background: el.props.bg,
              color: el.props.color,
              fontSize: "".concat(el.props.size, "px"),
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              cursor: "pointer"
            }, baseStyle(el)),
            children: "\xD7"
          })]
        }, el.id);
      })
    })]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */

function serialize(currentState) {
  if (!currentState || !currentState.screens || !Array.isArray(currentState.screens) || currentState.screens.length === 0) {
    var defaultData = {
      bg: (currentState === null || currentState === void 0 ? void 0 : currentState.bg) || "#ffffff",
      selected: null,
      screens: [{
        id: crypto.randomUUID(),
        elements: []
      }]
    };
    return _objectSpread(_objectSpread({}, defaultData), {}, {
      _thumbnailHintUrl: null
    });
  }
  var _currentState$screens = _slicedToArray(currentState.screens, 1),
    currentScreenFromState = _currentState$screens[0];
  if (!currentScreenFromState || !Array.isArray(currentScreenFromState.elements)) {
    var screenToSerialize = _objectSpread({
      id: (currentScreenFromState === null || currentScreenFromState === void 0 ? void 0 : currentScreenFromState.id) || crypto.randomUUID(),
      elements: []
    }, currentScreenFromState && _typeof(currentScreenFromState) === "object" ? currentScreenFromState : {});
    screenToSerialize.elements = [];
    var dataWithProblematicScreen = _objectSpread(_objectSpread({}, currentState), {}, {
      selected: null,
      screens: [screenToSerialize]
    });
    return _objectSpread(_objectSpread({}, dataWithProblematicScreen), {}, {
      _thumbnailHintUrl: null
    });
  }
  var elementsToPersist = currentScreenFromState.elements.map(function (el) {
    var hidden = el.hidden,
      restOfEl = _objectWithoutProperties(el, _excluded);
    if (restOfEl.type === "image") {
      var _restOfEl$props = restOfEl.props,
        s3Url = _restOfEl$props.s3Url,
        imageDims = _restOfEl$props.imageDims,
        url = _restOfEl$props.url,
        effect = _restOfEl$props.effect,
        delay = _restOfEl$props.delay;
      var persistentImageProps = {
        s3Url: s3Url || "",
        imageDims: imageDims || null,
        url: url || "",
        effect: effect || "none",
        delay: delay || 0
      };
      return _objectSpread(_objectSpread({}, restOfEl), {}, {
        props: persistentImageProps
      });
    }
    return restOfEl;
  });
  var bestThumbnailUrl = null;
  var firstAssetHoldingElement = elementsToPersist.find(function (el) {
    return el.type === "image" && el.props && typeof el.props.s3Url === "string" && el.props.s3Url.trim() !== "";
  });
  if (firstAssetHoldingElement) {
    bestThumbnailUrl = firstAssetHoldingElement.props.s3Url;
  }
  var dataToSave = _objectSpread(_objectSpread({}, currentState), {}, {
    selected: null,
    screens: [_objectSpread(_objectSpread({}, currentScreenFromState), {}, {
      elements: elementsToPersist
    })]
  });
  return _objectSpread(_objectSpread({}, dataToSave), {}, {
    _thumbnailHintUrl: bestThumbnailUrl
  });
}
var deserialize = function deserialize() {
  var backendData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var processScreen = function processScreen(screen) {
    var elements = screen && Array.isArray(screen.elements) ? screen.elements : [];
    return _objectSpread(_objectSpread({}, screen), {}, {
      elements: elements.map(function (el) {
        var baseElement = _objectSpread(_objectSpread({}, el), {}, {
          hidden: false
        });
        if (baseElement.type === "image") {
          return _objectSpread(_objectSpread({}, baseElement), {}, {
            props: _objectSpread(_objectSpread({}, baseElement.props), {}, {
              s3Url: baseElement.props.s3Url || "",
              imageDims: baseElement.props.imageDims || null,
              imageLoading: false,
              imageError: null
            })
          });
        }
        return baseElement;
      })
    });
  };
  if (backendData && backendData.screens && Array.isArray(backendData.screens) && backendData.screens.length > 0) {
    return _objectSpread(_objectSpread({}, backendData), {}, {
      selected: null,
      screens: backendData.screens.map(processScreen)
    });
  }
  var initial = startState();
  initial.screens = initial.screens.map(processScreen);
  return initial;
};

/***/ }),

/***/ "./templates/changeAds.js":
/*!********************************!*\
  !*** ./templates/changeAds.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
// templates/changeAds.js
 // Added useState

var API_BASE_URL = "https://localhost:3001" || 0;

/* ───────────────── helper: measure image ───────────────── */
var measure = function measure(src) {
  return new Promise(function (res, rej) {
    // Added reject
    var img = new Image();
    img.onload = function () {
      return res({
        width: img.naturalWidth,
        height: img.naturalHeight
      });
    };
    img.onerror = function (err) {
      // Handle image load errors
      console.error("Failed to measure image:", src, err);
      rej(err);
    };
    img.src = src;
  });
};

/* ───────────────── template meta ───────────────── */
var meta = {
  id: "change-ads",
  name: "Change Ads",
  description: "Reveal one image over another on drag",
  canvas: {
    w: 300,
    h: 250
  }
};

/* ───────────────── Editor (left-side controls) ───────────────── */
function Editor(_ref) {
  var state = _ref.state,
    setState = _ref.setState;
  // Helper function to upload a file and get its S3 URL
  // IMPORTANT: This assumes you have a way to get the JWT token if your /api/files/upload is protected.
  // For now, this example proceeds as if /api/files/upload might not need a token,
  // or you'll need to adapt it to include the token (e.g., from a context or global state).
  var uploadFileToBackend = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(file) {
      var formData, response, errorData, result, _t;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            formData = new FormData();
            formData.append("assetFile", file);

            // TODO: Add JWT token to the headers if /api/files/upload is protected
            // const token = "YOUR_JWT_TOKEN_HERE"; // Get this from your auth state
            // const headers = token ? { 'Authorization': `Bearer ${token}` } : {};
            _context.p = 1;
            _context.n = 2;
            return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
              method: "POST",
              body: formData
              // headers: headers, // Uncomment if you have token
            });
          case 2:
            response = _context.v;
            if (response.ok) {
              _context.n = 4;
              break;
            }
            _context.n = 3;
            return response.json()["catch"](function () {
              return {
                message: "Upload failed with status " + response.status
              };
            });
          case 3:
            errorData = _context.v;
            throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
          case 4:
            _context.n = 5;
            return response.json();
          case 5:
            result = _context.v;
            return _context.a(2, result.url);
          case 6:
            _context.p = 6;
            _t = _context.v;
            console.error("File upload error:", _t);
            alert("File upload failed: ".concat(_t.message)); // Simple alert for user feedback
            throw _t;
          case 7:
            return _context.a(2);
        }
      }, _callee, null, [[1, 6]]);
    }));
    return function uploadFileToBackend(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  /* when user picks a file, upload to S3, get URL, then measure its size */
  var onFileChange = function onFileChange(key) {
    return /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(e) {
        var _e$target$files;
        var file, s3Url, dims, _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.n) {
            case 0:
              file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];
              if (file) {
                _context2.n = 1;
                break;
              }
              return _context2.a(2);
            case 1:
              // Indicate loading state for this specific file input if desired
              setState(function (prevState) {
                return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty(_defineProperty({}, "".concat(key, "Loading"), true), "".concat(key, "Error"), null));
              });
              _context2.p = 2;
              _context2.n = 3;
              return uploadFileToBackend(file);
            case 3:
              s3Url = _context2.v;
              if (s3Url) {
                _context2.n = 4;
                break;
              }
              throw new Error("S3 URL was not returned from backend.");
            case 4:
              _context2.n = 5;
              return measure(s3Url);
            case 5:
              dims = _context2.v;
              // Measure using the S3 URL

              setState(function (prevState) {
                return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty(_defineProperty(_defineProperty({}, "".concat(key, "Url"), s3Url), "".concat(key, "Dims"), dims), "".concat(key, "Loading"), false));
              });
              _context2.n = 7;
              break;
            case 6:
              _context2.p = 6;
              _t2 = _context2.v;
              console.error("Error processing file for ".concat(key, ":"), _t2);
              setState(function (prevState) {
                return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(key, "Url"), prevState["".concat(key, "Url")] || ""), "".concat(key, "Dims"), prevState["".concat(key, "Dims")] || {}), "".concat(key, "Loading"), false), "".concat(key, "Error"), _t2.message || "Failed to process file."));
              });
            case 7:
              return _context2.a(2);
          }
        }, _callee2, null, [[2, 6]]);
      }));
      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }();
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div", {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("label", {
        className: "block text-sm font-medium",
        children: "Base image (bottom)"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("input", {
        type: "file",
        accept: "image/*",
        onChange: onFileChange("file1"),
        disabled: state === null || state === void 0 ? void 0 : state.file1Loading
      }), (state === null || state === void 0 ? void 0 : state.file1Loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("p", {
        className: "text-xs text-gray-500",
        children: "Uploading base image..."
      }), (state === null || state === void 0 ? void 0 : state.file1Error) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("p", {
        className: "text-xs text-red-500",
        children: ["Error: ", state.file1Error]
      }), (state === null || state === void 0 ? void 0 : state.file1Url) && !(state !== null && state !== void 0 && state.file1Loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("img", {
        src: state.file1Url,
        alt: "Base preview",
        className: "mt-2 h-20 object-contain border"
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div", {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("label", {
        className: "block text-sm font-medium",
        children: "Overlay image (top)"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("input", {
        type: "file",
        accept: "image/*",
        onChange: onFileChange("file2"),
        disabled: state === null || state === void 0 ? void 0 : state.file2Loading
      }), (state === null || state === void 0 ? void 0 : state.file2Loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("p", {
        className: "text-xs text-gray-500",
        children: "Uploading overlay image..."
      }), (state === null || state === void 0 ? void 0 : state.file2Error) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("p", {
        className: "text-xs text-red-500",
        children: ["Error: ", state.file2Error]
      }), (state === null || state === void 0 ? void 0 : state.file2Url) && !(state !== null && state !== void 0 && state.file2Loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("img", {
        src: state.file2Url,
        alt: "Overlay preview",
        className: "mt-2 h-20 object-contain border"
      })]
    })]
  });
}

/* ───────────────── Preview (live + read-only) ───────────────── */
// No changes needed here if it already uses file1Url and file2Url from state
function Preview(_ref4) {
  var state = _ref4.state,
    readOnly = _ref4.readOnly;
  var _ref5 = state !== null && state !== void 0 ? state : {},
    file1Url = _ref5.file1Url,
    file2Url = _ref5.file2Url,
    _ref5$file1Dims = _ref5.file1Dims,
    file1Dims = _ref5$file1Dims === void 0 ? {} : _ref5$file1Dims,
    _ref5$revealPos = _ref5.revealPos,
    revealPos = _ref5$revealPos === void 0 ? 50 : _ref5$revealPos;
  // ... (rest of your Preview component is likely fine as it uses URLs) ...
  var previewRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  var overlayRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  var handleRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  var move = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (pct) {
    if (!overlayRef.current || !handleRef.current) return;
    overlayRef.current.style.clipPath = "inset(0 ".concat(100 - pct, "% 0 0)");
    handleRef.current.style.left = "".concat(pct, "%");
  }, []);
  var update = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (clientX) {
    if (!previewRef.current) return;
    var _previewRef$current$g = previewRef.current.getBoundingClientRect(),
      left = _previewRef$current$g.left,
      width = _previewRef$current$g.width;
    var pct = (clientX - left) / width * 100;
    move(Math.max(0, Math.min(100, pct)));
  }, [move]);
  var dragHandlers = readOnly ? {} : {
    onMouseMove: function onMouseMove(e) {
      return update(e.clientX);
    },
    onTouchMove: function onTouchMove(e) {
      return update(e.touches[0].clientX);
    }
  };
  var W = file1Dims.width || meta.canvas.w;
  var H = file1Dims.height || meta.canvas.h;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div", _objectSpread(_objectSpread({
    ref: previewRef,
    className: "relative cursor-ew-resize select-none",
    style: {
      width: W,
      height: H
    }
  }, dragHandlers), {}, {
    children: [file1Url && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("img", {
      src: file1Url,
      alt: "before",
      className: "absolute inset-0 w-full h-full object-cover"
    }), file2Url && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("img", {
      ref: overlayRef,
      src: file2Url,
      alt: "after",
      className: "absolute inset-0 w-full h-full object-cover",
      style: {
        clipPath: "inset(0 ".concat(100 - revealPos, "% 0 0)")
      }
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div", {
      ref: handleRef,
      className: "absolute top-0 bottom-0",
      style: {
        left: "".concat(revealPos, "%"),
        transform: "translateX(-50%)"
      },
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div", {
        className: "w-px h-full bg-white/80"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div", {
        className: "absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-9 h-9 rounded-full bg-white/90 shadow flex items-center justify-center font-bold text-black select-none",
        children: "\u2039\u203A"
      })]
    })]
  }));
}

/* ───────────────── persistence helpers ───────────────── */
// const toB64 = ...; // No longer needed for file content

/* ---- serialize: state now contains S3 URLs ---- */
function serialize() {
  return _serialize.apply(this, arguments);
}

/* ---- deserialize with full fallbacks ---- */
// This function should still work if the backend 'data' object
// has 'file1' and 'file2' keys containing the S3 URLs.
function _serialize() {
  _serialize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
    var _state$file1Url, _state$file2Url, _state$file1Dims$widt, _state$file1Dims, _state$file1Dims$heig, _state$file1Dims2, _state$revealPos;
    var state,
      _args3 = arguments;
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          state = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
          return _context3.a(2, {
            file1: (_state$file1Url = state.file1Url) !== null && _state$file1Url !== void 0 ? _state$file1Url : "",
            // Pass through the S3 URL
            file2: (_state$file2Url = state.file2Url) !== null && _state$file2Url !== void 0 ? _state$file2Url : "",
            // Pass through the S3 URL
            file1Width: (_state$file1Dims$widt = (_state$file1Dims = state.file1Dims) === null || _state$file1Dims === void 0 ? void 0 : _state$file1Dims.width) !== null && _state$file1Dims$widt !== void 0 ? _state$file1Dims$widt : meta.canvas.w,
            file1Height: (_state$file1Dims$heig = (_state$file1Dims2 = state.file1Dims) === null || _state$file1Dims2 === void 0 ? void 0 : _state$file1Dims2.height) !== null && _state$file1Dims$heig !== void 0 ? _state$file1Dims$heig : meta.canvas.h,
            revealPos: (_state$revealPos = state.revealPos) !== null && _state$revealPos !== void 0 ? _state$revealPos : 50
          });
      }
    }, _callee3);
  }));
  return _serialize.apply(this, arguments);
}
var deserialize = function deserialize() {
  var _d$file1Width, _d$file1Height, _d$revealPos;
  var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, d), {}, {
    /* runtime conveniences used by Editor & Preview */
    file1Url: d.file1 || "",
    // d.file1 is now expected to be the S3 URL
    file2Url: d.file2 || "",
    // d.file2 is now expected to be the S3 URL
    file1Dims: {
      width: (_d$file1Width = d.file1Width) !== null && _d$file1Width !== void 0 ? _d$file1Width : meta.canvas.w,
      height: (_d$file1Height = d.file1Height) !== null && _d$file1Height !== void 0 ? _d$file1Height : meta.canvas.h
    },
    revealPos: (_d$revealPos = d.revealPos) !== null && _d$revealPos !== void 0 ? _d$revealPos : 50
  });
};

/***/ }),

/***/ "./templates/defaultStatic.js":
/*!************************************!*\
  !*** ./templates/defaultStatic.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }

function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// templates/defaultStatic.js
/* identical helper */
var measure = function measure(src) {
  return new Promise(function (res) {
    var img = new Image();
    img.onload = function () {
      return res({
        width: img.naturalWidth,
        height: img.naturalHeight
      });
    };
    img.src = src;
  });
};
var meta = {
  id: "default",
  name: "Default",
  description: "Solid colour, one image + text",
  canvas: {
    w: 280,
    h: 560
  }
};

/* -------- editor -------- */
function Editor(_ref) {
  var state = _ref.state,
    setState = _ref.setState;
  var set = function set(k) {
    return function (v) {
      return setState(_objectSpread(_objectSpread({}, state), {}, _defineProperty({}, k, v)));
    };
  };
  var onFile = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(e) {
      var file, url, dims;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            file = e.target.files[0];
            if (file) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            url = URL.createObjectURL(file);
            _context.n = 2;
            return measure(url);
          case 2:
            dims = _context.v;
            setState(_objectSpread(_objectSpread({}, state), {}, {
              file1: file,
              file1Url: url,
              file1Dims: dims
            }));
          case 3:
            return _context.a(2);
        }
      }, _callee);
    }));
    return function onFile(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("label", {
        className: "block text-sm font-medium",
        children: "Background colour"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input", {
        type: "color",
        value: state.color,
        onChange: function onChange(e) {
          return set("color")(e.target.value);
        }
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("label", {
        className: "block text-sm font-medium",
        children: "Upload an image"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input", {
        type: "file",
        accept: "image/*",
        onChange: onFile
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("label", {
        className: "block text-sm font-medium",
        children: "Headline"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input", {
        type: "text",
        value: state.text,
        onChange: function onChange(e) {
          return set("text")(e.target.value);
        },
        className: "mt-1 block w-full border-gray-300 shadow-sm"
      })]
    })]
  });
}

/* -------- preview -------- */
function Preview(_ref3) {
  var state = _ref3.state;
  var _state$color = state.color,
    color = _state$color === void 0 ? "#ffffff" : _state$color,
    file1Url = state.file1Url,
    text = state.text;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
    className: "relative",
    style: {
      width: meta.canvas.w,
      height: meta.canvas.h,
      background: color
    },
    children: [file1Url && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("img", {
      src: file1Url,
      className: "absolute top-4 left-4 max-w-[80%] h-auto"
    }), text && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", {
      className: "absolute bottom-4 left-4 text-black font-medium",
      children: text
    })]
  });
}

/* -------- persistence -------- */
var toB64 = function toB64(f) {
  return new Promise(function (res) {
    var fr = new FileReader();
    fr.onloadend = function () {
      return res(fr.result);
    };
    fr.readAsDataURL(f);
  });
};
function serialize(_x2) {
  return _serialize.apply(this, arguments);
}
function _serialize() {
  _serialize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(s) {
    var imgStr, _t;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          if (!(s.file1 instanceof File)) {
            _context2.n = 2;
            break;
          }
          _context2.n = 1;
          return toB64(s.file1);
        case 1:
          _t = _context2.v;
          _context2.n = 3;
          break;
        case 2:
          _t = s.file1;
        case 3:
          imgStr = _t;
          return _context2.a(2, {
            color: s.color,
            text: s.text,
            file1: imgStr
          });
      }
    }, _callee2);
  }));
  return _serialize.apply(this, arguments);
}
var deserialize = function deserialize(d) {
  return _objectSpread(_objectSpread({}, d), {}, {
    file1Url: d.file1
  });
};

/***/ }),

/***/ "./templates/freeLayout.js":
/*!*********************************!*\
  !*** ./templates/freeLayout.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["props"],
  _excluded2 = ["assetLoading", "assetError", "file", "src"],
  _excluded3 = ["assetLoading", "assetError", "file", "src"];
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* Free Layout – multi-screen drag-and-drop template
   ------------------------------------------------
   Modified for S3/Backend File Handling & Thumbnail Hint
*/




// --- S3/Backend Integration: Global Constants and Helpers ---

var API_BASE_URL = "https://localhost:3001" || 0;
var getAuthToken = function getAuthToken() {
  if (typeof window !== "undefined") {
    return localStorage.getItem("jwt");
  }
  return null;
};
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(fileObject) {
    var formData, token, headers, response, errorData, result, _t3, _t4;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          formData = new FormData();
          formData.append("assetFile", fileObject);
          _context2.p = 1;
          token = getAuthToken();
          headers = {};
          if (token) {
            headers["Authorization"] = "Bearer ".concat(token);
          }
          _context2.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData,
            headers: headers
          });
        case 2:
          response = _context2.v;
          if (response.ok) {
            _context2.n = 7;
            break;
          }
          _context2.p = 3;
          _context2.n = 4;
          return response.json();
        case 4:
          errorData = _context2.v;
          _context2.n = 6;
          break;
        case 5:
          _context2.p = 5;
          _t3 = _context2.v;
          errorData = {
            message: "Upload failed: ".concat(response.statusText || response.status)
          };
        case 6:
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 7:
          _context2.n = 8;
          return response.json();
        case 8:
          result = _context2.v;
          if (result.url) {
            _context2.n = 9;
            break;
          }
          throw new Error("Upload successful, but no URL was returned from the backend.");
        case 9:
          return _context2.a(2, result.url);
        case 10:
          _context2.p = 10;
          _t4 = _context2.v;
          console.error("Error uploading file to backend:", _t4);
          if (!(_t4 instanceof Error)) {
            _context2.n = 11;
            break;
          }
          throw _t4;
        case 11:
          throw new Error(String(_t4 || "An unknown error occurred during file upload."));
        case 12:
          return _context2.a(2);
      }
    }, _callee2, null, [[3, 5], [1, 10]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
function measureImageDimensions(_x2) {
  return _measureImageDimensions.apply(this, arguments);
} // --- End S3/Backend Integration Helpers ---
/* ---------- meta ---------- */
function _measureImageDimensions() {
  _measureImageDimensions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(s3Url) {
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          return _context3.a(2, new Promise(function (resolve, reject) {
            if (!s3Url || !s3Url.match(/\.(jpeg|jpg|gif|png|webp|svg)$/i)) {
              // Not an image or no URL, resolve with null
              resolve(null);
              return;
            }
            var img = new Image();
            img.onload = function () {
              resolve({
                width: img.naturalWidth,
                height: img.naturalHeight
              });
            };
            img.onerror = function (err) {
              console.error("Error loading image for measurement:", s3Url, err);
              reject(new Error("Could not load image to measure dimensions. Check S3 URL and CORS."));
            };
            img.crossOrigin = "anonymous";
            img.src = s3Url;
          }));
      }
    }, _callee3);
  }));
  return _measureImageDimensions.apply(this, arguments);
}
var meta = {
  id: "free-layout",
  name: "Banner Film",
  description: "Drag/resize anything, multi-screen",
  canvas: {
    w: 378,
    h: 648
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'"];
var TRANSITIONS = ["fade", "zoom-in", "zoom-out", "slide-left", "slide-right", "slide-up", "slide-down", "rotate", "flip"];

// ADDED: Element animations
var ELEMENT_ANIMATIONS = ["none", "fadeIn", "slideInUp", "zoomInSimple", "bounceIn", "rotateIn"];
var startState = function startState() {
  return {
    bg: "#ffffff",
    current: 0,
    selected: null,
    animKey: 0,
    transition: "fade",
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }]
  };
};
var newElement = function newElement(type) {
  var base = {
    id: crypto.randomUUID(),
    type: type,
    x: 10,
    y: 10,
    w: 100,
    h: 30,
    props: {
      animation: "none"
    } // Added animation prop to all elements
  };
  switch (type) {
    case "button":
      return _objectSpread(_objectSpread({}, base), {}, {
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          text: "Click me",
          color: "#2563eb",
          font: "Arial",
          size: 14,
          bold: false,
          // ADDED: Bold option for button
          radius: 6,
          action: "url",
          url: "",
          target: null
        })
      });
    case "title":
      return _objectSpread(_objectSpread({}, base), {}, {
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          text: "Title",
          color: "#000",
          font: "Georgia",
          size: 20
        })
      });
    case "subtitle":
      return _objectSpread(_objectSpread({}, base), {}, {
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          text: "Subtitle",
          color: "#111827",
          font: "Georgia",
          size: 16
        })
      });
    case "image":
      return _objectSpread(_objectSpread({}, base), {}, {
        h: 100,
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          s3Url: "",
          assetLoading: false,
          assetError: null,
          assetDims: null,
          radius: 0,
          url: ""
        })
      });
    case "video":
      return _objectSpread(_objectSpread({}, base), {}, {
        w: 200,
        h: 120,
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          s3Url: "",
          assetLoading: false,
          assetError: null
        })
      });
    case "textbox":
      return _objectSpread(_objectSpread({}, base), {}, {
        h: 80,
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          text: "Long text…",
          color: "#000",
          font: "Arial",
          size: 14,
          bold: false,
          align: "left",
          bg: "#ffffff"
        })
      });
    case "gallery":
      return _objectSpread(_objectSpread({}, base), {}, {
        w: 200,
        h: 80,
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          radius: 0,
          imageH: 70,
          images: []
        })
      });
    case "xbutton":
      return _objectSpread(_objectSpread({}, base), {}, {
        w: 32,
        h: 32,
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          target: null,
          xColor: "rgba(0,0,0,.6)",
          // CHANGED: from color to xColor
          bgColor: "transparent" // ADDED: background color for xbutton
        })
      });
    default:
      return base;
  }
};

/* ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _sel$props$target, _sel$props$target2;
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });

  /* ── screen ops ── */
  var setCurrent = function setCurrent(i) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: i,
      selected: null
    }));
  };
  var addScreen = function addScreen() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: safe.screens.length,
      selected: null,
      screens: [].concat(_toConsumableArray(safe.screens), [{
        id: crypto.randomUUID(),
        elements: []
      }])
    }));
  };
  var duplicateScreen = function duplicateScreen() {
    var newScreen = JSON.parse(JSON.stringify(scr)); // Deep copy
    newScreen.id = crypto.randomUUID(); // New ID for the duplicated screen
    newScreen.elements = newScreen.elements.map(function (el) {
      return _objectSpread(_objectSpread(_objectSpread({}, el), {}, {
        id: crypto.randomUUID()
      }, (el.type === "image" || el.type === "video") && {
        props: _objectSpread(_objectSpread({}, el.props), {}, {
          assetLoading: false,
          assetError: null
        })
      }), el.type === "gallery" && {
        props: _objectSpread(_objectSpread({}, el.props), {}, {
          images: el.props.images.map(function (img) {
            return _objectSpread(_objectSpread({}, img), {}, {
              assetLoading: false,
              assetError: null
            });
          })
        })
      });
    });
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: safe.screens.length,
      selected: null,
      screens: [].concat(_toConsumableArray(safe.screens), [newScreen])
    }));
  };
  var delScreen = function delScreen(idx) {
    if (safe.screens.length === 1) return;
    var arr = safe.screens.slice();
    arr.splice(idx, 1);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: arr,
      current: Math.max(0, idx - 1),
      selected: null
    }));
  };

  /* ── element ops ── */
  var add = function add(t) {
    var newElem = newElement(t);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: newElem.id,
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newElem])
        }) : sc;
      })
    }));
  };
  var patchSel = function patchSel(fn) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc, i) {
        return i !== safe.current ? sc : _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === safe.selected ? fn(e) : e;
          })
        });
      })
    }));
  };
  var delSel = function delSel() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc, i) {
        return i !== safe.current ? sc : _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.filter(function (e) {
            return e.id !== safe.selected;
          })
        });
      })
    }));
  };
  var duplicateSel = function duplicateSel() {
    if (!sel) return;
    var copy = JSON.parse(JSON.stringify(sel));
    copy.id = crypto.randomUUID();
    copy.x += 10;
    copy.y += 10;
    if (copy.type === "image" || copy.type === "video") {
      copy.props.assetLoading = false;
      copy.props.assetError = null;
    }
    if (copy.type === "gallery") {
      copy.props.images = copy.props.images.map(function (img) {
        return _objectSpread(_objectSpread({}, img), {}, {
          assetLoading: false,
          assetError: null
        });
      });
    }
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: copy.id,
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [copy])
        }) : sc;
      })
    }));
  };
  var handleAssetChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(event, elementType, elementId) {
      var _event$target$files;
      var galleryImageIndex,
        file,
        updatePath,
        s3Url,
        assetDims,
        updateSuccessPath,
        updateErrorPath,
        _args = arguments,
        _t,
        _t2;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            galleryImageIndex = _args.length > 3 && _args[3] !== undefined ? _args[3] : null;
            file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];
            if (file) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            updatePath = function updatePath(currentElementProps) {
              if (elementType === "gallery" && galleryImageIndex !== null) {
                var updatedImages = _toConsumableArray(currentElementProps.images);
                updatedImages[galleryImageIndex] = _objectSpread(_objectSpread({}, updatedImages[galleryImageIndex]), {}, {
                  assetLoading: true,
                  assetError: null,
                  s3Url: "",
                  assetDims: null
                });
                return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                  images: updatedImages
                });
              }
              return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                assetLoading: true,
                assetError: null,
                s3Url: "",
                assetDims: null
              });
            };
            patchSel(function (el) {
              return _objectSpread(_objectSpread({}, el), {}, {
                props: updatePath(el.props)
              });
            });
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file);
          case 3:
            s3Url = _context.v;
            assetDims = null;
            if (!file.type.startsWith("image/")) {
              _context.n = 7;
              break;
            }
            _context.p = 4;
            _context.n = 5;
            return measureImageDimensions(s3Url);
          case 5:
            assetDims = _context.v;
            _context.n = 7;
            break;
          case 6:
            _context.p = 6;
            _t = _context.v;
            console.warn("Could not measure dimensions for ".concat(s3Url, ": ").concat(_t.message));
          case 7:
            updateSuccessPath = function updateSuccessPath(currentElementProps) {
              if (elementType === "gallery" && galleryImageIndex !== null) {
                var updatedImages = _toConsumableArray(currentElementProps.images);
                updatedImages[galleryImageIndex] = _objectSpread(_objectSpread({}, updatedImages[galleryImageIndex]), {}, {
                  s3Url: s3Url,
                  assetDims: assetDims,
                  assetLoading: false
                });
                return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                  images: updatedImages
                });
              }
              return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                s3Url: s3Url,
                assetDims: assetDims,
                assetLoading: false
              });
            };
            patchSel(function (el) {
              return _objectSpread(_objectSpread({}, el), {}, {
                props: updateSuccessPath(el.props)
              });
            });
            _context.n = 9;
            break;
          case 8:
            _context.p = 8;
            _t2 = _context.v;
            updateErrorPath = function updateErrorPath(currentElementProps) {
              var errorMessage = _t2.message || "Upload failed.";
              if (elementType === "gallery" && galleryImageIndex !== null) {
                var updatedImages = _toConsumableArray(currentElementProps.images);
                updatedImages[galleryImageIndex] = _objectSpread(_objectSpread({}, updatedImages[galleryImageIndex]), {}, {
                  assetLoading: false,
                  assetError: errorMessage
                });
                return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                  images: updatedImages
                });
              }
              return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                assetLoading: false,
                assetError: errorMessage
              });
            };
            patchSel(function (el) {
              return _objectSpread(_objectSpread({}, el), {}, {
                props: updateErrorPath(el.props)
              });
            });
          case 9:
            return _context.a(2);
        }
      }, _callee, null, [[4, 6], [2, 8]]);
    }));
    return function handleAssetChange(_x3, _x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();

  /* ── UI ── */
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Background\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), safe.screens.length > 1 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Screen transition\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
        value: safe.transition,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            transition: e.target.value
          }));
        },
        className: "border px-1",
        children: TRANSITIONS.map(function (t) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: t,
            children: t
          }, t);
        })
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "flex flex-wrap gap-2",
      children: ["title", "subtitle", "button", "image", "video", "textbox", "gallery", "xbutton"].map(function (t) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          onClick: function onClick() {
            return add(t);
          },
          className: "btn",
          children: ["+ ", t]
        }, t);
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "flex items-center gap-2 overflow-x-auto pb-2",
      children: [safe.screens.map(function (sc, i) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "relative w-10 h-16 border ".concat(i === safe.current ? "border-blue-600" : "border-gray-300", " rounded flex-shrink-0 cursor-pointer"),
          onClick: function onClick() {
            return setCurrent(i);
          },
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            className: "absolute -top-1 -right-1 text-xs text-red-600 cursor-pointer hover:text-red-800",
            onClick: function onClick(e) {
              e.stopPropagation();
              delScreen(i);
            },
            children: "\xD7"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            className: "absolute inset-0 flex items-center justify-center text-[10px]",
            children: i + 1
          })]
        }, sc.id);
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: addScreen,
        className: "btn-secondary text-xs",
        children: "+ new"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: duplicateScreen,
        className: "btn-secondary text-xs",
        children: "+ dup"
      })]
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex justify-between items-center",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "capitalize font-medium",
          children: sel.type
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "space-x-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: duplicateSel,
            className: "text-blue-600 hover:text-blue-800",
            children: "Copy"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: delSel,
            className: "text-red-600 hover:text-red-800",
            children: "Delete"
          })]
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
        className: "block text-sm font-medium",
        children: ["Animation:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: sel.props.animation || "none",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  animation: e.target.value
                })
              });
            });
          },
          className: "border w-full rounded p-0.5 mt-1",
          children: ELEMENT_ANIMATIONS.map(function (anim) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: anim,
              children: anim
            }, anim);
          })
        })]
      }), ["title", "subtitle", "button", "textbox"].includes(sel.type) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [sel.type === "textbox" ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
          rows: "3",
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 rounded"
        }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 rounded"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: sel.props.font,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  font: e.target.value
                })
              });
            });
          },
          className: "border w-full rounded p-0.5",
          children: FONTS.map(function (f) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: f,
              children: f.replace(/'/g, "")
            }, f);
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "flex items-center gap-1",
          children: ["Size:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "8",
            max: "72",
            value: sel.props.size,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    size: +e.target.value
                  })
                });
              });
            },
            className: "border w-16 px-1 rounded"
          }), "Color:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          })]
        })]
      }), sel.type === "textbox" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold: e.target.checked
                  })
                });
              });
            }
          }), "Bold"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: sel.props.align,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  align: e.target.value
                })
              });
            });
          },
          className: "border w-full rounded p-0.5",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "left",
            children: "Left"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "center",
            children: "Center"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "justify",
            children: "Justify"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["BG Color:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bg,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bg: e.target.value
                  })
                });
              });
            }
          })]
        })]
      }), sel.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold || false,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold: e.target.checked
                  })
                });
              });
            }
          }), "Bold Text"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Radius:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16 rounded"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: sel.props.action,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  action: e.target.value
                })
              });
            });
          },
          className: "border w-full rounded p-0.5",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "url",
            children: "URL"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "next",
            children: "Go to screen"
          })]
        }), sel.props.action === "url" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          placeholder: "https://\u2026",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 rounded mt-1"
        }), sel.props.action === "next" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: (_sel$props$target = sel.props.target) !== null && _sel$props$target !== void 0 ? _sel$props$target : "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  target: e.target.value === "" ? null : +e.target.value
                })
              });
            });
          },
          className: "border w-full mt-1 rounded p-0.5",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "",
            children: "(next sequential)"
          }), safe.screens.map(function (_, i) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: i,
              children: ["Screen ", i + 1]
            }, i);
          })]
        })]
      }), sel.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Image Asset:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*",
          disabled: sel.props.assetLoading,
          onChange: function onChange(e) {
            return handleAssetChange(e, "image", sel.id);
          },
          className: "block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 disabled:opacity-50"
        }), sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-blue-500 italic mt-1",
          children: "Uploading..."
        }), sel.props.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
          className: "text-xs text-red-500 italic mt-1",
          children: ["Error: ", sel.props.assetError]
        }), sel.props.s3Url && !sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.s3Url,
            alt: "Preview",
            style: {
              maxWidth: "80px",
              maxHeight: "80px",
              border: "1px solid #ccc",
              objectFit: "contain"
            }
          }), sel.props.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-gray-500",
            children: [sel.props.assetDims.width, "x", sel.props.assetDims.height, "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Click URL (optional):"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          placeholder: "https://\u2026",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 mt-1 rounded"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: ["Radius:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "100",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16 rounded"
          }), "px"]
        })]
      }), sel.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Video Asset:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "video/*",
          disabled: sel.props.assetLoading,
          onChange: function onChange(e) {
            return handleAssetChange(e, "video", sel.id);
          },
          className: "block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 disabled:opacity-50"
        }), sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-blue-500 italic mt-1",
          children: "Uploading..."
        }), sel.props.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
          className: "text-xs text-red-500 italic mt-1",
          children: ["Error: ", sel.props.assetError]
        }), sel.props.s3Url && !sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
          className: "mt-1",
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
            src: sel.props.s3Url,
            controls: true,
            style: {
              maxWidth: "150px",
              maxHeight: "100px",
              border: "1px solid #ccc"
            }
          })
        })]
      }), sel.type === "gallery" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Img Height:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "30",
            max: "300",
            value: sel.props.imageH,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    imageH: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16 rounded"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Radius:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16 rounded"
          }), "px"]
        }), sel.props.images.map(function (img, idx) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "border p-1 my-1 rounded space-y-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              className: "flex items-center gap-1",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "file",
                accept: "image/*",
                disabled: img.assetLoading,
                onChange: function onChange(e) {
                  return handleAssetChange(e, "gallery", sel.id, idx);
                },
                className: "text-xs file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 disabled:opacity-50"
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                className: "text-red-600 text-xs hover:text-red-800",
                onClick: function onClick() {
                  return patchSel(function (o) {
                    var arr = o.props.images.slice();
                    arr.splice(idx, 1);
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        images: arr
                      })
                    });
                  });
                },
                children: "\xD7"
              })]
            }), img.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
              className: "text-xs text-blue-500 italic",
              children: "Uploading..."
            }), img.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
              className: "text-xs text-red-500 italic",
              children: ["Error: ", img.assetError]
            }), img.s3Url && !img.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                src: img.s3Url,
                alt: "Gallery item ".concat(idx + 1),
                style: {
                  maxWidth: "60px",
                  maxHeight: "60px",
                  border: "1px solid #ccc",
                  objectFit: "contain"
                }
              }), img.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                className: "text-xs text-gray-500",
                children: [img.assetDims.width, "x", img.assetDims.height, "px"]
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              placeholder: "Link (optional)",
              className: "border w-full px-1 rounded text-xs",
              value: img.url || "",
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  var arr = _toConsumableArray(o.props.images);
                  arr[idx] = _objectSpread(_objectSpread({}, arr[idx]), {}, {
                    url: e.target.value
                  });
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      images: arr
                    })
                  });
                });
              }
            })]
          }, idx);
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
          className: "btn-secondary text-xs",
          onClick: function onClick() {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  images: [].concat(_toConsumableArray(o.props.images), [{
                    s3Url: "",
                    url: "",
                    assetLoading: false,
                    assetError: null,
                    assetDims: null
                  }])
                })
              });
            });
          },
          children: "+ Add Image"
        })]
      }), sel.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: (_sel$props$target2 = sel.props.target) !== null && _sel$props$target2 !== void 0 ? _sel$props$target2 : "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  target: e.target.value === "" ? null : +e.target.value
                })
              });
            });
          },
          className: "border w-full rounded p-0.5",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "",
            children: "Go to next screen"
          }), safe.screens.map(function (_, i) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: i,
              children: ["Screen ", i + 1]
            }, i);
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: ["X Color: ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.xColor // CHANGED: prop name
            ,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    xColor: e.target.value
                  }) // CHANGED: prop name
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: ["Background Color:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bgColor || "#transparent",
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgColor: e.target.value
                  })
                });
              });
            }
          })]
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500 italic",
      children: "Click an element on the canvas to edit its properties."
    })]
  });
}

/* ═════════════════════ PREVIEW ═════════════════════ */
function Preview(_ref3) {
  var state = _ref3.state,
    setState = _ref3.setState,
    readOnly = _ref3.readOnly;
  var safe = state && state.screens && state.screens.length > 0 ? state : startState();
  var scr = safe.screens[safe.current];
  var commit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (id, patch) {
    if (readOnly || !setState) return;
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === id ? _objectSpread(_objectSpread({}, e), patch) : e;
          })
        }) : sc;
      })
    }));
  }, [safe, scr, setState, readOnly]);
  var select = function select(id) {
    if (readOnly || !setState) return;
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: id
    }));
  };
  var runLink = function runLink(url) {
    return url && window.open(url, "_blank");
  };
  var _goto = function _goto(idx) {
    if (!setState) return;
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: (idx !== null && idx !== void 0 ? idx : safe.current + 1) % safe.screens.length,
      selected: null,
      animKey: safe.animKey + 1
    }));
  };
  var startDrag = function startDrag(el, x) {
    el.dataset.drag = "1";
    el.dataset.sx = x;
    el.dataset.sl = el.scrollLeft;
    el.style.cursor = "grabbing";
  };
  var moveDrag = function moveDrag(el, x) {
    if (el.dataset.drag !== "1") return;
    el.scrollLeft = Number(el.dataset.sl) - (x - Number(el.dataset.sx));
  };
  var endDrag = function endDrag(el) {
    el.dataset.drag = "0";
    el.style.cursor = "grab";
  };

  // Helper to get animation class string
  var getAnimationClass = function getAnimationClass(animationProp) {
    return animationProp && animationProp !== "none" ? "element-anim-".concat(animationProp) : "";
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      children: "\n        @keyframes fade   {from{opacity:0}   to{opacity:1}}\n        @keyframes zoomIn {from{opacity:0;transform:scale(.8)} to{opacity:1;transform:scale(1)}}\n        @keyframes zoomOut{from{opacity:0;transform:scale(1.2)}to{opacity:1;transform:scale(1)}}\n        @keyframes slideL {from{transform:translateX(100%)}to{transform:translateX(0)}}\n        @keyframes slideR {from{transform:translateX(-100%)}to{transform:translateX(0)}}\n        @keyframes slideU {from{transform:translateY(100%)}to{transform:translateY(0)}}\n        @keyframes slideD {from{transform:translateY(-100%)}to{transform:translateY(0)}}\n        @keyframes rotateK{from{opacity:0;transform:rotateY(90deg)}to{opacity:1;transform:rotateY(0)}}\n        @keyframes flipK  {from{opacity:0;transform:rotateX(90deg)}to{opacity:1;transform:rotateX(0)}}\n        .anim-fade       {animation:fade   .35s ease;}\n        .anim-zoom-in    {animation:zoomIn .35s ease;}\n        .anim-zoom-out   {animation:zoomOut.35s ease;}\n        .anim-slide-left {animation:slideL .35s ease;}\n        .anim-slide-right{animation:slideR .35s ease;}\n        .anim-slide-up   {animation:slideU .35s ease;}\n        .anim-slide-down {animation:slideD .35s ease;}\n        .anim-rotate     {animation:rotateK.4s ease;}\n        .anim-flip       {animation:flipK  .4s ease;}\n\n        /* ADDED: Element animation keyframes */\n        @keyframes elFadeIn { from { opacity: 0; } to { opacity: 1; } }\n        @keyframes elSlideInUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }\n        @keyframes elZoomInSimple { from { opacity: 0; transform: scale(0.8); } to { opacity: 1; transform: scale(1); } }\n        @keyframes elBounceIn {\n          from, 20%, 40%, 60%, 80%, to { animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }\n          0% { opacity: 0; transform: scale3d(0.3, 0.3, 0.3); }\n          20% { transform: scale3d(1.1, 1.1, 1.1); }\n          40% { transform: scale3d(0.9, 0.9, 0.9); }\n          60% { opacity: 1; transform: scale3d(1.03, 1.03, 1.03); }\n          80% { transform: scale3d(0.97, 0.97, 0.97); }\n          to { opacity: 1; transform: scale3d(1, 1, 1); }\n        }\n        @keyframes elRotateIn { from { opacity: 0; transform: rotate(-120deg) scale(0.7); } to { opacity: 1; transform: rotate(0deg) scale(1); } }\n\n        /* ADDED: Element animation classes */\n        .element-anim-fadeIn { animation: elFadeIn 0.7s ease-out forwards; }\n        .element-anim-slideInUp { animation: elSlideInUp 0.7s ease-out forwards; }\n        .element-anim-zoomInSimple { animation: elZoomInSimple 0.7s ease-out forwards; }\n        .element-anim-bounceIn { animation: elBounceIn 1s ease-out forwards; } /* 'forwards' keeps the final state */\n        .element-anim-rotateIn { animation: elRotateIn 0.8s ease-out forwards; }\n      "
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "anim-".concat(safe.transition),
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: safe.bg,
        position: "relative",
        overflow: "hidden"
      },
      onClick: function onClick() {
        return !readOnly && select(null);
      },
      children: scr && scr.elements && scr.elements.map(function (el) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly,
          enableResizing: !readOnly,
          onDragStop: function onDragStop(_, d) {
            return commit(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            return commit(el.id, {
              w: ref.offsetWidth,
              h: ref.offsetHeight,
              x: pos.x,
              y: pos.y
            });
          },
          onClick: function onClick(e) {
            e.stopPropagation();
            select(el.id);
          },
          style: {
            outline: !readOnly && safe.selected === el.id ? "2px solid #3b82f6" : "none",
            cursor: readOnly ? "default" : "move"
          },
          children: [el.type === "title" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            style: {
              color: el.props.color,
              fontSize: el.props.size,
              fontFamily: el.props.font
            },
            className: "w-full h-full flex items-center justify-center font-bold text-center p-1 ".concat(getAnimationClass(el.props.animation)),
            children: el.props.text
          }), el.type === "subtitle" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            style: {
              color: el.props.color,
              fontSize: el.props.size,
              fontFamily: el.props.font
            },
            className: "w-full h-full flex items-center justify-center text-center p-1 ".concat(getAnimationClass(el.props.animation)),
            children: el.props.text
          }), el.type === "textbox" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            style: {
              color: el.props.color,
              fontSize: el.props.size,
              fontFamily: el.props.font,
              fontWeight: el.props.bold ? "bold" : "normal",
              textAlign: el.props.align,
              background: el.props.bg,
              whiteSpace: "pre-wrap",
              overflowY: "auto",
              padding: 4,
              scrollbarWidth: "none",
              msOverflowStyle: "none"
            },
            className: "w-full h-full ".concat(getAnimationClass(el.props.animation)),
            children: el.props.text
          }), el.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: function onClick() {
              return el.props.action === "next" ? _goto(el.props.target) : runLink(el.props.url);
            },
            style: {
              background: el.props.color,
              borderRadius: el.props.radius,
              fontFamily: el.props.font,
              fontSize: el.props.size,
              fontWeight: el.props.bold ? "bold" : "normal",
              // ADDED: Bold style
              color: "white"
            },
            className: "w-full h-full flex items-center justify-center ".concat(getAnimationClass(el.props.animation)),
            children: el.props.text
          }), el.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: el.props.s3Url || "https://dummyimage.com/".concat(el.w || 100, "x").concat(el.h || 100, "/eee/aaa&text=Image"),
            alt: "User content",
            onClick: function onClick() {
              return runLink(el.props.url);
            },
            style: {
              borderRadius: el.props.radius,
              cursor: el.props.url ? "pointer" : "default"
            },
            className: "w-full h-full object-cover ".concat(getAnimationClass(el.props.animation)),
            onError: function onError(e) {
              e.target.src = "https://dummyimage.com/".concat(el.w || 100, "x").concat(el.h || 100, "/eee/aaa&text=Error");
            }
          }), el.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
            src: el.props.s3Url || "",
            className: "w-full h-full object-cover ".concat(getAnimationClass(el.props.animation)),
            controls: true,
            autoPlay: true
            // muted // REMOVED: To enable audio by default
            ,
            loop: true,
            playsInline: true,
            onError: function onError(e) {
              /* Maybe show a placeholder on error */
            }
          }), el.type === "gallery" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            style: {
              display: "flex",
              gap: 4,
              overflowX: "auto",
              height: "100%",
              scrollbarWidth: "none",
              msOverflowStyle: "none",
              touchAction: "pan-x",
              cursor: "grab"
            },
            className: "w-full ".concat(getAnimationClass(el.props.animation)),
            onMouseDown: function onMouseDown(e) {
              return startDrag(e.currentTarget, e.clientX);
            },
            onMouseMove: function onMouseMove(e) {
              return moveDrag(e.currentTarget, e.clientX);
            },
            onMouseUp: function onMouseUp(e) {
              return endDrag(e.currentTarget);
            },
            onMouseLeave: function onMouseLeave(e) {
              return endDrag(e.currentTarget);
            },
            children: el.props.images && el.props.images.map(function (img, idx) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                src: img.s3Url || "https://dummyimage.com/80x".concat(el.props.imageH || 60, "/eee/aaa&text=G"),
                alt: "Gallery item ".concat(idx + 1),
                onClick: function onClick() {
                  return runLink(img.url);
                },
                style: {
                  height: el.props.imageH,
                  flexShrink: 0,
                  borderRadius: el.props.radius,
                  cursor: img.url ? "pointer" : "default",
                  objectFit: "cover"
                },
                onError: function onError(e) {
                  e.target.src = "https://dummyimage.com/80x".concat(el.props.imageH || 60, "/eee/aaa&text=Err");
                }
              }, idx);
            })
          }), el.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            onClick: function onClick() {
              return _goto(el.props.target);
            },
            style: {
              borderRadius: "50%",
              border: "2px solid ".concat(el.props.xColor),
              // CHANGED: Use xColor
              color: el.props.xColor,
              // CHANGED: Use xColor
              background: el.props.bgColor || "transparent",
              // ADDED: Use bgColor
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              fontSize: "20px",
              cursor: "pointer",
              width: "100%",
              height: "100%",
              userSelect: "none"
            },
            className: "".concat(getAnimationClass(el.props.animation)),
            children: "\xD7"
          })]
        }, el.id);
      })
    }, safe.animKey)]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */
function serialize(currentState) {
  if (!currentState || !currentState.screens || !Array.isArray(currentState.screens)) {
    console.warn("Serialize: Invalid or empty state provided.", currentState);
    var defaultData = startState();
    return _objectSpread(_objectSpread({}, defaultData), {}, {
      selected: null,
      _thumbnailHintUrl: null
    });
  }
  var screensToPersist = currentState.screens.map(function (sc) {
    if (!sc || !Array.isArray(sc.elements)) {
      console.warn("Serialize: Invalid screen or elements array within a screen.", sc);
      return _objectSpread(_objectSpread({}, sc || {
        id: crypto.randomUUID()
      }), {}, {
        elements: []
      });
    }
    return _objectSpread(_objectSpread({}, sc), {}, {
      elements: sc.elements.map(function (el) {
        var props = el.props,
          restOfEl = _objectWithoutProperties(el, _excluded);
        var persistentProps = _objectSpread({}, props);
        if (el.type === "image" || el.type === "video") {
          var _persistentProps = persistentProps,
            assetLoading = _persistentProps.assetLoading,
            assetError = _persistentProps.assetError,
            file = _persistentProps.file,
            src = _persistentProps.src,
            restProps = _objectWithoutProperties(_persistentProps, _excluded2);
          persistentProps = _objectSpread(_objectSpread({}, restProps), {}, {
            s3Url: props.s3Url || ""
          });
          if (el.type === "image") persistentProps.assetDims = props.assetDims || null;
        } else if (el.type === "gallery") {
          var updatedImages = (props.images || []).map(function (img) {
            var assetLoading = img.assetLoading,
              assetError = img.assetError,
              file = img.file,
              src = img.src,
              restImgProps = _objectWithoutProperties(img, _excluded3);
            return _objectSpread(_objectSpread({}, restImgProps), {}, {
              s3Url: img.s3Url || "",
              assetDims: img.assetDims || null
            });
          });
          persistentProps = _objectSpread(_objectSpread({}, props), {}, {
            images: updatedImages
          });
        }
        return _objectSpread(_objectSpread({}, restOfEl), {}, {
          props: persistentProps
        });
      })
    });
  });
  var bestThumbnailUrl = null;
  var _iterator = _createForOfIteratorHelper(screensToPersist),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _screen = _step.value;
      var _iterator4 = _createForOfIteratorHelper(_screen.elements),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _el = _step4.value;
          if (_el.type === "image" && _el.props.s3Url) {
            bestThumbnailUrl = _el.props.s3Url;
            break;
          }
          if (_el.type === "video" && _el.props.s3Url && !bestThumbnailUrl) {
            bestThumbnailUrl = _el.props.s3Url;
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      if (bestThumbnailUrl) break;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (!bestThumbnailUrl) {
    var _iterator2 = _createForOfIteratorHelper(screensToPersist),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var screen = _step2.value;
        var _iterator3 = _createForOfIteratorHelper(screen.elements),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var el = _step3.value;
            if (el.type === "gallery" && el.props.images && el.props.images.length > 0) {
              var firstGalleryImageWithS3 = el.props.images.find(function (img) {
                return img.s3Url;
              });
              if (firstGalleryImageWithS3) {
                bestThumbnailUrl = firstGalleryImageWithS3.s3Url;
                break;
              }
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        if (bestThumbnailUrl) break;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  var dataToSave = _objectSpread(_objectSpread({}, currentState), {}, {
    selected: null,
    screens: screensToPersist
  });
  return _objectSpread(_objectSpread({}, dataToSave), {}, {
    _thumbnailHintUrl: bestThumbnailUrl
  });
}
var deserialize = function deserialize() {
  var backendData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  if (!backendData || !backendData.screens || !Array.isArray(backendData.screens)) {
    return startState();
  }
  var screensFromBackend = backendData.screens.map(function (sc) {
    if (!sc || !Array.isArray(sc.elements)) {
      return _objectSpread(_objectSpread({}, sc || {
        id: crypto.randomUUID()
      }), {}, {
        elements: []
      });
    }
    return _objectSpread(_objectSpread({}, sc), {}, {
      elements: sc.elements.map(function (el) {
        var runtimeProps = _objectSpread({}, el.props);
        // Ensure animation prop has a default if not present from backend
        if (runtimeProps.animation === undefined) {
          runtimeProps.animation = "none";
        }
        if (el.type === "button" && runtimeProps.bold === undefined) {
          runtimeProps.bold = false;
        }
        if (el.type === "xbutton") {
          if (runtimeProps.xColor === undefined) runtimeProps.xColor = "rgba(0,0,0,.6)";
          if (runtimeProps.bgColor === undefined) runtimeProps.bgColor = "transparent";
        }
        if (el.type === "image" || el.type === "video") {
          runtimeProps = _objectSpread(_objectSpread({}, runtimeProps), {}, {
            s3Url: el.props.s3Url || "",
            assetLoading: false,
            assetError: null
          });
          if (el.type === "image") runtimeProps.assetDims = el.props.assetDims || null;
        } else if (el.type === "gallery") {
          runtimeProps.images = (el.props.images || []).map(function (img) {
            return _objectSpread(_objectSpread({}, img), {}, {
              s3Url: img.s3Url || "",
              assetLoading: false,
              assetError: null,
              assetDims: img.assetDims || null
            });
          });
        }
        return _objectSpread(_objectSpread({}, el), {}, {
          props: runtimeProps
        });
      })
    });
  });
  return _objectSpread(_objectSpread({}, backendData), {}, {
    selected: null,
    animKey: 0,
    screens: screensFromBackend
  });
};

/***/ }),

/***/ "./templates/fullScreen.js":
/*!*********************************!*\
  !*** ./templates/fullScreen.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _excluded = ["hidden"],
  _excluded2 = ["imageLoading", "imageError"],
  _excluded3 = ["imageLoading", "imageError"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* Full Screen – Canvas with Inner Padding/Borders (v1.1)

Based on Pop Hover (v3.1)
Adds configurable inner padding, element z-indexing,
unified animation effects, and delay functionality.
Maintains S3/Backend File Handling & Thumbnail Hint
*/




// --- S3/Backend Integration: Global Setup ---

var API_BASE_URL = "https://localhost:3001" || 0;
var getAuthToken = function getAuthToken() {
  if (typeof window !== "undefined") {
    return localStorage.getItem("jwt");
  }
  return null;
};
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(fileObject) {
    var formData, token, headers, response, errorData, result, _t4, _t5;
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          formData = new FormData();
          formData.append("assetFile", fileObject);
          _context3.p = 1;
          token = getAuthToken();
          headers = {};
          if (token) {
            headers["Authorization"] = "Bearer ".concat(token);
          }
          _context3.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData,
            headers: headers
          });
        case 2:
          response = _context3.v;
          if (response.ok) {
            _context3.n = 7;
            break;
          }
          _context3.p = 3;
          _context3.n = 4;
          return response.json();
        case 4:
          errorData = _context3.v;
          _context3.n = 6;
          break;
        case 5:
          _context3.p = 5;
          _t4 = _context3.v;
          errorData = {
            message: "Upload failed: ".concat(response.statusText || response.status)
          };
        case 6:
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 7:
          _context3.n = 8;
          return response.json();
        case 8:
          result = _context3.v;
          if (result.url) {
            _context3.n = 9;
            break;
          }
          throw new Error("Upload successful, but no URL was returned from the backend.");
        case 9:
          return _context3.a(2, result.url);
        case 10:
          _context3.p = 10;
          _t5 = _context3.v;
          console.error("Error uploading file to backend:", _t5);
          if (!(_t5 instanceof Error)) {
            _context3.n = 11;
            break;
          }
          throw _t5;
        case 11:
          throw new Error(String(_t5 || "An unknown error occurred during file upload."));
        case 12:
          return _context3.a(2);
      }
    }, _callee3, null, [[3, 5], [1, 10]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
function measureImageDimensions(_x2) {
  return _measureImageDimensions.apply(this, arguments);
} // --- End S3/Backend Integration: Global Setup ---
/* ---------- meta ---------- */
function _measureImageDimensions() {
  _measureImageDimensions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(s3Url) {
    return _regenerator().w(function (_context4) {
      while (1) switch (_context4.n) {
        case 0:
          return _context4.a(2, new Promise(function (resolve, reject) {
            var img = new Image();
            img.onload = function () {
              resolve({
                width: img.naturalWidth,
                height: img.naturalHeight
              });
            };
            img.onerror = function (err) {
              console.error("Error loading image for measurement:", s3Url, err);
              reject(new Error("Could not load image to measure dimensions. Check S3 URL and CORS policy."));
            };
            img.crossOrigin = "anonymous";
            img.src = s3Url;
          }));
      }
    }, _callee4);
  }));
  return _measureImageDimensions.apply(this, arguments);
}
var meta = {
  id: "full-screen",
  name: "Full Screen",
  description: "Full canvas with inner borders, draggable elements, animations, and delay options.",
  canvas: {
    w: 378,
    h: 649
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'"];

// Effects for Button element's specific styling
var BTN_EFFECTS = ["solid", "shiny-gold", "sunrise", "ocean", "neon", "glass", "inset", "pulse", "metallic", "rainbow", "retro"];

// NEW: Unified list of animations for elements and paddings
var ANIMATION_EFFECTS = ["none", "fade-in", "zoom-in", "zoom-out", "slide-in-left", "slide-in-right", "slide-in-up", "slide-in-down", "bounce-in", "flip-in-x", "rotate-in", "blur-in"];
var PADDING_SIDES = ["top", "right", "bottom", "left"];

// Generates style for animation and delay
var getAnimatedWrapperStyle = function getAnimatedWrapperStyle(animationName) {
  var delaySeconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var isInitiallyHidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var hasAnimation = animationName && animationName !== "none";
  var hasDelay = delaySeconds > 0;
  if (!hasAnimation && !hasDelay && !isInitiallyHidden) {
    return {}; // No animation, no delay, not initially hidden = standard visibility
  }
  return {
    visibility: (hasAnimation || hasDelay) && isInitiallyHidden ? "hidden" : "visible",
    animationName: hasAnimation ? animationName : undefined,
    animationDuration: "1.0s",
    // Standard duration, can be customized per animation if needed
    animationFillMode: hasAnimation || hasDelay ? "forwards" : undefined,
    animationDelay: hasDelay ? "".concat(delaySeconds, "s") : undefined,
    animationTimingFunction: "ease-out" // Default timing
  };
};

// Style function for Button elements (their specific visual effect)
var buttonElementStyle = function buttonElementStyle(btnProps) {
  var base = {
    borderRadius: btnProps.radius,
    fontFamily: btnProps.font,
    fontSize: btnProps.size,
    fontWeight: btnProps.bold ? "bold" : "normal",
    color: btnProps.textColor,
    // animationFillMode & animationIterationCount are for BTN_EFFECTS internal animations (like pulse)
    // not for the entry animation from ANIMATION_EFFECTS
    animationFillMode: "forwards",
    animationIterationCount: 1,
    width: "100%",
    height: "100%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    userSelect: "none",
    overflow: "hidden",
    // For effects like shiny-gold
    position: "relative" // For effects like shiny-gold
  };
  switch (btnProps.effect) {
    case "shiny-gold":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "linear-gradient(135deg,rgb(245, 210, 94) 0%, #f5d76e 25%, #e6b800 50%,rgb(242, 230, 194) 75%,rgb(247, 213, 91) 100%)",
        boxShadow: "0 2px 6px rgba(0,0,0,.18)"
      });
    case "sunrise":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "linear-gradient(135deg,#ff512f 0%,#f09819 100%)"
      });
    case "ocean":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "linear-gradient(135deg,#2BC0E4 0%,#1B93C5 100%)"
      });
    case "neon":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "#0aff9d",
        color: "#0d0d0d",
        textShadow: "0 0 6px #0aff9d"
      });
    case "glass":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "rgba(255,255,255,.25)",
        backdropFilter: "blur(6px)",
        border: "1px solid rgba(255,255,255,.45)"
      });
    case "inset":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: btnProps.color,
        boxShadow: "inset 0 2px 4px rgba(0,0,0,.3)"
      });
    case "pulse":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: btnProps.color || "#2563eb",
        animationName: "pulse-btn",
        animationDuration: "1.6s",
        animationTimingFunction: "ease-in-out"
      });
    // Uses pulse-btn keyframes
    case "metallic":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "linear-gradient(135deg,#d7d7d7 0%,#b0b0b0 20%,#f5f5f5 50%,#b0b0b0 80%,#d7d7d7 100%)",
        color: "#222"
      });
    case "rainbow":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "linear-gradient(90deg,#ff0000 0%,#ff7f00 14%,#ffff00 28%,#00ff00 42%,#0000ff 57%,#4b0082 71%,#9400d3 85%,#ff0000 100%)",
        backgroundSize: "400% 100%",
        animationName: "rainbow-shift",
        animationDuration: "3s",
        animationTimingFunction: "linear"
      });
    // Uses rainbow-shift keyframes
    case "retro":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "#ff6f61",
        boxShadow: "4px 4px 0 #222",
        fontFamily: "'Press Start 2P', monospace"
      });
    default:
      return _objectSpread(_objectSpread({}, base), {}, {
        background: btnProps.color
      });
    // solid
  }
};

// Style function for padding elements
var getPaddingDivStyle = function getPaddingDivStyle(paddingConfig) {
  if (!paddingConfig || !paddingConfig.enabled) return {
    display: "none"
  };
  var baseStyle = {
    position: "absolute",
    zIndex: 1,
    // Padding is at zIndex 1
    overflow: "hidden"
  };
  switch (paddingConfig.side) {
    case "top":
      baseStyle = _objectSpread(_objectSpread({}, baseStyle), {}, {
        top: 0,
        left: 0,
        width: "100%",
        height: paddingConfig.size
      });
      break;
    case "bottom":
      baseStyle = _objectSpread(_objectSpread({}, baseStyle), {}, {
        bottom: 0,
        left: 0,
        width: "100%",
        height: paddingConfig.size
      });
      break;
    case "left":
      baseStyle = _objectSpread(_objectSpread({}, baseStyle), {}, {
        top: 0,
        left: 0,
        width: paddingConfig.size,
        height: "100%"
      });
      break;
    case "right":
      baseStyle = _objectSpread(_objectSpread({}, baseStyle), {}, {
        top: 0,
        right: 0,
        width: paddingConfig.size,
        height: "100%"
      });
      break;
    default:
      break;
  }
  if (paddingConfig.type === "image" && paddingConfig.s3Url) {
    baseStyle = _objectSpread(_objectSpread({}, baseStyle), {}, {
      backgroundImage: "url(".concat(paddingConfig.s3Url, ")"),
      backgroundSize: "cover",
      backgroundPosition: "center",
      backgroundRepeat: "no-repeat"
    });
  } else {
    // 'color' type or fallback
    baseStyle = _objectSpread(_objectSpread({}, baseStyle), {}, {
      backgroundColor: paddingConfig.color
    });
  }

  // Apply entry animation and delay
  var animationStyles = getAnimatedWrapperStyle(paddingConfig.animation, paddingConfig.delay);
  return _objectSpread(_objectSpread({}, baseStyle), animationStyles);
};
var defaultPaddingConfig = function defaultPaddingConfig(side) {
  return {
    side: side,
    enabled: false,
    size: 20,
    type: "color",
    // 'color' or 'image'
    color: "#cccccc",
    s3Url: "",
    imageLoading: false,
    imageError: null,
    imageDims: null,
    animation: "none",
    // From ANIMATION_EFFECTS
    delay: 0 // in seconds
  };
};
var startState = function startState() {
  return {
    bg: "#ffffff",
    selected: null,
    screens: [{
      id: crypto.randomUUID(),
      elements: [],
      paddings: {
        top: defaultPaddingConfig("top"),
        right: defaultPaddingConfig("right"),
        bottom: defaultPaddingConfig("bottom"),
        left: defaultPaddingConfig("left")
      }
    }]
  };
};
var newElement = function newElement(type) {
  var canvasHeight = meta.canvas.h; // Use actual canvas height
  var baseY = canvasHeight - 140;
  var base = {
    id: crypto.randomUUID(),
    type: type,
    x: 10,
    y: baseY,
    w: 140,
    h: 80,
    hidden: false,
    props: {
      // Common props for animation and delay
      animation: "none",
      // Entry animation from ANIMATION_EFFECTS
      delay: 0 // Entry delay in seconds
    }
  };
  switch (type) {
    case "image":
      return _objectSpread(_objectSpread({}, base), {}, {
        h: 100,
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          // Include common animation/delay
          s3Url: "",
          // Initialize as empty string
          imageLoading: false,
          imageError: null,
          imageDims: null,
          radiusTop: 4,
          // Specific to image
          url: "" // Click URL
        })
      });
    case "button":
      return _objectSpread(_objectSpread({}, base), {}, {
        y: baseY - 50,
        h: 40,
        w: 200,
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          // Include common animation/delay
          text: "Learn more",
          color: "#2563eb",
          // For solid/pulse/inset BTN_EFFECTS
          textColor: "#ffffff",
          bold: false,
          font: "Arial",
          size: 16,
          radius: 8,
          url: "",
          effect: "solid" // From BTN_EFFECTS
        })
      });
    case "xbutton":
      return _objectSpread(_objectSpread({}, base), {}, {
        x: meta.canvas.w - 42,
        y: 10,
        w: 32,
        h: 32,
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          // Include common animation/delay
          color: "rgba(0,0,0,.8)",
          // Icon/border color
          bg: "transparent" // Background color
        })
      });
    default:
      // This case should ideally not be hit if types are controlled
      return _objectSpread(_objectSpread({}, base), {}, {
        props: _objectSpread({}, base.props)
      });
  }
};

/* ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens && state.screens.length > 0 ? state : startState();
  var scr = safe.screens[0];
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });
  var patchSel = function patchSel(fn) {
    setState(function (currentState) {
      // Ensure we're working with a valid screen structure from currentState
      // and that there's a selected element.
      if (!currentState.screens || currentState.screens.length === 0 || currentState.selected === null) {
        console.warn("patchSel: currentState is invalid or no element selected.", currentState);
        return currentState; // Return current state if no valid target for update
      }

      // Assuming, as per current logic, we are working with the first screen.
      var screenToUpdateIndex = 0; // Or find by ID if multiple screens were possible
      var screenToUpdate = currentState.screens[screenToUpdateIndex];
      if (!screenToUpdate) {
        console.warn("patchSel: target screen not found in currentState.", currentState);
        return currentState;
      }
      var updatedElements = screenToUpdate.elements.map(function (e) {
        return e.id === currentState.selected ? fn(e) : e;
      });
      var updatedScreens = _toConsumableArray(currentState.screens);
      updatedScreens[screenToUpdateIndex] = _objectSpread(_objectSpread({}, screenToUpdate), {}, {
        elements: updatedElements
      });
      return _objectSpread(_objectSpread({}, currentState), {}, {
        screens: updatedScreens
      });
    });
  };
  var updateElementProp = function updateElementProp(prop, value) {
    patchSel(function (el) {
      return _objectSpread(_objectSpread({}, el), {}, {
        props: _objectSpread(_objectSpread({}, el.props), {}, _defineProperty({}, prop, value))
      });
    });
  };
  var delSel = function delSel() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.filter(function (e) {
            return e.id !== safe.selected;
          })
        }) : sc;
      })
    }));
  };
  var add = function add(t) {
    var _scr$paddings, _scr$paddings2;
    var newElem = newElement(t);
    if ((_scr$paddings = scr.paddings) !== null && _scr$paddings !== void 0 && (_scr$paddings = _scr$paddings.left) !== null && _scr$paddings !== void 0 && _scr$paddings.enabled) newElem.x = Math.max(newElem.x, (scr.paddings.left.size || 0) + 5);
    if ((_scr$paddings2 = scr.paddings) !== null && _scr$paddings2 !== void 0 && (_scr$paddings2 = _scr$paddings2.top) !== null && _scr$paddings2 !== void 0 && _scr$paddings2.enabled) newElem.y = Math.max(newElem.y, (scr.paddings.top.size || 0) + 5);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: newElem.id,
      screens: safe.screens.map(function (sc, i) {
        return i === 0 ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newElem])
        }) : sc;
      })
    }));
  };
  var handleElementImageFileChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(event) {
      var _event$target$files;
      var file, s3UrlFromServer, dimensions, _t, _t2;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0]; // `sel` is from the Editor's render scope. It's okay for initial checks.
            // The `patchSel` function will use the latest state for updates.
            if (!(!file || !sel || sel.type !== "image")) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            // Set loading state
            patchSel(function (el) {
              return _objectSpread(_objectSpread({}, el), {}, {
                props: _objectSpread(_objectSpread({}, el.props), {}, {
                  imageLoading: true,
                  imageError: null
                  // imageDims: null, // Keep old dims until new ones are loaded or clear if preferred
                })
              });
            });
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file);
          case 3:
            s3UrlFromServer = _context.v;
            // CRITICAL LOG: Check if s3UrlFromServer is what you expect.
            console.log("[Editor] Upload successful, s3UrlFromServer:", s3UrlFromServer);
            if (!(!s3UrlFromServer || typeof s3UrlFromServer !== "string" || s3UrlFromServer.trim() === "")) {
              _context.n = 4;
              break;
            }
            throw new Error("Received invalid S3 URL from backend.");
          case 4:
            dimensions = null;
            if (!file.type.startsWith("image/")) {
              _context.n = 8;
              break;
            }
            _context.p = 5;
            _context.n = 6;
            return measureImageDimensions(s3UrlFromServer);
          case 6:
            dimensions = _context.v;
            _context.n = 8;
            break;
          case 7:
            _context.p = 7;
            _t = _context.v;
            console.warn("Dimension measure error for new S3 URL:", _t.message, s3UrlFromServer);
            // Decide if this is a critical error or if you can proceed without dimensions
          case 8:
            // Update with new image URL, dimensions, and reset loading/error
            patchSel(function (el) {
              return _objectSpread(_objectSpread({}, el), {}, {
                props: _objectSpread(_objectSpread({}, el.props), {}, {
                  s3Url: s3UrlFromServer,
                  imageDims: dimensions,
                  imageLoading: false,
                  imageError: null
                })
              });
            });
            _context.n = 10;
            break;
          case 9:
            _context.p = 9;
            _t2 = _context.v;
            console.error("[Editor] Image handling error:", _t2);
            patchSel(function (el) {
              return _objectSpread(_objectSpread({}, el), {}, {
                props: _objectSpread(_objectSpread({}, el.props), {}, {
                  imageError: _t2.message || "Upload failed.",
                  imageLoading: false
                  // s3Url: el.props.s3Url, // Keep the potentially old s3Url on error
                })
              });
            });
          case 10:
            return _context.a(2);
        }
      }, _callee, null, [[5, 7], [2, 9]]);
    }));
    return function handleElementImageFileChange(_x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  var updatePaddingProp = function updatePaddingProp(side, prop, value) {
    setState(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, {
        screens: prev.screens.map(function (s) {
          return s.id === scr.id ? _objectSpread(_objectSpread({}, s), {}, {
            paddings: _objectSpread(_objectSpread({}, s.paddings), {}, _defineProperty({}, side, _objectSpread(_objectSpread({}, s.paddings[side]), {}, _defineProperty({}, prop, value))))
          }) : s;
        })
      });
    });
  };
  var handlePaddingImageFileChange = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(event, side) {
      var _event$target$files2, _scr$paddings$side;
      var file, oldS3Url, s3Url, dimensions, _t3;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            file = (_event$target$files2 = event.target.files) === null || _event$target$files2 === void 0 ? void 0 : _event$target$files2[0];
            if (file) {
              _context2.n = 1;
              break;
            }
            return _context2.a(2);
          case 1:
            oldS3Url = ((_scr$paddings$side = scr.paddings[side]) === null || _scr$paddings$side === void 0 ? void 0 : _scr$paddings$side.s3Url) || "";
            updatePaddingProp(side, "imageLoading", true);
            updatePaddingProp(side, "imageError", null);
            // updatePaddingProp(side, "s3Url", ""); // Optional: clear during upload
            updatePaddingProp(side, "imageDims", null);
            _context2.p = 2;
            _context2.n = 3;
            return uploadFileToBackend(file);
          case 3:
            s3Url = _context2.v;
            dimensions = null;
            if (!file.type.startsWith("image/")) {
              _context2.n = 5;
              break;
            }
            _context2.n = 4;
            return measureImageDimensions(s3Url)["catch"](function (e) {
              return console.warn("Dim measure error:", e.message);
            });
          case 4:
            dimensions = _context2.v;
          case 5:
            updatePaddingProp(side, "s3Url", s3Url);
            updatePaddingProp(side, "imageDims", dimensions);
            _context2.n = 7;
            break;
          case 6:
            _context2.p = 6;
            _t3 = _context2.v;
            updatePaddingProp(side, "imageError", _t3.message || "Upload failed.");
            updatePaddingProp(side, "s3Url", oldS3Url); // Revert on error
          case 7:
            _context2.p = 7;
            updatePaddingProp(side, "imageLoading", false);
            return _context2.f(7);
          case 8:
            return _context2.a(2);
        }
      }, _callee2, null, [[2, 6, 7, 8]]);
    }));
    return function handlePaddingImageFileChange(_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }();
  var CommonElementControls = function CommonElementControls(_ref4) {
    var elementProps = _ref4.elementProps,
      onPropChange = _ref4.onPropChange;
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
        className: "block font-medium mt-1 text-sm",
        children: ["Entry Animation:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: elementProps.animation,
          onChange: function onChange(e) {
            return onPropChange("animation", e.target.value);
          },
          className: "border w-full rounded text-xs p-1 mt-0.5",
          children: ANIMATION_EFFECTS.map(function (anim) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: anim,
              children: [" ", anim, " "]
            }, anim);
          })
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
        className: "flex items-center gap-1 mt-1 text-sm",
        children: ["Entry Delay (s):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "number",
          min: "0",
          step: "0.1",
          value: elementProps.delay,
          onChange: function onChange(e) {
            return onPropChange("delay", +e.target.value);
          },
          className: "border px-1 w-16 rounded text-xs"
        })]
      })]
    });
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: [" ", "Canvas Background\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("h3", {
        className: "text-sm font-medium mb-2",
        children: "Canvas Inner Borders"
      }), PADDING_SIDES.map(function (side) {
        var _scr$paddings3;
        var pConfig = ((_scr$paddings3 = scr.paddings) === null || _scr$paddings3 === void 0 ? void 0 : _scr$paddings3[side]) || defaultPaddingConfig(side);
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "border-t pt-2 mt-2 first:border-t-0 first:mt-0 first:pt-0",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-2 capitalize",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "checkbox",
              checked: pConfig.enabled,
              onChange: function onChange(e) {
                return updatePaddingProp(side, "enabled", e.target.checked);
              }
            }), side, " Border"]
          }), pConfig.enabled && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "space-y-1 mt-1 pl-4",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "flex items-center gap-1 text-xs",
              children: ["Size:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "1",
                max: "200",
                value: pConfig.size,
                onChange: function onChange(e) {
                  return updatePaddingProp(side, "size", +e.target.value);
                },
                className: "border px-1 w-16 rounded"
              }), "px"]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["Type:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
                value: pConfig.type,
                onChange: function onChange(e) {
                  return updatePaddingProp(side, "type", e.target.value);
                },
                className: "border w-full rounded text-xs p-1 mt-0.5",
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "color",
                  children: "Color"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "image",
                  children: "Image"
                })]
              })]
            }), pConfig.type === "color" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "flex items-center gap-1 text-xs",
              children: ["Color:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: pConfig.color,
                onChange: function onChange(e) {
                  return updatePaddingProp(side, "color", e.target.value);
                }
              })]
            }), pConfig.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
                className: "block text-xs font-medium mt-1",
                children: "Upload Image:"
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "file",
                accept: "image/*"
                // key is used to reset the input visually after a file is chosen, if needed
                // key={pConfig.s3Url || Date.now()} // Or manage via a different state
                ,
                disabled: pConfig.imageLoading,
                onChange: function onChange(e) {
                  return handlePaddingImageFileChange(e, side);
                },
                className: "block w-full text-xs file:mr-2 file:py-1 file:px-2 file:rounded-full file:border-0 file:text-xs file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 disabled:opacity-50"
              }), pConfig.imageLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
                className: "text-xs text-blue-500 italic",
                children: "Uploading..."
              }), pConfig.imageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                className: "text-xs text-red-500 italic",
                children: ["Error: ", pConfig.imageError]
              }), pConfig.s3Url && !pConfig.imageLoading && !pConfig.imageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                className: "mt-1 p-1 border border-gray-200 rounded",
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                  src: pConfig.s3Url,
                  alt: "".concat(side, " preview"),
                  style: {
                    maxWidth: "60px",
                    maxHeight: "60px",
                    border: "1px solid #ccc",
                    objectFit: "contain"
                  }
                }), pConfig.imageDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                  className: "text-xs text-gray-500 mt-0.5",
                  children: [pConfig.imageDims.width, "x", pConfig.imageDims.height, "px"]
                })]
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs mt-1",
              children: ["Animation:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                value: pConfig.animation,
                onChange: function onChange(e) {
                  return updatePaddingProp(side, "animation", e.target.value);
                },
                className: "border w-full rounded text-xs p-1 mt-0.5",
                children: ANIMATION_EFFECTS.map(function (anim) {
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                    value: anim,
                    children: anim
                  }, anim);
                })
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "flex items-center gap-1 text-xs",
              children: ["Delay (s):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                step: "0.1",
                value: pConfig.delay,
                onChange: function onChange(e) {
                  return updatePaddingProp(side, "delay", +e.target.value);
                },
                className: "border px-1 w-16 rounded"
              })]
            })]
          })]
        }, side);
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "flex flex-wrap gap-2",
      children: ["image", "button", "xbutton"].map(function (t) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          onClick: function onClick() {
            return add(t);
          },
          className: "btn",
          children: ["+ ", t]
        }, t);
      })
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex justify-between items-center",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "capitalize font-medium",
          children: sel.type
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
          onClick: delSel,
          className: "text-red-600 hover:text-red-800",
          children: "delete"
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CommonElementControls, {
        elementProps: sel.props,
        onPropChange: updateElementProp
      }), sel.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Image Asset:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*"
          // key={sel.props.s3Url || Date.now()} // To allow re-uploading the same file if needed or reset visual
          ,
          disabled: sel.props.imageLoading,
          onChange: handleElementImageFileChange,
          className: "block w-full text-sm file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 disabled:opacity-50"
        }), sel.props.imageLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-blue-500 italic mt-1",
          children: "Uploading..."
        }), sel.props.imageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
          className: "text-xs text-red-500 italic mt-1",
          children: ["Error: ", sel.props.imageError]
        }), sel.props.s3Url && sel.props.s3Url.trim() !== "" &&
        // Add trim check
        !sel.props.imageLoading && !sel.props.imageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "mt-2 p-2 border border-gray-200 rounded",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            // ADD THIS KEY
            src: sel.props.s3Url,
            alt: "Preview",
            style: {
              maxWidth: "100px",
              maxHeight: "100px",
              border: "1px solid #ccc",
              objectFit: "contain",
              display: "block" // Ensures proper layout
            },
            onError: function onError(e) {
              console.error("Editor Preview: Failed to load image:", sel.props.s3Url, e);
              // Optional: handle error display for editor thumbnail
            }
          }, sel.props.s3Url), sel.props.imageDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-gray-500 mt-1",
            children: [sel.props.imageDims.width, "x", sel.props.imageDims.height, "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-2",
          children: "Click URL (optional):"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          className: "border w-full px-1 mt-1 text-xs rounded",
          placeholder: "https://...",
          value: sel.props.url,
          onChange: function onChange(e) {
            return updateElementProp("url", e.target.value);
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1 text-sm",
          children: ["Top-radius:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "60",
            value: sel.props.radiusTop,
            onChange: function onChange(e) {
              return updateElementProp("radiusTop", +e.target.value);
            },
            className: "border px-1 w-16 rounded text-xs"
          }), "px"]
        })]
      }), sel.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Text:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text,
          onChange: function onChange(e) {
            return updateElementProp("text", e.target.value);
          },
          className: "border w-full px-1 rounded text-xs"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1 text-sm font-medium",
          children: ["Style Effect:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            value: sel.props.effect,
            onChange: function onChange(e) {
              return updateElementProp("effect", e.target.value);
            },
            className: "border w-full rounded text-xs p-1 mt-0.5",
            children: BTN_EFFECTS.map(function (ef) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: ef,
                children: ef
              }, ef);
            })
          })]
        }), ["solid", "inset", "pulse"].includes(sel.props.effect) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1 text-sm",
          children: ["Bg Color:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return updateElementProp("color", e.target.value);
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1 text-sm",
          children: ["Text Color:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.textColor,
            onChange: function onChange(e) {
              return updateElementProp("textColor", e.target.value);
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1 text-sm",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold,
            onChange: function onChange(e) {
              return updateElementProp("bold", e.target.checked);
            }
          }), "Bold"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1 text-sm font-medium",
          children: ["Font:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            value: sel.props.font,
            onChange: function onChange(e) {
              return updateElementProp("font", e.target.value);
            },
            className: "border w-full mt-0.5 rounded text-xs p-1",
            children: FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            })
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-2 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1 text-sm",
            children: ["Size:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "40",
              value: sel.props.size,
              onChange: function onChange(e) {
                return updateElementProp("size", +e.target.value);
              },
              className: "border px-1 w-16 rounded text-xs"
            }), "px"]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1 text-sm",
            children: ["Radius:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              max: "30",
              value: sel.props.radius,
              onChange: function onChange(e) {
                return updateElementProp("radius", +e.target.value);
              },
              className: "border px-1 w-16 rounded text-xs"
            }), "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Click URL:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          className: "border w-full px-1 mt-0.5 rounded text-xs",
          placeholder: "https://\u2026",
          value: sel.props.url,
          onChange: function onChange(e) {
            return updateElementProp("url", e.target.value);
          }
        })]
      }), sel.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-2 text-sm",
          children: ["Icon/Border Color:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return updateElementProp("color", e.target.value);
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-2 mt-1 text-sm",
          children: ["Background:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bg,
            onChange: function onChange(e) {
              return updateElementProp("bg", e.target.value);
            }
          })]
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500 italic",
      children: "Select an element or configure inner borders."
    })]
  });
}

/* ═════════════════════ PREVIEW ═════════════════════ */
function Preview(_ref5) {
  var _scr$elements;
  var _ref5$state = _ref5.state,
    state = _ref5$state === void 0 ? startState() : _ref5$state,
    setState = _ref5.setState,
    readOnly = _ref5.readOnly;
  var safe = state.screens && state.screens.length > 0 ? state : startState();
  var scr = safe.screens[0];
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    allElementsHiddenForDemo = _useState2[0],
    setAllElementsHiddenForDemo = _useState2[1];
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (readOnly) setAllElementsHiddenForDemo(false);
  }, [scr === null || scr === void 0 ? void 0 : scr.id, scr === null || scr === void 0 || (_scr$elements = scr.elements) === null || _scr$elements === void 0 ? void 0 : _scr$elements.length, readOnly]);
  var commit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (id, patch) {
    if (readOnly || !setState) return;
    setState === null || setState === void 0 || setState(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, {
        screens: prev.screens.map(function (s) {
          return s.id === scr.id ? _objectSpread(_objectSpread({}, s), {}, {
            elements: s.elements.map(function (e) {
              return e.id === id ? _objectSpread(_objectSpread({}, e), patch) : e;
            })
          }) : s;
        })
      });
    });
  }, [scr === null || scr === void 0 ? void 0 : scr.id, setState, readOnly] // Removed `safe` from dependencies as it's derived from `state` prop
  );
  var selectElement = function selectElement(id) {
    if (!readOnly && setState) setState(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, {
        selected: id
      });
    });
  };
  var openUrl = function openUrl(url) {
    return url && window.open(url, "_blank");
  };
  var dismissAllElements = function dismissAllElements() {
    if (readOnly) {
      setAllElementsHiddenForDemo(true);
    }
  };
  var handleElementClick = function handleElementClick(e, el) {
    e.stopPropagation(); // Prevent click from bubbling to parent (canvas)
    if (!readOnly) {
      selectElement(el.id);
    } else {
      if (el.type === "xbutton") {
        dismissAllElements();
      } else if (el.props.url && (el.type === "button" || el.type === "image")) {
        openUrl(el.props.url);
      }
    }
  };
  var extraCss = "\n/* Common Animations (ANIMATION_EFFECTS) */\n@keyframes fade-in { from { opacity:0; visibility:visible; } to { opacity:1; visibility:visible; } }\n@keyframes zoom-in { from { transform:scale(.6); opacity:0; visibility:visible; } to { transform:scale(1); opacity:1; visibility:visible; } }\n@keyframes zoom-out { from { transform:scale(1.4); opacity:0; visibility:visible; } to { transform:scale(1); opacity:1; visibility:visible; } }\n@keyframes slide-in-left { from { transform:translateX(-100%); opacity:0; visibility:visible; } to { transform:translateX(0); opacity:1; visibility:visible; } }\n@keyframes slide-in-right { from { transform:translateX(100%); opacity:0; visibility:visible; } to { transform:translateX(0); opacity:1; visibility:visible; } }\n@keyframes slide-in-up { from { transform:translateY(100%); opacity:0; visibility:visible; } to { transform:translateY(0); opacity:1; visibility:visible; } }\n@keyframes slide-in-down { from { transform:translateY(-100%); opacity:0; visibility:visible; } to { transform:translateY(0); opacity:1; visibility:visible; } }\n@keyframes bounce-in { 0% { opacity:0; transform:scale(.3); visibility:visible; } 50% { opacity:1; transform:scale(1.05); } 70% { transform:scale(.9); } 100% { transform:scale(1); visibility:visible; } }\n@keyframes flip-in-x { from { transform:perspective(400px) rotate3d(1,0,0,90deg); opacity:0; visibility:visible; } to { transform:perspective(400px) rotate3d(1,0,0,0deg); opacity:1; visibility:visible; } }\n@keyframes rotate-in { from { transform:rotate(-200deg) scale(0); opacity:0; visibility:visible; } to { transform:rotate(0deg) scale(1); opacity:1; visibility:visible; } }\n@keyframes blur-in { from { filter: blur(10px); opacity:0; visibility:visible; } to { filter: blur(0px); opacity:1; visibility:visible; } }\n\n/* Button Specific Animations (BTN_EFFECTS) */\n@keyframes pulse-btn { 0%{box-shadow:0 0 0 0 rgba(0,0,0,.4);} 70%{box-shadow:0 0 0 9px rgba(0,0,0,0);} 100%{box-shadow:0 0 0 0 rgba(0,0,0,0);} }\n@keyframes rainbow-shift { 0%{background-position:0 0;} 100%{background-position:-400% 0;} }\n.gold-reflect::before { content:\"\"; position:absolute; top:0; left:-150%; width:50%; height:100%; background:rgba(255,255,255,.45); transform:skewX(-30deg); animation:goldFlash 1s linear 1 forwards; }\n@keyframes goldFlash { 0%{left:-150%;} 100%{left:150%;} }\n";
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      children: extraCss
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: safe.bg,
        position: "relative",
        overflow: "hidden"
      },
      onClick: function onClick() {
        return selectElement(null);
      },
      children: [PADDING_SIDES.map(function (side) {
        var _scr$paddings4;
        var pConfig = (_scr$paddings4 = scr.paddings) === null || _scr$paddings4 === void 0 ? void 0 : _scr$paddings4[side];
        // If in readOnly mode and all elements are set to be hidden by the XButton,
        // also hide the paddings (inner borders).
        if (readOnly && allElementsHiddenForDemo) {
          return null;
        }
        if (!pConfig || !pConfig.enabled) return null;
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
          style: getPaddingDivStyle(pConfig)
        }, "padding-".concat(side));
      }), (scr.elements || []).filter(function (el) {
        return readOnly ? !allElementsHiddenForDemo && !el.hidden : !el.hidden;
      }).map(function (el) {
        var elProps = el.props || {};
        // !!!!! ADD THIS LINE FOR DEBUGGING !!!!!
        if (el.type === "image") {
          console.log("Previewing IMAGE element: ID=".concat(el.id, ", s3Url='").concat(elProps.s3Url, "', isLoading=").concat(elProps.imageLoading, ", error=").concat(elProps.imageError, ", width=").concat(el.w, ", height=").concat(el.h));
        }
        // !!!!! END OF ADDED LINE !!!!!

        var entryAnimStyle = getAnimatedWrapperStyle(elProps.animation, elProps.delay);
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly,
          enableResizing: !readOnly,
          onDragStop: function onDragStop(_, d) {
            return commit(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            // Ensure the ref for size is the Rnd wrapper itself, not an inner animated div
            var newWidth = ref.style.width ? parseInt(ref.style.width, 10) : el.w;
            var newHeight = ref.style.height ? parseInt(ref.style.height, 10) : el.h;
            commit(el.id, {
              w: newWidth,
              h: newHeight,
              x: pos.x,
              y: pos.y
            });
          },
          style: {
            // RND's style should NOT include entryAnimStyle directly
            zIndex: 2,
            outline: safe.selected === el.id && !readOnly ? "2px solid #3b82f6" : "none",
            cursor: !readOnly ? "move" : elProps.url || el.type === "xbutton" ? "pointer" : "default"
            // visibility: 'visible', // Ensure RND itself is always visible if it has content
          },
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            style: _objectSpread({
              width: "100%",
              height: "100%"
            }, entryAnimStyle),
            children: [el.type === "image" && (elProps.s3Url && elProps.s3Url.trim() !== "" ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
              src: elProps.s3Url,
              alt: "User content ".concat(el.id),
              onClick: function onClick(e) {
                return handleElementClick(e, el);
              },
              style: {
                width: "100%",
                height: "100%",
                objectFit: "cover",
                borderTopLeftRadius: elProps.radiusTop,
                borderTopRightRadius: elProps.radiusTop,
                display: "block"
              },
              onError: function onError(e) {
                console.error("Preview: Failed to load image:", elProps.s3Url, e);
              }
            }, elProps.s3Url) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              onClick: function onClick(e) {
                return handleElementClick(e, el);
              },
              style: {
                width: "100%",
                height: "100%",
                background: "#eee",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                color: "#aaa",
                cursor: elProps.url || el.type === "xbutton" ? "pointer" : "default",
                borderTopLeftRadius: elProps.radiusTop,
                borderTopRightRadius: elProps.radiusTop,
                userSelect: "none"
              },
              children: elProps.imageLoading ? "Uploading..." : elProps.imageError ? "Error: ".concat(elProps.imageError.substring(0, 20), "...") : "Image"
            })), el.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
              onClick: function onClick(e) {
                return handleElementClick(e, el);
              },
              style: buttonElementStyle(elProps),
              className: elProps.effect === "shiny-gold" ? "gold-reflect" : "",
              children: elProps.text
            }), el.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              onClick: function onClick(e) {
                return handleElementClick(e, el);
              },
              style: {
                width: "100%",
                height: "100%",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                borderRadius: "50%",
                border: "2px solid ".concat(elProps.color),
                color: elProps.color,
                background: elProps.bg,
                fontSize: "20px",
                userSelect: "none"
              },
              children: "\xD7"
            })]
          })
        }, el.id);
      })]
    })]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */
function serialize(currentState) {
  if (!currentState || !currentState.screens || !Array.isArray(currentState.screens) || currentState.screens.length === 0) {
    var defaultState = startState();
    return _objectSpread(_objectSpread({}, defaultState), {}, {
      bg: (currentState === null || currentState === void 0 ? void 0 : currentState.bg) || defaultState.bg,
      selected: null,
      _thumbnailHintUrl: null
    });
  }
  var _currentState$screens = _slicedToArray(currentState.screens, 1),
    currentScreenFromState = _currentState$screens[0];
  if (!currentScreenFromState || !Array.isArray(currentScreenFromState.elements)) {
    var screenToSerialize = _objectSpread({
      id: (currentScreenFromState === null || currentScreenFromState === void 0 ? void 0 : currentScreenFromState.id) || crypto.randomUUID(),
      elements: [],
      paddings: (currentScreenFromState === null || currentScreenFromState === void 0 ? void 0 : currentScreenFromState.paddings) || startState().screens[0].paddings
    }, currentScreenFromState && _typeof(currentScreenFromState) === "object" ? currentScreenFromState : {});
    screenToSerialize.elements = []; // Ensure elements is an array
    return _objectSpread(_objectSpread({}, currentState), {}, {
      selected: null,
      // Always clear selection on serialize
      screens: [screenToSerialize],
      _thumbnailHintUrl: null
    });
  }
  var elementsToPersist = currentScreenFromState.elements.map(function (el) {
    var hidden = el.hidden,
      restOfEl = _objectWithoutProperties(el, _excluded); // Exclude 'hidden' from persisted state
    var _ref6 = el.props || {},
      imageLoading = _ref6.imageLoading,
      imageError = _ref6.imageError,
      restOfProps = _objectWithoutProperties(_ref6, _excluded2); // Exclude transient props

    // Ensure core props exist even if el.props was minimal
    var persistentProps = _objectSpread(_objectSpread(_objectSpread({
      animation: restOfProps.animation || "none",
      delay: restOfProps.delay || 0,
      url: restOfProps.url || ""
    }, el.type === "image" && {
      s3Url: restOfProps.s3Url || "",
      imageDims: restOfProps.imageDims || null,
      // Persist measured dimensions
      radiusTop: restOfProps.radiusTop !== undefined ? restOfProps.radiusTop : 4
    }), el.type === "button" && {
      text: restOfProps.text || "Button",
      color: restOfProps.color || "#2563eb",
      textColor: restOfProps.textColor || "#ffffff",
      bold: restOfProps.bold || false,
      font: restOfProps.font || "Arial",
      size: restOfProps.size || 16,
      radius: restOfProps.radius || 8,
      effect: restOfProps.effect || "solid"
    }), el.type === "xbutton" && {
      color: restOfProps.color || "rgba(0,0,0,.8)",
      bg: restOfProps.bg || "transparent"
    });
    return _objectSpread(_objectSpread({}, restOfEl), {}, {
      props: persistentProps
    });
  });
  var paddingsToPersist = {};
  if (currentScreenFromState.paddings) {
    PADDING_SIDES.forEach(function (side) {
      var pConfig = currentScreenFromState.paddings[side];
      if (pConfig) {
        var imageLoading = pConfig.imageLoading,
          imageError = pConfig.imageError,
          restOfPadding = _objectWithoutProperties(pConfig, _excluded3); // Exclude transient, keep imageDims
        paddingsToPersist[side] = _objectSpread(_objectSpread(_objectSpread({}, defaultPaddingConfig(side)), restOfPadding), {}, {
          s3Url: restOfPadding.s3Url || "",
          imageDims: restOfPadding.imageDims || null // Persist measured dimensions
        });
      } else {
        paddingsToPersist[side] = defaultPaddingConfig(side);
      }
    });
  } else {
    PADDING_SIDES.forEach(function (side) {
      paddingsToPersist[side] = defaultPaddingConfig(side);
    });
  }
  var bestThumbnailUrl = null;
  var firstImageElement = elementsToPersist.find(function (el) {
    var _el$props;
    return el.type === "image" && ((_el$props = el.props) === null || _el$props === void 0 || (_el$props = _el$props.s3Url) === null || _el$props === void 0 ? void 0 : _el$props.trim());
  });
  if (firstImageElement) {
    bestThumbnailUrl = firstImageElement.props.s3Url;
  } else {
    var firstPaddingImageSide = PADDING_SIDES.find(function (side) {
      var _paddingsToPersist$si, _paddingsToPersist$si2, _paddingsToPersist$si3;
      return ((_paddingsToPersist$si = paddingsToPersist[side]) === null || _paddingsToPersist$si === void 0 ? void 0 : _paddingsToPersist$si.enabled) && ((_paddingsToPersist$si2 = paddingsToPersist[side]) === null || _paddingsToPersist$si2 === void 0 ? void 0 : _paddingsToPersist$si2.type) === "image" && ((_paddingsToPersist$si3 = paddingsToPersist[side]) === null || _paddingsToPersist$si3 === void 0 || (_paddingsToPersist$si3 = _paddingsToPersist$si3.s3Url) === null || _paddingsToPersist$si3 === void 0 ? void 0 : _paddingsToPersist$si3.trim());
    });
    if (firstPaddingImageSide) {
      bestThumbnailUrl = paddingsToPersist[firstPaddingImageSide].s3Url;
    }
  }
  return _objectSpread(_objectSpread({}, currentState), {}, {
    selected: null,
    // Always clear selection on serialize
    screens: [_objectSpread(_objectSpread({}, currentScreenFromState), {}, {
      elements: elementsToPersist,
      paddings: paddingsToPersist
    })],
    _thumbnailHintUrl: bestThumbnailUrl
  });
}
var deserialize = function deserialize() {
  var _backendData$screens;
  var backendData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var processScreen = function processScreen(screen) {
    var elements = ((screen === null || screen === void 0 ? void 0 : screen.elements) || []).map(function (el) {
      var defaultPropsForType = newElement(el.type).props; // Get defaults for this type
      var deserializedProps = _objectSpread(_objectSpread(_objectSpread({}, defaultPropsForType), el.props || {}), {}, {
        // Overlay with saved props
        imageLoading: false,
        // Always reset transient state
        imageError: null
      });
      return _objectSpread(_objectSpread({}, el), {}, {
        hidden: false,
        props: deserializedProps
      }); // Ensure hidden is reset, apply props
    });
    var paddings = {};
    PADDING_SIDES.forEach(function (side) {
      var _screen$paddings;
      var backendPadding = screen === null || screen === void 0 || (_screen$paddings = screen.paddings) === null || _screen$paddings === void 0 ? void 0 : _screen$paddings[side];
      paddings[side] = _objectSpread(_objectSpread(_objectSpread({}, defaultPaddingConfig(side)), backendPadding || {}), {}, {
        // Overlay with saved data
        imageLoading: false,
        // Always reset transient state
        imageError: null
      });
    });
    return _objectSpread(_objectSpread({
      id: (screen === null || screen === void 0 ? void 0 : screen.id) || crypto.randomUUID()
    }, screen || {}), {}, {
      // Spread other screen properties if any
      elements: elements,
      paddings: paddings
    });
  };
  if ((backendData === null || backendData === void 0 || (_backendData$screens = backendData.screens) === null || _backendData$screens === void 0 ? void 0 : _backendData$screens.length) > 0) {
    return _objectSpread(_objectSpread(_objectSpread({}, startState()), backendData), {}, {
      // Overlay with all backend data (like 'bg')
      selected: null,
      // Always clear selection on deserialize
      screens: backendData.screens.map(processScreen) // Process screens specifically
    });
  }
  // If no screens in backendData, return a processed initial state
  var initial = startState();
  initial.screens = initial.screens.map(processScreen); // Process the default screen
  if (backendData.bg) initial.bg = backendData.bg; // Apply background if present
  return initial;
};

/***/ }),

/***/ "./templates/index.js":
/*!****************************!*\
  !*** ./templates/index.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   byId: () => (/* binding */ byId),
/* harmony export */   templates: () => (/* binding */ templates)
/* harmony export */ });
/* harmony import */ var _changeAds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./changeAds */ "./templates/changeAds.js");
/* harmony import */ var _defaultStatic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultStatic */ "./templates/defaultStatic.js");
/* harmony import */ var _pophover__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pophover */ "./templates/pophover.js");
/* harmony import */ var _freeLayout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./freeLayout */ "./templates/freeLayout.js");
/* harmony import */ var _breakout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./breakout */ "./templates/breakout.js");
/* harmony import */ var _videoHotspot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./videoHotspot */ "./templates/videoHotspot.js");
/* harmony import */ var _fullScreen__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fullScreen */ "./templates/fullScreen.js");
/* harmony import */ var _scratch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scratch */ "./templates/scratch.js");
/* harmony import */ var _videoSurvey__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./videoSurvey */ "./templates/videoSurvey.js");
/* harmony import */ var _360Slider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./360Slider */ "./templates/360Slider.js");
/* harmony import */ var _videoShowcase__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./videoShowcase */ "./templates/videoShowcase.js");
/* harmony import */ var _swipeSlider__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./swipeSlider */ "./templates/swipeSlider.js");
/* harmony import */ var _playableAds__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./playableAds */ "./templates/playableAds.js");
/* harmony import */ var _marketSlider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./marketSlider */ "./templates/marketSlider.js");
/* harmony import */ var _prodcutExplore__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./prodcutExplore */ "./templates/prodcutExplore.js");














 // Corrected alias

var templates = [_changeAds__WEBPACK_IMPORTED_MODULE_0__, _defaultStatic__WEBPACK_IMPORTED_MODULE_1__, _pophover__WEBPACK_IMPORTED_MODULE_2__, _marketSlider__WEBPACK_IMPORTED_MODULE_13__, _breakout__WEBPACK_IMPORTED_MODULE_4__, _freeLayout__WEBPACK_IMPORTED_MODULE_3__, _prodcutExplore__WEBPACK_IMPORTED_MODULE_14__, _fullScreen__WEBPACK_IMPORTED_MODULE_6__, _videoHotspot__WEBPACK_IMPORTED_MODULE_5__, _videoSurvey__WEBPACK_IMPORTED_MODULE_8__, _scratch__WEBPACK_IMPORTED_MODULE_7__, _playableAds__WEBPACK_IMPORTED_MODULE_12__, _360Slider__WEBPACK_IMPORTED_MODULE_9__, _videoShowcase__WEBPACK_IMPORTED_MODULE_10__, _swipeSlider__WEBPACK_IMPORTED_MODULE_11__];
var byId = Object.fromEntries(templates.map(function (t) {
  return [t.meta.id, t];
}));

/***/ }),

/***/ "./templates/marketSlider.js":
/*!***********************************!*\
  !*** ./templates/marketSlider.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["assetLoading", "assetError", "file", "src"],
  _excluded2 = ["assetLoading", "assetError", "file", "src"],
  _excluded3 = ["assetLoading", "assetError", "file", "src"],
  _excluded4 = ["assetLoading", "assetError", "file", "src"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* MARKET-SLIDER – multi-screen template with fakeBox popups, per-element animations,
   delay control & interactive elements (v1.0 based on Product Explore v1.3)
   ------------------------------------------------------------------------------ */
var API_BASE_URL = "https://localhost:3001" || 0;




// --- BEGIN S3/BACKEND INTEGRATION HELPERS ---

var getAuthToken = function getAuthToken() {
  if (typeof window !== "undefined") {
    return localStorage.getItem("jwt");
  }
  return null;
};
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(fileObject) {
    var assetType,
      formData,
      token,
      headers,
      response,
      errorData,
      result,
      _args2 = arguments,
      _t3,
      _t4;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          assetType = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : "image";
          formData = new FormData();
          formData.append("assetFile", fileObject);
          _context2.p = 1;
          token = getAuthToken();
          headers = {};
          if (token) {
            headers["Authorization"] = "Bearer ".concat(token);
          }
          _context2.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData,
            headers: headers
          });
        case 2:
          response = _context2.v;
          if (response.ok) {
            _context2.n = 7;
            break;
          }
          _context2.p = 3;
          _context2.n = 4;
          return response.json();
        case 4:
          errorData = _context2.v;
          _context2.n = 6;
          break;
        case 5:
          _context2.p = 5;
          _t3 = _context2.v;
          errorData = {
            message: "Upload failed: ".concat(response.statusText || response.status)
          };
        case 6:
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 7:
          _context2.n = 8;
          return response.json();
        case 8:
          result = _context2.v;
          if (result.url) {
            _context2.n = 9;
            break;
          }
          throw new Error("Upload successful, but no URL was returned from the backend.");
        case 9:
          console.log("[uploadFileToBackend] Success. URL: ".concat(result.url)); // Added log
          return _context2.a(2, result.url);
        case 10:
          _context2.p = 10;
          _t4 = _context2.v;
          console.error("Error uploading ".concat(assetType, " file to backend:"), _t4);
          if (!(_t4 instanceof Error)) {
            _context2.n = 11;
            break;
          }
          throw _t4;
        case 11:
          throw new Error(String(_t4 || "An unknown error occurred during ".concat(assetType, " file upload.")));
        case 12:
          return _context2.a(2);
      }
    }, _callee2, null, [[3, 5], [1, 10]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
function measureImageDimensions(_x2) {
  return _measureImageDimensions.apply(this, arguments);
} // --- END S3/BACKEND INTEGRATION HELPERS ---
/* ---------- meta ---------- */
function _measureImageDimensions() {
  _measureImageDimensions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(s3Url) {
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          return _context3.a(2, new Promise(function (resolve, reject) {
            if (!s3Url) {
              console.warn("[measureImageDimensions] S3 URL is missing."); // Added log
              reject(new Error("S3 URL is required to measure dimensions."));
              return;
            }
            var img = new Image();
            img.onload = function () {
              console.log("[measureImageDimensions] Loaded: ".concat(s3Url, ", Dimensions: ").concat(img.naturalWidth, "x").concat(img.naturalHeight)); // Added log
              resolve({
                width: img.naturalWidth,
                height: img.naturalHeight
              });
            };
            img.onerror = function (err) {
              console.error("[measureImageDimensions] Error loading image for measurement:", s3Url, err);
              reject(new Error("Could not load image to measure dimensions. Check S3 URL and CORS."));
            };
            img.crossOrigin = "anonymous";
            img.src = s3Url;
          }));
      }
    }, _callee3);
  }));
  return _measureImageDimensions.apply(this, arguments);
}
var meta = {
  id: "market-slider",
  // CHANGED
  name: "Market Slider",
  // CHANGED
  description: "Interactive slider with fakeBox popups, element animations, and customizable content.",
  // CHANGED
  canvas: {
    w: 378,
    h: 648
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'"];
var EFFECTS = ["fade", "zoom-in", "zoom-out", "slide-left", "slide-right", "slide-up", "slide-down", "rotate", "flip"];
var BOX_DIMS = function BOX_DIMS(t) {
  return {
    image: {
      w: 120,
      h: 80
    },
    video: {
      w: 160,
      h: 90
    },
    gallery: {
      w: 160,
      h: 90
    },
    container: {
      w: 150,
      h: 100
    },
    // NEW
    xbuttonClose: {
      w: 32,
      h: 32
    } // NEW
    // Default for text, title, button etc.
  }[t] || {
    w: 120,
    h: 36
  };
};
var startState = function startState() {
  return {
    bg: "#ffffff",
    current: 0,
    selected: null,
    animKey: 0,
    transition: "fade",
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }],
    activeFakeBox: {
      id: null,
      effect: "fade",
      element: null
    } // NEW: For managing open fakeBox
  };
};
var baseEl = function baseEl(type) {
  return {
    id: crypto.randomUUID(),
    type: type,
    x: 10,
    y: 10,
    w: 100,
    h: 30,
    effect: "fade",
    delay: 0
  };
};

/* -------------- element factory -------------- */
var newElement = function newElement(type) {
  switch (type) {
    case "button":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          text: "Click me",
          color: "#2563eb",
          // This is BG color for button
          textColor: "#ffffff",
          // Added for clarity, assuming text is white
          font: "Arial",
          size: 14,
          radius: 6,
          action: "url",
          // 'url', 'next', 'openFakeBox'
          url: "",
          target: null,
          // screen index for 'next'
          targetFakeBoxId: null,
          // ID of fakeBox for 'openFakeBox'
          fakeBoxOpenEffect: "fade" // Effect for opening fakeBox
        }
      });
    case "title":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          text: "Title",
          color: "#000",
          font: "Georgia",
          size: 20,
          bold: true
        }
      });
    case "subtitle":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          text: "Subtitle",
          color: "#111827",
          font: "Georgia",
          size: 16,
          bold: false
        }
      });
    case "image":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          s3Url: "",
          assetLoading: false,
          assetError: null,
          assetDims: null,
          radius: 0,
          url: ""
        }
      });
    case "video":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 200,
        h: 120,
        props: {
          s3Url: "",
          assetLoading: false,
          assetError: null
        }
      });
    case "textbox":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        h: 80,
        props: {
          text: "Long text…",
          color: "#000",
          font: "Arial",
          size: 14,
          bold: false,
          align: "left",
          bg: "#ffffff"
        }
      });
    case "gallery":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 200,
        h: 80,
        props: {
          radius: 0,
          imageH: 70,
          gap: 4,
          images: []
        }
      });
    case "xbutton":
      // Top-level X button
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 32,
        h: 32,
        props: {
          target: null,
          color: "rgba(0,0,0,.6)",
          // Symbol color
          bgColor: "transparent" // NEW: Background color
        }
      });
    case "messageButton":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 160,
        h: 40,
        props: {
          text1: "Hola!",
          color1: "#ffffff",
          bg1: "#2563eb",
          size1: 14,
          font1: "Arial",
          bold1: false,
          italic1: false,
          text2: "Descubre",
          color2: "#ffffff",
          bg2: "#d97706",
          size2: 14,
          font2: "Arial",
          bold2: false,
          italic2: false,
          radius: 6,
          action: "url",
          url: "",
          target: null,
          arrowSize: 22,
          arrowBg: "#ffffff",
          arrowColor: "#000000",
          dividerColor: "#ffffff"
        }
      });
    case "fakeBox":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 300,
        // Default size for fakeBox
        h: 400,
        props: {
          bg: "#f3f4f6",
          radius: 6,
          padding: 10,
          items: []
        }
      });
    default:
      return baseEl(type);
  }
};

// Helper for creating items to be placed *inside* a fakeBox
// These items have props directly, not nested under a `props` object.
// They also need id, type, x, y, w, h for RND positioning within the fakeBox.
var newFakeBoxItem = function newFakeBoxItem(type) {
  var id = crypto.randomUUID();
  var basePos = {
    x: 10,
    y: 10
  };
  var dims = BOX_DIMS(type); // Get default w, h

  switch (type) {
    case "text":
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        text: "Text inside FakeBox",
        color: "#000000",
        font: "Arial",
        size: 14,
        bold: false
      });
    case "title":
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        text: "Title in FakeBox",
        color: "#000000",
        font: "Georgia",
        size: 20,
        bold: true
      });
    case "subtitle":
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        text: "Subtitle in FakeBox",
        color: "#333333",
        font: "Georgia",
        size: 16,
        bold: false
      });
    case "textbox":
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        text: "Textbox inside...",
        color: "#000",
        font: "Arial",
        size: 14,
        bold: false,
        align: "left",
        bg: "#ffffff"
      });
    case "button":
      // Button inside FakeBox
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        text: "Inner Button",
        color: "#007bff",
        textColor: "#ffffff",
        font: "Arial",
        size: 14,
        bold: false,
        // Added bold property
        radius: 4,
        action: "url",
        url: ""
      });
    case "image":
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        s3Url: "",
        assetLoading: false,
        assetError: null,
        assetDims: null,
        radius: 0,
        url: ""
      });
    case "video":
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        s3Url: "",
        assetLoading: false,
        assetError: null
      });
    case "gallery":
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        radius: 0,
        imageH: 60,
        gap: 4,
        images: []
      });
    case "container":
      // NEW type for inside FakeBox
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        bgColor: "#dddddd"
      });
    case "xbuttonClose":
      // NEW type for inside FakeBox
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        color: "rgba(0,0,0,0.7)",
        bgColor: "rgba(255,255,255,0.5)"
      });
    default:
      console.warn("Unknown fakeBox item type:", type);
      return _objectSpread(_objectSpread(_objectSpread({
        id: id,
        type: type
      }, basePos), dims), {}, {
        text: "Unknown Item"
      });
  }
};

/* ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _sel$props$target, _sel$props$target2, _sel$props$target3;
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });
  var setCurrent = function setCurrent(i) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: i,
      selected: null,
      activeFakeBox: startState().activeFakeBox
    }));
  }; // Close fakebox on screen change
  var addScreen = function addScreen() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: safe.screens.length,
      selected: null,
      activeFakeBox: startState().activeFakeBox,
      screens: [].concat(_toConsumableArray(safe.screens), [{
        id: crypto.randomUUID(),
        elements: []
      }])
    }));
  };
  var duplicateScreen = function duplicateScreen() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: safe.screens.length,
      selected: null,
      activeFakeBox: startState().activeFakeBox,
      screens: [].concat(_toConsumableArray(safe.screens), [JSON.parse(JSON.stringify(scr))]) // Ensure deep copy
    }));
  };
  var delScreen = function delScreen(idx) {
    if (safe.screens.length === 1) return;
    var arr = safe.screens.slice();
    arr.splice(idx, 1);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: arr,
      current: Math.max(0, idx - 1),
      selected: null,
      activeFakeBox: startState().activeFakeBox
    }));
  };
  var add = function add(t) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      // Deselect after adding new
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newElement(t)])
        }) : sc;
      })
    }));
  };
  var patchSel = function patchSel(fn // fn is (oldElement) => newElement
  ) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc, i) {
        return i !== safe.current ? sc : _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === safe.selected ? fn(e) : e;
          })
        });
      })
    }));
  };
  var delSel = function delSel() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc, i) {
        return i !== safe.current ? sc : _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.filter(function (e) {
            return e.id !== safe.selected;
          })
        });
      })
    }));
  };
  var duplicateSel = function duplicateSel() {
    if (!sel) return;
    var copy = JSON.parse(JSON.stringify(sel));
    copy.id = crypto.randomUUID();
    copy.x += 10;
    copy.y += 10;
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [copy])
        }) : sc;
      }),
      selected: copy.id // Select the new copy
    }));
  };
  var handleAssetUpload = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(file, elementType, updateFn) {
      var s3Url, dims, _t, _t2;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            if (file) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            console.log("[handleAssetUpload] Starting upload for ".concat(elementType, ":"), file.name); // Added log
            updateFn({
              assetLoading: true,
              assetError: null,
              s3Url: "",
              assetDims: null
            });
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file, elementType);
          case 3:
            s3Url = _context.v;
            dims = null;
            if (!(elementType === "image" && file.type.startsWith("image/"))) {
              _context.n = 7;
              break;
            }
            _context.p = 4;
            _context.n = 5;
            return measureImageDimensions(s3Url);
          case 5:
            dims = _context.v;
            _context.n = 7;
            break;
          case 6:
            _context.p = 6;
            _t = _context.v;
            console.warn("[handleAssetUpload] Could not measure image dimensions:", _t.message);
          case 7:
            console.log("[handleAssetUpload] Upload success. s3Url: ".concat(s3Url, ", dims:"), dims); // Added log
            updateFn({
              s3Url: s3Url,
              assetDims: dims,
              assetLoading: false
            });
            _context.n = 9;
            break;
          case 8:
            _context.p = 8;
            _t2 = _context.v;
            console.error("[handleAssetUpload] Error during asset upload:", _t2); // Added log
            updateFn({
              assetLoading: false,
              assetError: _t2.message || "Upload failed."
            });
          case 9:
            return _context.a(2);
        }
      }, _callee, null, [[4, 6], [2, 8]]);
    }));
    return function handleAssetUpload(_x3, _x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Background", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "flex flex-wrap gap-2",
      children: ["title", "subtitle", "button", "image", "video", "textbox", "gallery", "fakeBox", "messageButton", "xbutton"].map(function (t) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          onClick: function onClick() {
            return add(t);
          },
          className: "btn",
          children: ["+ ", t]
        }, t);
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "flex items-center gap-2 overflow-x-auto pb-2",
      children: [safe.screens.map(function (sc, i) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "relative w-10 h-16 border ".concat(i === safe.current ? "border-blue-600" : "border-gray-300", " rounded flex-shrink-0 cursor-pointer"),
          onClick: function onClick() {
            return setCurrent(i);
          },
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            className: "absolute -top-1 -right-1 text-xs text-red-600 cursor-pointer",
            onClick: function onClick(e) {
              e.stopPropagation();
              delScreen(i);
            },
            children: "\xD7"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            className: "absolute inset-0 flex items-center justify-center text-[10px]",
            children: i + 1
          })]
        }, sc.id);
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: addScreen,
        className: "btn-secondary text-xs",
        children: "+ new"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: duplicateScreen,
        className: "btn-secondary text-xs",
        children: "+ dup"
      })]
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex justify-between items-center",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "capitalize font-medium",
          children: sel.type
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "space-x-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: duplicateSel,
            className: "text-blue-600",
            children: "copy"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: delSel,
            className: "text-red-600",
            children: "delete"
          })]
        })]
      }), ["title", "subtitle", "button", "textbox"].includes(sel.type) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [sel.type === "textbox" ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
          rows: "3",
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1"
        }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: sel.props.font,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  font: e.target.value
                })
              });
            });
          },
          className: "border w-full",
          children: FONTS.map(function (f) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: f,
              children: f.replace(/'/g, "")
            }, f);
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "number",
          min: "8",
          max: "72",
          value: sel.props.size,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  size: +e.target.value
                })
              });
            });
          },
          className: "border w-full px-1"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          children: ["Text Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          })]
        }), sel.type !== "button" &&
        /*#__PURE__*/
        // Buttons have their main color as background
        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Bold", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: !!sel.props.bold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold: e.target.checked
                  })
                });
              });
            }
          })]
        })]
      }), sel.type === "textbox" /* bold is already above for textbox */ && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: sel.props.align,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  align: e.target.value
                })
              });
            });
          },
          className: "border w-full",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "left",
            children: "Left"
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "center",
            children: "Center"
          }), " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "justify",
            children: "Justify"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          children: ["BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bg,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bg: e.target.value
                  })
                });
              });
            }
          })]
        })]
      }), sel.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          children: ["Button BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          children: ["Button Text Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.textColor || "#ffffff",
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textColor: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Radius", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: sel.props.action,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  action: e.target.value,
                  targetFakeBoxId: e.target.value === "openFakeBox" ? o.props.targetFakeBoxId : null
                })
              });
            });
          },
          className: "border w-full",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "url",
            children: "URL"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "next",
            children: "Go to screen"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "openFakeBox",
            children: "Open FakeBox"
          }), " "]
        }), sel.props.action === "url" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          placeholder: "https://\u2026",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1"
        }), sel.props.action === "next" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: (_sel$props$target = sel.props.target) !== null && _sel$props$target !== void 0 ? _sel$props$target : "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  target: e.target.value === "" ? null : +e.target.value
                })
              });
            });
          },
          className: "border w-full mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "",
            children: "(next sequential)"
          }), safe.screens.map(function (_, i) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: i,
              children: ["Screen ", i + 1]
            }, i);
          })]
        }), sel.props.action === "openFakeBox" /* NEW UI for openFakeBox */ && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
            className: "block text-xs mt-1",
            children: "Target FakeBox:"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
            value: sel.props.targetFakeBoxId || "",
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    targetFakeBoxId: e.target.value || null
                  })
                });
              });
            },
            className: "border w-full",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: "",
              children: "Select FakeBox"
            }), scr.elements.filter(function (el) {
              return el.type === "fakeBox";
            }).map(function (fb) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
                value: fb.id,
                children: ["FakeBox (ID: ...", fb.id.slice(-6), ")"]
              }, fb.id);
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
            className: "block text-xs mt-1",
            children: "Open Effect:"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            value: sel.props.fakeBoxOpenEffect || "fade",
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    fakeBoxOpenEffect: e.target.value
                  })
                });
              });
            },
            className: "border w-full",
            children: EFFECTS.map(function (ef) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: ef,
                children: ef
              }, ef);
            })
          })]
        })]
      }), sel.type === "image" /* ... existing image editor ... */ && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*",
          disabled: sel.props.assetLoading,
          onChange: function onChange(e) {
            var _e$target$files;
            var file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];
            handleAssetUpload(file, "image", function (updatePayload) {
              patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), updatePayload)
                });
              });
            });
          },
          className: "block w-full text-xs"
        }), sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-blue-500 italic",
          children: "Uploading..."
        }), " ", sel.props.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
          className: "text-xs text-red-500 italic",
          children: ["Error: ", sel.props.assetError]
        }), sel.props.s3Url && !sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "mt-1",
          children: [" ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.s3Url,
            crossOrigin: "anonymous" // Added for consistency
            ,
            alt: "Preview",
            className: "max-w-[100px] max-h-[70px] border"
          }), " ", sel.props.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-gray-500",
            children: [sel.props.assetDims.width, "x", sel.props.assetDims.height, "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          placeholder: "Click URL (optional)",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 mt-1"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Radius", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        })]
      }), sel.type === "video" /* ... existing video editor ... */ && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-xs font-medium",
          children: "Upload Video:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "video/*",
          disabled: sel.props.assetLoading,
          onChange: function onChange(e) {
            var _e$target$files2;
            var file = (_e$target$files2 = e.target.files) === null || _e$target$files2 === void 0 ? void 0 : _e$target$files2[0];
            handleAssetUpload(file, "video", function (updatePayload) {
              patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), updatePayload)
                });
              });
            });
          },
          className: "block w-full text-xs"
        }), sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-blue-500 italic",
          children: "Uploading..."
        }), " ", sel.props.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
          className: "text-xs text-red-500 italic",
          children: ["Error: ", sel.props.assetError]
        }), sel.props.s3Url && !sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
          className: "mt-1",
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
            src: sel.props.s3Url,
            controls: true,
            className: "max-w-[150px] max-h-[100px] border"
          })
        })]
      }), sel.type === "gallery" /* ... existing gallery editor ... */ && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Img height", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "30",
            max: "300",
            value: sel.props.imageH,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    imageH: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Gap", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.gap,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    gap: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Radius", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), sel.props.images.map(function (img, idx) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "border p-1 my-1 rounded",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              className: "flex items-center gap-1",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "file",
                accept: "image/*",
                disabled: img.assetLoading,
                onChange: function onChange(e) {
                  var _e$target$files3;
                  var file = (_e$target$files3 = e.target.files) === null || _e$target$files3 === void 0 ? void 0 : _e$target$files3[0];
                  handleAssetUpload(file, "image", function (updatePayload) {
                    patchSel(function (o) {
                      var newImgs = _toConsumableArray(o.props.images);
                      newImgs[idx] = _objectSpread(_objectSpread({}, newImgs[idx]), updatePayload);
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          images: newImgs
                        })
                      });
                    });
                  });
                },
                className: "block w-full text-xs mb-1"
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                className: "text-red-600 text-xs",
                onClick: function onClick() {
                  return patchSel(function (o) {
                    var arr = o.props.images.slice();
                    arr.splice(idx, 1);
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        images: arr
                      })
                    });
                  });
                },
                children: "\xD7"
              })]
            }), img.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
              className: "text-xs text-blue-500 italic",
              children: "Uploading..."
            }), " ", img.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
              className: "text-xs text-red-500 italic",
              children: ["Error: ", img.assetError]
            }), img.s3Url && !img.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              className: "mt-1",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                src: img.s3Url,
                crossOrigin: "anonymous" // Added for consistency
                ,
                alt: "Item ".concat(idx),
                className: "max-w-[80px] max-h-[60px] border"
              }), img.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                className: "text-xs text-gray-500",
                children: [img.assetDims.width, "x", img.assetDims.height, "px"]
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              placeholder: "Link (optional)",
              className: "border w-full px-1 mt-1",
              value: img.url || "",
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  var arr = _toConsumableArray(o.props.images);
                  arr[idx] = _objectSpread(_objectSpread({}, arr[idx]), {}, {
                    url: e.target.value
                  });
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      images: arr
                    })
                  });
                });
              }
            })]
          }, idx);
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
          className: "btn-secondary text-xs",
          onClick: function onClick() {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  images: [].concat(_toConsumableArray(o.props.images), [{
                    s3Url: "",
                    url: "",
                    assetLoading: false,
                    assetError: null,
                    assetDims: null
                  }])
                })
              });
            });
          },
          children: "+ add image"
        })]
      }), sel.type === "xbutton" &&
      /*#__PURE__*/
      // Top-level XButton
      (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: (_sel$props$target2 = sel.props.target) !== null && _sel$props$target2 !== void 0 ? _sel$props$target2 : "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  target: e.target.value === "" ? null : +e.target.value
                })
              });
            });
          },
          className: "border w-full",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "",
            children: "Go to next screen"
          }), safe.screens.map(function (_, i) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: i,
              children: ["Screen ", i + 1]
            }, i);
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: ["Symbol Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: ["BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bgColor || "transparent",
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgColor: e.target.value
                  })
                });
              });
            }
          })]
        }), " "]
      }), sel.type === "messageButton" /* ... existing messageButton editor ... */ && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "block font-medium",
          children: "Message 1"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text1,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text1: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1",
          placeholder: "Message 1"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.color1,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  color1: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.bg1,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  bg1: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "flex gap-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            value: sel.props.font1,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    font1: e.target.value
                  })
                });
              });
            },
            className: "border flex-1",
            children: FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "8",
            max: "40",
            value: sel.props.size1,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    size1: +e.target.value
                  })
                });
              });
            },
            className: "border w-16 px-1"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Bold", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold1,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold1: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Italic", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.italic1,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    italic1: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "block font-medium",
          children: "Message 2"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text2,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text2: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1",
          placeholder: "Message 2"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.color2,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  color2: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.bg2,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  bg2: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "flex gap-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            value: sel.props.font2,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    font2: e.target.value
                  })
                });
              });
            },
            className: "border flex-1",
            children: FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "8",
            max: "40",
            value: sel.props.size2,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    size2: +e.target.value
                  })
                });
              });
            },
            className: "border w-16 px-1"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Bold", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold2,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold2: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Italic", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.italic2,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    italic2: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: ["Radius", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: sel.props.action,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  action: e.target.value
                })
              });
            });
          },
          className: "border w-full",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "url",
            children: "URL"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "next",
            children: "Go to screen"
          })]
        }), sel.props.action === "url" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          placeholder: "https://\u2026",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1"
        }), sel.props.action === "next" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: (_sel$props$target3 = sel.props.target) !== null && _sel$props$target3 !== void 0 ? _sel$props$target3 : "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  target: e.target.value === "" ? null : +e.target.value
                })
              });
            });
          },
          className: "border w-full mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "",
            children: "(next sequential)"
          }), safe.screens.map(function (_, i) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: i,
              children: ["Screen ", i + 1]
            }, i);
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "number",
          min: "10",
          max: "60",
          value: sel.props.arrowSize,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  arrowSize: +e.target.value
                })
              });
            });
          },
          className: "border w-full px-1",
          placeholder: "Arrow size (px)"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block text-xs",
          children: ["Arrow bg", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.arrowBg,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    arrowBg: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block text-xs",
          children: ["Arrow color", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.arrowColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    arrowColor: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block text-xs",
          children: ["Divider color", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.dividerColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    dividerColor: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
          className: "btn-secondary text-xs mt-1",
          onClick: function onClick() {
            return patchSel(function (o) {
              var _o$props$restart;
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  restart: ((_o$props$restart = o.props.restart) !== null && _o$props$restart !== void 0 ? _o$props$restart : 0) + 1
                })
              });
            });
          },
          children: "Reset progress"
        })]
      }), sel.type === "fakeBox" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          children: ["BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bg,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bg: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Radius", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Padding", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.padding,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    padding: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "font-medium",
          children: "FakeBox Items:"
        }), sel.props.items.map(function (it, iIdx) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "border p-1 my-1 rounded space-y-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              className: "flex justify-between items-center",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                value: it.type,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    var newType = e.target.value;
                    var oldItem = o.props.items[iIdx];
                    var newItem = _objectSpread(_objectSpread({}, newFakeBoxItem(newType)), {}, {
                      id: oldItem.id,
                      x: oldItem.x,
                      y: oldItem.y,
                      w: oldItem.w,
                      h: oldItem.h
                    }); // Preserve id, pos, size
                    // Overwrite w/h with new type defaults if preferred: {...BOX_DIMS(newType)}
                    var newItems = _toConsumableArray(o.props.items);
                    newItems[iIdx] = newItem;
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        items: newItems
                      })
                    });
                  });
                },
                className: "border text-xs",
                children: ["text", "title", "subtitle", "textbox", "button", "image", "video", "gallery", "container", "xbuttonClose"].map(function (itemType) {
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                    value: itemType,
                    children: itemType
                  }, itemType);
                })
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                className: "flex space-x-1",
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                  onClick: function onClick() {
                    return patchSel(function (o) {
                      var items = _toConsumableArray(o.props.items);
                      var copy = JSON.parse(JSON.stringify(items[iIdx]));
                      copy.id = crypto.randomUUID();
                      copy.x = (copy.x || 0) + 5;
                      copy.y = (copy.y || 0) + 5;
                      items.splice(iIdx + 1, 0, copy);
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          items: items
                        })
                      });
                    });
                  },
                  className: "text-blue-600 text-xs",
                  children: "Dup"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                  onClick: function onClick() {
                    return patchSel(function (o) {
                      var arr = o.props.items.slice();
                      arr.splice(iIdx, 1);
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          items: arr
                        })
                      });
                    });
                  },
                  className: "text-red-600 text-xs",
                  children: "\xD7"
                })]
              })]
            }), function () {
              var updateItemProp = function updateItemProp(prop, value) {
                return patchSel(function (o) {
                  var newItems = _toConsumableArray(o.props.items);
                  newItems[iIdx] = prop === null ? value // value is the whole new item state
                  : _objectSpread(_objectSpread({}, newItems[iIdx]), {}, _defineProperty({}, prop, value));
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      items: newItems
                    })
                  });
                });
              };
              var updateItemGalleryImageProp = function updateItemGalleryImageProp(galleryImageIndex, prop, value) {
                return patchSel(function (o) {
                  var newItems = _toConsumableArray(o.props.items);
                  var galleryContainerItem = _objectSpread({}, newItems[iIdx]); // This is the gallery element inside FakeBox
                  var newGalleryImages = _toConsumableArray(galleryContainerItem.images || []);
                  newGalleryImages[galleryImageIndex] = prop === null ? value // value is the whole new gallery image object
                  : _objectSpread(_objectSpread({}, newGalleryImages[galleryImageIndex]), {}, _defineProperty({}, prop, value));
                  galleryContainerItem.images = newGalleryImages;
                  newItems[iIdx] = galleryContainerItem;
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      items: newItems
                    })
                  });
                });
              };
              var addGalleryImageToItem = function addGalleryImageToItem() {
                return patchSel(function (o) {
                  var newItems = _toConsumableArray(o.props.items);
                  var galleryItem = _objectSpread({}, newItems[iIdx]);
                  galleryItem.images = [].concat(_toConsumableArray(galleryItem.images || []), [{
                    s3Url: "",
                    url: "",
                    assetLoading: false,
                    assetError: null,
                    assetDims: null
                  }]);
                  newItems[iIdx] = galleryItem;
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      items: newItems
                    })
                  });
                });
              };
              var removeGalleryImageFromItem = function removeGalleryImageFromItem(imgIdx) {
                return patchSel(function (o) {
                  var newItems = _toConsumableArray(o.props.items);
                  var galleryItem = _objectSpread({}, newItems[iIdx]);
                  var newGalleryImages = _toConsumableArray(galleryItem.images);
                  newGalleryImages.splice(imgIdx, 1);
                  galleryItem.images = newGalleryImages;
                  newItems[iIdx] = galleryItem;
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      items: newItems
                    })
                  });
                });
              };
              switch (it.type) {
                case "text":
                case "title":
                case "subtitle":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
                      rows: "2",
                      className: "border w-full px-1",
                      value: it.text,
                      onChange: function onChange(e) {
                        return updateItemProp("text", e.target.value);
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                      className: "flex gap-1",
                      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                        value: it.font,
                        onChange: function onChange(e) {
                          return updateItemProp("font", e.target.value);
                        },
                        className: "border flex-1",
                        children: FONTS.map(function (f) {
                          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                            value: f,
                            children: f.replace(/'/g, "")
                          }, f);
                        })
                      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "8",
                        max: "72",
                        className: "border w-16 px-1",
                        value: it.size,
                        onChange: function onChange(e) {
                          return updateItemProp("size", +e.target.value);
                        }
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      children: ["Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "color",
                        value: it.color,
                        onChange: function onChange(e) {
                          return updateItemProp("color", e.target.value);
                        }
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Bold", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "checkbox",
                        checked: !!it.bold,
                        onChange: function onChange(e) {
                          return updateItemProp("bold", e.target.checked);
                        }
                      })]
                    }), " "]
                  });
                case "textbox":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
                      rows: "3",
                      className: "border w-full px-1",
                      value: it.text,
                      onChange: function onChange(e) {
                        return updateItemProp("text", e.target.value);
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                      value: it.font,
                      onChange: function onChange(e) {
                        return updateItemProp("font", e.target.value);
                      },
                      className: "border w-full",
                      children: FONTS.map(function (f) {
                        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                          value: f,
                          children: f.replace(/'/g, "")
                        }, f);
                      })
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "number",
                      min: "8",
                      max: "40",
                      className: "border w-full px-1",
                      value: it.size,
                      onChange: function onChange(e) {
                        return updateItemProp("size", +e.target.value);
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      children: ["Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "color",
                        value: it.color,
                        onChange: function onChange(e) {
                          return updateItemProp("color", e.target.value);
                        }
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Bold", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "checkbox",
                        checked: !!it.bold,
                        onChange: function onChange(e) {
                          return updateItemProp("bold", e.target.checked);
                        }
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
                      value: it.align,
                      onChange: function onChange(e) {
                        return updateItemProp("align", e.target.value);
                      },
                      className: "border w-full",
                      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                        value: "left",
                        children: "Left"
                      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                        value: "center",
                        children: "Center"
                      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                        value: "justify",
                        children: "Justify"
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      children: ["BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "color",
                        value: it.bg,
                        onChange: function onChange(e) {
                          return updateItemProp("bg", e.target.value);
                        }
                      })]
                    })]
                  });
                case "button":
                  // Button inside FakeBox
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      value: it.text,
                      onChange: function onChange(e) {
                        return updateItemProp("text", e.target.value);
                      },
                      className: "border w-full px-1"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      children: ["BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "color",
                        value: it.color,
                        onChange: function onChange(e) {
                          return updateItemProp("color", e.target.value);
                        }
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      children: ["Text Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "color",
                        value: it.textColor || "#ffffff",
                        onChange: function onChange(e) {
                          return updateItemProp("textColor", e.target.value);
                        }
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                      value: it.font,
                      onChange: function onChange(e) {
                        return updateItemProp("font", e.target.value);
                      },
                      className: "border w-full",
                      children: FONTS.map(function (f) {
                        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                          value: f,
                          children: f.replace(/'/g, "")
                        }, f);
                      })
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "number",
                      min: "8",
                      max: "40",
                      className: "border w-full px-1",
                      value: it.size,
                      onChange: function onChange(e) {
                        return updateItemProp("size", +e.target.value);
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Bold", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "checkbox",
                        checked: !!it.bold,
                        onChange: function onChange(e) {
                          return updateItemProp("bold", e.target.checked);
                        }
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Radius", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "0",
                        max: "40",
                        className: "border px-1 w-16",
                        value: it.radius,
                        onChange: function onChange(e) {
                          return updateItemProp("radius", +e.target.value);
                        }
                      }), "px"]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      placeholder: "URL (if action is URL)",
                      value: it.url || "",
                      onChange: function onChange(e) {
                        return updateItemProp("url", e.target.value);
                      },
                      className: "border w-full px-1"
                    })]
                  });
                case "image":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
                      className: "block text-xs font-medium",
                      children: "Upload Image:"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "file",
                      accept: "image/*",
                      disabled: it.assetLoading,
                      onChange: function onChange(e) {
                        var _e$target$files4;
                        var file = (_e$target$files4 = e.target.files) === null || _e$target$files4 === void 0 ? void 0 : _e$target$files4[0];
                        handleAssetUpload(file, "image", function (updatePayload) {
                          return updateItemProp(null, _objectSpread(_objectSpread({}, it), updatePayload));
                        });
                      },
                      className: "block w-full text-xs"
                    }), it.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
                      className: "text-xs text-blue-500 italic",
                      children: "Uploading..."
                    }), " ", it.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                      className: "text-xs text-red-500 italic",
                      children: ["Error: ", it.assetError]
                    }), it.s3Url && !it.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                      className: "mt-1",
                      children: [" ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                        src: it.s3Url,
                        crossOrigin: "anonymous" // Added for consistency
                        ,
                        alt: "Preview",
                        className: "max-w-[80px] max-h-[60px] border"
                      }), " ", it.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                        className: "text-xs text-gray-500",
                        children: [it.assetDims.width, "x", it.assetDims.height, "px"]
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      placeholder: "Click URL (optional)",
                      className: "border w-full px-1 mt-1",
                      value: it.url || "",
                      onChange: function onChange(e) {
                        return updateItemProp("url", e.target.value);
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Radius", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "0",
                        max: "40",
                        className: "border px-1 w-16",
                        value: it.radius,
                        onChange: function onChange(e) {
                          return updateItemProp("radius", +e.target.value);
                        }
                      }), "px"]
                    })]
                  });
                case "video":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
                      className: "block text-xs font-medium",
                      children: "Upload Video:"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "file",
                      accept: "video/*",
                      disabled: it.assetLoading,
                      onChange: function onChange(e) {
                        var _e$target$files5;
                        var file = (_e$target$files5 = e.target.files) === null || _e$target$files5 === void 0 ? void 0 : _e$target$files5[0];
                        handleAssetUpload(file, "video", function (updatePayload) {
                          return updateItemProp(null, _objectSpread(_objectSpread({}, it), updatePayload));
                        });
                      },
                      className: "block w-full text-xs"
                    }), it.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
                      className: "text-xs text-blue-500 italic",
                      children: "Uploading..."
                    }), " ", it.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                      className: "text-xs text-red-500 italic",
                      children: ["Error: ", it.assetError]
                    }), it.s3Url && !it.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                      className: "mt-1",
                      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
                        src: it.s3Url,
                        controls: true,
                        className: "max-w-[120px] max-h-[80px] border"
                      })
                    })]
                  });
                case "gallery":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Img H", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "30",
                        max: "300",
                        className: "border px-1 w-16",
                        value: it.imageH,
                        onChange: function onChange(e) {
                          return updateItemProp("imageH", +e.target.value);
                        }
                      }), "px"]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Gap", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "0",
                        max: "40",
                        className: "border px-1 w-16",
                        value: it.gap,
                        onChange: function onChange(e) {
                          return updateItemProp("gap", +e.target.value);
                        }
                      }), "px"]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Radius", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "0",
                        max: "40",
                        className: "border px-1 w-16",
                        value: it.radius,
                        onChange: function onChange(e) {
                          return updateItemProp("radius", +e.target.value);
                        }
                      }), "px"]
                    }), (it.images || []).map(function (gImg, gIdx) {
                      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                        className: "border p-1 my-1 rounded",
                        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                          className: "flex items-center gap-1",
                          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                            type: "file",
                            accept: "image/*",
                            disabled: gImg.assetLoading,
                            onChange: function onChange(e) {
                              var _e$target$files6;
                              var file = (_e$target$files6 = e.target.files) === null || _e$target$files6 === void 0 ? void 0 : _e$target$files6[0];
                              handleAssetUpload(file, "image", function (updatePayload) {
                                // Pass null as prop to replace the whole gallery image object
                                updateItemGalleryImageProp(gIdx, null, _objectSpread(_objectSpread({}, gImg), updatePayload));
                              });
                            },
                            className: "block w-full text-xs mb-1"
                          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                            className: "text-red-600 text-xs",
                            onClick: function onClick() {
                              return removeGalleryImageFromItem(gIdx);
                            },
                            children: "\xD7"
                          })]
                        }), gImg.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
                          className: "text-xs text-blue-500 italic",
                          children: "Uploading..."
                        }), " ", gImg.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                          className: "text-xs text-red-500 italic",
                          children: ["Error: ", gImg.assetError]
                        }), gImg.s3Url && !gImg.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                          className: "mt-1",
                          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                            src: gImg.s3Url,
                            crossOrigin: "anonymous" // Added for consistency
                            ,
                            alt: "Nested ".concat(gIdx),
                            className: "max-w-[60px] max-h-[40px] border"
                          }), gImg.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                            className: "text-xs text-gray-500",
                            children: [gImg.assetDims.width, "x", gImg.assetDims.height, "px"]
                          })]
                        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                          placeholder: "Link (optional)",
                          className: "border w-full px-1 mt-1",
                          value: gImg.url || "",
                          onChange: function onChange(e) {
                            return updateItemGalleryImageProp(gIdx, "url", e.target.value);
                          }
                        })]
                      }, gIdx);
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                      className: "btn-secondary text-xs",
                      onClick: addGalleryImageToItem,
                      children: "+ add image"
                    })]
                  });
                case "container":
                  // NEW
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                    children: ["BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "color",
                      value: it.bgColor,
                      onChange: function onChange(e) {
                        return updateItemProp("bgColor", e.target.value);
                      }
                    })]
                  });
                case "xbuttonClose":
                  // NEW
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      children: ["Symbol Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "color",
                        value: it.color,
                        onChange: function onChange(e) {
                          return updateItemProp("color", e.target.value);
                        }
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      children: ["BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "color",
                        value: it.bgColor,
                        onChange: function onChange(e) {
                          return updateItemProp("bgColor", e.target.value);
                        }
                      })]
                    })]
                  });
                default:
                  return null;
              }
            }()]
          }, it.id || iIdx);
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
          className: "flex flex-wrap gap-2 mt-2",
          children: ["text", "title", "subtitle", "textbox", "button", "image", "video", "gallery", "container", "xbuttonClose"].map(function (itemType) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
              className: "btn-secondary text-xs",
              onClick: function onClick() {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      items: [].concat(_toConsumableArray(o.props.items), [newFakeBoxItem(itemType)])
                    })
                  });
                });
              },
              children: ["+ ", itemType]
            }, itemType);
          })
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
        className: "block",
        children: ["Effect", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: sel.effect,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                effect: e.target.value
              });
            });
          },
          className: "border w-full",
          children: EFFECTS.map(function (ef) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: ef,
              children: ef
            }, ef);
          })
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
        className: "block",
        children: ["Delay (s)", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "number",
          min: "0",
          step: "0.1",
          value: sel.delay,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                delay: +e.target.value
              });
            });
          },
          className: "border w-full px-1"
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500",
      children: "Click an element to edit\u2026"
    })]
  });
}

/* ---------- MessageButton renderer ---------- */
function MessageButtonEl(_ref3) {
  var el = _ref3.el,
    runLink = _ref3.runLink,
    _goto = _ref3["goto"];
  var _React$useState = react__WEBPACK_IMPORTED_MODULE_1___default().useState(0),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    clicks = _React$useState2[0],
    setClicks = _React$useState2[1];
  react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(function () {
    return setClicks(0);
  }, [el.props.restart]);
  var showingCover = clicks < 3;
  var coverPct = showingCover ? (3 - clicks) / 3 * 100 : 0;
  var dividerPct = 100 - coverPct;
  var _el$props = el.props,
    _el$props$radius = _el$props.radius,
    radius = _el$props$radius === void 0 ? 6 : _el$props$radius,
    text1 = _el$props.text1,
    bg1 = _el$props.bg1,
    color1 = _el$props.color1,
    size1 = _el$props.size1,
    font1 = _el$props.font1,
    bold1 = _el$props.bold1,
    italic1 = _el$props.italic1,
    text2 = _el$props.text2,
    bg2 = _el$props.bg2,
    color2 = _el$props.color2,
    size2 = _el$props.size2,
    font2 = _el$props.font2,
    bold2 = _el$props.bold2,
    italic2 = _el$props.italic2,
    _el$props$arrowSize = _el$props.arrowSize,
    arrowSize = _el$props$arrowSize === void 0 ? 22 : _el$props$arrowSize,
    _el$props$arrowBg = _el$props.arrowBg,
    arrowBg = _el$props$arrowBg === void 0 ? "rgba(255,255,255,0.25)" : _el$props$arrowBg,
    _el$props$arrowColor = _el$props.arrowColor,
    arrowColor = _el$props$arrowColor === void 0 ? "#ffffff" : _el$props$arrowColor,
    _el$props$dividerColo = _el$props.dividerColor,
    dividerColor = _el$props$dividerColo === void 0 ? "rgba(255,255,255,0.5)" : _el$props$dividerColo,
    _el$props$action = _el$props.action,
    action = _el$props$action === void 0 ? el.props.action : _el$props$action,
    _el$props$url = _el$props.url,
    url = _el$props$url === void 0 ? el.props.url : _el$props$url,
    _el$props$target = _el$props.target,
    target = _el$props$target === void 0 ? el.props.target : _el$props$target;
  var handleClick = function handleClick() {
    if (clicks < 3) setClicks(function (c) {
      return c + 1;
    });else action === "next" ? _goto(target) : runLink(url);
  };
  var txtStyle = function txtStyle(sz, ft, bd, it) {
    return {
      fontSize: sz,
      fontFamily: ft,
      fontWeight: bd ? "bold" : "normal",
      fontStyle: it ? "italic" : "normal"
    };
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    onClick: handleClick,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      borderRadius: radius,
      overflow: "hidden",
      cursor: "pointer",
      userSelect: "none",
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: _objectSpread({
        position: "absolute",
        inset: 0,
        background: bg2,
        color: color2,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        borderRadius: radius
      }, txtStyle(size2, font2, bold2, italic2)),
      children: text2
    }), showingCover && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: _objectSpread({
        position: "absolute",
        top: 0,
        bottom: 0,
        right: 0,
        width: "".concat(coverPct, "%"),
        background: bg1,
        color: color1,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        transition: "width .3s",
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0,
        borderTopRightRadius: radius,
        borderBottomRightRadius: radius,
        boxShadow: "inset 2px 0 0 0 ".concat(dividerColor)
      }, txtStyle(size1, font1, bold1, italic1)),
      children: text1
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: {
        position: "absolute",
        top: "50%",
        left: dividerPct === 0 ? 0 : "calc(".concat(dividerPct, "%)"),
        transform: dividerPct === 0 ? "translate(50%,-50%)" : "translate(-50%,-50%)",
        height: "100%",
        aspectRatio: "1 / 1",
        borderRadius: "50%",
        background: arrowBg,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        pointerEvents: "none",
        transition: "left .3s"
      },
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("svg", {
        width: arrowSize,
        height: arrowSize,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: arrowColor,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("polyline", {
          points: "9 18 15 12 9 6"
        })
      })
    })]
  });
}

/* ═════════════════════ PREVIEW ═════════════════════ */

// Helper function to render content of a FakeBox (either normally or when active)
function RenderFakeBoxContent(_ref4) {
  var fakeBoxElement = _ref4.fakeBoxElement,
    isModalActive = _ref4.isModalActive,
    parentState = _ref4.parentState,
    setParentState = _ref4.setParentState,
    _goto2 = _ref4["goto"],
    runLink = _ref4.runLink,
    readOnly = _ref4.readOnly,
    commitToParent = _ref4.commitToParent;
  var startDrag = function startDrag(el, x) {
    el.dataset.drag = "1";
    el.dataset.sx = x;
    el.dataset.sl = el.scrollLeft;
    el.style.cursor = "grabbing";
  };
  var moveDrag = function moveDrag(el, x) {
    if (el.dataset.drag !== "1") return;
    el.scrollLeft = Number(el.dataset.sl) - (x - Number(el.dataset.sx));
  };
  var endDrag = function endDrag(el) {
    el.dataset.drag = "0";
    el.style.cursor = "grab";
  };

  // Calculate dynamic wrapper height for scrollable content
  var contentH = (fakeBoxElement.props.items.length ? Math.max.apply(Math, _toConsumableArray(fakeBoxElement.props.items.map(function (it) {
    var _it$y, _it$h;
    return ((_it$y = it.y) !== null && _it$y !== void 0 ? _it$y : 0) + ((_it$h = it.h) !== null && _it$h !== void 0 ? _it$h : BOX_DIMS(it.type).h);
  }))) : 0) + 20;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
    style: {
      position: "relative",
      height: isModalActive ? "100%" : contentH,
      overflow: isModalActive ? "auto" : "visible"
    },
    children: (fakeBoxElement.props.items || []).map(function (it) {
      var _it$x, _it$y2, _it$bg;
      var _BOX_DIMS$it = _objectSpread(_objectSpread({}, BOX_DIMS(it.type)), it),
        w = _BOX_DIMS$it.w,
        h = _BOX_DIMS$it.h; // Get item's w/h, fallback to defaults
      var x = (_it$x = it.x) !== null && _it$x !== void 0 ? _it$x : 0;
      var y = (_it$y2 = it.y) !== null && _it$y2 !== void 0 ? _it$y2 : 0;
      var savePos = function savePos(nx, ny) {
        if (readOnly) return;
        var updatedItems = fakeBoxElement.props.items.map(function (item) {
          return item.id === it.id ? _objectSpread(_objectSpread({}, item), {}, {
            x: nx,
            y: ny
          }) : item;
        });
        commitToParent(fakeBoxElement.id, {
          props: _objectSpread(_objectSpread({}, fakeBoxElement.props), {}, {
            items: updatedItems
          })
        });
      };
      var saveResize = function saveResize(nw, nh, nx, ny) {
        if (readOnly) return;
        var updatedItems = fakeBoxElement.props.items.map(function (item) {
          return item.id === it.id ? _objectSpread(_objectSpread({}, item), {}, {
            w: nw,
            h: nh,
            x: nx,
            y: ny
          }) : item;
        });
        commitToParent(fakeBoxElement.id, {
          props: _objectSpread(_objectSpread({}, fakeBoxElement.props), {}, {
            items: updatedItems
          })
        });
      };
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
        size: {
          width: w,
          height: h
        },
        position: {
          x: x,
          y: y
        },
        bounds: isModalActive ? "parent" : undefined // Bound to parent only if modal, else can overflow for design
        ,
        enableResizing: !readOnly,
        disableDragging: readOnly,
        onDragStart: function onDragStart(e) {
          return e.stopPropagation();
        },
        onDragStop: function onDragStop(_, d) {
          return savePos(d.x, d.y);
        },
        onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
          return saveResize(ref.offsetWidth, ref.offsetHeight, pos.x, pos.y);
        },
        style: {
          position: "absolute",
          cursor: readOnly ? "default" : "move",
          background: (_it$bg = it.bg) !== null && _it$bg !== void 0 ? _it$bg : it.type === "container" ? it.bgColor : "transparent",
          border: !readOnly && typeof window !== "undefined" && window.location.href.includes("customize") ? "1px dashed #888" : "none"
          // padding: it.type.match(/text|title|subtitle|textbox/) ? 4 : 0, // Padding for text based items
        },
        children: function () {
          switch (it.type) {
            case "text":
            case "title":
            case "subtitle":
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                style: {
                  width: "100%",
                  height: "100%",
                  color: it.color,
                  fontFamily: it.font,
                  fontSize: it.size,
                  fontWeight: it.bold ? "bold" : "normal",
                  textAlign: it.align || "center",
                  whiteSpace: "pre-wrap",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  padding: 4
                },
                children: it.text
              });
            case "textbox":
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                style: {
                  width: "100%",
                  height: "100%",
                  color: it.color,
                  fontFamily: it.font,
                  fontSize: it.size,
                  fontWeight: it.bold ? "bold" : "normal",
                  textAlign: it.align,
                  background: it.bg,
                  padding: 4,
                  whiteSpace: "pre-wrap",
                  overflow: "auto"
                },
                children: it.text
              });
            case "button":
              // Button inside FakeBox
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                onClick: function onClick() {
                  return runLink(it.url);
                },
                style: {
                  width: "100%",
                  height: "100%",
                  background: it.color,
                  color: it.textColor || "#ffffff",
                  borderRadius: it.radius,
                  fontFamily: it.font,
                  fontSize: it.size,
                  fontWeight: it.bold ? "bold" : "normal",
                  // Added bold style
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center"
                },
                children: it.text
              });
            case "image":
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                src: it.s3Url || "https://dummyimage.com/".concat(w, "x").concat(h, "/eee/aaa&text=img"),
                crossOrigin: "anonymous" // FIX: Added for consistency with measureImageDimensions
                ,
                onError: function onError(e) {
                  return e.target.src = "https://dummyimage.com/".concat(w, "x").concat(h, "/eee/aaa&text=Error");
                },
                onClick: function onClick() {
                  return runLink(it.url);
                },
                style: {
                  width: "100%",
                  height: "100%",
                  borderRadius: it.radius || 0,
                  cursor: it.url ? "pointer" : "default",
                  objectFit: "cover"
                },
                alt: it.text || "Image in FakeBox"
              });
            case "video":
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
                src: it.s3Url || "",
                onError: function onError() {
                  return alert("Error loading video in FakeBox");
                },
                style: {
                  width: "100%",
                  height: "100%",
                  objectFit: "cover"
                },
                controls: true,
                autoPlay: true,
                playsInline: true
              });
            case "gallery":
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                style: {
                  width: "100%",
                  height: "100%",
                  display: "flex",
                  gap: it.gap,
                  overflowX: "auto",
                  scrollbarWidth: "none",
                  msOverflowStyle: "none",
                  touchAction: "pan-x",
                  cursor: "grab"
                },
                onMouseDown: function onMouseDown(e) {
                  return startDrag(e.currentTarget, e.clientX);
                },
                onMouseMove: function onMouseMove(e) {
                  return moveDrag(e.currentTarget, e.clientX);
                },
                onMouseUp: function onMouseUp(e) {
                  return endDrag(e.currentTarget);
                },
                onMouseLeave: function onMouseLeave(e) {
                  return endDrag(e.currentTarget);
                },
                children: (it.images || []).map(function (g, idx) {
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                    src: g.s3Url || "https://dummyimage.com/80x60/eee/aaa&text=Item",
                    crossOrigin: "anonymous" // FIX: Added for consistency
                    ,
                    onError: function onError(e) {
                      return e.target.src = "https://dummyimage.com/80x60/eee/aaa&text=Error";
                    },
                    onClick: function onClick() {
                      return runLink(g.url);
                    },
                    style: {
                      height: it.imageH,
                      flexShrink: 0,
                      borderRadius: it.radius,
                      cursor: g.url ? "pointer" : "default",
                      objectFit: "cover"
                    },
                    alt: "Gallery image ".concat(idx + 1)
                  }, idx);
                })
              });
            case "container":
              // NEW
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                style: {
                  width: "100%",
                  height: "100%",
                  background: it.bgColor
                }
              });
            case "xbuttonClose":
              // NEW
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                onClick: function onClick() {
                  return setParentState(_objectSpread(_objectSpread({}, parentState), {}, {
                    activeFakeBox: {
                      id: null,
                      effect: "fade",
                      element: null
                    }
                  }));
                },
                style: {
                  width: "100%",
                  height: "100%",
                  borderRadius: "50%",
                  border: "2px solid ".concat(it.color),
                  color: it.color,
                  background: it.bgColor,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  fontSize: "20px",
                  cursor: "pointer",
                  userSelect: "none"
                },
                children: "\xD7"
              });
            default:
              return null;
          }
        }()
      }, it.id);
    })
  });
}
function Preview(_ref5) {
  var state = _ref5.state,
    setState = _ref5.setState,
    readOnly = _ref5.readOnly;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var activeFakeBox = safe.activeFakeBox || {
    id: null,
    effect: "fade",
    element: null
  };
  var commit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (id, patch) {
    return setState && setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc) {
        return sc === scr ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === id ? _objectSpread(_objectSpread({}, e), patch) : e;
          })
        }) : sc;
      })
    }));
  }, [safe, scr, setState]);
  var select = function select(id) {
    return !readOnly && (setState === null || setState === void 0 ? void 0 : setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: id
    })));
  };
  var runLink = function runLink(url) {
    return url && window.open(url, "_blank");
  };
  var _goto3 = function _goto3(idx) {
    return setState === null || setState === void 0 ? void 0 : setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: (idx !== null && idx !== void 0 ? idx : safe.current + 1) % safe.screens.length,
      selected: null,
      animKey: safe.animKey + 1,
      activeFakeBox: startState().activeFakeBox
    }));
  }; // Close fakebox on screen change

  var startDrag = function startDrag(el, x) {
    el.dataset.drag = "1";
    el.dataset.sx = x;
    el.dataset.sl = el.scrollLeft;
    el.style.cursor = "grabbing";
  };
  var moveDrag = function moveDrag(el, x) {
    if (el.dataset.drag !== "1") return;
    el.scrollLeft = Number(el.dataset.sl) - (x - Number(el.dataset.sx));
  };
  var endDrag = function endDrag(el) {
    el.dataset.drag = "0";
    el.style.cursor = "grab";
  };
  var getAnimationName = function getAnimationName(effectName) {
    if (!effectName || effectName === "none") return "none";
    var map = {
      fade: "fade",
      "zoom-in": "zoomIn",
      "zoom-out": "zoomOut",
      "slide-left": "slideL",
      "slide-right": "slideR",
      "slide-up": "slideU",
      "slide-down": "slideD",
      rotate: "rotateK",
      flip: "flipK"
    };
    return map[effectName] || "none";
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      dangerouslySetInnerHTML: {
        __html: "\n          @keyframes delayAppear { to { visibility: visible; } }\n          @keyframes fade {0%{opacity:0;visibility:hidden} 1%{visibility:visible} 100%{opacity:1;visibility:visible}}\n          @keyframes zoomIn {0%{opacity:0;transform:scale(.8);visibility:hidden} 1%{visibility:visible} 100%{opacity:1;transform:scale(1);visibility:visible}}\n          @keyframes zoomOut {0%{opacity:0;transform:scale(1.2);visibility:hidden} 1%{visibility:visible} 100%{opacity:1;transform:scale(1);visibility:visible}}\n          @keyframes slideL {0%{opacity:0;transform:translateX(100%);visibility:hidden} 1%{visibility:visible} 100%{opacity:1;transform:translateX(0);visibility:visible}}\n          @keyframes slideR {0%{opacity:0;transform:translateX(-100%);visibility:hidden} 1%{visibility:visible} 100%{opacity:1;transform:translateX(0);visibility:visible}}\n          @keyframes slideU {0%{opacity:0;transform:translateY(100%);visibility:hidden} 1%{visibility:visible} 100%{opacity:1;transform:translateY(0);visibility:visible}}\n          @keyframes slideD {0%{opacity:0;transform:translateY(-100%);visibility:hidden} 1%{visibility:visible} 100%{opacity:1;transform:translateY(0);visibility:visible}}\n          @keyframes rotateK {0%{opacity:0;transform:perspective(400px) rotateY(90deg);visibility:hidden} 1%{visibility:visible} 100%{opacity:1;transform:perspective(400px) rotateY(0deg);visibility:visible}}\n          @keyframes flipK {0%{opacity:0;transform:perspective(400px) rotateX(90deg);visibility:hidden} 1%{visibility:visible} 100%{opacity:1;transform:perspective(400px) rotateX(0deg);visibility:visible}}\n          .hide-scroll::-webkit-scrollbar { display: none; } .hide-scroll { -ms-overflow-style: none; scrollbar-width: none; }\n      "
      }
    }), !(activeFakeBox && activeFakeBox.id) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      // For screen transitions
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: safe.bg,
        position: "relative",
        animationName: getAnimationName(safe.transition),
        animationDuration: "0.35s",
        animationFillMode: "forwards"
      },
      children: ((scr === null || scr === void 0 ? void 0 : scr.elements) || []).map(function (el) {
        var currentAnimationName = getAnimationName(el.effect);
        var animationDuration = currentAnimationName === "rotateK" || currentAnimationName === "flipK" ? "0.4s" : "0.35s";
        var animationDivKey = "".concat(el.id, "-").concat(currentAnimationName, "-").concat(el.delay || 0, "-").concat(safe.animKey);
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly,
          enableResizing: !readOnly,
          onDragStop: function onDragStop(_, d) {
            return commit(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            return commit(el.id, {
              w: ref.offsetWidth,
              h: ref.offsetHeight,
              x: pos.x,
              y: pos.y
            });
          },
          onClick: function onClick(e) {
            e.stopPropagation();
            select(el.id);
          },
          style: {
            outline: safe.selected === el.id ? "2px solid #3b82f6" : "none",
            cursor: readOnly ? "default" : "move"
          },
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            style: {
              width: "100%",
              height: "100%",
              opacity: currentAnimationName !== "none" ? 0 : 1,
              visibility: currentAnimationName !== "none" ? "hidden" : "visible",
              animationName: currentAnimationName,
              animationDuration: animationDuration,
              animationTimingFunction: "ease",
              animationDelay: "".concat(el.delay || 0, "s"),
              animationFillMode: "forwards",
              animationIterationCount: 1
            },
            children: [el.type === "title" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                color: el.props.color,
                fontSize: el.props.size,
                fontFamily: el.props.font,
                fontWeight: el.props.bold ? "bold" : "normal"
              },
              className: "w-full h-full flex items-center justify-center text-center p-1",
              children: el.props.text
            }), el.type === "subtitle" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                color: el.props.color,
                fontSize: el.props.size,
                fontFamily: el.props.font,
                fontWeight: el.props.bold ? "bold" : "normal"
              },
              className: "w-full h-full flex items-center justify-center text-center p-1",
              children: el.props.text
            }), el.type === "textbox" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                color: el.props.color,
                fontSize: el.props.size,
                fontFamily: el.props.font,
                fontWeight: el.props.bold ? "bold" : "normal",
                textAlign: el.props.align,
                background: el.props.bg,
                whiteSpace: "pre-wrap",
                overflowY: "auto",
                padding: 4
              },
              className: "w-full h-full hide-scroll",
              children: el.props.text
            }), el.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
              onClick: function onClick() {
                if (el.props.action === "next") _goto3(el.props.target);else if (el.props.action === "openFakeBox" && el.props.targetFakeBoxId) {
                  var targetFbElement = scr.elements.find(function (e) {
                    return e.id === el.props.targetFakeBoxId && e.type === "fakeBox";
                  });
                  if (targetFbElement) {
                    setState(_objectSpread(_objectSpread({}, safe), {}, {
                      activeFakeBox: {
                        id: el.props.targetFakeBoxId,
                        effect: el.props.fakeBoxOpenEffect || "fade",
                        element: targetFbElement
                      },
                      selected: null
                    }));
                  } else {
                    console.warn("Target FakeBox not found:", el.props.targetFakeBoxId);
                  }
                } else runLink(el.props.url);
              },
              style: {
                background: el.props.color,
                color: el.props.textColor || "#ffffff",
                borderRadius: el.props.radius,
                fontFamily: el.props.font,
                fontSize: el.props.size
              },
              className: "w-full h-full flex items-center justify-center",
              children: el.props.text
            }), el.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
              src: el.props.s3Url || "https://dummyimage.com/".concat(el.w || 100, "x").concat(el.h || 100, "/eee/aaa&text=Image"),
              crossOrigin: "anonymous" // FIX: Added for consistency
              ,
              onError: function onError(e) {
                return e.target.src = "https://dummyimage.com/".concat(el.w || 100, "x").concat(el.h || 100, "/eee/aaa&text=Error");
              },
              onClick: function onClick() {
                return runLink(el.props.url);
              },
              style: {
                borderRadius: el.props.radius,
                cursor: el.props.url ? "pointer" : "default"
              },
              className: "w-full h-full object-cover",
              alt: el.props.text || "Image"
            }), el.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
              src: el.props.s3Url || "",
              onError: function onError() {
                return alert("Video load error");
              },
              className: "w-full h-full object-cover",
              controls: true,
              autoPlay: true,
              playsInline: true
            }), el.type === "gallery" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                display: "flex",
                gap: el.props.gap,
                overflowX: "auto",
                height: "100%",
                scrollbarWidth: "none",
                touchAction: "pan-x",
                cursor: "grab"
              },
              className: "w-full hide-scroll",
              onMouseDown: function onMouseDown(e) {
                return startDrag(e.currentTarget, e.clientX);
              },
              onMouseMove: function onMouseMove(e) {
                return moveDrag(e.currentTarget, e.clientX);
              },
              onMouseUp: function onMouseUp(e) {
                return endDrag(e.currentTarget);
              },
              onMouseLeave: function onMouseLeave(e) {
                return endDrag(e.currentTarget);
              },
              children: el.props.images.map(function (img, idx) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                  src: img.s3Url || "https://dummyimage.com/80x60/eee/aaa&text=Item",
                  crossOrigin: "anonymous" // FIX: Added for consistency
                  ,
                  onError: function onError(e) {
                    return e.target.src = "https://dummyimage.com/80x60/eee/aaa&text=Error";
                  },
                  onClick: function onClick() {
                    return runLink(img.url);
                  },
                  style: {
                    height: el.props.imageH,
                    flexShrink: 0,
                    borderRadius: el.props.radius,
                    cursor: img.url ? "pointer" : "default",
                    objectFit: "cover"
                  },
                  alt: "Gallery image ".concat(idx + 1)
                }, idx);
              })
            }), el.type === "fakeBox" &&
            /*#__PURE__*/
            // Render normal FakeBox (non-modal)
            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              className: "hide-scroll",
              style: {
                position: "relative",
                width: "100%",
                height: "100%",
                overflow: "auto",
                background: el.props.bg,
                borderRadius: el.props.radius,
                padding: el.props.padding
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderFakeBoxContent, {
                fakeBoxElement: el,
                isModalActive: false,
                parentState: safe,
                setParentState: setState,
                "goto": _goto3,
                runLink: runLink,
                readOnly: readOnly,
                commitToParent: commit
              })
            }), el.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              onClick: function onClick() {
                return _goto3(el.props.target);
              },
              style: {
                borderRadius: "50%",
                border: "2px solid ".concat(el.props.color),
                color: el.props.color,
                background: el.props.bgColor || "transparent",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: "20px",
                cursor: "pointer",
                width: "100%",
                height: "100%",
                userSelect: "none"
              },
              children: "\xD7"
            }), el.type === "messageButton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MessageButtonEl, {
              el: el,
              runLink: runLink,
              "goto": _goto3
            })]
          }, animationDivKey)
        }, el.id);
      })
    }, safe.animKey), activeFakeBox && activeFakeBox.id && activeFakeBox.element && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: {
        position: "fixed",
        top: 0,
        left: 0,
        width: "100vw",
        height: "100vh",
        background: "rgba(0,0,0,0.6)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 10000,
        animationName: getAnimationName(activeFakeBox.effect),
        animationDuration: "0.35s",
        animationFillMode: "forwards"
      },
      onClick: function onClick() {
        return setState(_objectSpread(_objectSpread({}, safe), {}, {
          activeFakeBox: {
            id: null,
            effect: "fade",
            element: null
          }
        }));
      } // Click backdrop to close
      ,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        // FakeBox Content Area
        style: {
          width: meta.canvas.w,
          // Changed to occupy 100% of canvas width
          height: meta.canvas.h,
          // Changed to occupy 100% of canvas height
          position: "relative",
          background: activeFakeBox.element.props.bg,
          borderRadius: activeFakeBox.element.props.radius,
          padding: activeFakeBox.element.props.padding,
          overflow: "hidden",
          // Outer container for modal does not scroll
          boxShadow: "0 10px 25px rgba(0,0,0,0.3)"
        },
        className: "hide-scroll",
        onClick: function onClick(e) {
          return e.stopPropagation();
        } // Prevent closing when clicking content
        ,
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          style: {
            width: "100%",
            height: "100%",
            overflowY: "auto"
          },
          className: "hide-scroll",
          children: [" ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderFakeBoxContent, {
            fakeBoxElement: activeFakeBox.element,
            isModalActive: true,
            parentState: safe,
            setParentState: setState,
            "goto": _goto3,
            runLink: runLink,
            readOnly: readOnly,
            commitToParent: commit
          })]
        })
      })
    }, "active-fb-".concat(activeFakeBox.id, "-").concat(activeFakeBox.effect))]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */
// (Serialize and Deserialize functions remain largely the same, new props are primitive types and handled by spread)

function serialize(currentState) {
  if (!currentState || !currentState.screens || !Array.isArray(currentState.screens)) {
    console.warn("Serialize: Invalid or empty state provided.", currentState);
    return _objectSpread(_objectSpread({}, startState()), {}, {
      _thumbnailHintUrl: null,
      selected: null,
      activeFakeBox: startState().activeFakeBox
    });
  }
  var bestThumbnailUrl = null;
  var findS3UrlForThumbnail = function findS3UrlForThumbnail(s3Url) {
    if (!bestThumbnailUrl && s3Url && typeof s3Url === "string" && s3Url.trim() !== "") {
      if (s3Url.match(/\.(jpeg|jpg|gif|png|webp|svg)$/i)) bestThumbnailUrl = s3Url;else if (!bestThumbnailUrl && s3Url.match(/\.(mp4|webm|ogg)$/i)) bestThumbnailUrl = s3Url;
    }
  };
  var screensToPersist = currentState.screens.map(function (sc) {
    if (!sc || !Array.isArray(sc.elements)) return _objectSpread(_objectSpread({}, sc), {}, {
      elements: []
    });
    var elementsToPersist = sc.elements.map(function (el) {
      var newEl = _objectSpread({}, el);
      var newProps = _objectSpread({}, el.props);
      if (el.type === "image" || el.type === "video") {
        findS3UrlForThumbnail(newProps.s3Url);
        var assetLoading = newProps.assetLoading,
          assetError = newProps.assetError,
          file = newProps.file,
          src = newProps.src,
          persistentProps = _objectWithoutProperties(newProps, _excluded);
        newEl.props = persistentProps;
      } else if (el.type === "gallery") {
        newProps.images = (newProps.images || []).map(function (img) {
          findS3UrlForThumbnail(img.s3Url);
          var assetLoading = img.assetLoading,
            assetError = img.assetError,
            file = img.file,
            src = img.src,
            persistentImgProps = _objectWithoutProperties(img, _excluded2);
          return persistentImgProps;
        });
        newEl.props = newProps;
      } else if (el.type === "fakeBox" && newProps.items) {
        newProps.items = (newProps.items || []).map(function (originalItemState) {
          // originalItemState is an item from current fakeBox.props.items state
          if (originalItemState.type === "image" || originalItemState.type === "video") {
            findS3UrlForThumbnail(originalItemState.s3Url);
            // Destructure to remove transient props and keep only persistent ones
            var _assetLoading = originalItemState.assetLoading,
              _assetError = originalItemState.assetError,
              _file = originalItemState.file,
              _src = originalItemState.src,
              _persistentProps = _objectWithoutProperties(originalItemState, _excluded3);
            return _persistentProps; // Return the cleaned item
          } else if (originalItemState.type === "gallery" && originalItemState.images) {
            var persistentGalleryImages = (originalItemState.images || []).map(function (gImg) {
              findS3UrlForThumbnail(gImg.s3Url);
              var assetLoading = gImg.assetLoading,
                assetError = gImg.assetError,
                file = gImg.file,
                src = gImg.src,
                persistentGImgProps = _objectWithoutProperties(gImg, _excluded4);
              return persistentGImgProps; // Return cleaned image object for the gallery
            });
            // Return the gallery item with its 'images' array cleaned
            return _objectSpread(_objectSpread({}, originalItemState), {}, {
              images: persistentGalleryImages
            });
          }
          // For other item types within fakeBox, return them as is
          return originalItemState;
        });
        newEl.props = newProps; // newProps now contains items with cleaned asset props
      }
      return newEl;
    });
    return _objectSpread(_objectSpread({}, sc), {}, {
      elements: elementsToPersist
    });
  });
  var dataToSave = _objectSpread(_objectSpread({}, currentState), {}, {
    selected: null,
    animKey: currentState.animKey || 0,
    screens: screensToPersist,
    activeFakeBox: startState().activeFakeBox
  });
  return _objectSpread(_objectSpread({}, dataToSave), {}, {
    _thumbnailHintUrl: bestThumbnailUrl
  });
}
var deserialize = function deserialize() {
  var backendData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  if (backendData && backendData.screens && Array.isArray(backendData.screens)) {
    var deserializedScreens = backendData.screens.map(function (screen) {
      if (!screen || !Array.isArray(screen.elements)) return _objectSpread(_objectSpread({}, screen), {}, {
        elements: []
      });
      return _objectSpread(_objectSpread({}, screen), {}, {
        elements: screen.elements.map(function (el) {
          var newEl = _objectSpread({}, el);
          var newProps = _objectSpread({}, el.props);
          if (el.type === "image" || el.type === "video") {
            newProps = _objectSpread({
              s3Url: newProps.s3Url || "",
              assetLoading: false,
              assetError: null,
              assetDims: newProps.assetDims || null
            }, newProps);
          } else if (el.type === "gallery" && newProps.images) {
            newProps.images = (newProps.images || []).map(function (img) {
              return _objectSpread({
                s3Url: img.s3Url || "",
                assetLoading: false,
                assetError: null,
                assetDims: img.assetDims || null
              }, img);
            });
          } else if (el.type === "fakeBox" && newProps.items) {
            newProps.items = (newProps.items || []).map(function (item) {
              var newItem = _objectSpread({}, item);
              if (item.type === "image" || item.type === "video") {
                newItem = _objectSpread({
                  s3Url: item.s3Url || "",
                  assetLoading: false,
                  assetError: null,
                  assetDims: item.assetDims || null
                }, item);
              } else if (item.type === "gallery" && item.images) {
                newItem.images = (item.images || []).map(function (gImg) {
                  return _objectSpread({
                    s3Url: gImg.s3Url || "",
                    assetLoading: false,
                    assetError: null,
                    assetDims: gImg.assetDims || null
                  }, gImg);
                });
              }
              return newItem;
            });
          }
          newEl.props = newProps;
          return newEl;
        })
      });
    });
    return _objectSpread(_objectSpread(_objectSpread({}, startState()), backendData), {}, {
      selected: null,
      animKey: backendData.animKey || 0,
      screens: deserializedScreens,
      activeFakeBox: startState().activeFakeBox
    });
  }
  return startState();
};

/***/ }),

/***/ "./templates/playableAds.js":
/*!**********************************!*\
  !*** ./templates/playableAds.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// templates/turnOverEmbed.js
 // Kept as original had "// Added useState", though not directly used in the refactored parts below.

/* ───────────────── template meta ───────────────── */

var meta = {
  id: "playable-ads",
  name: "Playable Ads",
  description: "Displays an embeddable URL in the canvas.",
  canvas: {
    w: 375,
    h: 647
  } // Default canvas size for the embed
};

/* ───────────────── Editor (left-side controls) ───────────────── */
function Editor(_ref) {
  var state = _ref.state,
    setState = _ref.setState;
  var handleUrlChange = function handleUrlChange(e) {
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        embedUrl: e.target.value
      });
    });
  };

  // Basic check for URL format
  var isValidUrl = function isValidUrl(url) {
    if (!url) return false;
    return url.startsWith("https://") || url.startsWith("https://");
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div", {
    className: "space-y-4",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div", {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("label", {
        htmlFor: "embedUrlInput",
        className: "block text-sm font-medium text-gray-700",
        children: "Embed URL"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("input", {
        type: "url",
        id: "embedUrlInput",
        className: "mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm",
        placeholder: "https://example.com/embed",
        value: (state === null || state === void 0 ? void 0 : state.embedUrl) || "",
        onChange: handleUrlChange,
        "aria-describedby": "embedUrlHelp"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div", {
        id: "embedUrlHelp",
        className: "mt-2 text-xs text-gray-500",
        children: [(state === null || state === void 0 ? void 0 : state.embedUrl) && !isValidUrl(state.embedUrl) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("p", {
          className: "text-red-500",
          children: "Please enter a valid URL (e.g., starting with https:// or https://)."
        }), (state === null || state === void 0 ? void 0 : state.embedUrl) && isValidUrl(state.embedUrl) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("p", {
          children: "Ensure the provided URL allows embedding. Some sites may restrict embedding (e.g., via X-Frame-Options header)."
        }), !(state !== null && state !== void 0 && state.embedUrl) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("p", {
          children: "Paste the URL of the content you want to embed (e.g., a game, video, or interactive content)."
        })]
      })]
    })
  });
}

/* ───────────────── Preview (live + read-only) ───────────────── */
function Preview(_ref2) {
  var state = _ref2.state,
    readOnly = _ref2.readOnly;
  var _ref3 = state !== null && state !== void 0 ? state : {},
    embedUrl = _ref3.embedUrl;
  var W = meta.canvas.w;
  var H = meta.canvas.h;
  var isValidPreviewUrl = embedUrl && (embedUrl.startsWith("https://") || embedUrl.startsWith("https://"));
  if (!isValidPreviewUrl) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div", {
      style: {
        width: W,
        height: H
      },
      className: "flex items-center justify-center border border-dashed border-gray-300 bg-gray-50 text-center p-4",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("p", {
        className: "text-sm text-gray-500",
        children: embedUrl ? "The provided URL is not valid for embedding. Please enter a full URL starting with https:// or https://." : "Enter an embed URL in the editor to see the preview here."
      })
    });
  }
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div", {
    className: "relative",
    style: {
      width: W,
      height: H,
      overflow: "hidden",
      background: "#f0f0f0" /* Fallback background */
    },
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("iframe", {
      src: embedUrl,
      width: W,
      height: H,
      style: {
        border: "none",
        display: "block" /* Removes extra space below iframe */
      },
      allowFullScreen: true
      // Sandbox attributes are crucial for security. Adjust based on trust level of embed sources.
      // For a known source like 'branded.mini-games.io', which likely needs full functionality:
      ,
      sandbox: "allow-scripts allow-same-origin allow-forms allow-popups allow-presentation allow-modals"
      // For more generic user-input URLs where trust is lower, a stricter sandbox might be:
      // sandbox="allow-scripts allow-popups allow-popups-to-escape-sandbox"
      ,
      title: "Embedded Content Preview" // Important for accessibility
    })
  });
}

/* ───────────────── persistence helpers ───────────────── */

/* ---- serialize: state now contains the embed URL ---- */
function serialize() {
  return _serialize.apply(this, arguments);
}

/* ---- deserialize with full fallbacks ---- */
function _serialize() {
  _serialize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
    var _state$embedUrl;
    var state,
      _args = arguments;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          state = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          return _context.a(2, {
            embedUrl: (_state$embedUrl = state.embedUrl) !== null && _state$embedUrl !== void 0 ? _state$embedUrl : ""
          });
      }
    }, _callee);
  }));
  return _serialize.apply(this, arguments);
}
var deserialize = function deserialize() {
  var dataFromBackend = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  // Reconstructs state from backend data.
  // Spreading dataFromBackend ensures any other properties are preserved if the backend sends more than just embedUrl.
  return _objectSpread(_objectSpread({}, dataFromBackend), {}, {
    embedUrl: dataFromBackend.embedUrl || "" // Ensure embedUrl is correctly sourced or defaulted
  });
};

/***/ }),

/***/ "./templates/pophover.js":
/*!*******************************!*\
  !*** ./templates/pophover.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _excluded = ["hidden"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* Pop Hover – footer-image promo with CTA (v3.1)
   --------------------------------------------- 
   Modified for S3/Backend File Handling & Thumbnail Hint
*/


 // Added useState, useEffect

// --- S3/Backend Integration: Global Setup ---

var API_BASE_URL = "https://localhost:3001" || 0;
var getAuthToken = function getAuthToken() {
  if (typeof window !== "undefined") {
    return localStorage.getItem("jwt");
  }
  return null;
};
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(fileObject) {
    var formData, token, headers, response, errorData, result, _t3, _t4;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          formData = new FormData();
          formData.append("assetFile", fileObject);
          _context2.p = 1;
          token = getAuthToken();
          headers = {};
          if (token) {
            headers["Authorization"] = "Bearer ".concat(token);
          }
          _context2.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData,
            headers: headers
          });
        case 2:
          response = _context2.v;
          if (response.ok) {
            _context2.n = 7;
            break;
          }
          _context2.p = 3;
          _context2.n = 4;
          return response.json();
        case 4:
          errorData = _context2.v;
          _context2.n = 6;
          break;
        case 5:
          _context2.p = 5;
          _t3 = _context2.v;
          errorData = {
            message: "Upload failed: ".concat(response.statusText || response.status)
          };
        case 6:
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 7:
          _context2.n = 8;
          return response.json();
        case 8:
          result = _context2.v;
          if (result.url) {
            _context2.n = 9;
            break;
          }
          throw new Error("Upload successful, but no URL was returned from the backend.");
        case 9:
          return _context2.a(2, result.url);
        case 10:
          _context2.p = 10;
          _t4 = _context2.v;
          console.error("Error uploading file to backend:", _t4);
          if (!(_t4 instanceof Error)) {
            _context2.n = 11;
            break;
          }
          throw _t4;
        case 11:
          throw new Error(String(_t4 || "An unknown error occurred during file upload."));
        case 12:
          return _context2.a(2);
      }
    }, _callee2, null, [[3, 5], [1, 10]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
function measureImageDimensions(_x2) {
  return _measureImageDimensions.apply(this, arguments);
} // --- End S3/Backend Integration: Global Setup ---
/* ---------- meta ---------- */
function _measureImageDimensions() {
  _measureImageDimensions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(s3Url) {
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          return _context3.a(2, new Promise(function (resolve, reject) {
            var img = new Image();
            img.onload = function () {
              resolve({
                width: img.naturalWidth,
                height: img.naturalHeight
              });
            };
            img.onerror = function (err) {
              console.error("Error loading image for measurement:", s3Url, err);
              reject(new Error("Could not load image to measure dimensions. Check S3 URL and CORS policy."));
            };
            img.crossOrigin = "anonymous";
            img.src = s3Url;
          }));
      }
    }, _callee3);
  }));
  return _measureImageDimensions.apply(this, arguments);
}
var meta = {
  id: "pop-hover",
  name: "Pop Hover",
  description: "Footer image + CTA button with dismiss (×) — drag, style & one-shot anims",
  canvas: {
    w: 378,
    h: 628
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'"];
var BTN_EFFECTS = ["solid", "shiny-gold", "sunrise", "ocean", "neon", "glass", "inset", "pulse", "metallic", "rainbow", "retro"];
var buttonStyle = function buttonStyle(btn) {
  var base = {
    borderRadius: btn.radius,
    fontFamily: btn.font,
    fontSize: btn.size,
    fontWeight: btn.bold ? "bold" : "normal",
    color: btn.textColor,
    animationFillMode: "forwards",
    animationIterationCount: 1
  };
  switch (btn.effect) {
    case "shiny-gold":
      return _objectSpread(_objectSpread({}, base), {}, {
        position: "relative",
        overflow: "hidden",
        background: "linear-gradient(135deg,rgb(245, 210, 94) 0%, #f5d76e 25%, #e6b800 50%,rgb(242, 230, 194) 75%,rgb(247, 213, 91) 100%)",
        boxShadow: "0 2px 6px rgba(0,0,0,.18)"
      });
    case "sunrise":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "linear-gradient(135deg,#ff512f 0%,#f09819 100%)"
      });
    case "ocean":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "linear-gradient(135deg,#2BC0E4 0%,#1B93C5 100%)"
      });
    case "neon":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "#0aff9d",
        color: "#0d0d0d",
        textShadow: "0 0 6px #0aff9d"
      });
    case "glass":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "rgba(255,255,255,.25)",
        backdropFilter: "blur(6px)",
        border: "1px solid rgba(255,255,255,.45)"
      });
    case "inset":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: btn.color,
        boxShadow: "inset 0 2px 4px rgba(0,0,0,.3)"
      });
    case "pulse":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: btn.color || "#2563eb",
        animation: "pulse-btn 1.6s ease-in-out 1 forwards"
      });
    case "metallic":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "linear-gradient(135deg,#d7d7d7 0%,#b0b0b0 20%,#f5f5f5 50%,#b0b0b0 80%,#d7d7d7 100%)",
        color: "#222"
      });
    case "rainbow":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "linear-gradient(90deg,#ff0000 0%,#ff7f00 14%,#ffff00 28%,#00ff00 42%,#0000ff 57%,#4b0082 71%,#9400d3 85%,#ff0000 100%)",
        backgroundSize: "400% 100%",
        animation: "rainbow-shift 3s linear 1 forwards"
      });
    case "retro":
      return _objectSpread(_objectSpread({}, base), {}, {
        background: "#ff6f61",
        boxShadow: "4px 4px 0 #222",
        fontFamily: "'Press Start 2P', monospace"
      });
    default:
      return _objectSpread(_objectSpread({}, base), {}, {
        background: btn.color
      });
  }
};
var IMG_ANIMS = ["none", "bounce-up", "bounce", "spin", "shake", "fade-in", "zoom-in", "zoom-out", "flip", "slide-up", "slide-down"];
var startState = function startState() {
  return {
    bg: "#ffffff",
    selected: null,
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }]
  };
};
var newElement = function newElement(type) {
  var baseY = meta.canvas.h - 140;
  var base = {
    id: crypto.randomUUID(),
    type: type,
    x: 10,
    y: baseY,
    w: 140,
    h: 80,
    hidden: false // Initialize hidden state
  };
  switch (type) {
    case "image":
      return _objectSpread(_objectSpread({}, base), {}, {
        h: 100,
        props: {
          s3Url: "",
          imageLoading: false,
          imageError: null,
          imageDims: null,
          radiusTop: 4,
          url: "",
          anim: "none"
        }
      });
    case "button":
      return _objectSpread(_objectSpread({}, base), {}, {
        y: baseY - 50,
        h: 40,
        w: 200,
        props: {
          text: "Learn more",
          color: "#2563eb",
          textColor: "#ffffff",
          bold: false,
          font: "Arial",
          size: 16,
          radius: 8,
          url: "",
          effect: "solid"
        }
      });
    case "xbutton":
      return _objectSpread(_objectSpread({}, base), {}, {
        x: meta.canvas.w - 42,
        y: 10,
        w: 32,
        h: 32,
        props: {
          color: "rgba(0,0,0,.8)",
          bg: "transparent"
        }
      });
    default:
      return base;
  }
};

/* ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens && state.screens.length > 0 ? state : startState();
  var scr = safe.screens[0];
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });
  var patchSel = function patchSel(fn) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === safe.selected ? fn(e) : e;
          })
        }) : sc;
      })
    }));
  };
  var delSel = function delSel() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.filter(function (e) {
            return e.id !== safe.selected;
          })
        }) : sc;
      })
    }));
  };
  var add = function add(t) {
    var newElem = newElement(t);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: newElem.id,
      screens: safe.screens.map(function (sc, i) {
        return i === 0 ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newElem])
        }) : sc;
      })
    }));
  };
  var handleImageFileChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(event) {
      var _event$target$files;
      var file, s3Url, dimensions, _t, _t2;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];
            if (!(!file || !sel || sel.type !== "image")) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            patchSel(function (currentElement) {
              return _objectSpread(_objectSpread({}, currentElement), {}, {
                props: _objectSpread(_objectSpread({}, currentElement.props), {}, {
                  imageLoading: true,
                  imageError: null,
                  s3Url: "",
                  imageDims: null
                })
              });
            });
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file);
          case 3:
            s3Url = _context.v;
            dimensions = null;
            if (!file.type.startsWith("image/")) {
              _context.n = 7;
              break;
            }
            _context.p = 4;
            _context.n = 5;
            return measureImageDimensions(s3Url);
          case 5:
            dimensions = _context.v;
            _context.n = 7;
            break;
          case 6:
            _context.p = 6;
            _t = _context.v;
            console.warn("Could not measure image dimensions:", _t.message);
          case 7:
            patchSel(function (currentElement) {
              return _objectSpread(_objectSpread({}, currentElement), {}, {
                props: _objectSpread(_objectSpread({}, currentElement.props), {}, {
                  s3Url: s3Url,
                  imageDims: dimensions,
                  imageLoading: false
                })
              });
            });
            _context.n = 9;
            break;
          case 8:
            _context.p = 8;
            _t2 = _context.v;
            patchSel(function (currentElement) {
              return _objectSpread(_objectSpread({}, currentElement), {}, {
                props: _objectSpread(_objectSpread({}, currentElement.props), {}, {
                  imageLoading: false,
                  imageError: _t2.message || "Upload failed. Please try again."
                })
              });
            });
          case 9:
            return _context.a(2);
        }
      }, _callee, null, [[4, 6], [2, 8]]);
    }));
    return function handleImageFileChange(_x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Canvas\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "flex flex-wrap gap-2",
      children: ["image", "button", "xbutton"].map(function (t) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          onClick: function onClick() {
            return add(t);
          },
          className: "btn",
          children: [" ", "+ ", t, " "]
        }, t);
      })
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex justify-between items-center",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "capitalize font-medium",
          children: sel.type
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          onClick: delSel,
          className: "text-red-600 hover:text-red-800",
          children: [" ", "delete", " "]
        })]
      }), sel.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Upload Image Asset:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*",
          disabled: sel.props.imageLoading,
          onChange: handleImageFileChange,
          className: "block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 disabled:opacity-50"
        }), sel.props.imageLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-blue-500 italic mt-1",
          children: "Uploading..."
        }), sel.props.imageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
          className: "text-xs text-red-500 italic mt-1",
          children: ["Error: ", sel.props.imageError]
        }), sel.props.s3Url && !sel.props.imageLoading && !sel.props.imageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "mt-2 p-2 border border-gray-200 rounded",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
            className: "text-xs font-semibold",
            children: "Current Asset:"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.s3Url,
            alt: "Uploaded preview",
            style: {
              maxWidth: "100px",
              maxHeight: "100px",
              border: "1px solid #ccc",
              objectFit: "contain",
              marginTop: "4px"
            }
          }), sel.props.imageDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-gray-500 mt-1",
            children: ["Dimensions: ", sel.props.imageDims.width, " x", " ", sel.props.imageDims.height, " px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-2",
          children: "Image Click-through URL (optional):"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          className: "border w-full px-1 mt-1 text-xs rounded",
          placeholder: "https://example.com/your-link",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: ["Top-radius\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "60",
            value: sel.props.radiusTop,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radiusTop: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16 rounded"
          }), " ", "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block font-medium mt-1",
          children: ["Animation\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            value: sel.props.anim,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    anim: e.target.value
                  })
                });
              });
            },
            className: "border w-full rounded text-xs p-1",
            children: IMG_ANIMS.map(function (a) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
                value: a,
                children: [" ", a, " "]
              }, a);
            })
          })]
        })]
      }), sel.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Button Text:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 rounded"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1 text-sm font-medium",
          children: ["Effect\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            value: sel.props.effect,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    effect: e.target.value
                  })
                });
              });
            },
            className: "border w-full rounded text-xs p-1",
            children: BTN_EFFECTS.map(function (ef) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
                value: ef,
                children: [" ", ef, " "]
              }, ef);
            })
          })]
        }), ["solid", "inset", "pulse"].includes(sel.props.effect) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: [" ", "Background\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          }), " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: [" ", "Text colour\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.textColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textColor: e.target.value
                  })
                });
              });
            }
          }), " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: [" ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold: e.target.checked
                  })
                });
              });
            }
          }), " ", "Bold", " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1 text-sm font-medium",
          children: ["Font:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            value: sel.props.font,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    font: e.target.value
                  })
                });
              });
            },
            className: "border w-full mt-0.5 rounded text-xs p-1",
            children: FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
                value: f,
                children: [" ", f.replace(/'/g, ""), " "]
              }, f);
            })
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-2 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: [" ", "Size\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "40",
              value: sel.props.size,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      size: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16 rounded"
            }), " ", "px", " "]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: [" ", "Radius\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              max: "30",
              value: sel.props.radius,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      radius: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16 rounded"
            }), " ", "px", " "]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Button Click-through URL:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          className: "border w-full px-1 mt-0.5 rounded",
          placeholder: "https://\u2026",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          }
        })]
      }), sel.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-2",
          children: [" ", "Border / icon\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          }), " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-2 mt-1",
          children: [" ", "Background\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bg,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bg: e.target.value
                  })
                });
              });
            }
          }), " "]
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500 italic",
      children: "Click an element on the canvas to edit its properties."
    })]
  });
}

/* ═════════════════════ PREVIEW ═════════════════════ */
function Preview(_ref3) {
  var _ref3$state = _ref3.state,
    state = _ref3$state === void 0 ? startState() : _ref3$state,
    setState = _ref3.setState,
    readOnly = _ref3.readOnly;
  var safe = state.screens && state.screens.length > 0 ? state : startState();
  var scr = safe.screens[0];
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    allElementsHiddenForDemo = _useState2[0],
    setAllElementsHiddenForDemo = _useState2[1];
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (readOnly) {
      setAllElementsHiddenForDemo(false);
    }
  }, [scr.id, scr.elements.length, readOnly]);
  var commit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (id, patch) {
    if (readOnly || !setState) return;
    setState === null || setState === void 0 || setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === id ? _objectSpread(_objectSpread({}, e), patch) : e;
          })
        }) : sc;
      })
    }));
  }, [safe, scr, setState, readOnly]);
  var selectElement = function selectElement(id) {
    if (!readOnly && setState) {
      setState(_objectSpread(_objectSpread({}, safe), {}, {
        selected: id
      }));
    }
  };
  var openUrl = function openUrl(url) {
    return url && window.open(url, "_blank");
  };
  var dismissAllElements = function dismissAllElements() {
    if (readOnly) {
      setAllElementsHiddenForDemo(true);
    }
  };
  var handleElementClick = function handleElementClick(e, el) {
    e.stopPropagation();
    if (!readOnly) {
      selectElement(el.id);
    } else {
      if (el.type === "xbutton") {
        dismissAllElements();
      } else if (el.props.url && (el.type === "button" || el.type === "image")) {
        openUrl(el.props.url);
      }
    }
  };
  var extraCss = "\n    @keyframes bounce-up{0%{transform:translateY(120%);visibility:visible;}60%{transform:translateY(-8%);}100%{transform:translateY(0);visibility:visible;}}\n    @keyframes bounce{0%,20%,50%,80%,100%{transform:translateY(0);visibility:visible;}40%{transform:translateY(-20%);}60%{transform:translateY(-10%);}}\n    @keyframes spin{from{transform:rotate(0);visibility:visible;}to{transform:rotate(360deg);visibility:visible;}}\n    @keyframes shake{0%{visibility:visible;}10%,90%{transform:translateX(-1px);}20%,80%{transform:translateX(2px);}30%,50%,70%{transform:translateX(-4px);}40%,60%{transform:translateX(4px);}}\n    @keyframes fade-in{from{opacity:0;visibility:visible;}to{opacity:1;visibility:visible;}}\n    @keyframes zoom-in{from{transform:scale(.6);opacity:.4;visibility:visible;}to{transform:scale(1);opacity:1;visibility:visible;}}\n    @keyframes zoom-out{from{transform:scale(1.4);opacity:.4;visibility:visible;}to{transform:scale(1);opacity:1;visibility:visible;}}\n    @keyframes flip{from{transform:rotateY(90deg);visibility:visible;}to{transform:rotateY(0);visibility:visible;}}\n    @keyframes slide-up{from{transform:translateY(120%);visibility:visible;}to{transform:translateY(0);visibility:visible;}}\n    @keyframes slide-down{from{transform:translateY(-120%);visibility:visible;}to{transform:translateY(0);visibility:visible;}}\n    @keyframes pulse-btn{0%{box-shadow:0 0 0 0 rgba(0,0,0,.4);}70%{box-shadow:0 0 0 9px rgba(0,0,0,0);}100%{box-shadow:0 0 0 0 rgba(0,0,0,0);}}\n    @keyframes rainbow-shift{0%{background-position:0 0;}100%{background-position:-400% 0;}}\n    .gold-reflect::before{content:\"\";position:absolute;top:0;left:-150%;width:50%;height:100%;background:rgba(255,255,255,.45);transform:skewX(-30deg);animation:goldFlash 1s linear 1 forwards;}\n    @keyframes goldFlash{0%{left:-150%;}100%{left:150%;}}\n  ";
  var imageBaseStyle = function imageBaseStyle(el) {
    var anim = el.props.anim;
    var hasAnim = anim !== "none";
    return {
      visibility: hasAnim ? "hidden" : "visible",
      animation: hasAnim ? "".concat(anim, " 1.1s ").concat(anim.includes("spin") ? "linear" : "ease", " 1 forwards") : undefined
    };
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      children: extraCss
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: safe.bg,
        position: "relative",
        overflow: "hidden"
      },
      onClick: function onClick() {
        return selectElement(null);
      } // Deselect on canvas click (only in editor)
      ,
      children: scr.elements.filter(function (el) {
        if (readOnly) {
          return !allElementsHiddenForDemo && !el.hidden;
        }
        return !el.hidden;
      }).map(function (el) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly,
          enableResizing: !readOnly // All elements resizable in editor
          ,
          onDragStop: function onDragStop(_, d) {
            return commit(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            return commit(el.id, {
              w: ref.offsetWidth,
              h: ref.offsetHeight,
              x: pos.x,
              y: pos.y
            });
          }
          // onClick on Rnd is removed; clicks are handled by inner elements
          ,
          style: {
            outline: safe.selected === el.id && !readOnly ? "2px solid #3b82f6" : "none",
            cursor: !readOnly ? "move" : el.props.url || el.type === "xbutton" ? "pointer" : "default"
          },
          children: [el.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: el.props.s3Url || "https://dummyimage.com/".concat(el.w || 300, "x").concat(el.h || 100, "/eee/aaa&text=Image"),
            alt: "User content ".concat(el.id),
            onClick: function onClick(e) {
              return handleElementClick(e, el);
            },
            style: _objectSpread({
              borderTopLeftRadius: el.props.radiusTop,
              borderTopRightRadius: el.props.radiusTop,
              width: "100%",
              height: "100%",
              objectFit: "cover"
            }, imageBaseStyle(el)),
            onError: function onError(e) {
              e.target.src = "https://dummyimage.com/".concat(el.w || 300, "x").concat(el.h || 100, "/eee/aaa&text=Error");
            }
          }), el.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
            onClick: function onClick(e) {
              return handleElementClick(e, el);
            },
            style: buttonStyle(el.props),
            className: "w-full h-full flex items-center justify-center select-none ".concat(el.props.effect === "shiny-gold" ? "gold-reflect" : ""),
            children: [" ", el.props.text, " "]
          }), el.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            onClick: function onClick(e) {
              return handleElementClick(e, el);
            },
            style: {
              borderRadius: "50%",
              border: "2px solid ".concat(el.props.color),
              color: el.props.color,
              background: el.props.bg,
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              fontSize: "20px",
              width: "100%",
              height: "100%",
              userSelect: "none"
            },
            children: [" ", "\xD7", " "]
          })]
        }, el.id);
      })
    })]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */
function serialize(currentState) {
  if (!currentState || !currentState.screens || !Array.isArray(currentState.screens) || currentState.screens.length === 0) {
    var _currentState$screens;
    console.warn("PopHover Serialize: Invalid state.", currentState);
    var defaultData = {
      bg: (currentState === null || currentState === void 0 ? void 0 : currentState.bg) || "#ffffff",
      selected: null,
      screens: [{
        id: (currentState === null || currentState === void 0 || (_currentState$screens = currentState.screens) === null || _currentState$screens === void 0 || (_currentState$screens = _currentState$screens[0]) === null || _currentState$screens === void 0 ? void 0 : _currentState$screens.id) || crypto.randomUUID(),
        elements: []
      }]
    };
    return _objectSpread(_objectSpread({}, defaultData), {}, {
      _thumbnailHintUrl: null
    });
  }
  var _currentState$screens2 = _slicedToArray(currentState.screens, 1),
    currentScreenFromState = _currentState$screens2[0];
  if (!currentScreenFromState || !Array.isArray(currentScreenFromState.elements)) {
    console.warn("PopHover Serialize: Invalid screen/elements.", currentScreenFromState);
    var screenToSerialize = _objectSpread({
      id: (currentScreenFromState === null || currentScreenFromState === void 0 ? void 0 : currentScreenFromState.id) || crypto.randomUUID(),
      elements: []
    }, currentScreenFromState && _typeof(currentScreenFromState) === "object" ? currentScreenFromState : {});
    screenToSerialize.elements = [];
    var dataWithProblematicScreen = _objectSpread(_objectSpread({}, currentState), {}, {
      selected: null,
      screens: [screenToSerialize]
    });
    return _objectSpread(_objectSpread({}, dataWithProblematicScreen), {}, {
      _thumbnailHintUrl: null
    });
  }
  var elementsToPersist = currentScreenFromState.elements.map(function (el) {
    var hidden = el.hidden,
      restOfEl = _objectWithoutProperties(el, _excluded); // Exclude 'hidden'
    if (restOfEl.type === "image") {
      var _restOfEl$props = restOfEl.props,
        s3Url = _restOfEl$props.s3Url,
        imageDims = _restOfEl$props.imageDims,
        radiusTop = _restOfEl$props.radiusTop,
        url = _restOfEl$props.url,
        anim = _restOfEl$props.anim;
      var persistentImageProps = {
        s3Url: s3Url || "",
        imageDims: imageDims || null,
        radiusTop: radiusTop !== undefined ? radiusTop : 4,
        url: url || "",
        anim: anim || "none"
      };
      return _objectSpread(_objectSpread({}, restOfEl), {}, {
        props: persistentImageProps
      });
    }
    return restOfEl;
  });
  var bestThumbnailUrl = null;
  var firstImageElement = elementsToPersist.find(function (el) {
    return el.type === "image" && el.props && typeof el.props.s3Url === "string" && el.props.s3Url.trim() !== "";
  });
  if (firstImageElement) {
    bestThumbnailUrl = firstImageElement.props.s3Url;
  }
  var dataToSave = _objectSpread(_objectSpread({}, currentState), {}, {
    selected: null,
    screens: [_objectSpread(_objectSpread({}, currentScreenFromState), {}, {
      elements: elementsToPersist
    })]
  });
  return _objectSpread(_objectSpread({}, dataToSave), {}, {
    _thumbnailHintUrl: bestThumbnailUrl
  });
}
var deserialize = function deserialize() {
  var backendData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var processScreen = function processScreen(screen) {
    var elements = screen && Array.isArray(screen.elements) ? screen.elements : [];
    return _objectSpread(_objectSpread({}, screen), {}, {
      elements: elements.map(function (el) {
        var baseElement = _objectSpread(_objectSpread({}, el), {}, {
          hidden: false
        }); // Initialize hidden to false
        if (baseElement.type === "image") {
          return _objectSpread(_objectSpread({}, baseElement), {}, {
            props: _objectSpread(_objectSpread({}, baseElement.props), {}, {
              s3Url: baseElement.props.s3Url || "",
              imageDims: baseElement.props.imageDims || null,
              imageLoading: false,
              imageError: null,
              radiusTop: baseElement.props.radiusTop !== undefined ? baseElement.props.radiusTop : 4,
              anim: baseElement.props.anim || "none",
              url: baseElement.props.url || ""
            })
          });
        }
        return baseElement;
      })
    });
  };
  if (backendData && backendData.screens && Array.isArray(backendData.screens) && backendData.screens.length > 0) {
    return _objectSpread(_objectSpread({}, backendData), {}, {
      selected: null,
      screens: backendData.screens.map(processScreen)
    });
  }
  var initial = startState();
  initial.screens = initial.screens.map(processScreen);
  return initial;
};

/***/ }),

/***/ "./templates/prodcutExplore.js":
/*!*************************************!*\
  !*** ./templates/prodcutExplore.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["assetLoading", "assetError", "file", "src"],
  _excluded2 = ["assetLoading", "assetError", "file", "src"],
  _excluded3 = ["assetLoading", "assetError", "file", "src"],
  _excluded4 = ["assetLoading", "assetError", "file", "src"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* Product Explore – multi-screen template with per-element animations,
   delay control & interactive Message Button  (v1.3 – fakeBox full elements)
   ------------------------------------------------------------------------------ */
var API_BASE_URL = "https://localhost:3001" || 0;




// --- BEGIN S3/BACKEND INTEGRATION HELPERS ---

// IMPORTANT: Implement this function in your application to retrieve the JWT token.

var getAuthToken = function getAuthToken() {
  if (typeof window !== "undefined") {
    return localStorage.getItem("jwt");
  }
  return null;
};
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(fileObject) {
    var assetType,
      formData,
      token,
      headers,
      response,
      errorData,
      result,
      _args3 = arguments,
      _t3,
      _t4;
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          assetType = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : "image";
          // assetType can be 'image' or 'video'
          formData = new FormData();
          formData.append("assetFile", fileObject);
          // Optional: pass assetType to backend if it needs to differentiate
          // formData.append("assetType", assetType);
          _context3.p = 1;
          token = getAuthToken();
          headers = {};
          if (token) {
            headers["Authorization"] = "Bearer ".concat(token);
          }
          _context3.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData,
            headers: headers
          });
        case 2:
          response = _context3.v;
          if (response.ok) {
            _context3.n = 7;
            break;
          }
          _context3.p = 3;
          _context3.n = 4;
          return response.json();
        case 4:
          errorData = _context3.v;
          _context3.n = 6;
          break;
        case 5:
          _context3.p = 5;
          _t3 = _context3.v;
          errorData = {
            message: "Upload failed: ".concat(response.statusText || response.status)
          };
        case 6:
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 7:
          _context3.n = 8;
          return response.json();
        case 8:
          result = _context3.v;
          if (result.url) {
            _context3.n = 9;
            break;
          }
          throw new Error("Upload successful, but no URL was returned from the backend.");
        case 9:
          return _context3.a(2, result.url);
        case 10:
          _context3.p = 10;
          _t4 = _context3.v;
          console.error("Error uploading ".concat(assetType, " file to backend:"), _t4);
          if (!(_t4 instanceof Error)) {
            _context3.n = 11;
            break;
          }
          throw _t4;
        case 11:
          throw new Error(String(_t4 || "An unknown error occurred during ".concat(assetType, " file upload.")));
        case 12:
          return _context3.a(2);
      }
    }, _callee3, null, [[3, 5], [1, 10]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
function measureImageDimensions(_x2) {
  return _measureImageDimensions.apply(this, arguments);
} // --- END S3/BACKEND INTEGRATION HELPERS ---
/* ---------- meta ---------- */
function _measureImageDimensions() {
  _measureImageDimensions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(s3Url) {
    return _regenerator().w(function (_context4) {
      while (1) switch (_context4.n) {
        case 0:
          return _context4.a(2, new Promise(function (resolve, reject) {
            if (!s3Url) {
              reject(new Error("S3 URL is required to measure dimensions."));
              return;
            }
            var img = new Image();
            img.onload = function () {
              resolve({
                width: img.naturalWidth,
                height: img.naturalHeight
              });
            };
            img.onerror = function (err) {
              console.error("Error loading image for measurement:", s3Url, err);
              reject(new Error("Could not load image to measure dimensions. Check S3 URL and CORS."));
            };
            img.crossOrigin = "anonymous";
            img.src = s3Url;
          }));
      }
    }, _callee4);
  }));
  return _measureImageDimensions.apply(this, arguments);
}
var meta = {
  id: "product-explorer",
  // MUST be a non-empty string
  name: "Product Explore",
  // MUST be a non-empty string
  description: "Drag/resize anything, per-element one-shot anims, delay & message button",
  canvas: {
    w: 378,
    h: 648
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'"];
var EFFECTS = ["fade", "zoom-in", "zoom-out", "slide-left", "slide-right", "slide-up", "slide-down", "rotate", "flip"];
var BOX_DIMS = function BOX_DIMS(t) {
  return {
    image: {
      w: 120,
      h: 80
    },
    video: {
      w: 160,
      h: 90
    },
    gallery: {
      w: 160,
      h: 90
    }
  }[t] || {
    w: 120,
    h: 36
  };
};
var startState = function startState() {
  return {
    bg: "#ffffff",
    current: 0,
    selected: null,
    animKey: 0,
    transition: "fade",
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }]
  };
};
var baseEl = function baseEl(type) {
  return {
    id: crypto.randomUUID(),
    type: type,
    x: 10,
    y: 10,
    w: 100,
    h: 30,
    effect: "fade",
    delay: 0
  };
};

/* -------------- element factory -------------- */
var newElement = function newElement(type) {
  switch (type) {
    case "button":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          text: "Click me",
          color: "#2563eb",
          font: "Arial",
          size: 14,
          radius: 6,
          action: "url",
          url: "",
          target: null
        }
      });
    case "title":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          text: "Title",
          color: "#000",
          font: "Georgia",
          size: 20
        }
      });
    case "subtitle":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          text: "Subtitle",
          color: "#111827",
          font: "Georgia",
          size: 16
        }
      });
    case "image":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        props: {
          s3Url: "",
          // Stores S3 URL
          assetLoading: false,
          assetError: null,
          assetDims: null,
          // For image dimensions {width, height}
          radius: 0,
          url: "" // Click-through URL
        }
      });
    case "video":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 200,
        h: 120,
        props: {
          s3Url: "",
          // Stores S3 URL
          assetLoading: false,
          assetError: null
          // assetDims could be added for video if needed (e.g., video.videoWidth, video.videoHeight)
        }
      });
      // removed by dead control flow
{}
    case "textbox":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        h: 80,
        props: {
          text: "Long text…",
          color: "#000",
          font: "Arial",
          size: 14,
          bold: false,
          align: "left",
          bg: "#ffffff"
        }
      });
    case "gallery":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 200,
        h: 80,
        props: {
          radius: 0,
          imageH: 70,
          gap: 4,
          images: [] // Each image object will have s3Url, assetLoading, assetError, assetDims
        }
      });
    case "xbutton":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 32,
        h: 32,
        props: {
          target: null,
          color: "rgba(0,0,0,.6)"
        }
      });
    case "messageButton":
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 160,
        h: 40,
        props: {
          /* message-1 */
          text1: "Hola!",
          color1: "#ffffff",
          bg1: "#2563eb",
          size1: 14,
          font1: "Arial",
          bold1: false,
          italic1: false,
          /* message-2 */
          text2: "Descubre",
          color2: "#ffffff",
          bg2: "#d97706",
          size2: 14,
          font2: "Arial",
          bold2: false,
          italic2: false,
          /* misc */
          radius: 6,
          action: "url",
          url: "",
          target: null,
          /* arrow / divider */
          arrowSize: 22,
          arrowBg: "#ffffff",
          arrowColor: "#000000",
          dividerColor: "#ffffff"
        }
      });
    case "fakeBox":
      // scrollable container that can host all element types
      return _objectSpread(_objectSpread({}, baseEl(type)), {}, {
        w: 160,
        h: 140,
        props: {
          bg: "#f3f4f6",
          radius: 6,
          padding: 4,
          items: [] // will hold embedded element objects (subset of newElement)
        }
      });
    default:
      return baseEl(type);
  }
};

/* helper to make default item for fakeBox */
var newFakeItem = function newFakeItem(type) {
  // we re‑use newElement but strip position/size metadata
  var el = newElement(type);
  var id = el.id,
    props = el.props;
  return {
    id: id,
    type: type,
    props: props
  };
};

/* ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _sel$props$target, _sel$props$target2, _sel$props$target3;
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });

  /* ── screen ops ── */
  var setCurrent = function setCurrent(i) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: i,
      selected: null
    }));
  };
  var addScreen = function addScreen() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: safe.screens.length,
      selected: null,
      screens: [].concat(_toConsumableArray(safe.screens), [{
        id: crypto.randomUUID(),
        elements: []
      }])
    }));
  };
  var duplicateScreen = function duplicateScreen() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: safe.screens.length,
      selected: null,
      screens: [].concat(_toConsumableArray(safe.screens), [JSON.parse(JSON.stringify(scr))])
    }));
  };
  var delScreen = function delScreen(idx) {
    if (safe.screens.length === 1) return;
    var arr = safe.screens.slice();
    arr.splice(idx, 1);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: arr,
      current: Math.max(0, idx - 1),
      selected: null
    }));
  };

  /* ── element ops ── */
  var add = function add(t) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newElement(t)])
        }) : sc;
      })
    }));
  };
  var patchSel = function patchSel(fn) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc, i) {
        return i !== safe.current ? sc : _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === safe.selected ? fn(e) : e;
          })
        });
      })
    }));
  };
  var delSel = function delSel() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc, i) {
        return i !== safe.current ? sc : _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.filter(function (e) {
            return e.id !== safe.selected;
          })
        });
      })
    }));
  };
  var duplicateSel = function duplicateSel() {
    var copy = JSON.parse(JSON.stringify(sel));
    copy.id = crypto.randomUUID();
    copy.x += 10;
    copy.y += 10;
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [copy])
        }) : sc;
      })
    }));
  };
  // Helper for handling file uploads for various element types
  var handleAssetUpload = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(file, elementType, updateFn) {
      var s3Url, dims, _t, _t2;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            if (file) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            updateFn({
              assetLoading: true,
              assetError: null,
              s3Url: "",
              assetDims: null
            }); // Reset and set loading
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file, elementType);
          case 3:
            s3Url = _context.v;
            // Pass 'image' or 'video'
            dims = null;
            if (!(elementType === "image" && file.type.startsWith("image/"))) {
              _context.n = 7;
              break;
            }
            _context.p = 4;
            _context.n = 5;
            return measureImageDimensions(s3Url);
          case 5:
            dims = _context.v;
            _context.n = 7;
            break;
          case 6:
            _context.p = 6;
            _t = _context.v;
            console.warn("Could not measure image dimensions:", _t.message);
            // Non-critical, proceed without dimensions.
          case 7:
            updateFn({
              s3Url: s3Url,
              assetDims: dims,
              assetLoading: false
            });
            _context.n = 9;
            break;
          case 8:
            _context.p = 8;
            _t2 = _context.v;
            updateFn({
              assetLoading: false,
              assetError: _t2.message || "Upload failed."
            });
          case 9:
            return _context.a(2);
        }
      }, _callee, null, [[4, 6], [2, 8]]);
    }));
    return function handleAssetUpload(_x3, _x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();
  /* ── UI ── */
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Background\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "flex flex-wrap gap-2",
      children: ["title", "subtitle", "button", "image", "video", "textbox", "gallery", "fakeBox",
      // ← NEW
      "messageButton", "xbutton"].map(function (t) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          onClick: function onClick() {
            return add(t);
          },
          className: "btn",
          children: ["+ ", t]
        }, t);
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "flex items-center gap-2 overflow-x-auto pb-2",
      children: [safe.screens.map(function (sc, i) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "relative w-10 h-16 border ".concat(i === safe.current ? "border-blue-600" : "border-gray-300", " rounded flex-shrink-0 cursor-pointer"),
          onClick: function onClick() {
            return setCurrent(i);
          },
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            className: "absolute -top-1 -right-1 text-xs text-red-600 cursor-pointer",
            onClick: function onClick(e) {
              e.stopPropagation();
              delScreen(i);
            },
            children: "\xD7"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            className: "absolute inset-0 flex items-center justify-center text-[10px]",
            children: i + 1
          })]
        }, sc.id);
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: addScreen,
        className: "btn-secondary text-xs",
        children: "+ new"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: duplicateScreen,
        className: "btn-secondary text-xs",
        children: "+ dup"
      })]
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex justify-between items-center",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "capitalize font-medium",
          children: sel.type
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "space-x-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: duplicateSel,
            className: "text-blue-600",
            children: "copy"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: delSel,
            className: "text-red-600",
            children: "delete"
          })]
        })]
      }), ["title", "subtitle", "button", "textbox"].includes(sel.type) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [sel.type === "textbox" ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
          rows: "3",
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1"
        }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: sel.props.font,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  font: e.target.value
                })
              });
            });
          },
          className: "border w-full",
          children: FONTS.map(function (f) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: f,
              children: f.replace(/'/g, "")
            }, f);
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "number",
          min: "8",
          max: "72",
          value: sel.props.size,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  size: +e.target.value
                })
              });
            });
          },
          className: "border w-full px-1"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.color,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  color: e.target.value
                })
              });
            });
          }
        })]
      }), sel.type === "textbox" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Bold", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: sel.props.align,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  align: e.target.value
                })
              });
            });
          },
          className: "border w-full",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "left",
            children: "Left"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "center",
            children: "Center"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "justify",
            children: "Justify"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["BG\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bg,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bg: e.target.value
                  })
                });
              });
            }
          })]
        })]
      }), sel.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Radius", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: sel.props.action,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  action: e.target.value
                })
              });
            });
          },
          className: "border w-full",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "url",
            children: "URL"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "next",
            children: "Go to screen"
          })]
        }), sel.props.action === "url" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          placeholder: "https://\u2026",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1"
        }), sel.props.action === "next" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: (_sel$props$target = sel.props.target) !== null && _sel$props$target !== void 0 ? _sel$props$target : "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  target: e.target.value === "" ? null : +e.target.value
                })
              });
            });
          },
          className: "border w-full mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "",
            children: "(next sequential)"
          }), safe.screens.map(function (_, i) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: i,
              children: ["Screen ", i + 1]
            }, i);
          })]
        })]
      }), sel.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*",
          disabled: sel.props.assetLoading,
          onChange: function onChange(e) {
            var _e$target$files;
            var file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];
            handleAssetUpload(file, "image", function (updatePayload) {
              patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), updatePayload)
                });
              });
            });
          },
          className: "block w-full text-xs"
        }), " ", sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-blue-500 italic",
          children: "Uploading..."
        }), sel.props.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
          className: "text-xs text-red-500 italic",
          children: ["Error: ", sel.props.assetError]
        }), sel.props.s3Url && !sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.s3Url,
            alt: "Preview",
            className: "max-w-[100px] max-h-[70px] border"
          }), sel.props.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-gray-500",
            children: [sel.props.assetDims.width, "x", sel.props.assetDims.height, "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          placeholder: "Click URL (optional)",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 mt-1"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Radius", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        })]
      }), sel.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-xs font-medium",
          children: "Upload Video:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "video/*",
          disabled: sel.props.assetLoading,
          onChange: function onChange(e) {
            var _e$target$files2;
            var file = (_e$target$files2 = e.target.files) === null || _e$target$files2 === void 0 ? void 0 : _e$target$files2[0];
            handleAssetUpload(file, "video", function (updatePayload) {
              patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), updatePayload)
                });
              });
            });
          },
          className: "block w-full text-xs"
        }), sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-blue-500 italic",
          children: "Uploading..."
        }), sel.props.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
          className: "text-xs text-red-500 italic",
          children: ["Error: ", sel.props.assetError]
        }), sel.props.s3Url && !sel.props.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
          className: "mt-1",
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
            src: sel.props.s3Url,
            controls: true,
            className: "max-w-[150px] max-h-[100px] border"
          })
        })]
      }), sel.type === "gallery" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Img height", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "file",
            accept: "image/*"
            // disabled={img.assetLoading} // Use loading state from the specific image item
            ,
            onChange: function onChange(e) {
              var _e$target$files3;
              var file = (_e$target$files3 = e.target.files) === null || _e$target$files3 === void 0 ? void 0 : _e$target$files3[0];
              handleAssetUpload(file, "image", function (updatePayload) {
                patchSel(function (o) {
                  var newImages = _toConsumableArray(o.props.images);
                  newImages[idx] = _objectSpread(_objectSpread({}, newImages[idx]), updatePayload);
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      images: newImages
                    })
                  });
                });
              });
            },
            className: "block w-full text-xs mb-1"
          }), img.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
            className: "text-xs text-blue-500 italic",
            children: "Uploading..."
          }), img.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-red-500 italic",
            children: ["Error: ", img.assetError]
          }), img.s3Url && !img.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "mt-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
              src: img.s3Url,
              alt: "Gallery item ".concat(idx),
              className: "max-w-[80px] max-h-[60px] border"
            }), img.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
              className: "text-xs text-gray-500",
              children: [img.assetDims.width, "x", img.assetDims.height, "px"]
            })]
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Gap", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.gap,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    gap: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Radius", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), sel.props.images.map(function (img, idx) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "border p-1 my-1 rounded",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              className: "flex items-center gap-1",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "file",
                accept: "image/*",
                onChange: (/*#__PURE__*/function () {
                  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(ev) {
                    var _ev$target$files;
                    var f;
                    return _regenerator().w(function (_context2) {
                      while (1) switch (_context2.n) {
                        case 0:
                          f = (_ev$target$files = ev.target.files) === null || _ev$target$files === void 0 ? void 0 : _ev$target$files[0];
                          if (f) {
                            _context2.n = 1;
                            break;
                          }
                          return _context2.a(2);
                        case 1:
                          patchSel(function (o) {
                            var arr = _toConsumableArray(o.props.images);
                            arr[idx] = _objectSpread(_objectSpread({}, arr[idx]), {}, {
                              src: URL.createObjectURL(f),
                              file: f
                            });
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                images: arr
                              })
                            });
                          });
                        case 2:
                          return _context2.a(2);
                      }
                    }, _callee2);
                  }));
                  return function (_x6) {
                    return _ref3.apply(this, arguments);
                  };
                }())
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                className: "text-red-600 text-xs",
                onClick: function onClick() {
                  return patchSel(function (o) {
                    var arr = o.props.images.slice();
                    arr.splice(idx, 1);
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        images: arr
                      })
                    });
                  });
                },
                children: "\xD7"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              placeholder: "Link (optional)",
              className: "border w-full px-1 mt-1",
              value: img.url || "",
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  var arr = _toConsumableArray(o.props.images);
                  arr[idx] = _objectSpread(_objectSpread({}, arr[idx]), {}, {
                    url: e.target.value
                  });
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      images: arr
                    })
                  });
                });
              }
            })]
          }, idx);
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
          className: "btn-secondary text-xs",
          onClick: function onClick() {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  images: [].concat(_toConsumableArray(o.props.images), [{
                    s3Url: "",
                    url: "",
                    assetLoading: false,
                    assetError: null,
                    assetDims: null
                  }])
                })
              });
            });
          },
          children: "+ add image"
        })]
      }), sel.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: (_sel$props$target2 = sel.props.target) !== null && _sel$props$target2 !== void 0 ? _sel$props$target2 : "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  target: e.target.value === "" ? null : +e.target.value
                })
              });
            });
          },
          className: "border w-full",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "",
            children: "Go to next screen"
          }), safe.screens.map(function (_, i) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: i,
              children: ["Screen ", i + 1]
            }, i);
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: ["Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          })]
        })]
      }), sel.type === "messageButton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "block font-medium",
          children: "Message 1"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text1,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text1: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1",
          placeholder: "Message 1"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.color1,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  color1: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.bg1,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  bg1: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "flex gap-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            value: sel.props.font1,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    font1: e.target.value
                  })
                });
              });
            },
            className: "border flex-1",
            children: FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "8",
            max: "40",
            value: sel.props.size1,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    size1: +e.target.value
                  })
                });
              });
            },
            className: "border w-16 px-1"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Bold", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold1,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold1: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Italic", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.italic1,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    italic1: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "block font-medium",
          children: "Message 2"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text2,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text2: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1",
          placeholder: "Message 2"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.color2,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  color2: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.bg2,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  bg2: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "flex gap-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            value: sel.props.font2,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    font2: e.target.value
                  })
                });
              });
            },
            className: "border flex-1",
            children: FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "8",
            max: "40",
            value: sel.props.size2,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    size2: +e.target.value
                  })
                });
              });
            },
            className: "border w-16 px-1"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Bold", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold2,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold2: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Italic", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.italic2,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    italic2: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: ["Radius", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: sel.props.action,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  action: e.target.value
                })
              });
            });
          },
          className: "border w-full",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "url",
            children: "URL"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "next",
            children: "Go to screen"
          })]
        }), sel.props.action === "url" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          placeholder: "https://\u2026",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1"
        }), sel.props.action === "next" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: (_sel$props$target3 = sel.props.target) !== null && _sel$props$target3 !== void 0 ? _sel$props$target3 : "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  target: e.target.value === "" ? null : +e.target.value
                })
              });
            });
          },
          className: "border w-full mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "",
            children: "(next sequential)"
          }), safe.screens.map(function (_, i) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: i,
              children: ["Screen ", i + 1]
            }, i);
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "number",
          min: "10",
          max: "60",
          value: sel.props.arrowSize,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  arrowSize: +e.target.value
                })
              });
            });
          },
          className: "border w-full px-1",
          placeholder: "Arrow size (px)"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block text-xs",
          children: ["Arrow bg\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.arrowBg,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    arrowBg: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block text-xs",
          children: ["Arrow color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.arrowColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    arrowColor: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block text-xs",
          children: ["Divider color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.dividerColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    dividerColor: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
          className: "btn-secondary text-xs mt-1",
          onClick: function onClick() {
            return patchSel(function (o) {
              var _o$props$restart;
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  restart: ((_o$props$restart = o.props.restart) !== null && _o$props$restart !== void 0 ? _o$props$restart : 0) + 1
                })
              });
            });
          },
          children: "Reset progress"
        })]
      }), sel.type === "fakeBox" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["BG\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bg,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bg: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Radius", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "40",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), "/* items list ---------------------------------------------------------- */", sel.props.items.map(function (it, iIdx) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "border p-1 my-1 rounded space-y-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
              className: "flex justify-between items-center",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
                value: it.type,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    var T = e.target.value;
                    var arr = o.props.items.slice();

                    /* fresh defaults per-type */
                    var blank = {
                      text: {
                        type: "text",
                        text: "Item…",
                        color: "#000",
                        font: "Arial",
                        size: 14
                      },
                      image: {
                        type: "image",
                        src: "",
                        url: "",
                        radius: 0
                      },
                      video: {
                        type: "video",
                        src: ""
                      },
                      gallery: {
                        type: "gallery",
                        radius: 0,
                        imageH: 70,
                        gap: 4,
                        images: []
                      },
                      button: {
                        type: "button",
                        text: "Click",
                        color: "#2563eb",
                        font: "Arial",
                        size: 14,
                        radius: 6,
                        action: "url",
                        url: "",
                        target: null
                      },
                      title: {
                        type: "title",
                        text: "Title",
                        color: "#000",
                        font: "Georgia",
                        size: 20
                      },
                      subtitle: {
                        type: "subtitle",
                        text: "Subtitle",
                        color: "#111827",
                        font: "Georgia",
                        size: 16
                      },
                      textbox: {
                        type: "textbox",
                        text: "Long text…",
                        color: "#000",
                        font: "Arial",
                        size: 14,
                        bold: false,
                        align: "left",
                        bg: "#ffffff"
                      }
                    }[T];
                    arr[iIdx] = blank;
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        items: arr
                      })
                    });
                  });
                },
                className: "border text-xs",
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "text",
                  children: "text"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "title",
                  children: "title"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "subtitle",
                  children: "subtitle"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "textbox",
                  children: "textbox"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "button",
                  children: "button"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "image",
                  children: "image"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "video",
                  children: "video"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: "gallery",
                  children: "gallery"
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                className: "flex space-x-1",
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                  onClick: function onClick() {
                    return patchSel(function (o) {
                      var items = _toConsumableArray(o.props.items);
                      var copy = _objectSpread(_objectSpread({}, items[iIdx]), {}, {
                        id: crypto.randomUUID(),
                        x: items[iIdx].x + 10,
                        y: items[iIdx].y + 10
                      });
                      items.splice(iIdx + 1, 0, copy);
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          items: items
                        })
                      });
                    });
                  },
                  className: "text-blue-600 text-xs",
                  children: "Duplicate"
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                  onClick: function onClick() {
                    return patchSel(function (o) {
                      var arr = o.props.items.slice();
                      arr.splice(iIdx, 1);
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          items: arr
                        })
                      });
                    });
                  },
                  className: "text-red-600 text-xs",
                  children: "\xD7"
                })]
              })]
            }), function () {
              switch (it.type) {
                /* TEXT-LIKE ---------------------------------------------------- */
                case "text":
                case "title":
                case "subtitle":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
                      rows: "2",
                      className: "border w-full px-1",
                      value: it.text,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].text = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                      className: "flex gap-1",
                      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                        value: it.font,
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            var arr = o.props.items.slice();
                            arr[iIdx].font = e.target.value;
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: arr
                              })
                            });
                          });
                        },
                        className: "border flex-1",
                        children: FONTS.map(function (f) {
                          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                            value: f,
                            children: f.replace(/'/g, "")
                          }, f);
                        })
                      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "8",
                        max: "72",
                        className: "border w-16 px-1",
                        value: it.size,
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            var arr = o.props.items.slice();
                            arr[iIdx].size = +e.target.value;
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: arr
                              })
                            });
                          });
                        }
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "color",
                      value: it.color,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].color = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      }
                    })]
                  });

                /* BUTTON ------------------------------------------------------- */
                case "button":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      value: it.text,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].text = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      },
                      className: "border w-full px-1"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                      value: it.font,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].font = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      },
                      className: "border w-full",
                      children: FONTS.map(function (f) {
                        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                          value: f,
                          children: f.replace(/'/g, "")
                        }, f);
                      })
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "number",
                      min: "8",
                      max: "40",
                      className: "border w-full px-1",
                      value: it.size,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].size = +e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "color",
                      value: it.color,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].color = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Radius", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "0",
                        max: "40",
                        className: "border px-1 w-16",
                        value: it.radius,
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            var arr = o.props.items.slice();
                            arr[iIdx].radius = +e.target.value;
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: arr
                              })
                            });
                          });
                        }
                      }), "px"]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
                      value: it.action,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].action = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      },
                      className: "border w-full",
                      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                        value: "url",
                        children: "URL"
                      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                        value: "next",
                        children: "Go to screen"
                      })]
                    }), it.action === "url" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      placeholder: "https://\u2026",
                      className: "border w-full px-1",
                      value: it.url,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].url = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      }
                    })]
                  });

                /* IMAGE -------------------------------------------------------- */
                case "image":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
                      className: "block text-xs font-medium",
                      children: "Upload Image:"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "file",
                      accept: "image/*",
                      disabled: it.assetLoading,
                      onChange: function onChange(e) {
                        var _e$target$files4;
                        var file = (_e$target$files4 = e.target.files) === null || _e$target$files4 === void 0 ? void 0 : _e$target$files4[0];
                        handleAssetUpload(file, "image", function (updatePayload) {
                          patchSel(function (o) {
                            var newItems = _toConsumableArray(o.props.items);
                            newItems[iIdx] = _objectSpread(_objectSpread({}, newItems[iIdx]), updatePayload);
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: newItems
                              })
                            });
                          });
                        });
                      },
                      className: "block w-full text-xs"
                    }), it.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
                      className: "text-xs text-blue-500 italic",
                      children: "Uploading..."
                    }), it.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                      className: "text-xs text-red-500 italic",
                      children: ["Error: ", it.assetError]
                    }), it.s3Url && !it.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                      className: "mt-1",
                      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                        src: it.s3Url,
                        alt: "Preview",
                        className: "max-w-[80px] max-h-[60px] border"
                      }), it.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                        className: "text-xs text-gray-500",
                        children: [it.assetDims.width, "x", it.assetDims.height, "px"]
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      placeholder: "Click URL (optional)",
                      className: "border w-full px-1 mt-1",
                      value: it.url || "",
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].url = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Radius", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "0",
                        max: "40",
                        className: "border px-1 w-16",
                        value: it.radius,
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            var arr = o.props.items.slice();
                            arr[iIdx].radius = +e.target.value;
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: arr
                              })
                            });
                          });
                        }
                      }), "px"]
                    })]
                  });

                /* VIDEO -------------------------------------------------------- */
                case "video":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
                      className: "block text-xs font-medium",
                      children: "Upload Video:"
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "file",
                      accept: "video/*",
                      disabled: it.assetLoading,
                      onChange: function onChange(e) {
                        var _e$target$files5;
                        var file = (_e$target$files5 = e.target.files) === null || _e$target$files5 === void 0 ? void 0 : _e$target$files5[0];
                        handleAssetUpload(file, "video", function (updatePayload) {
                          patchSel(function (o) {
                            var newItems = _toConsumableArray(o.props.items);
                            newItems[iIdx] = _objectSpread(_objectSpread({}, newItems[iIdx]), updatePayload);
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: newItems
                              })
                            });
                          });
                        });
                      },
                      className: "block w-full text-xs"
                    }), it.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
                      className: "text-xs text-blue-500 italic",
                      children: "Uploading..."
                    }), it.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                      className: "text-xs text-red-500 italic",
                      children: ["Error: ", it.assetError]
                    }), it.s3Url && !it.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                      className: "mt-1",
                      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
                        src: it.s3Url,
                        controls: true,
                        className: "max-w-[120px] max-h-[80px] border"
                      })
                    })]
                  });

                /* GALLERY ------------------------------------------------------ */
                case "gallery":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Img\xA0H", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "30",
                        max: "300",
                        className: "border px-1 w-16",
                        value: it.imageH,
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            var arr = o.props.items.slice();
                            arr[iIdx].imageH = +e.target.value;
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: arr
                              })
                            });
                          });
                        }
                      }), "px"]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Gap", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "0",
                        max: "40",
                        className: "border px-1 w-16",
                        value: it.gap,
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            var arr = o.props.items.slice();
                            arr[iIdx].gap = +e.target.value;
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: arr
                              })
                            });
                          });
                        }
                      }), "px"]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Radius", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "number",
                        min: "0",
                        max: "40",
                        className: "border px-1 w-16",
                        value: it.radius,
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            var arr = o.props.items.slice();
                            arr[iIdx].radius = +e.target.value;
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: arr
                              })
                            });
                          });
                        }
                      }), "px"]
                    }), it.images.map(function (g, i /* identical to top-level gallery UI */) {
                      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                        className: "border p-1 my-1 rounded",
                        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                          className: "flex items-center gap-1",
                          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                            type: "file",
                            accept: "image/*",
                            disabled: g.assetLoading // 'g' is the gallery image item
                            ,
                            onChange: function onChange(e) {
                              var _e$target$files6;
                              var file = (_e$target$files6 = e.target.files) === null || _e$target$files6 === void 0 ? void 0 : _e$target$files6[0];
                              handleAssetUpload(file, "image", function (updatePayload) {
                                patchSel(function (o) {
                                  var newItems = _toConsumableArray(o.props.items);
                                  var newGalleryImages = _toConsumableArray(newItems[iIdx].images);
                                  newGalleryImages[i] = _objectSpread(_objectSpread({}, newGalleryImages[i]), updatePayload);
                                  newItems[iIdx] = _objectSpread(_objectSpread({}, newItems[iIdx]), {}, {
                                    images: newGalleryImages
                                  });
                                  return _objectSpread(_objectSpread({}, o), {}, {
                                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                                      items: newItems
                                    })
                                  });
                                });
                              });
                            },
                            className: "block w-full text-xs mb-1"
                          }), g.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
                            className: "text-xs text-blue-500 italic",
                            children: "Uploading..."
                          }), g.assetError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                            className: "text-xs text-red-500 italic",
                            children: ["Error: ", g.assetError]
                          }), g.s3Url && !g.assetLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                            className: "mt-1",
                            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                              src: g.s3Url,
                              alt: "Nested gallery item ".concat(i),
                              className: "max-w-[60px] max-h-[40px] border"
                            }), g.assetDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
                              className: "text-xs text-gray-500",
                              children: [g.assetDims.width, "x", g.assetDims.height, "px"]
                            })]
                          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                            className: "text-red-600 text-xs",
                            onClick: function onClick() {
                              return patchSel(function (o) {
                                var arr = o.props.items.slice();
                                arr[iIdx].images.splice(i, 1);
                                return _objectSpread(_objectSpread({}, o), {}, {
                                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                                    items: arr
                                  })
                                });
                              });
                            },
                            children: "\xD7"
                          })]
                        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                          placeholder: "Link (optional)",
                          className: "border w-full px-1 mt-1",
                          value: g.url || "",
                          onChange: function onChange(e) {
                            return patchSel(function (o) {
                              var arr = o.props.items.slice();
                              arr[iIdx].images[i] = _objectSpread(_objectSpread({}, arr[iIdx].images[i]), {}, {
                                url: e.target.value
                              });
                              return _objectSpread(_objectSpread({}, o), {}, {
                                props: _objectSpread(_objectSpread({}, o.props), {}, {
                                  items: arr
                                })
                              });
                            });
                          }
                        })]
                      }, i);
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                      className: "btn-secondary text-xs",
                      onClick: function onClick() {
                        return patchSel(function (o) {
                          var newItems = _toConsumableArray(o.props.items);
                          var newGalleryImages = [].concat(_toConsumableArray(newItems[iIdx].images), [{
                            s3Url: "",
                            url: "",
                            assetLoading: false,
                            assetError: null,
                            assetDims: null
                          }]);
                          newItems[iIdx] = _objectSpread(_objectSpread({}, newItems[iIdx]), {}, {
                            images: newGalleryImages
                          });
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: newItems
                            })
                          });
                        });
                      },
                      children: "+ add image"
                    })]
                  });

                /* TEXTBOX ------------------------------------------------------ */
                case "textbox":
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
                      rows: "3",
                      className: "border w-full px-1",
                      value: it.text,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].text = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                      value: it.font,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].font = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      },
                      className: "border w-full",
                      children: FONTS.map(function (f) {
                        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                          value: f,
                          children: f.replace(/'/g, "")
                        }, f);
                      })
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "number",
                      min: "8",
                      max: "40",
                      className: "border w-full px-1",
                      value: it.size,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].size = +e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                      type: "color",
                      value: it.color,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].color = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      }
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["Bold", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "checkbox",
                        checked: it.bold,
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            var arr = o.props.items.slice();
                            arr[iIdx].bold = e.target.checked;
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: arr
                              })
                            });
                          });
                        }
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
                      value: it.align,
                      onChange: function onChange(e) {
                        return patchSel(function (o) {
                          var arr = o.props.items.slice();
                          arr[iIdx].align = e.target.value;
                          return _objectSpread(_objectSpread({}, o), {}, {
                            props: _objectSpread(_objectSpread({}, o.props), {}, {
                              items: arr
                            })
                          });
                        });
                      },
                      className: "border w-full",
                      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                        value: "left",
                        children: "Left"
                      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                        value: "center",
                        children: "Center"
                      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                        value: "justify",
                        children: "Justify"
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "flex items-center gap-1",
                      children: ["BG\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "color",
                        value: it.bg,
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            var arr = o.props.items.slice();
                            arr[iIdx].bg = e.target.value;
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                items: arr
                              })
                            });
                          });
                        }
                      })]
                    })]
                  });
                default:
                  return null;
              }
            }()]
          }, iIdx);
        }), "/* add-item buttons */", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
          className: "flex flex-wrap gap-2",
          children: ["text", "title", "subtitle", "textbox", "button", "image", "video", "gallery"].map(function (k) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
              className: "btn-secondary text-xs",
              onClick: function onClick() {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      items: [].concat(_toConsumableArray(o.props.items), [_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
                        type: k,
                        x: 0,
                        y: 0
                      }, BOX_DIMS(k)), k === "text" && {
                        text: "Item…",
                        color: "#000",
                        font: "Arial",
                        size: 14
                      }), k === "title" && {
                        text: "Title",
                        color: "#000",
                        font: "Georgia",
                        size: 20
                      }), k === "subtitle" && {
                        text: "Subtitle",
                        color: "#111827",
                        font: "Georgia",
                        size: 16
                      }), k === "textbox" && {
                        text: "Long text…",
                        color: "#000",
                        font: "Arial",
                        size: 14,
                        bold: false,
                        align: "left",
                        bg: "#ffffff"
                      }), k === "button" && {
                        text: "Click",
                        color: "#2563eb",
                        font: "Arial",
                        size: 14,
                        radius: 6,
                        action: "url",
                        url: "",
                        target: null
                      }), k === "image" && {
                        s3Url: "",
                        assetLoading: false,
                        assetError: null,
                        assetDims: null,
                        url: "",
                        radius: 0
                      }), k === "video" && {
                        s3Url: "",
                        assetLoading: false,
                        assetError: null
                      }), k === "gallery" && {
                        radius: 0,
                        imageH: 70,
                        gap: 4,
                        images: [] // Each image will be { s3Url: "", assetLoading: false, ... }
                      })])
                    })
                  });
                });
              },
              children: ["+ ", k]
            }, k);
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "flex gap-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            className: "btn-secondary text-xs",
            onClick: function onClick() {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    items: [].concat(_toConsumableArray(o.props.items), [_objectSpread(_objectSpread({
                      type: "text",
                      x: 0,
                      y: 0
                    }, BOX_DIMS("text")), {}, {
                      // ⬅️ NEW
                      text: "Item…",
                      color: "#000",
                      font: "Arial",
                      size: 14
                    })])
                  })
                });
              });
            },
            children: "+ text"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            className: "btn-secondary text-xs",
            onClick: function onClick() {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    items: [].concat(_toConsumableArray(o.props.items), [_objectSpread(_objectSpread({
                      type: "image",
                      x: 0,
                      y: 0
                    }, BOX_DIMS("image")), {}, {
                      s3Url: "",
                      assetLoading: false,
                      assetError: null,
                      assetDims: null,
                      url: "",
                      radius: 0
                    })])
                  })
                });
              });
            },
            children: "+ image"
          })]
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("hr", {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
        className: "block",
        children: ["Effect\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: sel.effect,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                effect: e.target.value
              });
            });
          },
          className: "border w-full",
          children: EFFECTS.map(function (ef) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: ef,
              children: ef
            }, ef);
          })
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
        className: "block",
        children: ["Delay (s)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "number",
          min: "0",
          step: "0.1",
          value: sel.delay,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                delay: +e.target.value
              });
            });
          },
          className: "border w-full px-1"
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500",
      children: "Click an element to edit\u2026"
    })]
  });
}

/* ---------- MessageButton renderer ---------- */
function MessageButtonEl(_ref4) {
  var el = _ref4.el,
    runLink = _ref4.runLink,
    _goto = _ref4["goto"];
  var _React$useState = react__WEBPACK_IMPORTED_MODULE_1___default().useState(0),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    clicks = _React$useState2[0],
    setClicks = _React$useState2[1];
  react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(function () {
    return setClicks(0);
  }, [el.props.restart]);
  var showingCover = clicks < 3;
  var coverPct = showingCover ? (3 - clicks) / 3 * 100 : 0;
  var dividerPct = 100 - coverPct;
  var _el$props = el.props,
    _el$props$radius = _el$props.radius,
    radius = _el$props$radius === void 0 ? 6 : _el$props$radius,
    text1 = _el$props.text1,
    bg1 = _el$props.bg1,
    color1 = _el$props.color1,
    size1 = _el$props.size1,
    font1 = _el$props.font1,
    bold1 = _el$props.bold1,
    italic1 = _el$props.italic1,
    text2 = _el$props.text2,
    bg2 = _el$props.bg2,
    color2 = _el$props.color2,
    size2 = _el$props.size2,
    font2 = _el$props.font2,
    bold2 = _el$props.bold2,
    italic2 = _el$props.italic2,
    _el$props$arrowSize = _el$props.arrowSize,
    arrowSize = _el$props$arrowSize === void 0 ? 22 : _el$props$arrowSize,
    _el$props$arrowBg = _el$props.arrowBg,
    arrowBg = _el$props$arrowBg === void 0 ? "rgba(255,255,255,0.25)" : _el$props$arrowBg,
    _el$props$arrowColor = _el$props.arrowColor,
    arrowColor = _el$props$arrowColor === void 0 ? "#ffffff" : _el$props$arrowColor,
    _el$props$dividerColo = _el$props.dividerColor,
    dividerColor = _el$props$dividerColo === void 0 ? "rgba(255,255,255,0.5)" : _el$props$dividerColo,
    _el$props$action = _el$props.action,
    action = _el$props$action === void 0 ? el.props.action : _el$props$action,
    _el$props$url = _el$props.url,
    url = _el$props$url === void 0 ? el.props.url : _el$props$url,
    _el$props$target = _el$props.target,
    target = _el$props$target === void 0 ? el.props.target : _el$props$target;
  var handleClick = function handleClick() {
    if (clicks < 3) setClicks(function (c) {
      return c + 1;
    });else action === "next" ? _goto(target) : runLink(url);
  };

  /* quick text style helpers */
  var txtStyle = function txtStyle(sz, ft, bd, it) {
    return {
      fontSize: sz,
      fontFamily: ft,
      fontWeight: bd ? "bold" : "normal",
      fontStyle: it ? "italic" : "normal"
    };
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    onClick: handleClick,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      borderRadius: radius,
      overflow: "hidden",
      cursor: "pointer",
      userSelect: "none",
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: _objectSpread({
        position: "absolute",
        inset: 0,
        background: bg2,
        color: color2,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        borderRadius: radius
      }, txtStyle(size2, font2, bold2, italic2)),
      children: text2
    }), showingCover && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: _objectSpread({
        position: "absolute",
        top: 0,
        bottom: 0,
        right: 0,
        width: "".concat(coverPct, "%"),
        background: bg1,
        color: color1,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        transition: "width .3s",
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0,
        borderTopRightRadius: radius,
        borderBottomRightRadius: radius,
        boxShadow: "inset 2px 0 0 0 ".concat(dividerColor)
      }, txtStyle(size1, font1, bold1, italic1)),
      children: text1
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: {
        position: "absolute",
        top: "50%",
        left: dividerPct === 0 ? 0 : "calc(".concat(dividerPct, "%)"),
        transform: dividerPct === 0 ? "translate(50%,-50%)" : "translate(-50%,-50%)",
        height: "100%",
        aspectRatio: "1 / 1",
        borderRadius: "50%",
        background: arrowBg,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        pointerEvents: "none",
        transition: "left .3s"
      },
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("svg", {
        width: arrowSize,
        height: arrowSize,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: arrowColor,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("polyline", {
          points: "9 18 15 12 9 6"
        })
      })
    })]
  });
}

/* ═════════════════════ PREVIEW ═════════════════════ */
function Preview(_ref5) {
  var state = _ref5.state,
    setState = _ref5.setState,
    readOnly = _ref5.readOnly;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var commit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (id, patch) {
    return setState && setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc) {
        return sc === scr ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === id ? _objectSpread(_objectSpread({}, e), patch) : e;
          })
        }) : sc;
      })
    }));
  }, [safe, scr, setState]);
  var select = function select(id) {
    return !readOnly && (setState === null || setState === void 0 ? void 0 : setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: id
    })));
  };
  var runLink = function runLink(url) {
    return url && window.open(url, "_blank");
  };
  var _goto2 = function _goto2(idx) {
    return setState === null || setState === void 0 ? void 0 : setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: (idx !== null && idx !== void 0 ? idx : safe.current + 1) % safe.screens.length,
      selected: null,
      animKey: safe.animKey + 1
    }));
  };

  /* gallery drag helpers (unchanged) */
  var startDrag = function startDrag(el, x) {
    el.dataset.drag = "1";
    el.dataset.sx = x;
    el.dataset.sl = el.scrollLeft;
    el.style.cursor = "grabbing";
  };
  var moveDrag = function moveDrag(el, x) {
    if (el.dataset.drag !== "1") return;
    el.scrollLeft = Number(el.dataset.sl) - (x - Number(el.dataset.sx));
  };
  var endDrag = function endDrag(el) {
    el.dataset.drag = "0";
    el.style.cursor = "grab";
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      dangerouslySetInnerHTML: {
        __html: "\n          @keyframes delayAppear {\n  to {\n    visibility: visible;\n  }\n}\n  @keyframes fade   {0% {opacity: 0; visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; visibility: visible;}}\n  @keyframes zoomIn {0% {opacity: 0; transform: scale(.8); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: scale(1); visibility: visible;}}\n  @keyframes zoomOut{0% {opacity: 0; transform: scale(1.2); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: scale(1); visibility: visible;}}\n  \n  /* Keyframe 'slideL' makes element slide IN FROM THE RIGHT (ending on the left of where it started if it was a 100% translation) */\n  @keyframes slideL {0% {opacity: 0; transform: translateX(100%); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: translateX(0); visibility: visible;}}\n  /* Keyframe 'slideR' makes element slide IN FROM THE LEFT */\n  @keyframes slideR {0% {opacity: 0; transform: translateX(-100%); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: translateX(0); visibility: visible;}}\n  /* Keyframe 'slideU' makes element slide IN FROM THE BOTTOM */\n  @keyframes slideU {0% {opacity: 0; transform: translateY(100%); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: translateY(0); visibility: visible;}}\n  /* Keyframe 'slideD' makes element slide IN FROM THE TOP */\n  @keyframes slideD {0% {opacity: 0; transform: translateY(-100%); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: translateY(0); visibility: visible;}}\n  \n  @keyframes rotateK{0% {opacity: 0; transform: perspective(400px) rotateY(90deg); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: perspective(400px) rotateY(0deg); visibility: visible;}}\n  @keyframes flipK  {0% {opacity: 0; transform: perspective(400px) rotateX(90deg); visibility: hidden;} 1% {visibility: visible;} 100% {opacity: 1; transform: perspective(400px) rotateX(0deg); visibility: visible;}}\n\n    \n.anim-fade        {animation-name: fade;    animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;}\n.anim-zoom-in     {animation-name: zoomIn;  animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;}\n.anim-zoom-out    {animation-name: zoomOut; animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;}\n.anim-slide-left  {animation-name: slideR;  animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} /* slideL in keyframes, slideR in class? Check consistency */\n.anim-slide-right {animation-name: slideL;  animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} /* slideR in keyframes, slideL in class? Check consistency */\n.anim-slide-up    {animation-name: slideD;  animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} /* slideU in keyframes, slideD in class? Check consistency */\n.anim-slide-down  {animation-name: slideU;  animation-duration: .35s; animation-timing-function: ease; animation-fill-mode: forwards;} /* slideD in keyframes, slideU in class? Check consistency */\n.anim-rotate      {animation-name: rotateK; animation-duration: .4s;  animation-timing-function: ease; animation-fill-mode: forwards;}\n.anim-flip        {animation-name: flipK;   animation-duration: .4s;  animation-timing-function: ease; animation-fill-mode: forwards;}\n    "
      }
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "anim-".concat(safe.transition),
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: safe.bg,
        position: "relative"
      },
      children: scr.elements.map(function (el) {
        // const animClass = `anim-${el.effect}`;
        var delayValue = el.delay || 0;
        var getAnimationName = function getAnimationName(effectName) {
          if (!effectName || effectName === "none") return "none";
          switch (effectName) {
            case "fade":
              return "fade";
            case "zoom-in":
              return "zoomIn";
            case "zoom-out":
              return "zoomOut";
            case "slide-left":
              return "slideL";
            case "slide-right":
              return "slideR";
            case "slide-up":
              return "slideU";
            case "slide-down":
              return "slideD";
            case "rotate":
              return "rotateK";
            case "flip":
              return "flipK";
            default:
              return "none";
          }
        };
        // Helper function to get the correct CSS animation name

        var currentAnimationName = getAnimationName(el.effect);
        var animationDuration = currentAnimationName === "rotateK" || currentAnimationName === "flipK" ? "0.4s" : "0.35s";
        var animationDivKey = "".concat(el.id, "-").concat(currentAnimationName, "-").concat(delayValue, "-").concat(safe.animKey);
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly,
          enableResizing: !readOnly,
          onDragStop: function onDragStop(_, d) {
            return commit(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            return commit(el.id, {
              w: ref.offsetWidth,
              h: ref.offsetHeight,
              x: pos.x,
              y: pos.y
            });
          },
          onClick: function onClick(e) {
            e.stopPropagation();
            select(el.id);
          },
          style: {
            outline: safe.selected === el.id ? "2px solid #3b82f6" : "none",
            cursor: readOnly ? "default" : "move"
          },
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            style: {
              width: "100%",
              height: "100%",
              // Initial state before animation (respecting no-effect case)
              opacity: currentAnimationName !== "none" ? 0 : 1,
              visibility: currentAnimationName !== "none" ? "hidden" : "visible",
              // <<< THIS LINE IS UNCOMMENTED
              // Animation properties directly applied
              animationName: currentAnimationName,
              animationDuration: currentAnimationName === "rotateK" || currentAnimationName === "flipK" ? "0.4s" : "0.35s",
              animationTimingFunction: "ease",
              animationDelay: "".concat(delayValue, "s"),
              animationFillMode: "forwards",
              animationIterationCount: 1
            },
            children: [el.type === "title" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                color: el.props.color,
                fontSize: el.props.size,
                fontFamily: el.props.font
              },
              className: "w-full h-full flex items-center justify-center font-bold text-center",
              children: el.props.text
            }), el.type === "subtitle" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                color: el.props.color,
                fontSize: el.props.size,
                fontFamily: el.props.font
              },
              className: "w-full h-full flex items-center justify-center text-center",
              children: el.props.text
            }), el.type === "textbox" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                color: el.props.color,
                fontSize: el.props.size,
                fontFamily: el.props.font,
                fontWeight: el.props.bold ? "bold" : "normal",
                textAlign: el.props.align,
                background: el.props.bg,
                whiteSpace: "pre-wrap",
                overflowY: "auto",
                padding: 4,
                scrollbarWidth: "none",
                msOverflowStyle: "none"
              },
              className: "w-full h-full",
              children: el.props.text
            }), el.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
              onClick: function onClick() {
                return el.props.action === "next" ? _goto2(el.props.target) : runLink(el.props.url);
              },
              style: {
                background: el.props.color,
                borderRadius: el.props.radius,
                fontFamily: el.props.font,
                fontSize: el.props.size
              },
              className: "w-full h-full text-white flex items-center justify-center",
              children: el.props.text
            }), el.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
              src: el.props.s3Url || "https://dummyimage.com/".concat(el.w || 100, "x").concat(el.h || 100, "/eee/aaa&text=Image"),
              onError: function onError(e) {
                e.target.src = "https://dummyimage.com/".concat(el.w || 100, "x").concat(el.h || 100, "/eee/aaa&text=Error");
              },
              onClick: function onClick() {
                return runLink(el.props.url);
              },
              style: {
                borderRadius: el.props.radius,
                cursor: el.props.url ? "pointer" : "default"
              },
              className: "w-full h-full object-cover"
            }), el.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
              src: el.props.s3Url || "",
              onError: function onError(e) {
                alert("The video failed to load.");
              }
              // ...
              ,
              className: "w-full h-full object-cover",
              controls: true,
              autoPlay: true,
              playsInline: true
            }), el.type === "gallery" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                display: "flex",
                gap: el.props.gap,
                overflowX: "auto",
                height: "100%",
                scrollbarWidth: "none",
                msOverflowStyle: "none",
                touchAction: "pan-x",
                cursor: "grab"
              },
              className: "w-full",
              onMouseDown: function onMouseDown(e) {
                return startDrag(e.currentTarget, e.clientX);
              },
              onMouseMove: function onMouseMove(e) {
                return moveDrag(e.currentTarget, e.clientX);
              },
              onMouseUp: function onMouseUp(e) {
                return endDrag(e.currentTarget);
              },
              onMouseLeave: function onMouseLeave(e) {
                return endDrag(e.currentTarget);
              },
              children: el.props.images.map(function (img, idx) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                  src: img.s3Url || "https://dummyimage.com/80x60/eee/aaa&text=Item",
                  onError: function onError(e) {
                    e.target.src = "https://dummyimage.com/80x60/eee/aaa&text=Error";
                  },
                  onClick: function onClick() {
                    return runLink(img.url);
                  },
                  style: {
                    height: el.props.imageH,
                    flexShrink: 0,
                    borderRadius: el.props.radius,
                    cursor: img.url ? "pointer" : "default",
                    objectFit: "cover"
                  }
                }, idx);
              })
            }), el.type === "fakeBox" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              className: "hide-scroll",
              style: {
                position: "relative",
                width: "100%",
                height: "100%",
                // keeps the outer box fixed (e.g. 300 × 200 px)
                overflow: "auto",
                // makes the inner wrapper scrollable
                background: el.props.bg,
                borderRadius: el.props.radius,
                padding: el.props.padding,
                scrollbarWidth: "none",
                msOverflowStyle: "none"
              },
              children: function () {
                /* ── dynamic wrapper height: last-item-bottom + 20 px ── */
                var contentH = (el.props.items.length ? Math.max.apply(Math, _toConsumableArray(el.props.items.map(function (it) {
                  var _it$y, _it$h;
                  return ((_it$y = it.y) !== null && _it$y !== void 0 ? _it$y : 0) + ((_it$h = it.h) !== null && _it$h !== void 0 ? _it$h : BOX_DIMS(it.type).h);
                } // bottom edge
                ))) : 0) + 20; // ⬅ extra 20 px after last element

                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  style: {
                    position: "relative",
                    height: contentH
                  },
                  children: el.props.items.map(function (it, iIdx) {
                    var _it$x, _it$y2, _it$bg;
                    var _BOX_DIMS$it = _objectSpread(_objectSpread({}, BOX_DIMS(it.type)), it),
                      w = _BOX_DIMS$it.w,
                      h = _BOX_DIMS$it.h;
                    var x = (_it$x = it.x) !== null && _it$x !== void 0 ? _it$x : 0;
                    var y = (_it$y2 = it.y) !== null && _it$y2 !== void 0 ? _it$y2 : 0;

                    /* helpers to persist drag / resize */
                    var savePos = function savePos(nx, ny) {
                      var items = el.props.items.slice();
                      items[iIdx] = _objectSpread(_objectSpread({}, items[iIdx]), {}, {
                        x: nx,
                        y: ny,
                        w: w,
                        h: h
                      });
                      commit(el.id, {
                        props: _objectSpread(_objectSpread({}, el.props), {}, {
                          items: items
                        })
                      });
                    };
                    var saveResize = function saveResize(nw, nh, nx, ny) {
                      var items = el.props.items.slice();
                      items[iIdx] = _objectSpread(_objectSpread({}, items[iIdx]), {}, {
                        x: nx,
                        y: ny,
                        w: nw,
                        h: nh
                      });
                      commit(el.id, {
                        props: _objectSpread(_objectSpread({}, el.props), {}, {
                          items: items
                        })
                      });
                    };
                    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
                      // bounds="parent" /* parent = dynamic wrapper */
                      size: {
                        width: w,
                        height: h
                      },
                      position: {
                        x: x,
                        y: y
                      },
                      enableResizing: !readOnly,
                      disableDragging: readOnly,
                      onDragStart: function onDragStart(e) {
                        return e.stopPropagation();
                      } /* keep fakeBox still */,
                      onDragStop: function onDragStop(_, d) {
                        return savePos(d.x, d.y);
                      },
                      onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
                        return saveResize(ref.offsetWidth, ref.offsetHeight, pos.x, pos.y);
                      },
                      style: {
                        position: "absolute",
                        cursor: readOnly ? "default" : "move",
                        background: (_it$bg = it.bg) !== null && _it$bg !== void 0 ? _it$bg : "transparent",
                        // Conditionally show border: only if not readOnly (i.e., in editor/customize mode)
                        border: !readOnly && typeof window !== "undefined" && window.location.href.includes("customize") ? "1px dashed #888" : "none",
                        //   background: "#fff",
                        padding: 4
                      },
                      children: function () {
                        switch (it.type) {
                          /* TEXT-LIKE */
                          case "text":
                          case "title":
                          case "subtitle":
                            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                              style: {
                                width: "100%",
                                height: "100%",
                                color: it.color,
                                fontFamily: it.font,
                                fontSize: it.size,
                                fontWeight: it.bold ? "bold" : "normal",
                                textAlign: it.align || "center",
                                whiteSpace: "pre-wrap",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center"
                              },
                              children: it.text
                            });

                          /* TEXTBOX */
                          case "textbox":
                            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                              style: {
                                width: "100%",
                                height: "100%",
                                color: it.color,
                                fontFamily: it.font,
                                fontSize: it.size,
                                fontWeight: it.bold ? "bold" : "normal",
                                textAlign: it.align,
                                background: it.bg,
                                padding: 4,
                                whiteSpace: "pre-wrap",
                                overflow: "auto"
                              },
                              children: it.text
                            });

                          /* BUTTON */
                          case "button":
                            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                              onClick: function onClick() {
                                return it.action === "next" ? _goto2(it.target) : runLink(it.url);
                              },
                              style: {
                                width: "100%",
                                height: "100%",
                                background: it.color,
                                borderRadius: it.radius,
                                fontFamily: it.font,
                                fontSize: it.size,
                                color: "#fff",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center"
                              },
                              children: it.text
                            });

                          /* IMAGE */
                          case "image":
                            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                              src: it.s3Url || "https://dummyimage.com/".concat(it.w || 100, "x").concat(it.h || 80, "/eee/aaa&text=img"),
                              onError: function onError(e) {
                                e.target.src = "https://dummyimage.com/".concat(it.w || 100, "x").concat(it.h || 80, "/eee/aaa&text=Error");
                              },
                              onClick: function onClick() {
                                return runLink(it.url);
                              },
                              style: {
                                width: "100%",
                                height: "100%",
                                borderRadius: it.radius || 0,
                                cursor: it.url ? "pointer" : "default",
                                objectFit: "cover"
                              }
                            });

                          /* VIDEO */
                          case "video":
                            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
                              src: it.s3Url || "",
                              onError: function onError(e) {
                                alert("Error when uploaded video");
                              },
                              style: {
                                width: "100%",
                                height: "100%",
                                objectFit: "cover"
                              },
                              controls: true,
                              autoPlay: true,
                              playsInline: true
                            });

                          /* GALLERY */
                          case "gallery":
                            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                              style: {
                                width: "100%",
                                height: "100%",
                                display: "flex",
                                gap: it.gap,
                                overflowX: "auto",
                                scrollbarWidth: "none",
                                msOverflowStyle: "none",
                                touchAction: "pan-x",
                                cursor: "grab"
                              },
                              onMouseDown: function onMouseDown(e) {
                                return startDrag(e.currentTarget, e.clientX);
                              },
                              onMouseMove: function onMouseMove(e) {
                                return moveDrag(e.currentTarget, e.clientX);
                              },
                              onMouseUp: function onMouseUp(e) {
                                return endDrag(e.currentTarget);
                              },
                              onMouseLeave: function onMouseLeave(e) {
                                return endDrag(e.currentTarget);
                              },
                              children: it.images.map(function (g, idx) {
                                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                                  src: g.s3Url || "https://dummyimage.com/80x60/eee/aaa&text=Item",
                                  onError: function onError(e) {
                                    e.target.src = "https://dummyimage.com/80x60/eee/aaa&text=Error";
                                  },
                                  onClick: function onClick() {
                                    return runLink(g.url);
                                  },
                                  style: {
                                    height: it.imageH,
                                    flexShrink: 0,
                                    borderRadius: it.radius,
                                    cursor: g.url ? "pointer" : "default",
                                    objectFit: "cover"
                                  }
                                }, idx);
                              })
                            });
                          default:
                            return null;
                        }
                      }()
                    }, iIdx);
                  })
                });
              }()
            }), el.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              onClick: function onClick() {
                return _goto2(el.props.target);
              },
              style: {
                borderRadius: "50%",
                border: "2px solid ".concat(el.props.color),
                color: el.props.color,
                background: "transparent",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: "20px",
                cursor: "pointer",
                width: "100%",
                height: "100%",
                userSelect: "none"
              },
              children: "\xD7"
            }), el.type === "messageButton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MessageButtonEl, {
              el: el,
              runLink: runLink,
              "goto": _goto2
            })]
          }, animationDivKey)
        }, el.id);
      })
    }, safe.animKey)]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */

function serialize(currentState) {
  // Basic validation
  if (!currentState || !currentState.screens || !Array.isArray(currentState.screens)) {
    console.warn("Serialize: Invalid or empty state provided.", currentState);
    return _objectSpread(_objectSpread({}, startState()), {}, {
      _thumbnailHintUrl: null,
      selected: null
    });
  }
  var bestThumbnailUrl = null;
  var screensToPersist = currentState.screens.map(function (sc) {
    if (!sc || !Array.isArray(sc.elements)) {
      return _objectSpread(_objectSpread({}, sc), {}, {
        elements: []
      }); // Ensure elements array exists
    }
    var elementsToPersist = sc.elements.map(function (el) {
      var newEl = _objectSpread({}, el);
      var newProps = _objectSpread({}, el.props);

      // Helper to find first s3Url for thumbnail hint
      var findS3UrlForThumbnail = function findS3UrlForThumbnail(s3Url) {
        if (!bestThumbnailUrl && s3Url && typeof s3Url === "string" && s3Url.trim() !== "") {
          // Prioritize images for thumbnail, then videos
          if (s3Url.match(/\.(jpeg|jpg|gif|png|webp|svg)$/i)) {
            bestThumbnailUrl = s3Url;
          } else if (!bestThumbnailUrl && s3Url.match(/\.(mp4|webm|ogg)$/i)) {
            bestThumbnailUrl = s3Url; // Use video if no image found yet
          }
        }
      };

      // Clean transient props and find thumbnail from top-level elements
      if (el.type === "image" || el.type === "video") {
        findS3UrlForThumbnail(newProps.s3Url);
        var assetLoading = newProps.assetLoading,
          assetError = newProps.assetError,
          file = newProps.file,
          src = newProps.src,
          persistentProps = _objectWithoutProperties(newProps, _excluded);
        newEl.props = persistentProps;
      } else if (el.type === "gallery") {
        newProps.images = newProps.images.map(function (img) {
          findS3UrlForThumbnail(img.s3Url);
          var assetLoading = img.assetLoading,
            assetError = img.assetError,
            file = img.file,
            src = img.src,
            persistentImgProps = _objectWithoutProperties(img, _excluded2);
          return persistentImgProps;
        });
        newEl.props = newProps;
      } else if (el.type === "fakeBox" && newProps.items) {
        newProps.items = newProps.items.map(function (item) {
          var newItem = _objectSpread({}, item);
          var newItemProps = _objectSpread({}, item); // fakeBox items store props directly on item

          if (item.type === "image" || item.type === "video") {
            findS3UrlForThumbnail(newItemProps.s3Url);
            var _assetLoading = newItemProps.assetLoading,
              _assetError = newItemProps.assetError,
              _file = newItemProps.file,
              _src = newItemProps.src,
              persistentItemProps = _objectWithoutProperties(newItemProps, _excluded3);
            newItem = persistentItemProps; // Replace item with cleaned props
          } else if (item.type === "gallery" && newItemProps.images) {
            newItemProps.images = newItemProps.images.map(function (gImg) {
              findS3UrlForThumbnail(gImg.s3Url);
              var assetLoading = gImg.assetLoading,
                assetError = gImg.assetError,
                file = gImg.file,
                src = gImg.src,
                persistentGImgProps = _objectWithoutProperties(gImg, _excluded4);
              return persistentGImgProps;
            });
            newItem = newItemProps;
          }
          return newItem;
        });
        newEl.props = newProps;
      }
      return newEl;
    });
    return _objectSpread(_objectSpread({}, sc), {}, {
      elements: elementsToPersist
    });
  });
  var dataToSave = _objectSpread(_objectSpread({}, currentState), {}, {
    selected: null,
    // Editor-specific UI state
    animKey: currentState.animKey || 0,
    // Ensure animKey is present
    screens: screensToPersist
  });
  return _objectSpread(_objectSpread({}, dataToSave), {}, {
    _thumbnailHintUrl: bestThumbnailUrl
  });
}
var deserialize = function deserialize() {
  var backendData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  if (backendData && backendData.screens && Array.isArray(backendData.screens)) {
    var deserializedScreens = backendData.screens.map(function (screen) {
      if (!screen || !Array.isArray(screen.elements)) {
        return _objectSpread(_objectSpread({}, screen), {}, {
          elements: []
        });
      }
      return _objectSpread(_objectSpread({}, screen), {}, {
        elements: screen.elements.map(function (el) {
          var newEl = _objectSpread({}, el);
          var newProps = _objectSpread({}, el.props);
          if (el.type === "image" || el.type === "video") {
            newProps = _objectSpread({
              s3Url: newProps.s3Url || "",
              assetLoading: false,
              assetError: null,
              assetDims: newProps.assetDims || null
            }, newProps);
          } else if (el.type === "gallery" && newProps.images) {
            newProps.images = newProps.images.map(function (img) {
              return _objectSpread({
                s3Url: img.s3Url || "",
                assetLoading: false,
                assetError: null,
                assetDims: img.assetDims || null
              }, img);
            });
          } else if (el.type === "fakeBox" && newProps.items) {
            newProps.items = newProps.items.map(function (item) {
              var newItem = _objectSpread({}, item); // fakeBox items store props directly
              if (item.type === "image" || item.type === "video") {
                newItem = _objectSpread({
                  s3Url: item.s3Url || "",
                  assetLoading: false,
                  assetError: null,
                  assetDims: item.assetDims || null
                }, item);
              } else if (item.type === "gallery" && item.images) {
                newItem.images = item.images.map(function (gImg) {
                  return _objectSpread({
                    s3Url: gImg.s3Url || "",
                    assetLoading: false,
                    assetError: null,
                    assetDims: gImg.assetDims || null
                  }, gImg);
                });
              }
              return newItem;
            });
          }
          newEl.props = newProps;
          return newEl;
        })
      });
    });
    return _objectSpread(_objectSpread(_objectSpread({}, startState()), backendData), {}, {
      selected: null,
      animKey: backendData.animKey || 0,
      screens: deserializedScreens
    });
  }
  return startState();
};

/***/ }),

/***/ "./templates/scratch.js":
/*!******************************!*\
  !*** ./templates/scratch.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["props"],
  _excluded2 = ["coverImageLoading", "coverImageError", "mainImageLoading", "mainImageError", "interactionResetKey"],
  _excluded3 = ["assetLoading", "assetError"],
  _excluded4 = ["assetLoading", "assetError"];
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }



// --- S3/Backend Integration: Global Constants and Helpers ---

var API_BASE_URL = "https://localhost:3001" || 0;
var getAuthToken = function getAuthToken() {
  if (typeof window !== "undefined") {
    return localStorage.getItem("jwt");
  }
  return null;
};
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(fileObject) {
    var formData, token, headers, response, errorData, result, _t3, _t4;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          formData = new FormData();
          formData.append("assetFile", fileObject);
          _context2.p = 1;
          token = getAuthToken();
          headers = {};
          if (token) {
            headers["Authorization"] = "Bearer ".concat(token);
          }
          _context2.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData,
            headers: headers
          });
        case 2:
          response = _context2.v;
          if (response.ok) {
            _context2.n = 7;
            break;
          }
          _context2.p = 3;
          _context2.n = 4;
          return response.json();
        case 4:
          errorData = _context2.v;
          _context2.n = 6;
          break;
        case 5:
          _context2.p = 5;
          _t3 = _context2.v;
          errorData = {
            message: "Upload failed: ".concat(response.statusText || response.status)
          };
        case 6:
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 7:
          _context2.n = 8;
          return response.json();
        case 8:
          result = _context2.v;
          if (result.url) {
            _context2.n = 9;
            break;
          }
          throw new Error("Upload successful, but no URL was returned from the backend.");
        case 9:
          return _context2.a(2, result.url);
        case 10:
          _context2.p = 10;
          _t4 = _context2.v;
          console.error("Error uploading file to backend:", _t4);
          if (!(_t4 instanceof Error)) {
            _context2.n = 11;
            break;
          }
          throw _t4;
        case 11:
          throw new Error(String(_t4 || "An unknown error occurred during file upload."));
        case 12:
          return _context2.a(2);
      }
    }, _callee2, null, [[3, 5], [1, 10]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
function measureImageDimensions(_x2) {
  return _measureImageDimensions.apply(this, arguments);
} // --- End S3/Backend Integration Helpers ---
/* ---------- meta ---------- */
function _measureImageDimensions() {
  _measureImageDimensions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(s3Url) {
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          return _context3.a(2, new Promise(function (resolve, reject) {
            if (!s3Url || !s3Url.match(/\.(jpeg|jpg|gif|png|webp|svg)$/i)) {
              resolve(null);
              return;
            }
            var img = new Image();
            img.onload = function () {
              resolve({
                width: img.naturalWidth,
                height: img.naturalHeight
              });
            };
            img.onerror = function (err) {
              console.error("Error loading image for measurement:", s3Url, err);
              reject(new Error("Could not load image to measure dimensions. Check S3 URL and CORS."));
            };
            img.crossOrigin = "anonymous";
            img.src = s3Url;
          }));
      }
    }, _callee3);
  }));
  return _measureImageDimensions.apply(this, arguments);
}
var meta = {
  id: "scratch",
  name: "Scratch & Reveal",
  description: "Interactive scratch-off or slide-up reveal ad.",
  canvas: {
    w: 378,
    h: 648
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'"];
var TRANSITIONS = ["fade", "zoom-in", "zoom-out", "slide-left", "slide-right", "slide-up", "slide-down", "rotate", "flip"];
var ELEMENT_ANIMATIONS = ["none", "fadeIn", "slideInUp", "zoomInSimple", "bounceIn", "rotateIn"];
var SCRATCH_HINT_ANIMATION_TYPES = [{
  id: "none",
  name: "None"
}, {
  id: "fingerSwipeHorizontal",
  name: "Pointing Finger Swipe Horizontal"
}, {
  id: "fingerSwipeDiagonal",
  name: "Pointing Finger Swipe Diagonal"
}, {
  id: "fingerCircle",
  name: "Pointing Finger Circle"
}, {
  id: "fingerZigZag",
  name: "Pointing Finger Zig-Zag"
}, {
  id: "handMove",
  name: "Hand Move (General)"
} // Kept existing hand move
];
var SLIDE_ARROW_ANIMATION_STYLES = [{
  id: "bounceArrow",
  name: "Bounce"
}, {
  id: "pulseArrow",
  name: "Pulse"
}, {
  id: "staticArrow",
  name: "Static (No Animation)"
}];
var startState = function startState() {
  return {
    bg: "#ffffff",
    current: 0,
    selected: null,
    animKey: 0,
    transition: "fade",
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }]
  };
};
var newElement = function newElement(type) {
  var base = {
    id: crypto.randomUUID(),
    type: type,
    x: 10,
    y: 10,
    w: meta.canvas.w * 0.8,
    h: meta.canvas.h * 0.4,
    props: {
      animation: "none"
    }
  };
  switch (type) {
    case "button":
      // Kept for compatibility
      return _objectSpread(_objectSpread({}, base), {}, {
        w: 120,
        h: 40,
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          text: "Click Me",
          bgColor: "#007bff",
          textColor: "#ffffff",
          fontSize: 16,
          fontFamily: "Arial",
          action: {
            type: "none"
          }
        })
      });
    case "title":
      // Kept for compatibility
      return _objectSpread(_objectSpread({}, base), {}, {
        h: 50,
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          text: "Your Title Here",
          color: "#000000",
          fontSize: 24,
          fontFamily: "Arial",
          textAlign: "center"
        })
      });
    case "scratchCard":
      return _objectSpread(_objectSpread({}, base), {}, {
        props: _objectSpread(_objectSpread({}, base.props), {}, {
          coverImageUrl: "",
          coverImageLoading: false,
          coverImageError: null,
          coverImageDims: null,
          mainImageUrl: "",
          mainImageLoading: false,
          mainImageError: null,
          mainImageDims: null,
          mainImageLink: "",
          interactionType: "scratch",
          scratchHintAnimationType: "fingerSwipeHorizontal",
          scratchHintPrimaryColor: "#FFFFFF",
          scratchHintSecondaryColor: "rgba(0,0,0,0.5)",
          scratchHintSize: 1,
          scratchHintPositionX: 50,
          scratchHintPositionY: 50,
          scratchHintBlurCover: true,
          scratchHintBackgroundColor: "rgba(0,0,0,0.2)",
          // Stored as rgba or hex8
          slideArrowColor: "#FFFFFF",
          slideArrowSize: 24,
          slideArrowAnimation: "bounceArrow",
          interactionResetKey: 0 // NEW: For re-starting interaction in editor
        })
      });
    default:
      var defaultElem = _objectSpread(_objectSpread({}, base), {}, {
        w: 100,
        h: 30
      });
      return defaultElem;
  }
};

/* ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });
  var setCurrent = function setCurrent(i) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: i,
      selected: null
    }));
  };
  var addScreen = function addScreen() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: safe.screens.length,
      selected: null,
      screens: [].concat(_toConsumableArray(safe.screens), [{
        id: crypto.randomUUID(),
        elements: []
      }])
    }));
  };
  var duplicateScreen = function duplicateScreen() {
    var newScreen = JSON.parse(JSON.stringify(scr));
    newScreen.id = crypto.randomUUID();
    newScreen.elements = newScreen.elements.map(function (el) {
      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, el), {}, {
        id: crypto.randomUUID()
      }, el.type === "scratchCard" && {
        props: _objectSpread(_objectSpread({}, el.props), {}, {
          coverImageLoading: false,
          // Reset loading states
          coverImageError: null,
          mainImageLoading: false,
          mainImageError: null,
          interactionResetKey: 0 // Reset this on duplicate
        })
      }), (el.type === "image" || el.type === "video") && {
        // Example for other types
        props: _objectSpread(_objectSpread({}, el.props), {}, {
          assetLoading: false,
          assetError: null
        })
      }), el.type === "gallery" && {
        // Example for other types
        props: _objectSpread(_objectSpread({}, el.props), {}, {
          images: el.props.images.map(function (img) {
            return _objectSpread(_objectSpread({}, img), {}, {
              assetLoading: false,
              assetError: null
            });
          })
        })
      });
    });
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: safe.screens.length,
      selected: null,
      screens: [].concat(_toConsumableArray(safe.screens), [newScreen])
    }));
  };
  var delScreen = function delScreen(idx) {
    if (safe.screens.length === 1) return;
    var arr = safe.screens.slice();
    arr.splice(idx, 1);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: arr,
      current: Math.max(0, idx - 1),
      selected: null
    }));
  };
  var add = function add(t) {
    var newElem = newElement(t);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: newElem.id,
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newElem])
        }) : sc;
      })
    }));
  };
  var patchSel = function patchSel(fn) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc, i) {
        return i !== safe.current ? sc : _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === safe.selected ? fn(e) : e;
          })
        });
      })
    }));
  };
  var delSel = function delSel() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc, i) {
        return i !== safe.current ? sc : _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.filter(function (e) {
            return e.id !== safe.selected;
          })
        });
      })
    }));
  };
  var duplicateSel = function duplicateSel() {
    if (!sel) return;
    var copy = JSON.parse(JSON.stringify(sel));
    copy.id = crypto.randomUUID();
    copy.x += 10;
    copy.y += 10;
    if (copy.type === "scratchCard") {
      copy.props.coverImageLoading = false;
      copy.props.coverImageError = null;
      copy.props.mainImageLoading = false;
      copy.props.mainImageError = null;
      copy.props.interactionResetKey = 0; // Reset this on duplicate
    }
    // Reset loading/error for other types if they exist
    if (copy.type === "image" || copy.type === "video") {
      copy.props.assetLoading = false;
      copy.props.assetError = null;
    }
    if (copy.type === "gallery") {
      copy.props.images = copy.props.images.map(function (img) {
        return _objectSpread(_objectSpread({}, img), {}, {
          assetLoading: false,
          assetError: null
        });
      });
    }
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: copy.id,
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [copy])
        }) : sc;
      })
    }));
  };
  var handleAssetChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(event, elementType, elementId) {
      var _event$target$files;
      var _galleryImageIndex,
        imageRole,
        file,
        updatePath,
        s3Url,
        assetDims,
        updateSuccessPath,
        updateErrorPath,
        _args = arguments,
        _t,
        _t2;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _galleryImageIndex = _args.length > 3 && _args[3] !== undefined ? _args[3] : null;
            imageRole = _args.length > 4 && _args[4] !== undefined ? _args[4] : null;
            file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];
            if (file) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            // Set loading state
            updatePath = function updatePath(currentElementProps) {
              if (elementType === "scratchCard") {
                if (imageRole === "cover") {
                  return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                    coverImageLoading: true,
                    coverImageError: null,
                    coverImageUrl: "",
                    coverImageDims: null
                  });
                } else if (imageRole === "main") {
                  return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                    mainImageLoading: true,
                    mainImageError: null,
                    mainImageUrl: "",
                    mainImageDims: null
                  });
                }
              }
              // Fallback for other potential asset types (not used by scratchCard directly for this func)
              return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                assetLoading: true,
                assetError: null,
                s3Url: "",
                assetDims: null
              });
            };
            patchSel(function (el) {
              return _objectSpread(_objectSpread({}, el), {}, {
                props: updatePath(el.props)
              });
            });
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file);
          case 3:
            s3Url = _context.v;
            assetDims = null;
            if (!file.type.startsWith("image/")) {
              _context.n = 7;
              break;
            }
            _context.p = 4;
            _context.n = 5;
            return measureImageDimensions(s3Url);
          case 5:
            assetDims = _context.v;
            _context.n = 7;
            break;
          case 6:
            _context.p = 6;
            _t = _context.v;
            console.warn("Could not measure dimensions for ".concat(s3Url, ": ").concat(_t.message));
          case 7:
            updateSuccessPath = function updateSuccessPath(currentElementProps) {
              if (elementType === "scratchCard") {
                if (imageRole === "cover") {
                  return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                    coverImageUrl: s3Url,
                    coverImageDims: assetDims,
                    coverImageLoading: false
                  });
                } else if (imageRole === "main") {
                  return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                    mainImageUrl: s3Url,
                    mainImageDims: assetDims,
                    mainImageLoading: false
                  });
                }
              }
              return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                s3Url: s3Url,
                assetDims: assetDims,
                assetLoading: false
              });
            };
            patchSel(function (el) {
              return _objectSpread(_objectSpread({}, el), {}, {
                props: updateSuccessPath(el.props)
              });
            });
            _context.n = 9;
            break;
          case 8:
            _context.p = 8;
            _t2 = _context.v;
            updateErrorPath = function updateErrorPath(currentElementProps) {
              var errorMessage = _t2.message || "Upload failed.";
              if (elementType === "scratchCard") {
                if (imageRole === "cover") {
                  return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                    coverImageLoading: false,
                    coverImageError: errorMessage
                  });
                } else if (imageRole === "main") {
                  return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                    mainImageLoading: false,
                    mainImageError: errorMessage
                  });
                }
              }
              return _objectSpread(_objectSpread({}, currentElementProps), {}, {
                assetLoading: false,
                assetError: errorMessage
              });
            };
            patchSel(function (el) {
              return _objectSpread(_objectSpread({}, el), {}, {
                props: updateErrorPath(el.props)
              });
            });
          case 9:
            return _context.a(2);
        }
      }, _callee, null, [[4, 6], [2, 8]]);
    }));
    return function handleAssetChange(_x3, _x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();

  // Helper for RGBA/HEX8 color input
  var getBaseColorAndAlpha = function getBaseColorAndAlpha(colorString) {
    var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#000000";
    var defaultAlpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.2;
    if (typeof colorString !== "string") return {
      baseColor: defaultColor,
      alpha: defaultAlpha
    };
    if (colorString.startsWith("#") && colorString.length === 9) {
      // #RRGGBBAA
      return {
        baseColor: colorString.substring(0, 7),
        alpha: parseInt(colorString.substring(7, 9), 16) / 255
      };
    } else if (colorString.startsWith("#") && colorString.length === 7) {
      // #RRGGBB
      return {
        baseColor: colorString,
        alpha: 1.0
      };
    } else if (colorString.startsWith("rgba")) {
      try {
        var parts = colorString.match(/[\d.]+/g);
        if (parts && parts.length === 4) {
          var r = parseInt(parts[0]);
          var g = parseInt(parts[1]);
          var b = parseInt(parts[2]);
          var a = parseFloat(parts[3]);
          var toHex = function toHex(c) {
            return c.toString(16).padStart(2, "0");
          };
          return {
            baseColor: "#".concat(toHex(r)).concat(toHex(g)).concat(toHex(b)),
            alpha: a
          };
        }
      } catch (e) {
        /* Fallthrough */
      }
    }
    // Fallback if parsing fails or unknown format
    return {
      baseColor: defaultColor,
      alpha: defaultAlpha
    };
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Background", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), safe.screens.length > 1 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Screen transition", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
        value: safe.transition,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            transition: e.target.value
          }));
        },
        className: "border px-1",
        children: TRANSITIONS.map(function (t) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: t,
            children: t
          }, t);
        })
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "flex flex-wrap gap-2",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: function onClick() {
          return add("scratchCard");
        },
        className: "btn",
        children: "+ scratchCard"
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "flex items-center gap-2 overflow-x-auto pb-2",
      children: [safe.screens.map(function (sc, i) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "relative w-10 h-16 border ".concat(i === safe.current ? "border-blue-600" : "border-gray-300", " rounded flex-shrink-0 cursor-pointer"),
          onClick: function onClick() {
            return setCurrent(i);
          },
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            className: "absolute -top-1 -right-1 text-xs text-red-600 cursor-pointer hover:text-red-800",
            onClick: function onClick(e) {
              e.stopPropagation();
              delScreen(i);
            },
            children: "\xD7"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            className: "absolute inset-0 flex items-center justify-center text-[10px]",
            children: i + 1
          })]
        }, sc.id);
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: addScreen,
        className: "btn-secondary text-xs",
        children: "+ new screen"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        onClick: duplicateScreen,
        className: "btn-secondary text-xs",
        children: "+ dup screen"
      })]
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex justify-between items-center",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "capitalize font-medium",
          children: sel.type
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "space-x-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: duplicateSel,
            className: "text-blue-600 hover:text-blue-800",
            children: "Copy"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: delSel,
            className: "text-red-600 hover:text-red-800",
            children: "Delete"
          })]
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
        className: "block text-sm font-medium",
        children: ["Animation:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: sel.props.animation || "none",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  animation: e.target.value
                })
              });
            });
          },
          className: "border w-full rounded p-0.5 mt-1",
          children: ELEMENT_ANIMATIONS.map(function (anim) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: anim,
              children: anim
            }, anim);
          })
        })]
      }), sel.type === "scratchCard" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "space-y-2 mt-2",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
            className: "block text-sm font-medium",
            children: "Cover Image:"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "file",
            accept: "image/*",
            disabled: sel.props.coverImageLoading,
            onChange: function onChange(e) {
              return handleAssetChange(e, "scratchCard", sel.id, null, "cover");
            },
            className: "block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 disabled:opacity-50"
          }), sel.props.coverImageLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
            className: "text-xs text-gray-500",
            children: "Loading cover..."
          }), sel.props.coverImageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-red-500",
            children: ["Error: ", sel.props.coverImageError]
          }), sel.props.coverImageUrl && !sel.props.coverImageLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.coverImageUrl,
            alt: "Cover preview",
            className: "mt-1 max-w-full h-auto max-h-20 object-contain border"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
            className: "block text-sm font-medium",
            children: "Main Image:"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "file",
            accept: "image/*",
            disabled: sel.props.mainImageLoading,
            onChange: function onChange(e) {
              return handleAssetChange(e, "scratchCard", sel.id, null, "main");
            },
            className: "block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 disabled:opacity-50"
          }), sel.props.mainImageLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
            className: "text-xs text-gray-500",
            children: "Loading main image..."
          }), sel.props.mainImageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-red-500",
            children: ["Error: ", sel.props.mainImageError]
          }), sel.props.mainImageUrl && !sel.props.mainImageLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.mainImageUrl,
            alt: "Main image preview",
            className: "mt-1 max-w-full h-auto max-h-20 object-contain border"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
            className: "block text-sm font-medium",
            children: "Main Image Link URL (optional):"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            placeholder: "https://example.com",
            value: sel.props.mainImageLink || "",
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    mainImageLink: e.target.value
                  })
                });
              });
            },
            className: "border w-full px-1 rounded mt-1"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
            className: "block text-sm font-medium",
            children: "Interaction Type:"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
            value: sel.props.interactionType,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    interactionType: e.target.value
                  })
                });
              });
            },
            className: "border w-full rounded p-0.5 mt-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: "scratch",
              children: "Scratch"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: "slideUp",
              children: "Slide Up"
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
          onClick: function onClick() {
            patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  interactionResetKey: (o.props.interactionResetKey || 0) + 1
                })
              });
            });
          },
          className: "btn-secondary text-xs mt-1 w-full",
          children: "Re-start Interaction (Editor Preview)"
        }), sel.props.interactionType === "scratch" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "border-t pt-2 mt-2 space-y-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
            className: "text-sm font-semibold",
            children: "Scratch Hint Animation"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Animation Type:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
              value: sel.props.scratchHintAnimationType || "none",
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      scratchHintAnimationType: e.target.value
                    })
                  });
                });
              },
              className: "border w-full rounded p-0.5 mt-0.5",
              children: SCRATCH_HINT_ANIMATION_TYPES.map(function (anim) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: anim.id,
                  children: anim.name
                }, anim.id);
              })
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Primary Color:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.scratchHintPrimaryColor || "#FFFFFF",
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      scratchHintPrimaryColor: e.target.value
                    })
                  });
                });
              },
              className: "ml-1 h-5 w-8 border-gray-300 rounded"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Secondary Color (Trail/Accent):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.scratchHintSecondaryColor || "rgba(0,0,0,0.5)",
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      scratchHintSecondaryColor: e.target.value
                    })
                  });
                });
              },
              className: "ml-1 h-5 w-8 border-gray-300 rounded"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Hint Background Color:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: getBaseColorAndAlpha(sel.props.scratchHintBackgroundColor, "#000000", 0.2).baseColor,
              onChange: function onChange(e) {
                var currentAlpha = getBaseColorAndAlpha(sel.props.scratchHintBackgroundColor, "#000000", 0.2).alpha;
                var alphaHex = Math.round(currentAlpha * 255).toString(16).padStart(2, "0");
                patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      scratchHintBackgroundColor: "".concat(e.target.value).concat(alphaHex)
                    })
                  });
                });
              },
              className: "ml-1 h-5 w-8 border-gray-300 rounded"
            }), "Opacity:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "range",
              min: "0",
              max: "1",
              step: "0.01",
              value: getBaseColorAndAlpha(sel.props.scratchHintBackgroundColor, "#000000", 0.2).alpha,
              onChange: function onChange(e) {
                var currentColor = getBaseColorAndAlpha(sel.props.scratchHintBackgroundColor, "#000000", 0.2).baseColor;
                var alphaHex = Math.round(parseFloat(e.target.value) * 255).toString(16).padStart(2, "0");
                patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      scratchHintBackgroundColor: "".concat(currentColor).concat(alphaHex)
                    })
                  });
                });
              },
              className: "ml-1 w-16 align-middle"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Size Scale (0.5-2):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0.5",
              max: "2",
              step: "0.1",
              value: sel.props.scratchHintSize || 1,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      scratchHintSize: parseFloat(e.target.value)
                    })
                  });
                });
              },
              className: "border w-16 rounded p-0.5 ml-1"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Position X (%):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              max: "100",
              step: "1",
              value: sel.props.scratchHintPositionX || 50,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      scratchHintPositionX: parseInt(e.target.value)
                    })
                  });
                });
              },
              className: "border w-16 rounded p-0.5 ml-1"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Position Y (%):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              max: "100",
              step: "1",
              value: sel.props.scratchHintPositionY || 50,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      scratchHintPositionY: parseInt(e.target.value)
                    })
                  });
                });
              },
              className: "border w-16 rounded p-0.5 ml-1"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "checkbox",
              checked: sel.props.scratchHintBlurCover || false,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      scratchHintBlurCover: e.target.checked
                    })
                  });
                });
              },
              className: "mr-1 align-middle"
            }), "Blur Cover Behind Hint"]
          })]
        }), sel.props.interactionType === "slideUp" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "border-t pt-2 mt-2 space-y-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
            className: "text-sm font-semibold",
            children: "Slide Up Arrow"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Arrow Color:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.slideArrowColor || "#FFFFFF",
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      slideArrowColor: e.target.value
                    })
                  });
                });
              },
              className: "ml-1 h-5 w-8 border-gray-300 rounded"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Arrow Size (px):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "50",
              step: "1",
              value: sel.props.slideArrowSize || 24,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      slideArrowSize: parseInt(e.target.value)
                    })
                  });
                });
              },
              className: "border w-16 rounded p-0.5 ml-1"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Arrow Animation:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
              value: sel.props.slideArrowAnimation || "bounceArrow",
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      slideArrowAnimation: e.target.value
                    })
                  });
                });
              },
              className: "border w-full rounded p-0.5 mt-0.5",
              children: SLIDE_ARROW_ANIMATION_STYLES.map(function (anim) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: anim.id,
                  children: anim.name
                }, anim.id);
              })
            })]
          })]
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500 italic",
      children: "Click the scratch card on the canvas to edit its properties, or add one if none exist."
    })]
  });
}

// Helper component for Scratch/Slide interaction
var ScratchRevealElement = function ScratchRevealElement(_ref3) {
  var element = _ref3.element,
    readOnly = _ref3.readOnly;
  var props = element.props,
    w = element.w,
    h = element.h;
  var coverImageUrl = props.coverImageUrl,
    mainImageUrl = props.mainImageUrl,
    mainImageLink = props.mainImageLink,
    interactionType = props.interactionType,
    scratchHintAnimationType = props.scratchHintAnimationType,
    scratchHintPrimaryColor = props.scratchHintPrimaryColor,
    scratchHintSecondaryColor = props.scratchHintSecondaryColor,
    scratchHintSize = props.scratchHintSize,
    scratchHintPositionX = props.scratchHintPositionX,
    scratchHintPositionY = props.scratchHintPositionY,
    scratchHintBlurCover = props.scratchHintBlurCover,
    scratchHintBackgroundColor = props.scratchHintBackgroundColor,
    slideArrowColor = props.slideArrowColor,
    slideArrowSize = props.slideArrowSize,
    slideArrowAnimation = props.slideArrowAnimation,
    interactionResetKey = props.interactionResetKey;
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0),
    _useState2 = _slicedToArray(_useState, 2),
    revealedPercent = _useState2[0],
    setRevealedPercent = _useState2[1];
  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isRevealed = _useState4[0],
    setIsRevealed = _useState4[1];
  var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false),
    _useState6 = _slicedToArray(_useState5, 2),
    isLinkActive = _useState6[0],
    setIsLinkActive = _useState6[1];
  var _useState7 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true),
    _useState8 = _slicedToArray(_useState7, 2),
    showScratchHint = _useState8[0],
    setShowScratchHint = _useState8[1];
  var _useState9 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0),
    _useState0 = _slicedToArray(_useState9, 2),
    slideOffset = _useState0[0],
    setSlideOffset = _useState0[1];
  var canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  var coverImageForCanvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // Stores the loaded Image object
  var interactionStateRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({
    isScratching: false,
    isSliding: false,
    startY: 0,
    hasLoadedCover: false // Tracks if the current cover image is loaded on canvas
  });
  var containerStyle = {
    width: "100%",
    height: "100%",
    position: "relative",
    overflow: "hidden",
    userSelect: "none",
    WebkitUserSelect: "none",
    MozUserSelect: "none",
    msUserSelect: "none"
  };
  var imageStyle = {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    objectFit: "cover",
    pointerEvents: "none"
  };
  var scratchBrushSize = Math.max(20, Math.min(w, h) * 0.1);
  var calculateRevealedPercentage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function () {
    if (interactionType !== "scratch" || !canvasRef.current || !interactionStateRef.current.hasLoadedCover) return 0;
    var canvas = canvasRef.current;
    var ctx = canvas.getContext("2d", {
      willReadFrequently: true
    });
    try {
      var pixels = ctx.getImageData(0, 0, canvas.width, canvas.height);
      var transparentPixels = 0;
      var step = 16; // Sample 1 in every 16 pixels (alpha channel only)
      for (var i = 3; i < pixels.data.length; i += step) {
        // Start at alpha of first pixel, step by 4*4=16
        if (pixels.data[i] === 0) transparentPixels++;
      }
      var totalSampledPixels = Math.ceil(pixels.data.length / step);
      if (totalSampledPixels === 0) return 0;
      return Math.min(transparentPixels / totalSampledPixels * 100, 100);
    } catch (e) {
      // console.warn("Error calculating revealed percentage:", e); // Can be noisy due to CORS on initial draw
      return revealedPercent; // return previous if error
    }
  }, [interactionType, revealedPercent]); // Removed w, h from deps as canvas.width/height are used

  // Effect for initialization and reset
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    // General state resets
    setRevealedPercent(0);
    setIsRevealed(false);
    setIsLinkActive(false);
    interactionStateRef.current.isScratching = false;
    interactionStateRef.current.isSliding = false;
    if (interactionType === "scratch") {
      setSlideOffset(0); // Reset slide offset if switching from slideUp
      var canvas = canvasRef.current;
      if (!canvas) return;

      // Ensure canvas dimensions are up-to-date
      if (canvas.width !== w || canvas.height !== h) {
        canvas.width = w;
        canvas.height = h;
      }
      var ctx = canvas.getContext("2d");

      // Cover image will be loaded async. Hide hint until it's ready.
      interactionStateRef.current.hasLoadedCover = false;
      setShowScratchHint(false); // CHANGE: Hide hint initially for "scratch" type

      // ADD: Ensure default composite mode for clearing and subsequent drawing
      ctx.globalCompositeOperation = "source-over";
      ctx.clearRect(0, 0, w, h); // Clear canvas

      if (!coverImageUrl) {
        // No cover image, draw placeholder. Hint remains hidden (setShowScratchHint(false) above).
        // interactionStateRef.current.hasLoadedCover remains false.
        ctx.fillStyle = "#cccccc";
        ctx.fillRect(0, 0, w, h);
        ctx.fillStyle = "#555555";
        ctx.font = "".concat(Math.min(w, h) / 10, "px Arial");
        ctx.textAlign = "center";
        ctx.fillText("No Cover Image", w / 2, h / 2);
        return; // Exit if no cover image
      }
      var coverImg = new Image();
      coverImg.crossOrigin = "anonymous";
      coverImg.onload = function () {
        // FIX 1: Ensure composite operation is correct for drawing the initial cover
        ctx.globalCompositeOperation = "source-over";
        // It's good practice to clear before drawing, though it might have been cleared already.
        ctx.clearRect(0, 0, w, h);
        ctx.drawImage(coverImg, 0, 0, w, h);
        coverImageForCanvasRef.current = coverImg;
        interactionStateRef.current.hasLoadedCover = true;
        // FIX 2: Now that cover is loaded and drawn, show the hint.
        // This state change will trigger a re-render with hasLoadedCover = true.
        setShowScratchHint(true);
      };
      coverImg.onerror = function () {
        interactionStateRef.current.hasLoadedCover = false;
        // Hint remains hidden as setShowScratchHint(false) was called at the start of this "scratch" block.
        // ADD: Ensure proper context state for drawing error message
        ctx.globalCompositeOperation = "source-over";
        ctx.clearRect(0, 0, w, h); // Clear before drawing error text
        ctx.fillStyle = "#cccccc";
        ctx.fillRect(0, 0, w, h);
        ctx.fillStyle = "#555555";
        ctx.font = "".concat(Math.min(w, h) / 10, "px Arial");
        ctx.textAlign = "center";
        ctx.fillText("Cover Error", w / 2, h / 2);
      };
      coverImg.src = coverImageUrl;
    } else if (interactionType === "slideUp") {
      setSlideOffset(0); // Reset slide position
      setShowScratchHint(true); // CHANGE: Explicitly show hint for "slideUp"

      // If switching from scratch, clear the canvas
      if (canvasRef.current) {
        var _canvas = canvasRef.current;
        var _ctx = _canvas.getContext("2d");
        // ADD: Good practice to set composite mode before clearing
        _ctx.globalCompositeOperation = "source-over";
        _ctx.clearRect(0, 0, _canvas.width, _canvas.height);
      }
      // For slideUp, hasLoadedCover isn't strictly needed for its hint,
      // but set for consistency. Assumes coverImageUrl means the div background will render.
      interactionStateRef.current.hasLoadedCover = !!coverImageUrl;
    }
  }, [w, h, coverImageUrl, interactionType, interactionResetKey]); // Dependencies remain the same

  var scratch = function scratch(x, y) {
    if (!canvasRef.current || isRevealed || !interactionStateRef.current.hasLoadedCover) return;
    var canvas = canvasRef.current;
    var ctx = canvas.getContext("2d");
    ctx.globalCompositeOperation = "destination-out";
    ctx.beginPath();
    ctx.arc(x, y, scratchBrushSize, 0, Math.PI * 2, false);
    ctx.fill();
  };
  var updateRevealState = function updateRevealState(currentPercentage) {
    setRevealedPercent(currentPercentage);
    if (currentPercentage >= 5 && showScratchHint) setShowScratchHint(false);
    if (currentPercentage >= 80 && !isLinkActive) setIsLinkActive(true);else if (currentPercentage < 80 && isLinkActive) setIsLinkActive(false);
    if (currentPercentage >= 98 && !isRevealed) setIsRevealed(true);
  };
  var handlePointerDown = function handlePointerDown(e) {
    if (isRevealed) return; // REMOVED readOnly check
    if (showScratchHint) setShowScratchHint(false);
    if (interactionType === "scratch" && interactionStateRef.current.hasLoadedCover) {
      interactionStateRef.current.isScratching = true;
      var rect = canvasRef.current.getBoundingClientRect();
      var scaleX = canvasRef.current.width / rect.width;
      var scaleY = canvasRef.current.height / rect.height;
      var x = ((e.clientX || e.touches[0].clientX) - rect.left) * scaleX;
      var y = ((e.clientY || e.touches[0].clientY) - rect.top) * scaleY;
      scratch(x, y);
      if (e.cancelable) e.preventDefault();
    } else if (interactionType === "slideUp") {
      interactionStateRef.current.isSliding = true;
      interactionStateRef.current.startY = e.touches ? e.touches[0].clientY : e.clientY;
      if (e.cancelable) e.preventDefault();
    }
  };
  var handlePointerMove = function handlePointerMove(e) {
    if (isRevealed) return; // REMOVED readOnly check
    if (interactionType === "scratch" && interactionStateRef.current.isScratching && interactionStateRef.current.hasLoadedCover) {
      var rect = canvasRef.current.getBoundingClientRect();
      var scaleX = canvasRef.current.width / rect.width;
      var scaleY = canvasRef.current.height / rect.height;
      var x = ((e.clientX || e.touches[0].clientX) - rect.left) * scaleX;
      var y = ((e.clientY || e.touches[0].clientY) - rect.top) * scaleY;
      scratch(x, y);
      if (e.cancelable) e.preventDefault();
    } else if (interactionType === "slideUp" && interactionStateRef.current.isSliding) {
      var currentY = e.touches ? e.touches[0].clientY : e.clientY;
      var diff = interactionStateRef.current.startY - currentY;
      if (diff >= 0) {
        // Only allow sliding up
        var newOffset = Math.min(diff, h);
        setSlideOffset(newOffset);
        updateRevealState(newOffset / h * 100);
      }
      if (e.cancelable) e.preventDefault();
    }
  };
  var handlePointerUp = function handlePointerUp() {
    if (isRevealed) return;
    if (interactionType === "scratch" && interactionStateRef.current.isScratching) {
      interactionStateRef.current.isScratching = false;
      updateRevealState(calculateRevealedPercentage());
    } else if (interactionType === "slideUp" && interactionStateRef.current.isSliding) {
      interactionStateRef.current.isSliding = false;
      var slideThreshold = h * 0.3; // 30% slide to reveal fully
      if (slideOffset > slideThreshold) {
        setSlideOffset(h);
        updateRevealState(100);
        setIsRevealed(true); // Mark as fully revealed
      } else {
        setSlideOffset(0); // Snap back
        updateRevealState(0);
      }
    }
  };
  var handleMainImageClick = function handleMainImageClick(e) {
    if (isLinkActive && mainImageLink) {
      e.stopPropagation(); // Prevent editor selection if link is active
      window.open(mainImageLink, "_blank");
    }
  };
  var slideUpIndicator = !isRevealed && interactionType === "slideUp" && showScratchHint && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
    style: {
      position: "absolute",
      bottom: "10px",
      left: "50%",
      transform: "translateX(-50%)",
      zIndex: 3,
      pointerEvents: "none",
      animation: slideArrowAnimation !== "staticArrow" ? "".concat(slideArrowAnimation, " 1.5s infinite") : "none",
      color: slideArrowColor || "white",
      textShadow: "0 0 5px black"
    },
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("svg", {
      width: slideArrowSize || 24,
      height: slideArrowSize || 24,
      viewBox: "0 0 24 24",
      fill: "currentColor",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("path", {
        d: "M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z"
      })
    })
  });
  var PointingFingerSVG = function PointingFingerSVG(_ref4) {
    var primaryColor = _ref4.primaryColor,
      secondaryColor = _ref4.secondaryColor;
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("svg", {
      className: "animated-finger-svg",
      viewBox: "0 0 16 16" // Changed to match the Bootstrap icon's coordinate system
      ,
      width: "100%",
      height: "100%",
      xmlns: "https://www.w3.org/2000/svg",
      style: {
        "--hint-primary-color": primaryColor,
        "--hint-secondary-color": secondaryColor
      },
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("path", {
        fill: "var(--hint-primary-color)",
        d: "M8.5 4.466V1.75a1.75 1.75 0 1 0-3.5 0v5.34l-1.2.24a1.5 1.5 0 0 0-1.196 1.636l.345 3.106a2.5 2.5 0 0 0 .405 1.11l1.433 2.15A1.5 1.5 0 0 0 6.035 16h6.385a1.5 1.5 0 0 0 1.302-.756l1.395-2.441a3.5 3.5 0 0 0 .444-1.389l.271-2.715a2 2 0 0 0-1.99-2.199h-.581a5 5 0 0 0-.195-.248c-.191-.229-.51-.568-.88-.716-.364-.146-.846-.132-1.158-.108l-.132.012a1.26 1.26 0 0 0-.56-.642 2.6 2.6 0 0 0-.738-.288c-.31-.062-.739-.058-1.05-.046z"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("circle", {
        className: "finger-trail-effect",
        cx: "8.5" // Adjusted X for new SVG's fingertip (approximate)
        ,
        cy: "1.75" // Adjusted Y for new SVG's fingertip (approximate)
        ,
        r: "1" // Adjusted radius for new SVG scale (16x16 viewBox)
        ,
        fill: "var(--hint-secondary-color)",
        style: {
          opacity: 0,
          // Let CSS animation control opacity
          transformOrigin: "center center"
        }
      })]
    });
  };
  var scratchHintElement = !isRevealed && interactionType === "scratch" && scratchHintAnimationType !== "none" && showScratchHint && interactionStateRef.current.hasLoadedCover && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    style: {
      position: "absolute",
      left: "".concat(scratchHintPositionX || 50, "%"),
      top: "".concat(scratchHintPositionY || 50, "%"),
      transform: "translate(-50%, -50%) scale(".concat(scratchHintSize || 1, ")"),
      zIndex: 2,
      pointerEvents: "none",
      width: "60px",
      height: "60px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      backgroundColor: scratchHintBackgroundColor || "rgba(0,0,0,0.2)",
      borderRadius: "8px",
      padding: "5px",
      backdropFilter: scratchHintBlurCover ? "blur(3px)" : "none"
    },
    className: "scratch-hint-animation scratch-hint-".concat(scratchHintAnimationType),
    children: [(scratchHintAnimationType === "fingerSwipeHorizontal" || scratchHintAnimationType === "fingerSwipeDiagonal" || scratchHintAnimationType === "fingerCircle" || scratchHintAnimationType === "fingerZigZag") && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PointingFingerSVG, {
      primaryColor: scratchHintPrimaryColor,
      secondaryColor: scratchHintSecondaryColor
    }), scratchHintAnimationType === "handMove" &&
    /*#__PURE__*/
    // Original handMove SVG
    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("svg", {
      xmlns: "https://www.w3.org/2000/svg",
      width: "40",
      height: "40",
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: scratchHintPrimaryColor,
      strokeWidth: "1.5",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      className: "hand-svg-original" // Use a distinct class if styles conflict
      ,
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("path", {
        d: "M10 14.5L7.625 12.125C6.73716 11.2372 6.73716 9.76284 7.625 8.875C8.51284 7.98716 9.98716 7.98716 10.875 8.875L14.5 12.5L10 14.5Z"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("path", {
        d: "M10 14.5L12.375 16.875C13.2628 17.7628 14.7372 17.7628 15.625 16.875C16.5128 15.9872 16.5128 14.5128 15.625 13.625L14.5 12.5L10 14.5Z"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("path", {
        d: "M14.5 12.5L18.125 8.875C19.0128 7.98716 19.0128 6.51284 18.125 5.625C17.2372 4.73716 15.7628 4.73716 14.875 5.625L12.5 8L14.5 12.5Z"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("path", {
        d: "M6 17L3.5 19.5M19.5 3.5L17 6"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("path", {
        d: "M12.5 8L8.875 4.375C7.98716 3.48716 6.51284 3.48716 5.625 4.375C4.73716 5.26284 4.73716 6.73716 5.625 7.625L8 10L12.5 8Z"
      })]
    })]
  });
  var effectiveMainImageUrl = mainImageUrl || "https://dummyimage.com/".concat(w || 100, "x").concat(h || 100, "/ccc/aaa&text=Main+Image");
  var effectiveCoverImageUrl = coverImageUrl || "https://dummyimage.com/".concat(w || 100, "x").concat(h || 100, "/eee/999&text=Cover+Image");
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    style: containerStyle,
    onClick: handleMainImageClick // Handles link navigation
    ,
    onMouseDown: interactionType === "scratch" // REMOVED !readOnly
    ? handlePointerDown : undefined,
    onMouseMove: interactionType === "scratch" // REMOVED !readOnly
    ? handlePointerMove : undefined,
    onMouseUp: interactionType === "scratch" ? handlePointerUp : undefined // REMOVED !readOnly
    ,
    onMouseLeave: interactionType === "scratch" ? handlePointerUp : undefined // REMOVED !readOnly
    // End scratch if mouse leaves
    ,
    onTouchStart: handlePointerDown // REMOVED !readOnly condition
    ,
    onTouchMove: handlePointerMove // REMOVED !readOnly condition
    ,
    onTouchEnd: handlePointerUp // REMOVED !readOnly condition
    ,
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
      src: effectiveMainImageUrl,
      alt: "Main content",
      style: imageStyle,
      draggable: "false"
    }), interactionType === "scratch" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("canvas", {
      ref: canvasRef,
      style: _objectSpread(_objectSpread({}, imageStyle), {}, {
        zIndex: 1,
        cursor: isRevealed || !interactionStateRef.current.hasLoadedCover ? "default" : "crosshair" // REMOVED readOnly
      }),
      draggable: "false"
    }), interactionType === "slideUp" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: _objectSpread(_objectSpread({}, imageStyle), {}, {
        zIndex: 1,
        backgroundImage: "url(".concat(effectiveCoverImageUrl, ")"),
        backgroundSize: "cover",
        backgroundPosition: "center",
        transform: "translateY(-".concat(slideOffset, "px)"),
        transition: interactionStateRef.current.isSliding ? "none" : "transform 0.3s ease-out",
        cursor: isRevealed ? "default" : "grab"
      })
    }), slideUpIndicator, scratchHintElement]
  });
};

/* ═════════════════════ PREVIEW ═════════════════════ */
function Preview(_ref5) {
  var state = _ref5.state,
    setState = _ref5.setState,
    readOnly = _ref5.readOnly;
  var safe = state && state.screens && state.screens.length > 0 ? state : startState();
  var scr = safe.screens[safe.current];
  var commit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (id, patch) {
    if (readOnly || !setState) return;
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === id ? _objectSpread(_objectSpread({}, e), patch) : e;
          })
        }) : sc;
      })
    }));
  }, [safe, scr === null || scr === void 0 ? void 0 : scr.id, setState, readOnly]);
  var select = function select(id) {
    if (readOnly || !setState) return;
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: id
    }));
  };

  // This goto function is for screen navigation, not used by scratch card directly for its own reset
  var _goto = function _goto(idx) {
    if (!setState) return; // Allow use in readOnly mode without setState
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      current: (idx !== null && idx !== void 0 ? idx : safe.current + 1) % safe.screens.length,
      selected: null,
      // Deselect element when changing screens
      animKey: safe.animKey + 1 // Trigger screen transition animation
    }));
  };
  var getAnimationClass = function getAnimationClass(animationProp) {
    return animationProp && animationProp !== "none" ? "element-anim-".concat(animationProp) : "";
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      children: "\n        /* Screen Transitions */\n        @keyframes fade   {from{opacity:0}   to{opacity:1}}\n        @keyframes zoomIn {from{opacity:0;transform:scale(.8)} to{opacity:1;transform:scale(1)}}\n        @keyframes zoomOut{from{opacity:0;transform:scale(1.2)}to{opacity:1;transform:scale(1)}}\n        @keyframes slideL {from{transform:translateX(100%)}to{transform:translateX(0)}}\n        @keyframes slideR {from{transform:translateX(-100%)}to{transform:translateX(0)}}\n        @keyframes slideU {from{transform:translateY(100%)}to{transform:translateY(0)}}\n        @keyframes slideD {from{transform:translateY(-100%)}to{transform:translateY(0)}}\n        @keyframes rotateK{from{opacity:0;transform:rotateY(90deg)}to{opacity:1;transform:rotateY(0)}}\n        @keyframes flipK  {from{opacity:0;transform:rotateX(90deg)}to{opacity:1;transform:rotateX(0)}}\n        .anim-fade       {animation:fade   .35s ease;}\n        .anim-zoom-in    {animation:zoomIn .35s ease;}\n        .anim-zoom-out   {animation:zoomOut.35s ease;}\n        .anim-slide-left {animation:slideL .35s ease;}\n        .anim-slide-right{animation:slideR .35s ease;}\n        .anim-slide-up   {animation:slideU .35s ease;}\n        .anim-slide-down {animation:slideD .35s ease;}\n        .anim-rotate     {animation:rotateK.4s ease;}\n        .anim-flip       {animation:flipK  .4s ease;}\n\n        /* Element Entrance Animations */\n        @keyframes elFadeIn { from { opacity: 0; } to { opacity: 1; } }\n        @keyframes elSlideInUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }\n        @keyframes elZoomInSimple { from { opacity: 0; transform: scale(0.8); } to { opacity: 1; transform: scale(1); } }\n        @keyframes elBounceIn {\n          from, 20%, 40%, 60%, 80%, to { animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }\n          0% { opacity: 0; transform: scale3d(0.3, 0.3, 0.3); } 20% { transform: scale3d(1.1, 1.1, 1.1); }\n          40% { transform: scale3d(0.9, 0.9, 0.9); } 60% { opacity: 1; transform: scale3d(1.03, 1.03, 1.03); }\n          80% { transform: scale3d(0.97, 0.97, 0.97); } to { opacity: 1; transform: scale3d(1, 1, 1); }\n        }\n        @keyframes elRotateIn { from { opacity: 0; transform: rotate(-120deg) scale(0.7); } to { opacity: 1; transform: rotate(0deg) scale(1); } }\n        .element-anim-fadeIn { animation: elFadeIn 0.7s ease-out forwards; }\n        .element-anim-slideInUp { animation: elSlideInUp 0.7s ease-out forwards; }\n        .element-anim-zoomInSimple { animation: elZoomInSimple 0.7s ease-out forwards; }\n        .element-anim-bounceIn { animation: elBounceIn 1s ease-out forwards; }\n        .element-anim-rotateIn { animation: elRotateIn 0.8s ease-out forwards; }\n        \n        /* Slide Arrow Animations */\n        @keyframes bounceArrow {\n            0%, 20%, 50%, 80%, 100% { transform: translate(-50%, 0); }\n            40% { transform: translate(-50%, -10px); }\n            60% { transform: translate(-50%, -5px); }\n        }\n        @keyframes pulseArrow {\n            0% { opacity: 1; transform: translate(-50%, 0) scale(1); }\n            50% { opacity: 0.7; transform: translate(-50%, -2px) scale(1.1); }\n            100% { opacity: 1; transform: translate(-50%, 0) scale(1); }\n        }\n\n        /* Scratch Hint Animations (using .animated-finger-svg for new finger) */\n        .scratch-hint-animation svg { display: block; margin: auto; }\n\n        .scratch-hint-fingerSwipeHorizontal .animated-finger-svg { animation: hint-swipe-h-finger 2s infinite ease-in-out; }\n        .scratch-hint-fingerSwipeHorizontal .animated-finger-svg .finger-trail-effect { animation: hint-swipe-h-trail 2s infinite ease-in-out; }\n        @keyframes hint-swipe-h-finger {\n          0%, 100% { transform: translateX(-15px) rotate(-15deg); }\n          50% { transform: translateX(15px) rotate(10deg); }\n        }\n        @keyframes hint-swipe-h-trail { /* Trail fades in/out at one end of swipe */\n          0%, 10%, 60%, 100% { opacity:0; transform: translate(-10px, 5px) scale(0.5); }\n          50% { opacity:1; transform: translate(5px, -2px) scale(1); }\n        }\n\n        .scratch-hint-fingerSwipeDiagonal .animated-finger-svg { animation: hint-swipe-d-finger 2s infinite ease-in-out; }\n        .scratch-hint-fingerSwipeDiagonal .animated-finger-svg .finger-trail-effect { animation: hint-swipe-d-trail 2s infinite ease-in-out; }\n        @keyframes hint-swipe-d-finger {\n          0%, 100% { transform: translate(-12px, -12px) rotate(-30deg); }\n          50% { transform: translate(12px, 12px) rotate(15deg); }\n        }\n        @keyframes hint-swipe-d-trail {\n          0%,10%, 60%, 100% { opacity:0; transform: translate(-10px, -10px) scale(0.5); }\n          50% { opacity:1; transform: translate(3px, 3px) scale(1); }\n        }\n        \n        .scratch-hint-fingerCircle .animated-finger-svg { animation: hint-circle-finger 2.5s infinite linear; transform-origin: center; }\n        .scratch-hint-fingerCircle .animated-finger-svg .finger-trail-effect { animation: hint-circle-trail 2.5s infinite linear; opacity:0; transform-origin: center; }\n        @keyframes hint-circle-finger { /* Finger moves in circle, rotates to point along path */\n          0%   { transform: rotate(0deg) translateX(12px) rotate(90deg); }\n          25%  { transform: rotate(90deg) translateX(12px) rotate(90deg); }\n          50%  { transform: rotate(180deg) translateX(12px) rotate(90deg); }\n          75%  { transform: rotate(270deg) translateX(12px) rotate(90deg); }\n          100% { transform: rotate(360deg) translateX(12px) rotate(90deg); }\n        }\n        @keyframes hint-circle-trail { /* Trail appears at points around circle */\n          0%, 100% { opacity: 0; transform: rotate(0deg) translateX(15px) translateY(5px) scale(0.5); }\n          25% { opacity: 1; transform: rotate(90deg) translateX(15px) translateY(5px) scale(1); }\n          50% { opacity: 0; transform: rotate(180deg) translateX(15px) translateY(5px) scale(0.5); }\n          75% { opacity: 1; transform: rotate(270deg) translateX(15px) translateY(5px) scale(1); }\n        }\n\n        .scratch-hint-fingerZigZag .animated-finger-svg { animation: hint-zigzag-finger 3s infinite ease-in-out; }\n        @keyframes hint-zigzag-finger { /* Finger moves in zig-zag, adjusts rotation */\n          0%, 100% { transform: translate(-12px, -10px) rotate(-25deg); }\n          25% { transform: translate(12px, 0px) rotate(25deg); }\n          50% { transform: translate(-12px, 10px) rotate(-25deg); }\n          75% { transform: translate(12px, 0px) rotate(25deg); }\n        }\n        \n        /* Original handMove animation for .hand-svg-original */\n        .scratch-hint-handMove .hand-svg-original { animation: hint-hand-move-original 2s infinite ease-in-out; }\n        @keyframes hint-hand-move-original {\n            0%, 100% { transform: translate(0, 0) rotate(0deg); }\n            25% { transform: translate(5px, -5px) rotate(10deg); }\n            50% { transform: translate(0px, 0px) rotate(0deg); }\n            75% { transform: translate(-5px, 5px) rotate(-10deg); }\n        }\n      "
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      // For screen transitions
      className: "anim-".concat(safe.transition),
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: safe.bg,
        position: "relative",
        overflow: "hidden"
      },
      onClick: function onClick() {
        return !readOnly && select(null);
      } // Deselect on canvas click
      ,
      children: scr && scr.elements && scr.elements.map(function (el) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly,
          enableResizing: !readOnly,
          onDragStop: function onDragStop(_, d) {
            return commit(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            return commit(el.id, {
              w: ref.offsetWidth,
              h: ref.offsetHeight,
              x: pos.x,
              y: pos.y
            });
          },
          onClick: function onClick(e) {
            e.stopPropagation(); // Prevent canvas click when clicking element
            if (!readOnly) select(el.id);
            // For scratchCard, the internal onClick handles link navigation.
            // If it's not a scratchCard or link is not active, editor selection happens.
          },
          className: getAnimationClass(el.props.animation),
          style: {
            outline: !readOnly && safe.selected === el.id ? "2px solid #3b82f6" : "none",
            cursor: readOnly ? "default" : "move",
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          },
          children: el.type === "scratchCard" ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ScratchRevealElement, {
            element: el,
            readOnly: readOnly
          }) :
          /*#__PURE__*/
          // Fallback for other element types if they were part of the original template
          (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            style: {
              width: "100%",
              height: "100%",
              border: "1px dashed #ccc",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              fontSize: "10px",
              color: "#888",
              boxSizing: "border-box",
              padding: "5px",
              textAlign: "center"
            },
            children: [el.type === "title" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
              style: {
                fontSize: el.props.fontSize,
                color: el.props.color,
                fontFamily: el.props.fontFamily
              },
              children: el.props.text
            }), el.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
              style: {
                backgroundColor: el.props.bgColor,
                color: el.props.textColor,
                fontSize: el.props.fontSize,
                fontFamily: el.props.fontFamily,
                padding: "5px 10px",
                border: "none",
                borderRadius: "3px"
              },
              children: el.props.text
            }), el.type !== "title" && el.type !== "button" && "Unsupported element: ".concat(el.type)]
          })
        }, el.id);
      })
    }, safe.animKey)]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */
function serialize(currentState) {
  if (!currentState || !currentState.screens || !Array.isArray(currentState.screens)) {
    var defaultData = startState();
    return _objectSpread(_objectSpread({}, defaultData), {}, {
      selected: null,
      _thumbnailHintUrl: null
    });
  }
  var screensToPersist = currentState.screens.map(function (sc) {
    if (!sc || !Array.isArray(sc.elements)) {
      return _objectSpread(_objectSpread({}, sc || {
        id: crypto.randomUUID()
      }), {}, {
        elements: []
      });
    }
    return _objectSpread(_objectSpread({}, sc), {}, {
      elements: sc.elements.map(function (el) {
        var props = el.props,
          restOfEl = _objectWithoutProperties(el, _excluded);
        var persistentProps = _objectSpread({}, props);

        // Remove transient editor-only state or loading flags
        if (el.type === "scratchCard") {
          var _persistentProps = persistentProps,
            coverImageLoading = _persistentProps.coverImageLoading,
            coverImageError = _persistentProps.coverImageError,
            mainImageLoading = _persistentProps.mainImageLoading,
            mainImageError = _persistentProps.mainImageError,
            interactionResetKey = _persistentProps.interactionResetKey,
            restScratchProps = _objectWithoutProperties(_persistentProps, _excluded2);
          persistentProps = _objectSpread(_objectSpread({}, restScratchProps), {}, {
            coverImageUrl: props.coverImageUrl || "",
            coverImageDims: props.coverImageDims || null,
            mainImageUrl: props.mainImageUrl || "",
            mainImageDims: props.mainImageDims || null
          });
        } else if (el.type === "image" || el.type === "video") {
          // Example
          var _persistentProps2 = persistentProps,
            assetLoading = _persistentProps2.assetLoading,
            assetError = _persistentProps2.assetError,
            restAssetProps = _objectWithoutProperties(_persistentProps2, _excluded3);
          persistentProps = _objectSpread(_objectSpread({}, restAssetProps), {}, {
            s3Url: props.s3Url || ""
          });
          if (el.type === "image") persistentProps.assetDims = props.assetDims || null;
        } else if (el.type === "gallery") {
          // Example
          var updatedImages = (props.images || []).map(function (img) {
            var assetLoading = img.assetLoading,
              assetError = img.assetError,
              restImgProps = _objectWithoutProperties(img, _excluded4);
            return _objectSpread(_objectSpread({}, restImgProps), {}, {
              s3Url: img.s3Url || "",
              assetDims: img.assetDims || null
            });
          });
          persistentProps = _objectSpread(_objectSpread({}, props), {}, {
            images: updatedImages
          });
        }
        // General transient props removal (if any defined for other types)
        // delete persistentProps.someTransientProp;

        return _objectSpread(_objectSpread({}, restOfEl), {}, {
          props: persistentProps
        });
      })
    });
  });
  var bestThumbnailUrl = null;
  // Logic to find a thumbnail URL (simplified, adapt as needed)
  var _iterator = _createForOfIteratorHelper(screensToPersist),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var screen = _step.value;
      var _iterator2 = _createForOfIteratorHelper(screen.elements),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var el = _step2.value;
          if (el.type === "scratchCard") {
            if (el.props.mainImageUrl) {
              bestThumbnailUrl = el.props.mainImageUrl;
              break;
            }
            if (el.props.coverImageUrl && !bestThumbnailUrl) {
              bestThumbnailUrl = el.props.coverImageUrl;
            }
          } else if (el.type === "image" && el.props.s3Url) {
            bestThumbnailUrl = el.props.s3Url;
            break;
          }
          // Add other types if they have relevant image URLs
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (bestThumbnailUrl) break;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var dataToSave = _objectSpread(_objectSpread({}, currentState), {}, {
    selected: null,
    // Don't persist selection
    animKey: 0,
    // Don't persist animation key
    screens: screensToPersist
  });
  return _objectSpread(_objectSpread({}, dataToSave), {}, {
    _thumbnailHintUrl: bestThumbnailUrl
  });
}
var deserialize = function deserialize() {
  var backendData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  if (!backendData || !backendData.screens || !Array.isArray(backendData.screens)) {
    return startState();
  }
  var defaultScratchCardProps = newElement("scratchCard").props;
  var screensFromBackend = backendData.screens.map(function (sc) {
    if (!sc || !Array.isArray(sc.elements)) {
      return _objectSpread(_objectSpread({}, sc || {
        id: crypto.randomUUID()
      }), {}, {
        elements: []
      });
    }
    return _objectSpread(_objectSpread({}, sc), {}, {
      elements: sc.elements.map(function (el) {
        var runtimeProps = _objectSpread({}, el.props);
        if (runtimeProps.animation === undefined) runtimeProps.animation = "none";
        if (el.type === "scratchCard") {
          runtimeProps = _objectSpread(_objectSpread(_objectSpread({}, defaultScratchCardProps), runtimeProps), {}, {
            // Override with saved values
            coverImageLoading: false,
            // Initialize transient states
            coverImageError: null,
            mainImageLoading: false,
            mainImageError: null,
            interactionResetKey: 0 // Initialize reset key
          });
        } else if (el.type === "image" || el.type === "video") {
          // Example for other types
          runtimeProps = _objectSpread(_objectSpread(_objectSpread({}, newElement(el.type).props), runtimeProps), {}, {
            assetLoading: false,
            assetError: null
          });
        } else if (el.type === "gallery") {
          // Example
          runtimeProps = _objectSpread(_objectSpread(_objectSpread({}, newElement(el.type).props), runtimeProps), {}, {
            images: (runtimeProps.images || []).map(function (img) {
              return _objectSpread(_objectSpread(_objectSpread({}, newElement("image").props), img), {}, {
                assetLoading: false,
                assetError: null
              });
            })
          });
        } else {
          var _newElement;
          // For other types like title, button, ensure defaults are applied if props are missing
          var defaultElementProps = ((_newElement = newElement(el.type)) === null || _newElement === void 0 ? void 0 : _newElement.props) || {};
          runtimeProps = _objectSpread(_objectSpread({}, defaultElementProps), runtimeProps);
        }
        return _objectSpread(_objectSpread({}, el), {}, {
          props: runtimeProps
        });
      })
    });
  });
  return _objectSpread(_objectSpread(_objectSpread({}, startState()), backendData), {}, {
    // Override with saved data
    selected: null,
    // Always reset selection
    animKey: 0,
    // Always reset animation key
    screens: screensFromBackend
  });
};

/***/ }),

/***/ "./templates/swipeSlider.js":
/*!**********************************!*\
  !*** ./templates/swipeSlider.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _excluded = ["hidden"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* BreakOut – multi-element canvas with images, text, buttons, and dismiss (v1.4)

Modified for S3/Backend File Handling & Thumbnail Hint
And with new features: custom animation, shape container (resizable, configurable line width), and swipe CTA.
Added bounce arrow element and fixed swipe up interaction.
*/


 // Added useState, useEffect, useRef

// I. Editor Component Modifications & V. Global Considerations

var API_BASE_URL = "https://localhost:3001" || 0;
var getAuthToken = function getAuthToken() {
  if (typeof window !== "undefined") {
    return localStorage.getItem("jwt");
  }
  return null;
};
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(fileObject) {
    var formData, token, headers, response, errorData, result, _t3, _t4;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          formData = new FormData();
          formData.append("assetFile", fileObject);
          _context2.p = 1;
          token = getAuthToken();
          headers = {};
          if (token) {
            headers["Authorization"] = "Bearer ".concat(token);
          }
          _context2.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData,
            headers: headers
          });
        case 2:
          response = _context2.v;
          if (response.ok) {
            _context2.n = 7;
            break;
          }
          _context2.p = 3;
          _context2.n = 4;
          return response.json();
        case 4:
          errorData = _context2.v;
          _context2.n = 6;
          break;
        case 5:
          _context2.p = 5;
          _t3 = _context2.v;
          errorData = {
            message: "Upload failed: ".concat(response.statusText || response.status)
          };
        case 6:
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 7:
          _context2.n = 8;
          return response.json();
        case 8:
          result = _context2.v;
          if (result.url) {
            _context2.n = 9;
            break;
          }
          throw new Error("Upload successful, but no URL was returned from the backend.");
        case 9:
          return _context2.a(2, result.url);
        case 10:
          _context2.p = 10;
          _t4 = _context2.v;
          console.error("Error uploading file to backend:", _t4);
          if (!(_t4 instanceof Error)) {
            _context2.n = 11;
            break;
          }
          throw _t4;
        case 11:
          throw new Error(String(_t4 || "An unknown error occurred during file upload."));
        case 12:
          return _context2.a(2);
      }
    }, _callee2, null, [[3, 5], [1, 10]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
function measureImageDimensions(_x2) {
  return _measureImageDimensions.apply(this, arguments);
}
/* ---------- meta ---------- */
function _measureImageDimensions() {
  _measureImageDimensions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(s3Url) {
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          return _context3.a(2, new Promise(function (resolve, reject) {
            var img = new Image();
            img.onload = function () {
              resolve({
                width: img.naturalWidth,
                height: img.naturalHeight
              });
            };
            img.onerror = function (err) {
              console.error("Error loading image for measurement:", s3Url, err);
              reject(new Error("Could not load image to measure dimensions. Check the S3 URL and CORS policy for S3 bucket."));
            };
            img.crossOrigin = "anonymous";
            img.src = s3Url;
          }));
      }
    }, _callee3);
  }));
  return _measureImageDimensions.apply(this, arguments);
}
var meta = {
  id: "swipe-slider",
  name: "Swipe Slider",
  description: "Canvas template supporting multiple images, text, buttons, shapes, bounce arrow and dismiss",
  canvas: {
    w: 378,
    h: 655
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'", "'Roboto'", "'Open Sans'"];
var EFFECTS = ["none", "fade-in", "fade-out", "zoom-in", "zoom-out", "slide-in-left", "slide-in-right", "slide-in-up", "slide-in-down", "slide-out-left", "slide-out-right", "slide-out-up", "slide-out-down", "spin", "shake", "flip", "bounce", "bounce-up", "slide-up-and-down-twice-subtle", "slide-in-down-then-subtle-bounce"];
var buttonStyle = function buttonStyle(btn) {
  return {
    borderRadius: btn.radius,
    border: "".concat(btn.borderWidth, "px solid ").concat(btn.borderColor),
    background: btn.color,
    color: btn.textColor,
    fontFamily: btn.font,
    fontSize: btn.size,
    fontWeight: btn.bold ? "bold" : "normal"
  };
};
var startState = function startState() {
  return {
    bg: "#ffffff",
    selected: null,
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }]
  };
};
var newElement = function newElement(type) {
  var baseY = meta.canvas.h - 140;
  var base = {
    id: crypto.randomUUID(),
    type: type,
    x: 20,
    y: baseY,
    w: 100,
    h: 100,
    hidden: false
  };
  switch (type) {
    case "image":
      return _objectSpread(_objectSpread({}, base), {}, {
        props: {
          s3Url: "",
          imageLoading: false,
          imageError: null,
          imageDims: null,
          url: "",
          effect: "none",
          delay: 0,
          swipeToUrl: false
        }
      });
    case "button":
      return _objectSpread(_objectSpread({}, base), {}, {
        h: 40,
        w: 150,
        props: {
          text: "Click me",
          color: "#2563eb",
          textColor: "#ffffff",
          font: "Arial",
          size: 16,
          bold: false,
          borderWidth: 2,
          borderColor: "#000000",
          url: "",
          effect: "none",
          delay: 0
        }
      });
    case "text":
      return _objectSpread(_objectSpread({}, base), {}, {
        h: 40,
        w: 200,
        props: {
          text: "Sample text",
          color: "#000000",
          font: "Arial",
          size: 16,
          bold: false,
          effect: "none",
          delay: 0
        }
      });
    case "xbutton":
      return _objectSpread(_objectSpread({}, base), {}, {
        x: meta.canvas.w - 40,
        y: 10,
        w: 30,
        h: 30,
        props: {
          color: "#000000",
          bg: "transparent",
          size: 24,
          effect: "none",
          delay: 0
        }
      });
    case "shape-container":
      return _objectSpread(_objectSpread({}, base), {}, {
        w: 150,
        h: 50,
        props: {
          bgColor: "#e0e0e0",
          shapeType: "none",
          lineColor: "#333333",
          lineWidth: 2,
          linesWidthPercentage: 80,
          linesVerticalAlignPercentage: 50,
          effect: "none",
          delay: 0
        }
      });
    case "bounce-arrow":
      // <<< NEW ELEMENT TYPE
      return _objectSpread(_objectSpread({}, base), {}, {
        w: 50,
        // Default width for arrow
        h: 50,
        // Default height for arrow
        y: meta.canvas.h - 80,
        // Position it a bit higher by default
        props: {
          color: "#000000",
          effect: "none",
          // For entry animation
          delay: 0
        }
      });
    default:
      return base;
  }
};

/* ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens && state.screens.length > 0 ? state : startState();
  var scr = safe.screens[0];
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });
  var patchSel = function patchSel(fn) {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === safe.selected ? fn(e) : e;
          })
        }) : sc;
      })
    }));
  };
  var delSel = function delSel() {
    return setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: null,
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.filter(function (e) {
            return e.id !== safe.selected;
          })
        }) : sc;
      })
    }));
  };
  var add = function add(t) {
    var newElem = newElement(t);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: newElem.id,
      screens: safe.screens.map(function (sc, i) {
        return i === 0 ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newElem])
        }) : sc;
      })
    }));
  };
  var duplicateSel = function duplicateSel() {
    if (!sel) return;
    var copy = _objectSpread(_objectSpread({}, sel), {}, {
      id: crypto.randomUUID(),
      x: sel.x + 20,
      y: sel.y + 20,
      props: _objectSpread({}, sel.props)
    });
    if (copy.type === "image") {
      copy.props.imageLoading = false;
      copy.props.imageError = null;
    }
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: copy.id,
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [copy])
        }) : sc;
      })
    }));
  };
  var handleFileChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(event) {
      var _event$target$files;
      var file, s3Url, dimensions, _t, _t2;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];
            if (!(!file || !sel)) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            patchSel(function (currentElement) {
              return _objectSpread(_objectSpread({}, currentElement), {}, {
                props: _objectSpread(_objectSpread({}, currentElement.props), {}, {
                  imageLoading: true,
                  imageError: null,
                  s3Url: "",
                  imageDims: null
                })
              });
            });
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file);
          case 3:
            s3Url = _context.v;
            dimensions = null;
            if (!file.type.startsWith("image/")) {
              _context.n = 7;
              break;
            }
            _context.p = 4;
            _context.n = 5;
            return measureImageDimensions(s3Url);
          case 5:
            dimensions = _context.v;
            _context.n = 7;
            break;
          case 6:
            _context.p = 6;
            _t = _context.v;
            console.warn("Could not measure image dimensions:", _t.message);
          case 7:
            patchSel(function (currentElement) {
              return _objectSpread(_objectSpread({}, currentElement), {}, {
                props: _objectSpread(_objectSpread({}, currentElement.props), {}, {
                  s3Url: s3Url,
                  imageDims: dimensions,
                  imageLoading: false
                })
              });
            });
            _context.n = 9;
            break;
          case 8:
            _context.p = 8;
            _t2 = _context.v;
            patchSel(function (currentElement) {
              return _objectSpread(_objectSpread({}, currentElement), {}, {
                props: _objectSpread(_objectSpread({}, currentElement.props), {}, {
                  imageLoading: false,
                  imageError: _t2.message || "Upload failed. Please try again."
                })
              });
            });
          case 9:
            return _context.a(2);
        }
      }, _callee, null, [[4, 6], [2, 8]]);
    }));
    return function handleFileChange(_x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Canvas background:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "flex gap-2 flex-wrap",
      children: ["image", "button", "text", "xbutton", "shape-container", "bounce-arrow" // <<< ADDED bounce-arrow button
      ].map(function (t) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          onClick: function onClick() {
            return add(t);
          },
          className: "btn",
          children: ["+ ", t]
        }, t);
      })
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded space-y-2 text-xs",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex justify-between items-center",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
          className: "capitalize",
          children: sel.type
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "flex gap-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: duplicateSel,
            className: "text-blue-600 hover:text-blue-800",
            children: "Duplicate"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: delSel,
            className: "text-red-600 hover:text-red-800",
            children: "Delete"
          })]
        })]
      }), sel.type === "image" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Upload Image/Video Asset:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*,video/*",
          disabled: sel.props.imageLoading,
          onChange: handleFileChange,
          className: "block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 disabled:opacity-50"
        }), sel.props.imageLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-blue-500 italic mt-1",
          children: "Uploading, please wait..."
        }), sel.props.imageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
          className: "text-xs text-red-500 italic mt-1",
          children: ["Error: ", sel.props.imageError]
        }), sel.props.s3Url && !sel.props.imageLoading && !sel.props.imageError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "mt-2 p-2 border border-gray-200 rounded",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
            className: "text-xs font-semibold",
            children: "Current Asset:"
          }), sel.props.s3Url.match(/\.(jpeg|jpg|gif|png|webp)$/i) ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.s3Url,
            alt: "Uploaded preview",
            style: {
              maxWidth: "100px",
              maxHeight: "100px",
              border: "1px solid #ccc",
              objectFit: "contain",
              marginTop: "4px"
            }
          }) : sel.props.s3Url.match(/\.(mp4|webm|ogg)$/i) ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
            src: sel.props.s3Url,
            controls: true,
            style: {
              maxWidth: "150px",
              maxHeight: "100px",
              border: "1px solid #ccc",
              marginTop: "4px"
            },
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
              children: "Your browser does not support the video tag."
            })
          }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-gray-500 mt-1",
            children: ["Preview not available for this file type. Link:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("a", {
              href: sel.props.s3Url,
              target: "_blank",
              rel: "noopener noreferrer",
              className: "text-blue-500 hover:underline",
              children: "Open asset"
            })]
          }), sel.props.imageDims && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
            className: "text-xs text-gray-500 mt-1",
            children: ["Dimensions: ", sel.props.imageDims.width, " x", " ", sel.props.imageDims.height, " px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-2",
          children: "Image Click-through URL (optional):"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "url",
          placeholder: "https://example.com/your-link",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 text-xs rounded"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-2 text-sm font-medium",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: !!sel.props.swipeToUrl,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    swipeToUrl: e.target.checked
                  })
                });
              });
            }
          }), "Swipe CTA (Redirect on scroll up)"]
        })]
      }), sel.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Button Text:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 rounded"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-2 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Text", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.textColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textColor: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["BG", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.color,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      color: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Border", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.borderColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      borderColor: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Width", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              value: sel.props.borderWidth,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      borderWidth: +e.target.value
                    })
                  });
                });
              },
              className: "w-12 border px-1 rounded"
            }), "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-2 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Font", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
              value: sel.props.font,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      font: e.target.value
                    })
                  });
                });
              },
              className: "border rounded text-xs p-0.5",
              children: FONTS.map(function (f) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: f,
                  children: f.replace(/'/g, "")
                }, f);
              })
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Size", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "72",
              value: sel.props.size,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      size: +e.target.value
                    })
                  });
                });
              },
              className: "w-12 border px-1 rounded"
            }), "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold: e.target.checked
                  })
                });
              });
            }
          }), " ", "Bold"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Button Click-through URL:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "url",
          placeholder: "https://example.com/your-link",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 rounded"
        })]
      }), sel.type === "text" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Text Content:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          },
          className: "border w-full px-1 rounded",
          rows: 3
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-2 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Color", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.color,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      color: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Font", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
              value: sel.props.font,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      font: e.target.value
                    })
                  });
                });
              },
              className: "border rounded text-xs p-0.5",
              children: FONTS.map(function (f) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: f,
                  children: f.replace(/'/g, "")
                }, f);
              })
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Size", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "72",
              value: sel.props.size,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      size: +e.target.value
                    })
                  });
                });
              },
              className: "w-12 border px-1 rounded"
            }), "px"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.bold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bold: e.target.checked
                  })
                });
              });
            }
          }), " ", "Bold"]
        })]
      }), sel.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-2 mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Icon Color", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.color,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      color: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Background", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.bg,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      bg: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Icon Size", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "100",
              value: sel.props.size,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      size: +e.target.value
                    })
                  });
                });
              },
              className: "w-12 border px-1 rounded"
            }), "px"]
          })]
        })
      }), sel.type === "shape-container" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Background Color:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.bgColor,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  bgColor: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Shape Type:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          value: sel.props.shapeType,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  shapeType: e.target.value
                })
              });
            });
          },
          className: "border w-full rounded text-xs p-1 mt-0.5",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "none",
            children: "None"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
            value: "double-lines",
            children: "Horizontal Double Lines"
          })]
        }), sel.props.shapeType === "double-lines" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
            className: "block text-sm font-medium mt-1",
            children: "Line Color:"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.lineColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    lineColor: e.target.value
                  })
                });
              });
            }
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
            className: "block text-sm font-medium mt-1",
            children: "Line Thickness (px):"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "1",
            max: "20",
            value: sel.props.lineWidth,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    lineWidth: +e.target.value
                  })
                });
              });
            },
            className: "w-16 border px-1 rounded mt-0.5"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
            className: "block text-sm font-medium mt-1",
            children: "Lines Width (% of container):"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "10",
            max: "100",
            value: sel.props.linesWidthPercentage || 80,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    linesWidthPercentage: +e.target.value
                  })
                });
              });
            },
            className: "w-16 border px-1 rounded mt-0.5"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-sm font-medium mt-1",
            children: ["Lines Vertical Align (%):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
              className: "text-xs text-gray-500 ml-1",
              children: "(0=top, 50=center, 100=bottom)"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "100",
            step: "1",
            value: sel.props.linesVerticalAlignPercentage === undefined ? 50 : sel.props.linesVerticalAlignPercentage,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    linesVerticalAlignPercentage: +e.target.value
                  })
                });
              });
            },
            className: "w-16 border px-1 rounded mt-0.5"
          })]
        })]
      }), sel.type === "bounce-arrow" &&
      /*#__PURE__*/
      // <<< EDITOR FOR bounce-arrow
      (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Arrow Color:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "color",
          value: sel.props.color,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  color: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-gray-500 mt-1",
          children: "Use the handles on the canvas element to resize the arrow."
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "mt-2 pt-2 border-t",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium",
          children: "Animation Effect (Entry):"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          value: sel.props.effect,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  effect: e.target.value
                })
              });
            });
          },
          className: "border w-full rounded text-xs p-1 mt-0.5",
          children: EFFECTS.map(function (ef) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: ef,
              children: ef
            }, ef);
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
          className: "block text-sm font-medium mt-1",
          children: "Animation Delay (seconds):"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "number",
          min: "0",
          step: "0.1",
          value: sel.props.delay,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  delay: +e.target.value
                })
              });
            });
          },
          className: "w-20 border px-1 rounded mt-0.5"
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500 italic",
      children: "Click an element on the canvas to edit its properties."
    })]
  });
}

/* ═════════════════════ PREVIEW ═════════════════════ */
function Preview(_ref3) {
  var _ref3$state = _ref3.state,
    state = _ref3$state === void 0 ? startState() : _ref3$state,
    setState = _ref3.setState,
    readOnly = _ref3.readOnly;
  var safe = state.screens && state.screens.length > 0 ? state : startState();
  var scr = safe.screens[0];
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    allElementsHiddenForDemo = _useState2[0],
    setAllElementsHiddenForDemo = _useState2[1];
  // const previewContainerRef = useRef(null); // Use if listeners are on the container div

  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (readOnly) {
      setAllElementsHiddenForDemo(false);
    }
  }, [scr.id, scr.elements.length, readOnly]);

  // EFFECT FOR SWIPE UP AND SCROLL UP CTA
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (!readOnly) return;
    var imagesWithSwipeCTA = scr.elements.filter(function (el) {
      return el.type === "image" && el.props.swipeToUrl && el.props.url && !el.hidden;
    });
    if (imagesWithSwipeCTA.length === 0) {
      return; // No active swipe CTA images
    }
    var navigateToUrl = function navigateToUrl() {
      var imageToRedirect = imagesWithSwipeCTA[0]; // Takes the first one
      if (imageToRedirect && imageToRedirect.props.url) {
        window.location.href = imageToRedirect.props.url;
      }
    };

    // Mouse wheel handler
    var handleWheel = function handleWheel(event) {
      if (allElementsHiddenForDemo) return;
      if (event.deltaY < 0) {
        // Negative deltaY is scroll up
        navigateToUrl();
      }
    };

    // Touch handlers
    var touchStartY = 0;
    var swipeThreshold = 50; // Min pixels for a swipe to be detected

    var handleTouchStart = function handleTouchStart(event) {
      if (allElementsHiddenForDemo || imagesWithSwipeCTA.length === 0) return;
      if (event.touches.length === 1) {
        // Only process single touches
        touchStartY = event.touches[0].clientY;
      } else {
        touchStartY = 0; // Reset for multi-touch
      }
    };
    var handleTouchEnd = function handleTouchEnd(event) {
      if (allElementsHiddenForDemo || touchStartY === 0 || imagesWithSwipeCTA.length === 0) {
        touchStartY = 0;
        return;
      }
      var touchEndY = event.changedTouches[0].clientY;
      var deltaY = touchEndY - touchStartY; // Positive for swipe down, negative for swipe up

      if (deltaY < -swipeThreshold) {
        // Swiped up significantly
        navigateToUrl();
      }
      touchStartY = 0; // Reset for the next touch sequence
    };

    // Add listeners to window for global swipe/scroll detection
    window.addEventListener("wheel", handleWheel, {
      passive: true
    });
    window.addEventListener("touchstart", handleTouchStart, {
      passive: true
    });
    window.addEventListener("touchend", handleTouchEnd, {
      passive: true
    });
    return function () {
      window.removeEventListener("wheel", handleWheel);
      window.removeEventListener("touchstart", handleTouchStart);
      window.removeEventListener("touchend", handleTouchEnd);
    };
  }, [readOnly, scr.elements, allElementsHiddenForDemo, scr.id]); // scr.id ensures re-bind if screen changes

  var commit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (id, patch) {
    if (readOnly || !setState) return;
    setState === null || setState === void 0 || setState(_objectSpread(_objectSpread({}, safe), {}, {
      screens: safe.screens.map(function (sc) {
        return sc.id === scr.id ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (e) {
            return e.id === id ? _objectSpread(_objectSpread({}, e), patch) : e;
          })
        }) : sc;
      })
    }));
  }, [safe, scr, setState, readOnly]);
  var selectElement = function selectElement(id) {
    if (!readOnly && setState) {
      setState(_objectSpread(_objectSpread({}, safe), {}, {
        selected: id
      }));
    }
  };
  var openUrl = function openUrl(url) {
    return url && window.open(url, "_blank");
  };
  var dismissAllElements = function dismissAllElements() {
    if (readOnly) {
      setAllElementsHiddenForDemo(true);
    }
  };
  var handleElementClick = function handleElementClick(e, el) {
    e.stopPropagation();
    if (!readOnly) {
      selectElement(el.id);
    } else {
      if (el.type === "xbutton") {
        dismissAllElements();
      } else if (el.props.url && (el.type === "button" || el.type === "image")) {
        openUrl(el.props.url);
      }
      // Bounce arrow is not clickable by default in readOnly mode
    }
  };
  var extraCss = "\n    @keyframes fade-in{0%{opacity:0;visibility:visible;}100%{opacity:1;visibility:visible;}} \n    @keyframes fade-out{0%{opacity:1;visibility:visible;}100%{opacity:0;visibility:hidden;}} \n    @keyframes zoom-in{0%{transform:scale(0.5);visibility:visible;}100%{transform:scale(1);visibility:visible;}} \n    @keyframes zoom-out{0%{transform:scale(1.5);visibility:visible;}100%{transform:scale(1);visibility:visible;}} \n    @keyframes slide-in-left{0%{transform:translateX(-100%);visibility:visible;}100%{transform:translateX(0);visibility:visible;}} \n    @keyframes slide-in-right{0%{transform:translateX(100%);visibility:visible;}100%{transform:translateX(0);visibility:visible;}} \n    @keyframes slide-in-up{0%{transform:translateY(-100%);visibility:visible;}100%{transform:translateY(0);visibility:visible;}} \n    @keyframes slide-in-down{0%{transform:translateY(100%);visibility:visible;}100%{transform:translateY(0);visibility:visible;}} \n    @keyframes slide-out-left{0%{transform:translateX(0);visibility:visible;}100%{transform:translateX(-100%);visibility:hidden;}} \n    @keyframes slide-out-right{0%{transform:translateX(0);visibility:visible;}100%{transform:translateX(100%);visibility:hidden;}} \n    @keyframes slide-out-up{0%{transform:translateY(0);visibility:visible;}100%{transform:translateY(-100%);visibility:hidden;}} \n    @keyframes slide-out-down{0%{transform:translateY(0);visibility:visible;}100%{transform:translateY(100%);visibility:hidden;}} \n    @keyframes spin{0%{transform:rotate(0);visibility:visible;}100%{transform:rotate(360deg);visibility:visible;}} \n    @keyframes shake{0%{visibility:visible;}10%,90%{transform:translateX(-1px);}20%,80%{transform:translateX(2px);}30%,50%,70%{transform:translateX(-4px);}40%,60%{transform:translateX(4px);}} \n    @keyframes flip{0%{transform:rotateY(90deg);visibility:visible;}100%{transform:rotateY(0);visibility:visible;}} \n    @keyframes bounce{0%,20%,50%,80%,100%{transform:translateY(0);visibility:visible;}40%{transform:translateY(-30px);}} \n    @keyframes bounce-up{0%{transform:translateY(100%);visibility:visible;}60%{transform:translateY(-10%);}100%{transform:translateY(0);visibility:visible;}} \n    @keyframes slide-up-and-down-twice-subtle{0%,100%{transform:translateY(0);visibility:visible;}12.5%,62.5%{transform:translateY(-7px);visibility:visible;}37.5%,87.5%{transform:translateY(7px);visibility:visible;}25%,50%,75%{visibility:visible;}}\n    @keyframes continuous-bounce-arrow { 0%, 100% { transform: translateY(0); } 50% { transform: translateY(-15%); } } /* <<< CSS FOR BOUNCE ARROW */\n  ";
  var baseStyle = function baseStyle(el) {
    var effectName = el.props.effect;
    var initialDelay = el.props.delay || 0;
    var hasEffect = effectName !== "none";
    if (!hasEffect) {
      return {
        visibility: "visible",
        opacity: 1,
        animation: "none"
      };
    }
    var initialVisibility = "hidden";
    var initialOpacityValue = effectName === "fade-in" || effectName.startsWith("fade-in") ? 0 : 1;
    var animationString;
    var animationDuration = "1s";
    var timingFunction = "ease";
    if (effectName === "slide-in-down-then-subtle-bounce") {
      var slideInDownDuration = 1;
      var pauseAfterSlideIn = 2;
      var subtleBounceDuration = 2;
      var subtleBounceStartDelay = initialDelay + slideInDownDuration + pauseAfterSlideIn;
      animationString = "slide-in-down ".concat(slideInDownDuration, "s ease ").concat(initialDelay, "s forwards, ") + "slide-up-and-down-twice-subtle ".concat(subtleBounceDuration, "s ease-in-out ").concat(subtleBounceStartDelay, "s forwards");
    } else {
      if (effectName === "slide-up-and-down-twice-subtle") {
        animationDuration = "2s";
        timingFunction = "ease-in-out";
      }
      animationString = "".concat(effectName, " ").concat(animationDuration, " ").concat(timingFunction, " ").concat(initialDelay, "s forwards");
    }
    return {
      visibility: initialVisibility,
      opacity: initialOpacityValue,
      animation: animationString
    };
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      children: extraCss
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      // ref={previewContainerRef} // Assign if listeners are on this div
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: safe.bg,
        position: "relative",
        overflow: "hidden" // Important for RND bounds and visual clipping
      },
      onClick: function onClick() {
        return selectElement(null);
      } // Deselect if clicking background
      ,
      children: scr.elements.filter(function (el) {
        if (readOnly) {
          return !allElementsHiddenForDemo && !el.hidden;
        }
        return !el.hidden;
      }).map(function (el) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly,
          enableResizing: !readOnly && el.type !== "xbutton",
          onDragStop: function onDragStop(e, d) {
            return commit(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(e, direction, ref, delta, position) {
            return commit(el.id, {
              w: ref.offsetWidth,
              h: ref.offsetHeight,
              x: position.x,
              y: position.y
            });
          },
          style: {
            outline: safe.selected === el.id && !readOnly ? "2px solid #3b82f6" : "none",
            cursor: !readOnly ? "move" : el.props.url && (el.type === "image" || el.type === "button") || el.type === "xbutton" ? "pointer" : "default"
            // visibility and animation are handled by child elements now
          },
          onClick: function onClick(e) {
            // RND itself can also handle the click logic
            if (readOnly) {
              handleElementClick(e, el); // Propagate to specialized handler if readOnly
            } else {
              e.stopPropagation(); // Prevent deselect if clicking on an element in edit mode
              selectElement(el.id);
            }
          },
          children: [el.type === "image" && (el.props.s3Url && el.props.s3Url.match(/\.(jpeg|jpg|gif|png|webp|svg)$/i) ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: el.props.s3Url,
            alt: "User content ".concat(el.id)
            // onClick={(e) => handleElementClick(e, el)} // Handled by RND onClick
            ,
            style: _objectSpread({
              width: "100%",
              height: "100%",
              objectFit: "cover"
            }, baseStyle(el)),
            onError: function onError(e) {
              e.target.src = "https://dummyimage.com/".concat(el.w || 100, "x").concat(el.h || 100, "/eee/aaa&text=Error");
            }
          }) : el.props.s3Url && el.props.s3Url.match(/\.(mp4|webm|ogg)$/i) ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
            src: el.props.s3Url
            // onClick={(e) => handleElementClick(e, el)} // Handled by RND onClick
            ,
            controls: true,
            muted: true,
            autoPlay: true,
            loop: true,
            style: _objectSpread({
              width: "100%",
              height: "100%",
              objectFit: "cover"
            }, baseStyle(el)),
            children: "Your browser does not support the video tag."
          }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: "https://dummyimage.com/".concat(el.w || 100, "x").concat(el.h || 100, "/eee/aaa&text=Asset"),
            alt: "Placeholder ".concat(el.id)
            // onClick={(e) => handleElementClick(e, el)} // Handled by RND onClick
            ,
            style: _objectSpread({
              width: "100%",
              height: "100%",
              objectFit: "contain"
            }, baseStyle(el))
          })), el.type === "button" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            // onClick={(e) => handleElementClick(e, el)} // Handled by RND onClick
            style: _objectSpread(_objectSpread(_objectSpread({}, buttonStyle(el.props)), baseStyle(el)), {}, {
              width: "100%",
              // ensure button fills RND
              height: "100%" // ensure button fills RND
            }),
            className: "flex items-center justify-center select-none" // Removed w-full h-full as style handles it
            ,
            children: el.props.text
          }), el.type === "text" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            // onClick={(e) => handleElementClick(e, el)} // Handled by RND onClick
            style: _objectSpread({
              color: el.props.color,
              fontFamily: el.props.font,
              fontSize: el.props.size,
              fontWeight: el.props.bold ? "bold" : "normal",
              width: "100%",
              height: "100%",
              overflow: "hidden",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              textAlign: "center",
              padding: "2px"
            }, baseStyle(el)),
            children: el.props.text
          }), el.type === "xbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            // onClick={(e) => handleElementClick(e, el)} // Handled by RND onClick
            style: _objectSpread({
              width: "100%",
              height: "100%",
              borderRadius: "50%",
              border: "2px solid ".concat(el.props.color),
              background: el.props.bg,
              color: el.props.color,
              fontSize: "".concat(el.props.size, "px"),
              display: "flex",
              alignItems: "center",
              justifyContent: "center"
            }, baseStyle(el)),
            children: "\xD7"
          }), el.type === "shape-container" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            // onClick={(e) => handleElementClick(e, el)} // Handled by RND onClick
            style: _objectSpread({
              width: "100%",
              height: "100%",
              backgroundColor: el.props.bgColor,
              position: "relative",
              display: "flex",
              justifyContent: "center",
              alignItems: "flex-start",
              overflow: "hidden"
            }, baseStyle(el)),
            children: el.props.shapeType === "double-lines" && function () {
              var linesContainerHeight = el.props.lineWidth * 2 + Math.max(1, Math.floor(el.props.lineWidth * 0.5 + 2));
              var verticalAlignPercent = el.props.linesVerticalAlignPercentage === undefined ? 50 : el.props.linesVerticalAlignPercentage;
              var topPosition = "calc(".concat(verticalAlignPercent, "% - ").concat(linesContainerHeight * (verticalAlignPercent / 100), "px)");
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                style: {
                  position: "absolute",
                  top: topPosition,
                  width: "".concat(el.props.linesWidthPercentage || 80, "%"),
                  display: "flex",
                  flexDirection: "column",
                  gap: "".concat(Math.max(1, Math.floor(el.props.lineWidth * 0.5 + 2)), "px")
                },
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  style: {
                    height: "".concat(el.props.lineWidth, "px"),
                    width: "100%",
                    backgroundColor: el.props.lineColor
                  }
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  style: {
                    height: "".concat(el.props.lineWidth, "px"),
                    width: "100%",
                    backgroundColor: el.props.lineColor
                  }
                })]
              });
            }()
          }), el.type === "bounce-arrow" && function () {
            // <<< RENDER bounce-arrow
            var elementBaseStyle = baseStyle(el);
            var combinedAnimation = elementBaseStyle.animation || "none";
            var continuousBounce = "continuous-bounce-arrow 1.5s ease-in-out infinite";
            if (combinedAnimation === "none") {
              combinedAnimation = continuousBounce;
            } else {
              // Append continuous bounce. It will start concurrently with the entry animation.
              combinedAnimation = "".concat(combinedAnimation, ", ").concat(continuousBounce);
            }
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              // onClick={(e) => handleElementClick(e, el)} // Handled by RND, bounce arrow not interactive by default
              style: _objectSpread(_objectSpread({}, elementBaseStyle), {}, {
                // Includes visibility, opacity from baseStyle
                animation: combinedAnimation,
                // Override animation from baseStyle with combined one
                width: "100%",
                height: "100%",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                color: el.props.color // For SVG fill
              }),
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("svg", {
                viewBox: "0 0 24 24",
                fill: "currentColor",
                style: {
                  width: "70%",
                  height: "70%"
                },
                children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("path", {
                  d: "M12 4l8 8h-6v8h-4v-8H4l8-8z"
                })
              })
            });
          }()]
        }, el.id);
      })
    })]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */

function serialize(currentState) {
  if (!currentState || !currentState.screens || !Array.isArray(currentState.screens) || currentState.screens.length === 0) {
    var defaultData = {
      bg: (currentState === null || currentState === void 0 ? void 0 : currentState.bg) || "#ffffff",
      selected: null,
      screens: [{
        id: crypto.randomUUID(),
        elements: []
      }]
    };
    return _objectSpread(_objectSpread({}, defaultData), {}, {
      _thumbnailHintUrl: null
    });
  }
  var _currentState$screens = _slicedToArray(currentState.screens, 1),
    currentScreenFromState = _currentState$screens[0];
  if (!currentScreenFromState || !Array.isArray(currentScreenFromState.elements)) {
    var screenToSerialize = _objectSpread({
      id: (currentScreenFromState === null || currentScreenFromState === void 0 ? void 0 : currentScreenFromState.id) || crypto.randomUUID(),
      elements: []
    }, currentScreenFromState && _typeof(currentScreenFromState) === "object" ? currentScreenFromState : {});
    screenToSerialize.elements = [];
    var dataWithProblematicScreen = _objectSpread(_objectSpread({}, currentState), {}, {
      selected: null,
      screens: [screenToSerialize]
    });
    return _objectSpread(_objectSpread({}, dataWithProblematicScreen), {}, {
      _thumbnailHintUrl: null
    });
  }
  var elementsToPersist = currentScreenFromState.elements.map(function (el) {
    var hidden = el.hidden,
      restOfEl = _objectWithoutProperties(el, _excluded); // 'hidden' is runtime, not persisted

    if (restOfEl.type === "image") {
      var _restOfEl$props = restOfEl.props,
        s3Url = _restOfEl$props.s3Url,
        imageDims = _restOfEl$props.imageDims,
        url = _restOfEl$props.url,
        effect = _restOfEl$props.effect,
        delay = _restOfEl$props.delay,
        swipeToUrl = _restOfEl$props.swipeToUrl;
      return _objectSpread(_objectSpread({}, restOfEl), {}, {
        props: {
          s3Url: s3Url || "",
          imageDims: imageDims || null,
          url: url || "",
          effect: effect || "none",
          delay: delay || 0,
          swipeToUrl: swipeToUrl || false
        }
      });
    }
    if (restOfEl.type === "shape-container") {
      var _restOfEl$props2 = restOfEl.props,
        bgColor = _restOfEl$props2.bgColor,
        shapeType = _restOfEl$props2.shapeType,
        lineColor = _restOfEl$props2.lineColor,
        lineWidth = _restOfEl$props2.lineWidth,
        linesWidthPercentage = _restOfEl$props2.linesWidthPercentage,
        linesVerticalAlignPercentage = _restOfEl$props2.linesVerticalAlignPercentage,
        _effect = _restOfEl$props2.effect,
        _delay = _restOfEl$props2.delay;
      return _objectSpread(_objectSpread({}, restOfEl), {}, {
        props: {
          bgColor: bgColor,
          shapeType: shapeType,
          lineColor: lineColor,
          lineWidth: lineWidth,
          linesWidthPercentage: linesWidthPercentage === undefined ? 80 : linesWidthPercentage,
          linesVerticalAlignPercentage: linesVerticalAlignPercentage === undefined ? 50 : linesVerticalAlignPercentage,
          effect: _effect || "none",
          delay: _delay || 0
        }
      });
    }
    if (restOfEl.type === "bounce-arrow") {
      // <<< SERIALIZE bounce-arrow
      var _restOfEl$props3 = restOfEl.props,
        color = _restOfEl$props3.color,
        _effect2 = _restOfEl$props3.effect,
        _delay2 = _restOfEl$props3.delay;
      return _objectSpread(_objectSpread({}, restOfEl), {}, {
        props: {
          color: color || "#000000",
          effect: _effect2 || "none",
          delay: _delay2 || 0
        }
      });
    }
    // For other types like button, text, xbutton, their props are usually simple
    // and don't have non-serializable fields like 'imageLoading'.
    // We can explicitly list them or assume all their props are fine.
    // For safety, let's be explicit or ensure their props are clean.
    // The current structure seems to handle them fine by spreading ...restOfEl.props.
    return restOfEl;
  });
  var bestThumbnailUrl = null;
  var firstAssetHoldingElement = elementsToPersist.find(function (el) {
    return el.type === "image" && el.props && typeof el.props.s3Url === "string" && el.props.s3Url.trim() !== "";
  });
  if (firstAssetHoldingElement) {
    bestThumbnailUrl = firstAssetHoldingElement.props.s3Url;
  }
  var dataToSave = _objectSpread(_objectSpread({}, currentState), {}, {
    selected: null,
    // Don't save selection state
    screens: [_objectSpread(_objectSpread({}, currentScreenFromState), {}, {
      elements: elementsToPersist
    })]
  });
  return _objectSpread(_objectSpread({}, dataToSave), {}, {
    _thumbnailHintUrl: bestThumbnailUrl
  });
}
var deserialize = function deserialize() {
  var backendData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var processScreen = function processScreen(screen) {
    var elements = screen && Array.isArray(screen.elements) ? screen.elements : [];
    return _objectSpread(_objectSpread({}, screen), {}, {
      elements: elements.map(function (el) {
        var baseElement = _objectSpread(_objectSpread({}, el), {}, {
          hidden: false
        }); // Add 'hidden' runtime prop
        if (baseElement.type === "image") {
          return _objectSpread(_objectSpread({}, baseElement), {}, {
            props: _objectSpread(_objectSpread({
              // Define all expected props with defaults
              s3Url: "",
              imageDims: null,
              url: "",
              effect: "none",
              delay: 0,
              swipeToUrl: false
            }, baseElement.props), {}, {
              // Spread saved props over defaults
              imageLoading: false,
              // Runtime state
              imageError: null // Runtime state
            })
          });
        }
        if (baseElement.type === "shape-container") {
          return _objectSpread(_objectSpread({}, baseElement), {}, {
            props: _objectSpread({
              bgColor: "#e0e0e0",
              shapeType: "none",
              lineColor: "#333333",
              lineWidth: 2,
              linesWidthPercentage: 80,
              linesVerticalAlignPercentage: 50,
              // Ensured default
              effect: "none",
              delay: 0
            }, baseElement.props)
          });
        }
        if (baseElement.type === "bounce-arrow") {
          // <<< DESERIALIZE bounce-arrow
          return _objectSpread(_objectSpread({}, baseElement), {}, {
            props: _objectSpread({
              color: "#000000",
              effect: "none",
              delay: 0
            }, baseElement.props)
          });
        }
        // For other simple types, ensure props are at least an empty object if missing
        return _objectSpread(_objectSpread({}, baseElement), {}, {
          props: _objectSpread({
            effect: "none",
            // Common prop
            delay: 0
          }, baseElement.props || {})
        });
      })
    });
  };
  if (backendData && backendData.screens && Array.isArray(backendData.screens) && backendData.screens.length > 0) {
    return _objectSpread(_objectSpread({}, backendData), {}, {
      selected: null,
      // Ensure selected is null on load
      screens: backendData.screens.map(processScreen)
    });
  }

  // Fallback to a default initial state if backendData is malformed
  var initial = startState();
  initial.screens = initial.screens.map(processScreen); // Process default screen elements too
  return initial;
};

/***/ }),

/***/ "./templates/videoHotspot.js":
/*!***********************************!*\
  !*** ./templates/videoHotspot.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* Video Hotspot – template for a background video with draggable, animated CTA images
--------------------------------------------------------------------------------- */




// V. Global Considerations: API_BASE_URL

var API_BASE_URL = "https://localhost:3001" || 0;

/* ---------- meta ---------- */
var meta = {
  id: "video-hotspot",
  name: "Video Hotspot",
  description: "Upload a video and overlay CTA images with optional animations, links, custom shapes, and interactive composition messages.",
  canvas: {
    w: 640,
    h: 360
  }
};

/* ---------- helpers ---------- */
// FONTS and CTA_EFFECTS are assumed to be defined as in your original code
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'", "'Roboto'"];
var CTA_EFFECTS = ["none", "float", "bounce", "waves", "pulse", "spin", "shake", "jump", "tilt", "flash", "slide-right", "slide-left", "grow", "swing"];

// uploadFileToBackend, startState, newElement, hexToRgba are assumed to be defined as in your original code
// For brevity, I'm omitting them here but they should be present in your actual file.
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(fileObject) {
    var formData, response, errorData, result, _t2;
    return _regenerator().w(function (_context5) {
      while (1) switch (_context5.n) {
        case 0:
          formData = new FormData();
          formData.append("assetFile", fileObject);
          _context5.p = 1;
          _context5.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData
          });
        case 2:
          response = _context5.v;
          if (response.ok) {
            _context5.n = 4;
            break;
          }
          _context5.n = 3;
          return response.json()["catch"](function () {
            return {
              message: "Upload failed with status " + response.status
            };
          });
        case 3:
          errorData = _context5.v;
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 4:
          _context5.n = 5;
          return response.json();
        case 5:
          result = _context5.v;
          return _context5.a(2, result.url);
        case 6:
          _context5.p = 6;
          _t2 = _context5.v;
          console.error("File upload error:", _t2);
          throw _t2;
        case 7:
          return _context5.a(2);
      }
    }, _callee5, null, [[1, 6]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
var startState = function startState() {
  return {
    bg: "#000000",
    current: 0,
    selected: null,
    animKey: 0,
    activeCompositionMessageId: null,
    editingCompositionMessageContentForId: null,
    uploadStates: {},
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }]
  };
};
var newElement = function newElement(type) {
  var parentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var cmIdForCloseButton = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var base = {
    id: crypto.randomUUID(),
    type: type,
    x: 10,
    y: 10,
    w: 180,
    h: 90
  };
  switch (type) {
    case "video":
      return _objectSpread(_objectSpread({}, base), {}, {
        w: meta.canvas.w,
        h: meta.canvas.h,
        x: 0,
        y: 0,
        props: {
          srcUrl: ""
        }
      });
    case "ctaimage":
      return _objectSpread(_objectSpread({}, base), {}, {
        w: 180,
        h: 90,
        props: {
          srcUrl: "",
          radius: 0,
          circle: false,
          url: "",
          effect: "none",
          bgColor: "#ffffff",
          bgOpacity: 0,
          bgPadding: 0,
          showAt: 0,
          text: "CTA text",
          textColor: "#ffffff",
          textFont: "Arial",
          textSize: 16,
          textBold: false,
          opensCompositionMessageId: null
        }
      });
    case "compositionmessage":
      var newCmId = base.id;
      return _objectSpread(_objectSpread({}, base), {}, {
        id: newCmId,
        x: -1000,
        y: -1000,
        w: 0,
        h: 0,
        props: {
          bgColor: "#ffffff",
          bgOpacity: 0.95,
          contentElements: [],
          closeButtonElement: {
            id: "".concat(newCmId, "_close"),
            parentId: newCmId,
            type: "cm_closebutton",
            x: meta.canvas.w - 50,
            y: 10,
            w: 30,
            h: 30,
            props: {
              color: "#333333"
            }
          }
        }
      });
    case "cm_image":
      return _objectSpread(_objectSpread({}, base), {}, {
        parentId: parentId,
        w: 150,
        h: 100,
        props: {
          srcUrl: "",
          url: ""
        }
      });
    case "cm_text":
      return _objectSpread(_objectSpread({}, base), {}, {
        parentId: parentId,
        w: 200,
        h: 50,
        props: {
          text: "Sample Text",
          textFont: "Arial",
          textSize: 20,
          textColor: "#000000",
          textBold: false
        }
      });
    default:
      return base;
  }
};
var hexToRgba = function hexToRgba(hex) {
  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var h = hex.replace("#", "");
  var bigint = parseInt(h, 16);
  var r = bigint >> 16 & 255;
  var g = bigint >> 8 & 255;
  var b = bigint & 255;
  return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(alpha, ")");
};

/* ═════════════════════ EDITOR ═════════════════════ */
// Editor component is assumed to be the same as in your "NOT WORKING" version.
// For brevity, I'm omitting it here but it should be present in your actual file.
function Editor(_ref) {
  var _safe$editingComposit, _safe$editingComposit2;
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var uploadStates = safe.uploadStates || {};
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });
  if (!sel && safe.editingCompositionMessageContentForId) {
    var editingCM = scr.elements.find(function (e) {
      return e.id === safe.editingCompositionMessageContentForId && e.type === "compositionmessage";
    });
    if (editingCM) {
      if (editingCM.props.closeButtonElement.id === safe.selected) {
        sel = editingCM.props.closeButtonElement;
      } else {
        sel = editingCM.props.contentElements.find(function (subEl) {
          return subEl.id === safe.selected;
        });
      }
    }
  }
  var patchSel = function patchSel(fn) {
    setState(function (prevSafe) {
      var newScreens = prevSafe.screens.map(function (sc, i) {
        if (i !== prevSafe.current) return sc;
        var currentSelectedId = prevSafe.selected;
        var parentCMToUpdate = null;
        if (prevSafe.editingCompositionMessageContentForId) {
          parentCMToUpdate = sc.elements.find(function (el) {
            return el.id === prevSafe.editingCompositionMessageContentForId && el.type === "compositionmessage";
          });
        }
        if (parentCMToUpdate) {
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (cm) {
              if (cm.id === parentCMToUpdate.id) {
                return _objectSpread(_objectSpread({}, cm), {}, {
                  props: _objectSpread(_objectSpread({}, cm.props), {}, {
                    contentElements: cm.props.contentElements.map(function (contentEl) {
                      return contentEl.id === currentSelectedId ? fn(contentEl) : contentEl;
                    }),
                    closeButtonElement: cm.props.closeButtonElement.id === currentSelectedId ? fn(cm.props.closeButtonElement) : cm.props.closeButtonElement
                  })
                });
              }
              return cm;
            })
          });
        } else {
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (e) {
              return e.id === currentSelectedId ? fn(e) : e;
            })
          });
        }
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens
      });
    });
  };
  var handleFileUpload = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(file, elementId) {
      var assetKeyName,
        s3Url,
        _args = arguments,
        _t;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            assetKeyName = _args.length > 2 && _args[2] !== undefined ? _args[2] : "srcUrl";
            if (!(!file || !elementId)) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            setState(function (prev) {
              return _objectSpread(_objectSpread({}, prev), {}, {
                uploadStates: _objectSpread(_objectSpread({}, prev.uploadStates), {}, _defineProperty({}, elementId, {
                  loading: true,
                  error: null
                }))
              });
            });
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file);
          case 3:
            s3Url = _context.v;
            patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, _defineProperty(_defineProperty({}, assetKeyName, s3Url), "file", undefined)) // Store S3 URL, remove File object
              });
            });
            setState(function (prev) {
              return _objectSpread(_objectSpread({}, prev), {}, {
                uploadStates: _objectSpread(_objectSpread({}, prev.uploadStates), {}, _defineProperty({}, elementId, {
                  loading: false,
                  error: null
                }))
              });
            });
            _context.n = 5;
            break;
          case 4:
            _context.p = 4;
            _t = _context.v;
            console.error("Error uploading file for element ".concat(elementId, ":"), _t);
            setState(function (prev) {
              return _objectSpread(_objectSpread({}, prev), {}, {
                uploadStates: _objectSpread(_objectSpread({}, prev.uploadStates), {}, _defineProperty({}, elementId, {
                  loading: false,
                  error: _t.message || "Upload failed"
                }))
              });
            });
          case 5:
            return _context.a(2);
        }
      }, _callee, null, [[2, 4]]);
    }));
    return function handleFileUpload(_x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  var add = function add(t) {
    var newEl = newElement(t);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: newEl.id,
      editingCompositionMessageContentForId: null,
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newEl])
        }) : sc;
      })
    }));
  };
  var addCMElement = function addCMElement(type) {
    var cmId = safe.editingCompositionMessageContentForId;
    if (!cmId) return;
    var newCMEl = newElement(type, cmId);
    setState(function (prevSafe) {
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        selected: newCMEl.id,
        screens: prevSafe.screens.map(function (sc, i) {
          return i === prevSafe.current ? _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (el) {
              return el.id === cmId && el.type === "compositionmessage" ? _objectSpread(_objectSpread({}, el), {}, {
                props: _objectSpread(_objectSpread({}, el.props), {}, {
                  contentElements: [].concat(_toConsumableArray(el.props.contentElements), [newCMEl])
                })
              }) : el;
            })
          }) : sc;
        })
      });
    });
  };
  var deleteSelectedElement = function deleteSelectedElement() {
    if (!safe.selected) return;
    var selectedId = safe.selected;
    setState(function (prevSafe) {
      var currentScreenIndex = prevSafe.current;
      var screenToUpdate = prevSafe.screens[currentScreenIndex];
      var newElements = _toConsumableArray(screenToUpdate.elements);
      var newSelectedId = null;
      var newEditingCMId = prevSafe.editingCompositionMessageContentForId;
      var newUploadStates = _objectSpread({}, prevSafe.uploadStates);
      if (prevSafe.editingCompositionMessageContentForId) {
        var cmId = prevSafe.editingCompositionMessageContentForId;
        newElements = newElements.map(function (el) {
          if (el.id === cmId && el.type === "compositionmessage") {
            if (el.props.closeButtonElement.id === selectedId) {
              console.warn("Cannot delete CM close button this way.");
              newSelectedId = selectedId;
              return el;
            }
            var newContentElements = el.props.contentElements.filter(function (subEl) {
              if (subEl.id === selectedId) {
                delete newUploadStates[selectedId]; // Clean up upload state
                return false;
              }
              return true;
            });
            return _objectSpread(_objectSpread({}, el), {}, {
              props: _objectSpread(_objectSpread({}, el.props), {}, {
                contentElements: newContentElements
              })
            });
          }
          return el;
        });
      } else {
        var elementToDelete = newElements.find(function (el) {
          return el.id === selectedId;
        });
        newElements = newElements.filter(function (el) {
          return el.id !== selectedId;
        });
        delete newUploadStates[selectedId]; // Clean up upload state

        if (elementToDelete && elementToDelete.type === "compositionmessage") {
          if (prevSafe.editingCompositionMessageContentForId === selectedId) {
            newEditingCMId = null;
          }
          newElements = newElements.map(function (el) {
            return el.type === "ctaimage" && el.props.opensCompositionMessageId === selectedId ? _objectSpread(_objectSpread({}, el), {}, {
              props: _objectSpread(_objectSpread({}, el.props), {}, {
                opensCompositionMessageId: null
              })
            }) : el;
          });
        }
      }
      var newScreens = prevSafe.screens.map(function (sc, i) {
        return i === currentScreenIndex ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: newElements
        }) : sc;
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens,
        selected: newSelectedId,
        editingCompositionMessageContentForId: newEditingCMId,
        animKey: prevSafe.animKey + 1,
        uploadStates: newUploadStates
      });
    });
  };
  var compositionMessages = scr.elements.filter(function (el) {
    return el.type === "compositionmessage";
  });
  var existingCMsForSelection = scr.elements.filter(function (el) {
    return el.type === "compositionmessage";
  });
  var currentUploadState = sel ? uploadStates[sel.id] : null;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Background\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), !safe.editingCompositionMessageContentForId ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
        className: "text-xs font-semibold mt-2",
        children: "Main Elements:"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        className: "flex flex-wrap gap-2",
        children: ["video", "ctaimage", "compositionmessage"].map(function (t) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
            className: "btn",
            onClick: function onClick() {
              return add(t);
            },
            children: ["+ ", t]
          }, t);
        })
      }), existingCMsForSelection.length > 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "mt-4",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs font-semibold",
          children: "Existing Composition Messages:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("ul", {
          className: "list-disc pl-5 text-xs space-y-1",
          children: existingCMsForSelection.map(function (cm) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("li", {
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span", {
                className: "cursor-pointer hover:text-blue-500 ".concat(safe.selected === cm.id ? "font-bold text-blue-600" : ""),
                onClick: function onClick() {
                  return setState(function (prev) {
                    return _objectSpread(_objectSpread({}, prev), {}, {
                      selected: cm.id,
                      editingCompositionMessageContentForId: null
                    });
                  });
                },
                children: ["Composition Message (", cm.id.substring(0, 4), "...)"]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                className: "ml-2 text-blue-500 hover:underline text-xs",
                onClick: function onClick(e) {
                  e.stopPropagation();
                  setState(function (prev) {
                    return _objectSpread(_objectSpread({}, prev), {}, {
                      selected: cm.props.closeButtonElement.id,
                      editingCompositionMessageContentForId: cm.id
                    });
                  });
                },
                children: "(Edit Content)"
              })]
            }, cm.id);
          })
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        className: "btn",
        onClick: function onClick() {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            editingCompositionMessageContentForId: null,
            selected: null
          }));
        },
        children: "\u2190 Back to Main Elements"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
        className: "text-xs font-semibold mt-2",
        children: ["Editing Content for CM:", " ", (_safe$editingComposit = safe.editingCompositionMessageContentForId) === null || _safe$editingComposit === void 0 ? void 0 : _safe$editingComposit.substring(0, 6), "... (Select elements on canvas to edit)"]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        className: "flex flex-wrap gap-2",
        children: ["cm_image", "cm_text"].map(function (t) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
            className: "btn",
            onClick: function onClick() {
              return addCMElement(t);
            },
            children: ["+ ", t.substring(3)]
          }, t);
        })
      })]
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span", {
        className: "font-medium capitalize",
        children: ["Editing:", " ", sel.type.startsWith("cm_") ? "".concat(sel.type.substring(3), " (in Composition)") : sel.type, sel.parentId && " (for CM: ".concat((_safe$editingComposit2 = safe.editingCompositionMessageContentForId) === null || _safe$editingComposit2 === void 0 ? void 0 : _safe$editingComposit2.substring(0, 4), "...)")]
      }), !(sel.type === "cm_closebutton" && sel.parentId === safe.editingCompositionMessageContentForId) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
        className: "btn bg-red-500 hover:bg-red-600 text-white text-xs py-1 px-2 rounded w-full mt-1",
        onClick: deleteSelectedElement,
        title: "Delete this ".concat(sel.type.startsWith("cm_") ? sel.type.substring(3) : sel.type, " element"),
        children: ["Delete", " ", sel.type.startsWith("cm_") ? sel.type.substring(3) : sel.type]
      }), (currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
        className: "text-xs text-gray-500",
        children: "Uploading..."
      }), (currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.error) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
        className: "text-xs text-red-500",
        children: ["Error: ", currentUploadState.error]
      }), sel.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "video/*",
          onChange: (/*#__PURE__*/function () {
            var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(e) {
              var _e$target$files;
              var f;
              return _regenerator().w(function (_context2) {
                while (1) switch (_context2.n) {
                  case 0:
                    f = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];
                    _context2.n = 1;
                    return handleFileUpload(f, sel.id, "srcUrl");
                  case 1:
                    return _context2.a(2);
                }
              }, _callee2);
            }));
            return function (_x4) {
              return _ref3.apply(this, arguments);
            };
          }()),
          disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading
        }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
          src: sel.props.srcUrl,
          controls: true,
          className: "mt-2 h-20 w-full object-contain border"
        })]
      }), sel.type === "ctaimage" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*",
          onChange: (/*#__PURE__*/function () {
            var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(e) {
              var _e$target$files2;
              var f;
              return _regenerator().w(function (_context3) {
                while (1) switch (_context3.n) {
                  case 0:
                    f = (_e$target$files2 = e.target.files) === null || _e$target$files2 === void 0 ? void 0 : _e$target$files2[0];
                    _context3.n = 1;
                    return handleFileUpload(f, sel.id, "srcUrl");
                  case 1:
                    return _context3.a(2);
                }
              }, _callee3);
            }));
            return function (_x5) {
              return _ref4.apply(this, arguments);
            };
          }()),
          disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading
        }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
          src: sel.props.srcUrl,
          alt: "CTA Preview",
          className: "mt-2 h-20 object-contain border"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          className: "border w-full px-1 mt-1",
          placeholder: "Click URL (optional)",
          value: sel.props.url,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1 mt-1",
          children: ["Show at\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            value: sel.props.showAt,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    showAt: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-20"
          }), "sec"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1",
          children: ["Opens Composition Message:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
            className: "border w-full",
            value: sel.props.opensCompositionMessageId || "",
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    opensCompositionMessageId: e.target.value || null
                  })
                });
              });
            },
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: "",
              children: "None"
            }), compositionMessages.map(function (cm) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
                value: cm.id,
                children: ["Composition Message (", cm.id.substring(0, 4), "...)"]
              }, cm.id);
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Circle\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.circle,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    circle: e.target.checked
                  })
                });
              });
            }
          }), " "]
        }), !sel.props.circle && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Radius\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "100",
            value: sel.props.radius,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    radius: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), " ", "px", " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1",
          children: [" ", "BG color\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bgColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgColor: e.target.value
                  })
                });
              });
            }
          }), " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "BG opacity\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "1",
            step: "0.05",
            value: sel.props.bgOpacity,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgOpacity: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "BG padding\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "60",
            value: sel.props.bgPadding,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgPadding: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), " ", "px", " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          className: "border w-full px-1 mt-1",
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          className: "border w-full",
          value: sel.props.textFont,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  textFont: e.target.value
                })
              });
            });
          },
          children: [" ", FONTS.map(function (f) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: f,
              children: [" ", f.replace(/'/g, ""), " "]
            }, f);
          }), " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Size\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "8",
            max: "72",
            value: sel.props.textSize,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textSize: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), " ", "px", " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: [" ", "Bold", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.textBold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textBold: e.target.checked
                  })
                });
              });
            }
          }), " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block",
          children: [" ", "Text color\xA0", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.textColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textColor: e.target.value
                  })
                });
              });
            }
          }), " "]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
          className: "border w-full mt-1",
          value: sel.props.effect,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  effect: e.target.value
                })
              });
            });
          },
          children: [" ", CTA_EFFECTS.map(function (ef) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: ef,
              children: [" ", ef, " "]
            }, ef);
          }), " "]
        })]
      }), sel.type === "compositionmessage" && !safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block",
          children: ["Background Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bgColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgColor: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Background Opacity\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "1",
            step: "0.05",
            value: sel.props.bgOpacity,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgOpacity: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
          className: "btn mt-2 w-full",
          onClick: function onClick() {
            return setState(_objectSpread(_objectSpread({}, safe), {}, {
              editingCompositionMessageContentForId: sel.id,
              selected: sel.props.closeButtonElement.id
            }));
          },
          children: "Edit Content & Elements"
        })]
      }), sel.type === "cm_image" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*",
          onChange: (/*#__PURE__*/function () {
            var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(e) {
              var _e$target$files3;
              var f;
              return _regenerator().w(function (_context4) {
                while (1) switch (_context4.n) {
                  case 0:
                    f = (_e$target$files3 = e.target.files) === null || _e$target$files3 === void 0 ? void 0 : _e$target$files3[0];
                    _context4.n = 1;
                    return handleFileUpload(f, sel.id, "srcUrl");
                  case 1:
                    return _context4.a(2);
                }
              }, _callee4);
            }));
            return function (_x6) {
              return _ref5.apply(this, arguments);
            };
          }()),
          disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading
        }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
          src: sel.props.srcUrl,
          alt: "CM Image Preview",
          className: "mt-2 h-20 object-contain border"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          className: "border w-full px-1 mt-1 text-xs",
          placeholder: "Click URL (optional)",
          value: sel.props.url || "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          }
        })]
      }), sel.type === "cm_text" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
          className: "border w-full px-1 mt-1",
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          className: "border w-full",
          value: sel.props.textFont,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  textFont: e.target.value
                })
              });
            });
          },
          children: FONTS.map(function (f) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
              value: f,
              children: [" ", f.replace(/'/g, ""), " "]
            }, f);
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Size\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "8",
            max: "120",
            value: sel.props.textSize,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textSize: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), " ", "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Bold", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.textBold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textBold: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block",
          children: ["Text color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.textColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textColor: e.target.value
                  })
                });
              });
            }
          })]
        })]
      }), sel.type === "cm_closebutton" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block",
          children: ["Button Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-gray-500",
          children: "Size and location are edited on the canvas."
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500",
      children: safe.editingCompositionMessageContentForId ? "Select an element on the canvas to edit its properties, or add new elements using the buttons above." : "Click an element on the canvas to edit, or select an existing Composition Message from the list above to edit its properties or content."
    })]
  });
}

/* ═════════════════════ PREVIEW ═════════════════════ */
function Preview(_ref6) {
  var _activeCMOverlayData$;
  var state = _ref6.state,
    setState = _ref6.setState,
    readOnly = _ref6.readOnly,
    onVpaidAction = _ref6.onVpaidAction,
    videoElementFromSimid = _ref6.videoElementFromSimid;
  var safe = state && state.screens && typeof state.current === "number" ? state : startState();
  if (!safe || !safe.screens || !Array.isArray(safe.screens) || safe.screens.length === 0 || safe.current === undefined || safe.current === null || safe.current < 0 || safe.current >= safe.screens.length) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: {
        color: "red",
        border: "1px solid red",
        padding: "10px"
      },
      children: "Preview Error: Invalid State."
    });
  }
  var scr = safe.screens[safe.current];
  if (!scr || !scr.elements || !Array.isArray(scr.elements)) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      style: {
        color: "red",
        border: "1px solid red",
        padding: "10px"
      },
      children: "Preview Error: Current screen data or elements missing."
    });
  }
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0),
    _useState2 = _slicedToArray(_useState, 2),
    videoTime = _useState2[0],
    setVideoTime = _useState2[1];
  var videoPausedTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);
  var localVideoRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  var videoRef = videoElementFromSimid ? {
    current: videoElementFromSimid
  } : localVideoRef;
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    var vid = videoRef.current;
    if (!vid) return;
    if (typeof vid.addEventListener !== "function" || typeof vid.removeEventListener !== "function") {
      console.error("Preview: videoRef.current is not a valid EventTarget.", vid);
      return;
    }
    var handleTimeUpdate = function handleTimeUpdate() {
      if (vid && typeof vid.currentTime === "number") {
        setVideoTime(vid.currentTime);
      }
    };
    var vpaidVidTimeUpdate; // Declare here to be accessible in cleanup

    if (videoElementFromSimid && vid === videoElementFromSimid) {
      vpaidVidTimeUpdate = function vpaidVidTimeUpdate() {
        // Assign here
        if (videoElementFromSimid && typeof videoElementFromSimid.currentTime === "number") {
          setVideoTime(videoElementFromSimid.currentTime);
        }
      };
      videoElementFromSimid.addEventListener("timeupdate", vpaidVidTimeUpdate);
    } else if (!videoElementFromSimid && vid === localVideoRef.current) {
      // Ensure it's the local video
      vid.addEventListener("timeupdate", handleTimeUpdate);
    }
    return function () {
      if (videoElementFromSimid && vid === videoElementFromSimid && vpaidVidTimeUpdate) {
        videoElementFromSimid.removeEventListener("timeupdate", vpaidVidTimeUpdate);
      } else if (!videoElementFromSimid && vid === localVideoRef.current) {
        vid.removeEventListener("timeupdate", handleTimeUpdate);
      }
    };
  }, [videoRef, videoElementFromSimid]); // videoRef itself can be a dependency if its .current assignment changes

  var getSafeUrl = function getSafeUrl(url) {
    if (!url) return "#";
    var trimmedUrl = String(url).trim();
    if (trimmedUrl.startsWith("https://") || trimmedUrl.startsWith("https://") || trimmedUrl.startsWith("//")) {
      return trimmedUrl;
    }
    return "https://".concat(trimmedUrl);
  };
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (!onVpaidAction) {
      if (safe.activeCompositionMessageId) {
        var cmExists = scr.elements.some(function (el) {
          return el && el.id === safe.activeCompositionMessageId && el.type === "compositionmessage";
        });
        if (!cmExists && setState) {
          setState(function (prev) {
            return _objectSpread(_objectSpread({}, prev), {}, {
              activeCompositionMessageId: null
            });
          });
        }
      }
    }
  }, [safe.activeCompositionMessageId, scr.elements, setState, onVpaidAction]);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (safe.editingCompositionMessageContentForId) {
      var cmExists = scr.elements.some(function (el) {
        return el && el.id === safe.editingCompositionMessageContentForId && el.type === "compositionmessage";
      });
      if (!cmExists && setState) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            editingCompositionMessageContentForId: null,
            selected: null
          });
        });
      }
    }
  }, [safe.editingCompositionMessageContentForId, scr.elements, setState]);
  var commitUpdate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (elementId, patch) {
    if (!setState || readOnly) return;
    setState(function (prevSafe) {
      if (!prevSafe || !prevSafe.screens || !Array.isArray(prevSafe.screens) || prevSafe.current < 0 || prevSafe.current >= prevSafe.screens.length) {
        return prevSafe;
      }
      var newScreens = prevSafe.screens.map(function (sc, currentScreenIndex) {
        if (currentScreenIndex !== prevSafe.current || !sc || !sc.elements || !Array.isArray(sc.elements)) return sc;
        if (prevSafe.editingCompositionMessageContentForId) {
          var cmId = prevSafe.editingCompositionMessageContentForId;
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (mainEl) {
              if (!mainEl || !mainEl.props) return mainEl;
              if (mainEl.id === cmId && mainEl.type === "compositionmessage") {
                if (mainEl.props.closeButtonElement && mainEl.props.closeButtonElement.id === elementId) {
                  return _objectSpread(_objectSpread({}, mainEl), {}, {
                    props: _objectSpread(_objectSpread({}, mainEl.props), {}, {
                      closeButtonElement: _objectSpread(_objectSpread({}, mainEl.props.closeButtonElement), patch)
                    })
                  });
                }
                if (mainEl.props.contentElements && Array.isArray(mainEl.props.contentElements)) {
                  var newContentElements = mainEl.props.contentElements.map(function (contentEl) {
                    return contentEl && contentEl.id === elementId ? _objectSpread(_objectSpread({}, contentEl), patch) : contentEl;
                  });
                  return _objectSpread(_objectSpread({}, mainEl), {}, {
                    props: _objectSpread(_objectSpread({}, mainEl.props), {}, {
                      contentElements: newContentElements
                    })
                  });
                }
              }
              return mainEl;
            })
          });
        } else {
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (e) {
              return e && e.id === elementId ? _objectSpread(_objectSpread({}, e), patch) : e;
            })
          });
        }
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens
      });
    });
  }, [readOnly, setState]);
  var selectElement = function selectElement(id) {
    if (!readOnly && setState && !onVpaidAction) {
      setState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          selected: id
        });
      });
    }
  };

  // RESTORED handleCtaClick from the working version
  var handleCtaClick = function handleCtaClick(ctaElement) {
    if (!ctaElement || !ctaElement.props) return;
    if (onVpaidAction) {
      // SIMID MODE
      if (ctaElement.props.opensCompositionMessageId) {
        onVpaidAction({
          type: "OPEN_COMPOSITION_MESSAGE",
          payload: {
            messageId: ctaElement.props.opensCompositionMessageId
          }
        });
      } else if (ctaElement.props.url) {
        onVpaidAction({
          type: "CLICKTHROUGH",
          payload: {
            url: getSafeUrl(ctaElement.props.url)
          }
        });
      }
    } else {
      // Original Next.js editor/preview mode
      if (ctaElement.props.opensCompositionMessageId) {
        if (videoRef.current && typeof videoRef.current.pause === "function") {
          videoPausedTimeRef.current = videoRef.current.currentTime;
          videoRef.current.pause();
        }
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            activeCompositionMessageId: ctaElement.props.opensCompositionMessageId
          });
        });
      } else if (ctaElement.props.url) {
        window.open(getSafeUrl(ctaElement.props.url), "_blank");
      }
    }
  };
  var closeCompositionMessage = function closeCompositionMessage() {
    if (onVpaidAction) {
      onVpaidAction({
        type: "CLOSE_COMPOSITION_MESSAGE",
        payload: {
          messageId: safe.activeCompositionMessageId
        }
      });
    } else {
      if (videoRef.current && typeof videoRef.current.play === "function") {
        if (videoRef.current.readyState >= 1) {
          videoRef.current.currentTime = videoPausedTimeRef.current || 0;
        }
        videoRef.current.play()["catch"](function (error) {
          return console.error("Error resuming video playback:", error);
        });
      }
      setState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          activeCompositionMessageId: null
        });
      });
    }
  };
  var videoElementFromState = scr.elements.find(function (el) {
    return el && el.type === "video";
  });
  var canvasElementsToRender = [];
  var activeCMOverlayData = null;
  var currentActiveCompositionMessageId = safe.activeCompositionMessageId;
  var isEditingCMContentMode = safe.editingCompositionMessageContentForId && !currentActiveCompositionMessageId && !readOnly;
  var isActiveCMRuntimeMode = !!currentActiveCompositionMessageId;
  var baseElements = scr.elements.filter(function (el) {
    return el && el.type !== "compositionmessage" && el.type !== "video";
  });
  if (isEditingCMContentMode) {
    var cmBeingEdited = scr.elements.find(function (el) {
      return el && el.id === safe.editingCompositionMessageContentForId && el.type === "compositionmessage";
    });
    if (cmBeingEdited && cmBeingEdited.props) {
      if (!videoElementFromSimid && videoElementFromState) {
        // Only add if not in VPAID mode
        canvasElementsToRender.push(_objectSpread(_objectSpread({}, videoElementFromState), {}, {
          _isBackdropForEditing: true // This special prop indicates it's a backdrop
        }));
      }
      // Add a visual representation of the CM background itself when editing its content
      var canvasWidth = meta && meta.canvas ? meta.canvas.w : 300;
      var canvasHeight = meta && meta.canvas ? meta.canvas.h : 250;
      canvasElementsToRender.push({
        id: "".concat(cmBeingEdited.id, "_bg_editing"),
        type: "_cm_background_editing",
        // Special type for rendering
        x: 0,
        y: 0,
        w: canvasWidth,
        h: canvasHeight,
        props: {
          bgColor: cmBeingEdited.props.bgColor,
          bgOpacity: cmBeingEdited.props.bgOpacity
        },
        _isBackdropForEditing: true,
        // Treat as backdrop
        zIndex: -1 // Ensure it's behind content elements
      });
      if (cmBeingEdited.props.contentElements && Array.isArray(cmBeingEdited.props.contentElements)) {
        var _canvasElementsToRend;
        (_canvasElementsToRend = canvasElementsToRender).push.apply(_canvasElementsToRend, _toConsumableArray(cmBeingEdited.props.contentElements.filter(function (el) {
          return el;
        })));
      }
      if (cmBeingEdited.props.closeButtonElement) {
        canvasElementsToRender.push(cmBeingEdited.props.closeButtonElement);
      }
    } else {
      var _canvasElementsToRend2;
      if (!videoElementFromSimid && videoElementFromState) canvasElementsToRender.push(videoElementFromState);
      (_canvasElementsToRend2 = canvasElementsToRender).push.apply(_canvasElementsToRend2, _toConsumableArray(baseElements));
    }
  } else if (isActiveCMRuntimeMode) {
    var currentActiveCM = scr.elements.find(function (el) {
      return el && el.id === currentActiveCompositionMessageId && el.type === "compositionmessage";
    });
    if (currentActiveCM && currentActiveCM.props) {
      if (!videoElementFromSimid && videoElementFromState) canvasElementsToRender.push(videoElementFromState);
      activeCMOverlayData = currentActiveCM;
    } else {
      var _canvasElementsToRend3;
      if (!videoElementFromSimid && videoElementFromState) canvasElementsToRender.push(videoElementFromState);
      (_canvasElementsToRend3 = canvasElementsToRender).push.apply(_canvasElementsToRend3, _toConsumableArray(baseElements));
    }
  } else {
    var _canvasElementsToRend4;
    // Standard mode (neither editing CM content nor is a CM active at runtime)
    if (!videoElementFromSimid && videoElementFromState) {
      // Only render local video if not in VPAID
      canvasElementsToRender.push(videoElementFromState);
    }
    (_canvasElementsToRend4 = canvasElementsToRender).push.apply(_canvasElementsToRend4, _toConsumableArray(baseElements));
  }
  var uniqueIds = new Set();
  canvasElementsToRender = canvasElementsToRender.filter(function (el) {
    if (!el || !el.id) return false;
    if (uniqueIds.has(el.id)) {
      return false;
    }
    uniqueIds.add(el.id);
    return true;
  });
  var previewCanvasActualBg = isEditingCMContentMode ? "#e0e0e0" // Light grey background when editing CM content for better visibility
  : "transparent"; // Transparent for VPAID, or safe.bg for editor

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      children: "\n        @keyframes floatK {0%{transform:translateY(0)}50%{transform:translateY(-10px)}100%{transform:translateY(0)}}\n        @keyframes bounceK{0%,100%{transform:translateY(0)}50%{transform:translateY(-20px)}}\n        @keyframes wavesK {0%{box-shadow:0 0 0 0 rgba(255,255,255,.4),0 0 0 0 rgba(255,255,255,.4),0 0 0 0 rgba(255,255,255,.4)}\n        60%{box-shadow:0 0 0 15px rgba(255,255,255,0),0 0 0 30px rgba(255,255,255,0),0 0 0 45px rgba(255,255,255,0)}\n        100%{box-shadow:0 0 0 0 rgba(255,255,255,0),0 0 0 0 rgba(255,255,255,0),0 0 0 0 rgba(255,255,255,0)}}\n        @keyframes pulseK {0%{transform:scale(1)}50%{transform:scale(1.1)}100%{transform:scale(1)}}\n        @keyframes spinK  {0%{transform:rotate(0)}100%{transform:rotate(360deg)}}\n        @keyframes shakeK {0%,100%{transform:translateX(0)}25%{transform:translateX(-4px)}75%{transform:translateX(4px)}}\n        @keyframes jumpK  {0%{transform:translateY(0)}30%{transform:translateY(-25px)}50%{transform:translateY(-30px)}70%{transform:translateY(-25px)}100%{transform:translateY(0)}}\n        @keyframes tiltK  {0%,100%{transform:rotate(0)}50%{transform:rotate(6deg)}}\n        @keyframes flashK {0%,50%,100%{opacity:1}25%,75%{opacity:0}}\n        @keyframes slideRightK{0%{transform:translateX(-100%)}100%{transform:translateX(0)}}\n        @keyframes slideLeftK {0%{transform:translateX(100%)}100%{transform:translateX(0)}}\n        @keyframes growK {0%{transform:scale(0)}100%{transform:scale(1)}}\n        @keyframes swingK{0%{transform:rotate(0)}20%{transform:rotate(15deg)}40%{transform:rotate(-10deg)}60%{transform:rotate(5deg)}80%{transform:rotate(-5deg)}100%{transform:rotate(0)}}\n\n        .effect-float  {animation:floatK 4s ease-in-out infinite;}\n        .effect-bounce {animation:bounceK 2s ease-in-out infinite;}\n        .effect-waves  {animation:wavesK 2.8s ease-out infinite;}\n        .effect-pulse  {animation:pulseK 2s ease-in-out infinite;}\n        .effect-spin   {animation:spinK 6s linear infinite;}\n        .effect-shake  {animation:shakeK .8s linear infinite;}\n        .effect-jump   {animation:jumpK 2.5s ease-in-out infinite;}\n        .effect-tilt   {animation:tiltK 3s ease-in-out infinite;}\n        .effect-flash  {animation:flashK 1.5s linear infinite;}\n        .effect-slide-right{animation:slideRightK .6s ease-out;}\n        .effect-slide-left{animation:slideLeftK .6s ease-out;}\n        .effect-grow   {animation:growK .6s ease-out;}\n        .effect-swing  {animation:swingK 1.5s ease-in-out infinite;}\n      "
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      style: {
        width: meta && meta.canvas ? meta.canvas.w : 300,
        height: meta && meta.canvas ? meta.canvas.h : 250,
        background: onVpaidAction ? "transparent" : isEditingCMContentMode ? "#e0e0e0" : safe.bg,
        position: "relative",
        overflow: "hidden",
        boxSizing: "border-box"
      },
      children: [!videoElementFromSimid && videoElementFromState && videoElementFromState.props && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
        ref: localVideoRef,
        src: videoElementFromState.props.srcUrl || "",
        controls: !onVpaidAction,
        autoPlay: !onVpaidAction,
        loop: !onVpaidAction,
        playsInline: true,
        muted: !!onVpaidAction,
        style: {
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          objectFit: "cover",
          opacity: activeCMOverlayData || isEditingCMContentMode && videoElementFromState._isBackdropForEditing ? 0.7 : 1,
          zIndex: isEditingCMContentMode && videoElementFromState._isBackdropForEditing ? -2 : 0 // Ensure backdrop video is behind CM editing background
        }
      }), canvasElementsToRender.map(function (el) {
        var _el$props$showAt, _el$props$showAt2, _el$props$bgOpacity2;
        if (!el || !el.id || !el.props) return null;
        // Skip rendering the main video element here if it's managed above or by VPAID
        if (el.type === "video" && !el._isBackdropForEditing) return null;
        if (el.type === "_cm_background_editing") {
          var _el$props$bgOpacity;
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            style: {
              width: "100%",
              height: "100%",
              background: hexToRgba(el.props.bgColor || "#000000", (_el$props$bgOpacity = el.props.bgOpacity) !== null && _el$props$bgOpacity !== void 0 ? _el$props$bgOpacity : 1),
              position: "absolute",
              top: 0,
              left: 0,
              zIndex: el.zIndex != null ? el.zIndex : -1,
              // Ensure it's behind content
              pointerEvents: "none"
            }
          }, el.id);
        }
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly || !!activeCMOverlayData || !!el._isBackdropForEditing,
          enableResizing: !readOnly && !activeCMOverlayData && !el._isBackdropForEditing && el.type !== "video",
          onDragStop: function onDragStop(_, d) {
            return commitUpdate(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            var newSize = {
              w: ref.offsetWidth,
              h: ref.offsetHeight
            };
            if (el.type === "cm_closebutton" && isEditingCMContentMode) {
              var size = Math.max(newSize.w, newSize.h);
              commitUpdate(el.id, {
                w: size,
                h: size,
                x: pos.x,
                y: pos.y
              });
            } else {
              commitUpdate(el.id, {
                w: newSize.w,
                h: newSize.h,
                x: pos.x,
                y: pos.y
              });
            }
          },
          onClick: function onClick(e) {
            e.stopPropagation();
            if (!activeCMOverlayData && !el._isBackdropForEditing && !readOnly && !onVpaidAction) {
              selectElement(el.id);
            }
          },
          style: {
            outline: !activeCMOverlayData && !el._isBackdropForEditing && safe.selected === el.id && !readOnly && !onVpaidAction ? "2px solid #3b82f6" : "none",
            cursor: readOnly || !!activeCMOverlayData || !!el._isBackdropForEditing ? "default" : "move",
            borderRadius: el.type === "cm_closebutton" && isEditingCMContentMode ? "50%" : "0px",
            background: el.type === "cm_closebutton" && isEditingCMContentMode && el.props ? el.props.color : "transparent",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            visibility: isActiveCMRuntimeMode && el.type !== "video" && !el._isBackdropForEditing && (!activeCMOverlayData || activeCMOverlayData && activeCMOverlayData.id !== el.id && !el.id.startsWith(activeCMOverlayData.id + "_")) ? "hidden" : "visible",
            zIndex: el.zIndex != null ? el.zIndex : el.type === "ctaimage" ? 1 : "auto",
            boxSizing: "border-box"
          },
          children: [el.type === "ctaimage" && !isEditingCMContentMode && el.props && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            style: {
              width: "100%",
              height: "100%",
              display: "flex",
              alignItems: "center",
              visibility: videoTime >= ((_el$props$showAt = el.props.showAt) !== null && _el$props$showAt !== void 0 ? _el$props$showAt : 0) ? "visible" : "hidden",
              pointerEvents: videoTime >= ((_el$props$showAt2 = el.props.showAt) !== null && _el$props$showAt2 !== void 0 ? _el$props$showAt2 : 0) && !activeCMOverlayData ? "auto" : "none"
            },
            onClickCapture: function onClickCapture(e) {
              var _el$props$showAt3;
              // Use onClickCapture to ensure it fires before RND's onClick if needed
              if ((readOnly || !readOnly && safe.selected === el.id && !onVpaidAction || onVpaidAction) && !activeCMOverlayData && !isEditingCMContentMode && videoTime >= ((_el$props$showAt3 = el.props.showAt) !== null && _el$props$showAt3 !== void 0 ? _el$props$showAt3 : 0)) {
                e.stopPropagation();
                handleCtaClick(el);
              }
            },
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              className: "".concat(el.props.effect && el.props.effect !== "none" ? "effect-".concat(el.props.effect) : ""),
              style: {
                padding: el.props.bgPadding || 0,
                background: hexToRgba(el.props.bgColor || "#ffffff00", (_el$props$bgOpacity2 = el.props.bgOpacity) !== null && _el$props$bgOpacity2 !== void 0 ? _el$props$bgOpacity2 : 0),
                borderRadius: el.props.circle ? "50%" : "".concat(el.props.radius || 0, "px"),
                height: "100%",
                aspectRatio: "1/1",
                flexShrink: 0,
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                boxSizing: "border-box",
                cursor: el.props.url || el.props.opensCompositionMessageId ? "pointer" : "default"
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                src: el.props.srcUrl || el.props.src || "https://dummyimage.com/60x60/444/ffffff.png&text=Img",
                style: {
                  width: "100%",
                  height: "100%",
                  objectFit: "cover",
                  borderRadius: el.props.circle ? "50%" : "".concat(el.props.radius || 0, "px")
                },
                alt: el.props.text || "CTA Image",
                onError: function onError(e) {
                  e.currentTarget.src = "https://dummyimage.com/60x60/ff0000/ffffff.png&text=Error";
                }
              })
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                marginLeft: "0.5rem",
                overflow: "hidden",
                color: el.props.textColor || "#000000",
                fontFamily: el.props.textFont || "sans-serif",
                fontSize: "".concat(el.props.textSize || 16, "px"),
                fontWeight: el.props.textBold ? "bold" : "normal",
                whiteSpace: "pre-wrap",
                wordBreak: "break-word"
              },
              children: el.props.text
            })]
          }), el.type === "cm_image" && isEditingCMContentMode && el.props && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: el.props.srcUrl || el.props.src || "https://dummyimage.com/150x100/ccc/fff.png&text=Image",
            alt: "Composition content image",
            style: {
              width: "100%",
              height: "100%",
              objectFit: "contain",
              pointerEvents: readOnly ? "none" : "auto"
            },
            onError: function onError(e) {
              return e.currentTarget.src = "https://dummyimage.com/150x100/ff0000/ffffff.png&text=Error";
            }
          }), el.type === "cm_text" && isEditingCMContentMode && el.props && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            style: {
              width: "100%",
              height: "100%",
              overflow: "hidden",
              padding: "0.25rem",
              boxSizing: "border-box",
              color: el.props.textColor || "#000000",
              fontFamily: el.props.textFont || "sans-serif",
              fontSize: "".concat(el.props.textSize || 16, "px"),
              fontWeight: el.props.textBold ? "bold" : "normal",
              whiteSpace: "pre-wrap",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              textAlign: "center",
              pointerEvents: readOnly ? "none" : "auto"
            },
            children: el.props.text
          }), el.type === "cm_closebutton" && isEditingCMContentMode && el.props && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            style: {
              fontSize: Math.min(el.w || 20, el.h || 20) * 0.6,
              color: "#fff",
              pointerEvents: "none"
            },
            children: "\u2715"
          })]
        }, el.id);
      }), activeCMOverlayData && activeCMOverlayData.props && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        style: {
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          background: hexToRgba(activeCMOverlayData.props.bgColor || "#000000", (_activeCMOverlayData$ = activeCMOverlayData.props.bgOpacity) !== null && _activeCMOverlayData$ !== void 0 ? _activeCMOverlayData$ : 0.8),
          zIndex: 1000,
          display: "flex",
          alignItems: "center",
          justifyContent: "center"
        },
        children: [activeCMOverlayData.props.contentElements && Array.isArray(activeCMOverlayData.props.contentElements) && activeCMOverlayData.props.contentElements.map(function (contentEl) {
          if (!contentEl || !contentEl.id || !contentEl.props) return null;
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            style: {
              position: "absolute",
              left: contentEl.x,
              top: contentEl.y,
              width: contentEl.w,
              height: contentEl.h
            },
            onClick: function onClick(e) {
              return e.stopPropagation();
            } // Prevent CM click-away if content is clicked
            ,
            children: [contentEl.type === "cm_image" && (contentEl.props.url ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("a", {
              href: getSafeUrl(contentEl.props.url),
              target: "_blank",
              rel: "noopener noreferrer",
              onClick: function onClick(e) {
                e.stopPropagation();
                if (onVpaidAction) {
                  onVpaidAction({
                    type: "CLICKTHROUGH",
                    payload: {
                      url: getSafeUrl(contentEl.props.url)
                    }
                  });
                }
              },
              style: {
                display: "block",
                width: "100%",
                height: "100%"
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                src: contentEl.props.srcUrl || contentEl.props.src || "https://dummyimage.com/150x100/ccc/fff.png&text=Image",
                alt: "CM content image",
                style: {
                  width: "100%",
                  height: "100%",
                  objectFit: "contain"
                },
                onError: function onError(e) {
                  return e.currentTarget.src = "https://dummyimage.com/150x100/ff0000/ffffff.png&text=Error";
                }
              })
            }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
              src: contentEl.props.srcUrl || contentEl.props.src || "https://dummyimage.com/150x100/ccc/fff.png&text=Image",
              alt: "CM content image",
              style: {
                width: "100%",
                height: "100%",
                objectFit: "contain"
              },
              onError: function onError(e) {
                return e.currentTarget.src = "https://dummyimage.com/150x100/ff0000/ffffff.png&text=Error";
              }
            })), contentEl.type === "cm_text" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                color: contentEl.props.textColor || "#000000",
                fontFamily: contentEl.props.textFont || "sans-serif",
                fontSize: "".concat(contentEl.props.textSize || 16, "px"),
                fontWeight: contentEl.props.textBold ? "bold" : "normal",
                width: "100%",
                height: "100%",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                textAlign: "center",
                whiteSpace: "pre-wrap",
                overflow: "hidden",
                boxSizing: "border-box"
              },
              children: contentEl.props.text
            })]
          }, contentEl.id);
        }), function () {
          var btn = activeCMOverlayData.props.closeButtonElement;
          if (!btn || !btn.props) return null;
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: function onClick(e) {
              e.stopPropagation();
              closeCompositionMessage();
            },
            style: {
              position: "absolute",
              left: btn.x,
              top: btn.y,
              width: btn.w,
              height: btn.h,
              background: btn.props.color || "#888888",
              borderRadius: "50%",
              border: "none",
              color: "white",
              fontSize: Math.min(btn.w || 20, btn.h || 20) * 0.5,
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              zIndex: 1002
            },
            "aria-label": "Close message",
            children: "\u2715"
          });
        }()]
      })]
    })]
  });
}
Preview.displayName = (typeof meta !== "undefined" && meta.name ? meta.name : "Component") + " Preview";

/* ══════════════════ PERSISTENCE ══════════════════ */
// serialize and deserialize functions are assumed to be the same as in your "NOT WORKING" version.
// For brevity, I'm omitting them here but they should be present in your actual file.
function serialize(_x7) {
  return _serialize.apply(this, arguments);
}
function _serialize() {
  _serialize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(s) {
    var screens, thumbnailHint, firstScreen, videoElement, ctaImageElement, cmWithMessage, cmImageElement;
    return _regenerator().w(function (_context6) {
      while (1) switch (_context6.n) {
        case 0:
          screens = s.screens.map(function (sc) {
            return _objectSpread(_objectSpread({}, sc), {}, {
              elements: sc.elements.map(function (el) {
                var newProps = _objectSpread({}, el.props);
                if (newProps.hasOwnProperty("file")) {
                  delete newProps.file;
                }
                if (newProps.hasOwnProperty("srcUrl")) {
                  newProps.src = newProps.srcUrl;
                  delete newProps.srcUrl;
                }
                if (el.type === "compositionmessage") {
                  var contentElements = el.props.contentElements.map(function (contentEl) {
                    var newContentProps = _objectSpread({}, contentEl.props);
                    if (newContentProps.hasOwnProperty("file")) {
                      delete newContentProps.file;
                    }
                    if (newContentProps.hasOwnProperty("srcUrl")) {
                      newContentProps.src = newContentProps.srcUrl;
                      delete newContentProps.srcUrl;
                    }
                    return _objectSpread(_objectSpread({}, contentEl), {}, {
                      props: newContentProps
                    });
                  });
                  return _objectSpread(_objectSpread({}, el), {}, {
                    props: _objectSpread(_objectSpread({}, newProps), {}, {
                      contentElements: contentElements
                    })
                  });
                }
                return _objectSpread(_objectSpread({}, el), {}, {
                  props: newProps
                });
              })
            });
          });
          thumbnailHint = "";
          if (s.screens && s.screens.length > 0) {
            firstScreen = s.screens[0];
            videoElement = firstScreen.elements.find(function (el) {
              return el.type === "video" && el.props.srcUrl;
            } // Check runtime srcUrl
            );
            if (videoElement) {
              thumbnailHint = videoElement.props.srcUrl;
            } else {
              ctaImageElement = firstScreen.elements.find(function (el) {
                return el.type === "ctaimage" && el.props.srcUrl;
              } // Check runtime srcUrl
              );
              if (ctaImageElement) {
                thumbnailHint = ctaImageElement.props.srcUrl;
              } else {
                cmWithMessage = firstScreen.elements.find(function (el) {
                  return el.type === "compositionmessage";
                });
                if (cmWithMessage && cmWithMessage.props.contentElements) {
                  cmImageElement = cmWithMessage.props.contentElements.find(function (cel) {
                    return cel.type === "cm_image" && cel.props.srcUrl;
                  } // Check runtime srcUrl
                  );
                  if (cmImageElement) {
                    thumbnailHint = cmImageElement.props.srcUrl;
                  }
                }
              }
            }
          }
          return _context6.a(2, _objectSpread(_objectSpread({}, s), {}, {
            selected: null,
            activeCompositionMessageId: null,
            editingCompositionMessageContentForId: null,
            uploadStates: {},
            screens: screens,
            _thumbnailHintUrl: thumbnailHint
          }));
      }
    }, _callee6);
  }));
  return _serialize.apply(this, arguments);
}
var deserialize = function deserialize() {
  var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var baseState = startState();
  if (d && d.screens) {
    var deserializedScreens = d.screens.map(function (sc) {
      return _objectSpread(_objectSpread({}, sc), {}, {
        elements: sc.elements.map(function (el) {
          var newProps = _objectSpread({}, el.props);
          if (newProps.hasOwnProperty("src") && typeof newProps.src === "string") {
            newProps.srcUrl = newProps.src;
          }
          if (el.type === "compositionmessage") {
            var _el$props$closeButton;
            var defaultCMElement = newElement("compositionmessage");
            var contentElements = (el.props.contentElements || []).map(function (contentEl) {
              var newContentProps = _objectSpread({}, contentEl.props);
              if (newContentProps.hasOwnProperty("src") && typeof newContentProps.src === "string") {
                newContentProps.srcUrl = newContentProps.src;
              }
              var defaultSubElement = newElement(contentEl.type, el.id);
              return _objectSpread(_objectSpread(_objectSpread({}, defaultSubElement), contentEl), {}, {
                props: _objectSpread(_objectSpread({}, defaultSubElement.props), {}, {
                  url: ""
                }, newContentProps)
              });
            });
            return _objectSpread(_objectSpread(_objectSpread({}, defaultCMElement), el), {}, {
              props: _objectSpread(_objectSpread(_objectSpread({}, defaultCMElement.props), newProps), {}, {
                contentElements: contentElements,
                closeButtonElement: _objectSpread(_objectSpread(_objectSpread({}, defaultCMElement.props.closeButtonElement), el.props.closeButtonElement || {}), {}, {
                  parentId: el.id,
                  props: _objectSpread(_objectSpread({}, defaultCMElement.props.closeButtonElement.props), ((_el$props$closeButton = el.props.closeButtonElement) === null || _el$props$closeButton === void 0 ? void 0 : _el$props$closeButton.props) || {})
                })
              })
            });
          } else if (el.type === "ctaimage") {
            var defaultCta = newElement("ctaimage");
            return _objectSpread(_objectSpread(_objectSpread({}, defaultCta), el), {}, {
              props: _objectSpread(_objectSpread({}, defaultCta.props), newProps)
            });
          } else if (el.type === "video") {
            var defaultVideo = newElement("video");
            return _objectSpread(_objectSpread(_objectSpread({}, defaultVideo), el), {}, {
              props: _objectSpread(_objectSpread({}, defaultVideo.props), newProps)
            });
          }
          return _objectSpread(_objectSpread({}, el), {}, {
            props: newProps
          });
        })
      });
    });
    return _objectSpread(_objectSpread(_objectSpread({}, baseState), d), {}, {
      selected: null,
      activeCompositionMessageId: null,
      editingCompositionMessageContentForId: null,
      uploadStates: {},
      screens: deserializedScreens
    });
  }
  return baseState;
};

/***/ }),

/***/ "./templates/videoShowcase.js":
/*!************************************!*\
  !*** ./templates/videoShowcase.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* Video Showcase – template for a background video with interactive CTA elements
--------------------------------------------------------------------------------- */




// V. Global Considerations: API_BASE_URL

var API_BASE_URL = "https://localhost:3001" || 0;

/* ---------- meta ---------- */
var meta = {
  id: "video-showcase",
  // CHANGED
  name: "Video showcase",
  // CHANGED
  description: "Upload a background video and overlay interactive CTA elements with images, text, and buttons that can trigger composition messages.",
  // CHANGED
  canvas: {
    w: 640,
    h: 360
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'", "'Roboto'"];
var BORDER_STYLES = ["none", "solid", "dashed", "dotted", "double", "groove", "ridge", "inset", "outset"];
var TEXT_ALIGNS = ["left", "center", "right", "justify"];
var CTA_ANIMATION_EFFECTS = [{
  value: "none",
  name: "None"
}, {
  value: "fadeIn",
  name: "Fade In"
}, {
  value: "slideUp",
  name: "Slide Up (from bottom)"
}, {
  value: "slideDown",
  name: "Slide Down (from top)"
}, {
  value: "zoomIn",
  name: "Zoom In"
}, {
  value: "bounceIn",
  name: "Bounce In"
}];
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(fileObject) {
    var formData, response, errorData, result, _t2;
    return _regenerator().w(function (_context7) {
      while (1) switch (_context7.n) {
        case 0:
          formData = new FormData();
          formData.append("assetFile", fileObject);
          _context7.p = 1;
          _context7.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData
          });
        case 2:
          response = _context7.v;
          if (response.ok) {
            _context7.n = 4;
            break;
          }
          _context7.n = 3;
          return response.json()["catch"](function () {
            return {
              message: "Upload failed with status " + response.status
            };
          });
        case 3:
          errorData = _context7.v;
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 4:
          _context7.n = 5;
          return response.json();
        case 5:
          result = _context7.v;
          return _context7.a(2, result.url);
        case 6:
          _context7.p = 6;
          _t2 = _context7.v;
          console.error("File upload error:", _t2);
          throw _t2;
        case 7:
          return _context7.a(2);
      }
    }, _callee7, null, [[1, 6]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
var getSafeUrl = function getSafeUrl(url) {
  if (!url) return "#";
  var trimmedUrl = url.trim();
  if (trimmedUrl.startsWith("https://") || trimmedUrl.startsWith("https://") || trimmedUrl.startsWith("//")) {
    return trimmedUrl;
  }
  return "https://".concat(trimmedUrl);
};
var startState = function startState() {
  return {
    bg: "#000000",
    current: 0,
    selected: null,
    animKey: 0,
    activeCompositionMessageId: null,
    editingCompositionMessageContentForId: null,
    uploadStates: {},
    // Stores upload state per element ID or gallery item ID
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }]
  };
};
var newElement = function newElement(type) {
  var parentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var cmIdForCloseButton = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var base = {
    id: crypto.randomUUID(),
    type: type,
    x: 10,
    y: 10,
    w: 180,
    h: 90
  };
  switch (type) {
    case "video":
      return _objectSpread(_objectSpread({}, base), {}, {
        w: meta.canvas.w,
        h: meta.canvas.h,
        x: 0,
        y: 0,
        props: {
          srcUrl: ""
        }
      });
    case "ctaimage":
      // EDITED for new structure AND visibility props
      return _objectSpread(_objectSpread({}, base), {}, {
        w: 320,
        h: 120,
        props: {
          // Container Props
          containerBgColor: "#ffffff",
          containerBorderColor: "#cccccc",
          containerBorderWidth: 1,
          containerBorderStyle: "solid",
          containerBorderRadius: 0,
          containerPadding: 10,
          // Image Props
          showImage: true,
          // NEW: Visibility for image
          srcUrl: "",
          // S3 URL for the image
          imageWidthPercent: 30,
          // Image width as a percentage of container width

          // Text Props
          showText: true,
          // NEW: Visibility for text
          text: "Your compelling message here.",
          textColor: "#333333",
          textFont: "Arial",
          textSize: 16,
          textBold: false,
          textAlign: "left",
          // Button Props
          showButton: true,
          buttonText: "Learn More",
          buttonTextColor: "#ffffff",
          buttonBgColor: "#007bff",
          buttonBorderColor: "#007bff",
          buttonBorderWidth: 0,
          buttonBorderStyle: "solid",
          buttonBorderRadius: 5,
          buttonFont: "Arial",
          buttonFontSize: 14,
          buttonFontBold: false,
          buttonPaddingX: 12,
          buttonPaddingY: 6,
          // Interaction
          opensCompositionMessageId: null,
          showAt: 0,
          hideAt: null,
          animationEffect: "none"
        }
      });
    case "compositionmessage":
      var newCmId = base.id;
      return _objectSpread(_objectSpread({}, base), {}, {
        id: newCmId,
        x: -1000,
        y: -1000,
        w: 0,
        h: 0,
        props: {
          bgColor: "#ffffff",
          bgOpacity: 0.95,
          contentElements: [],
          closeButtonElement: {
            id: "".concat(newCmId, "_close"),
            parentId: newCmId,
            type: "cm_closebutton",
            x: meta.canvas.w - 50,
            y: 10,
            w: 30,
            h: 30,
            props: {
              color: "#333333"
            }
          }
        }
      });
    case "cm_optionsbutton":
      // EDITED
      return _objectSpread(_objectSpread({}, base), {}, {
        parentId: parentId,
        w: 250,
        h: 60,
        props: {
          srcUrl: "",
          imageWidthPercent: 30,
          text: "Option Text",
          textFont: "Arial",
          textSize: 16,
          textColor: "#333333",
          textBold: false,
          textAlign: "left",
          bgColor: "#FFFFFF",
          borderColor: "#CCCCCC",
          borderWidth: 1,
          borderRadius: 5,
          padding: 8,
          hoverBgColor: "#F0F0F0",
          hoverTextColor: "#111111",
          hoverBorderColor: "#AAAAAA",
          url: null // NEW: URL for the button
        }
      });
    case "cm_image":
      return _objectSpread(_objectSpread({}, base), {}, {
        parentId: parentId,
        w: 150,
        h: 100,
        props: {
          srcUrl: "",
          url: ""
        }
      });
    case "cm_text":
      return _objectSpread(_objectSpread({}, base), {}, {
        parentId: parentId,
        w: 200,
        h: 50,
        props: {
          text: "Sample Text",
          textFont: "Arial",
          textSize: 20,
          textColor: "#000000",
          textBold: false
        }
      });
    case "cm_gallery":
      // NEW ELEMENT TYPE for Composition Message
      return _objectSpread(_objectSpread({}, base), {}, {
        parentId: parentId,
        w: meta.canvas.w * 0.9,
        // Default width, e.g., 90% of canvas
        h: 200,
        // Default height
        props: {
          images: [],
          // Array of { id: string, srcUrl: string, buttonText: string, buttonUrl: string | null }
          // Image styles (common for all images in this gallery)
          imageHeight: 120,
          imageBorderWidth: 1,
          imageBorderColor: "#cccccc",
          imageBorderStyle: "solid",
          imageBorderRadius: 0,
          gap: 10,
          // Gap between image items in px

          // Button styles (common for all buttons in this gallery)
          buttonShow: true,
          buttonTextColor: "#ffffff",
          buttonBgColor: "#007bff",
          buttonBorderColor: "#007bff",
          buttonBorderWidth: 0,
          buttonBorderStyle: "solid",
          buttonBorderRadius: 5,
          buttonFont: "Arial",
          buttonFontSize: 12,
          buttonFontBold: false,
          buttonPaddingX: 10,
          buttonPaddingY: 5
        }
      });
    case "video-indicators":
      return _objectSpread(_objectSpread({}, base), {}, {
        w: meta.canvas.w * 0.8,
        h: 20,
        x: meta.canvas.w * 0.1,
        y: meta.canvas.h - 35,
        props: {
          videoDuration: 60,
          indicatorPoints: [],
          pointColor: "#FFFFFF",
          pointPulseColor: "rgba(255, 255, 255, 0.7)"
        }
      });
    default:
      return base;
  }
};
var hexToRgba = function hexToRgba(hex) {
  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var h = hex.replace("#", "");
  var bigint = parseInt(h, 16);
  var r = bigint >> 16 & 255;
  var g = bigint >> 8 & 255;
  var b = bigint & 255;
  return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(alpha, ")");
};

/* ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _safe$editingComposit, _safe$editingComposit2, _scr$elements$find, _sel$props$hideAt, _uploadStates, _uploadStates2, _uploadStates3;
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var uploadStates = safe.uploadStates || {};
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });
  if (!sel && safe.editingCompositionMessageContentForId) {
    var editingCM = scr.elements.find(function (e) {
      return e.id === safe.editingCompositionMessageContentForId && e.type === "compositionmessage";
    });
    if (editingCM) {
      if (editingCM.props.closeButtonElement.id === safe.selected) {
        sel = editingCM.props.closeButtonElement;
      } else {
        sel = editingCM.props.contentElements.find(function (subEl) {
          return subEl.id === safe.selected;
        });
      }
    }
  }
  var patchSel = function patchSel(fn) {
    setState(function (prevSafe) {
      var newScreens = prevSafe.screens.map(function (sc, i) {
        if (i !== prevSafe.current) return sc;
        var currentSelectedId = prevSafe.selected;
        var parentCMToUpdate = null;
        if (prevSafe.editingCompositionMessageContentForId) {
          parentCMToUpdate = sc.elements.find(function (el) {
            return el.id === prevSafe.editingCompositionMessageContentForId && el.type === "compositionmessage";
          });
        }
        if (parentCMToUpdate) {
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (cm) {
              if (cm.id === parentCMToUpdate.id) {
                return _objectSpread(_objectSpread({}, cm), {}, {
                  props: _objectSpread(_objectSpread({}, cm.props), {}, {
                    contentElements: cm.props.contentElements.map(function (contentEl) {
                      return contentEl.id === currentSelectedId ? fn(contentEl) : contentEl;
                    }),
                    closeButtonElement: cm.props.closeButtonElement.id === currentSelectedId ? fn(cm.props.closeButtonElement) : cm.props.closeButtonElement
                  })
                });
              }
              return cm;
            })
          });
        } else {
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (e) {
              return e.id === currentSelectedId ? fn(e) : e;
            })
          });
        }
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens
      });
    });
  };
  var duplicateCMContentElement = function duplicateCMContentElement() {
    if (!safe.selected || !safe.editingCompositionMessageContentForId) return;
    var cmId = safe.editingCompositionMessageContentForId;
    var selectedContentId = safe.selected;
    var newSelectedDuplicateId = null;
    setState(function (prevSafe) {
      var newScreens = prevSafe.screens.map(function (sc, i) {
        if (i !== prevSafe.current) return sc;
        return _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (mainEl) {
            if (mainEl.id === cmId && mainEl.type === "compositionmessage") {
              var contentElementToDuplicate = mainEl.props.contentElements.find(function (contentEl) {
                return contentEl.id === selectedContentId;
              });
              if (!contentElementToDuplicate) return mainEl;
              if (mainEl.props.closeButtonElement.id === selectedContentId) {
                console.warn("Cannot duplicate the main CM close button this way.");
                return mainEl;
              }
              // Only allow duplication for specific CM content types
              if (!["cm_image", "cm_text", "cm_optionsbutton", "cm_gallery"].includes(contentElementToDuplicate.type)) {
                console.warn("Duplication not supported for CM element type: ".concat(contentElementToDuplicate.type));
                return mainEl;
              }
              var newDuplicatedContentElement = JSON.parse(JSON.stringify(contentElementToDuplicate));
              newDuplicatedContentElement.id = crypto.randomUUID();
              newDuplicatedContentElement.x = (contentElementToDuplicate.x + 10) % (meta.canvas.w - contentElementToDuplicate.w);
              newDuplicatedContentElement.y = (contentElementToDuplicate.y + 10) % (meta.canvas.h - contentElementToDuplicate.h);

              // If duplicating a gallery, ensure its internal image items get new IDs
              if (newDuplicatedContentElement.type === "cm_gallery" && newDuplicatedContentElement.props.images) {
                newDuplicatedContentElement.props.images = newDuplicatedContentElement.props.images.map(function (imgItem) {
                  return _objectSpread(_objectSpread({}, imgItem), {}, {
                    id: crypto.randomUUID()
                  });
                });
              }
              newSelectedDuplicateId = newDuplicatedContentElement.id;
              return _objectSpread(_objectSpread({}, mainEl), {}, {
                props: _objectSpread(_objectSpread({}, mainEl.props), {}, {
                  contentElements: [].concat(_toConsumableArray(mainEl.props.contentElements), [newDuplicatedContentElement])
                })
              });
            }
            return mainEl;
          })
        });
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens,
        selected: newSelectedDuplicateId ? newSelectedDuplicateId : prevSafe.selected,
        animKey: prevSafe.animKey + 1
      });
    });
  };
  var handleFileUpload = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(file, elementId) {
      var assetKeyName,
        galleryImageItemId,
        uploadId,
        s3Url,
        _args = arguments,
        _t;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            assetKeyName = _args.length > 2 && _args[2] !== undefined ? _args[2] : "srcUrl";
            galleryImageItemId = _args.length > 3 && _args[3] !== undefined ? _args[3] : null;
            if (!(!file || !elementId)) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            uploadId = galleryImageItemId ? "".concat(elementId, "-").concat(galleryImageItemId) : elementId;
            setState(function (prev) {
              return _objectSpread(_objectSpread({}, prev), {}, {
                uploadStates: _objectSpread(_objectSpread({}, prev.uploadStates), {}, _defineProperty({}, uploadId, {
                  loading: true,
                  error: null
                }))
              });
            });
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file);
          case 3:
            s3Url = _context.v;
            if (sel.type === "cm_gallery" && galleryImageItemId === "NEW_IMAGE") {
              // Special case for adding new gallery image
              patchSel(function (o) {
                var newImageItem = {
                  id: crypto.randomUUID(),
                  srcUrl: s3Url,
                  buttonText: "More Info",
                  buttonUrl: null
                };
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    images: [].concat(_toConsumableArray(o.props.images || []), [newImageItem])
                  })
                });
              });
            } else if (sel.type === "cm_gallery" && galleryImageItemId) {
              // Updating existing gallery image (if needed later)
              patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    images: o.props.images.map(function (item) {
                      return item.id === galleryImageItemId ? _objectSpread(_objectSpread({}, item), {}, {
                        srcUrl: s3Url
                      }) : item;
                    })
                  })
                });
              });
            } else {
              // Standard element update
              patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, _defineProperty(_defineProperty({}, assetKeyName, s3Url), "file", undefined))
                });
              });
            }
            setState(function (prev) {
              return _objectSpread(_objectSpread({}, prev), {}, {
                uploadStates: _objectSpread(_objectSpread({}, prev.uploadStates), {}, _defineProperty({}, uploadId, {
                  loading: false,
                  error: null
                }))
              });
            });
            _context.n = 5;
            break;
          case 4:
            _context.p = 4;
            _t = _context.v;
            console.error("Error uploading file for ".concat(uploadId, ":"), _t);
            setState(function (prev) {
              return _objectSpread(_objectSpread({}, prev), {}, {
                uploadStates: _objectSpread(_objectSpread({}, prev.uploadStates), {}, _defineProperty({}, uploadId, {
                  loading: false,
                  error: _t.message || "Upload failed"
                }))
              });
            });
          case 5:
            return _context.a(2);
        }
      }, _callee, null, [[2, 4]]);
    }));
    return function handleFileUpload(_x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  var add = function add(t) {
    var newEl = newElement(t);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: newEl.id,
      editingCompositionMessageContentForId: null,
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newEl])
        }) : sc;
      })
    }));
  };
  var addCMElement = function addCMElement(type) {
    var cmId = safe.editingCompositionMessageContentForId;
    if (!cmId) return;
    var newCMEl = newElement(type, cmId);
    setState(function (prevSafe) {
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        selected: newCMEl.id,
        screens: prevSafe.screens.map(function (sc, i) {
          return i === prevSafe.current ? _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (el) {
              return el.id === cmId && el.type === "compositionmessage" ? _objectSpread(_objectSpread({}, el), {}, {
                props: _objectSpread(_objectSpread({}, el.props), {}, {
                  contentElements: [].concat(_toConsumableArray(el.props.contentElements), [newCMEl])
                })
              }) : el;
            })
          }) : sc;
        })
      });
    });
  };
  var deleteSelectedElement = function deleteSelectedElement() {
    if (!safe.selected) return;
    var selectedId = safe.selected;
    setState(function (prevSafe) {
      var _newElements$find;
      var currentScreenIndex = prevSafe.current;
      var screenToUpdate = prevSafe.screens[currentScreenIndex];
      var newElements = _toConsumableArray(screenToUpdate.elements);
      var newSelectedId = null;
      var newEditingCMId = prevSafe.editingCompositionMessageContentForId;
      var newUploadStates = _objectSpread({}, prevSafe.uploadStates);
      var elementToDelete = newElements.find(function (el) {
        return el.id === selectedId;
      }) || prevSafe.editingCompositionMessageContentForId && ((_newElements$find = newElements.find(function (el) {
        return el.id === prevSafe.editingCompositionMessageContentForId;
      })) === null || _newElements$find === void 0 ? void 0 : _newElements$find.props.contentElements.find(function (subEl) {
        return subEl.id === selectedId;
      }));
      if (prevSafe.editingCompositionMessageContentForId) {
        var cmId = prevSafe.editingCompositionMessageContentForId;
        newElements = newElements.map(function (el) {
          if (el.id === cmId && el.type === "compositionmessage") {
            if (el.props.closeButtonElement.id === selectedId) {
              console.warn("Cannot delete CM close button this way.");
              newSelectedId = selectedId;
              return el;
            }
            var newContentElements = el.props.contentElements.filter(function (subEl) {
              if (subEl.id === selectedId) {
                delete newUploadStates[selectedId];
                if (subEl.type === "cm_gallery" && subEl.props.images) {
                  // Clean up gallery image upload states
                  subEl.props.images.forEach(function (imgItem) {
                    return delete newUploadStates["".concat(selectedId, "-").concat(imgItem.id)];
                  });
                }
                return false;
              }
              return true;
            });
            return _objectSpread(_objectSpread({}, el), {}, {
              props: _objectSpread(_objectSpread({}, el.props), {}, {
                contentElements: newContentElements
              })
            });
          }
          return el;
        });
      } else {
        newElements = newElements.filter(function (el) {
          return el.id !== selectedId;
        });
        delete newUploadStates[selectedId];
        if (elementToDelete && elementToDelete.type === "cm_gallery" && elementToDelete.props.images) {
          elementToDelete.props.images.forEach(function (imgItem) {
            return delete newUploadStates["".concat(selectedId, "-").concat(imgItem.id)];
          });
        }
        if (elementToDelete && elementToDelete.type === "compositionmessage") {
          if (prevSafe.editingCompositionMessageContentForId === selectedId) {
            newEditingCMId = null;
          }
          newElements = newElements.map(function (el) {
            return el.type === "ctaimage" && el.props.opensCompositionMessageId === selectedId ? _objectSpread(_objectSpread({}, el), {}, {
              props: _objectSpread(_objectSpread({}, el.props), {}, {
                opensCompositionMessageId: null
              })
            }) : el;
          });
        }
      }
      var newScreens = prevSafe.screens.map(function (sc, i) {
        return i === currentScreenIndex ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: newElements
        }) : sc;
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens,
        selected: newSelectedId,
        editingCompositionMessageContentForId: newEditingCMId,
        animKey: prevSafe.animKey + 1,
        uploadStates: newUploadStates
      });
    });
  };
  var duplicateSelectedElement = function duplicateSelectedElement() {
    if (!sel || safe.editingCompositionMessageContentForId) return;
    var elementToDuplicate = scr.elements.find(function (e) {
      return e.id === safe.selected;
    });
    if (!elementToDuplicate || !["video", "ctaimage", "compositionmessage", "video-indicators"].includes(elementToDuplicate.type)) {
      return;
    }
    var newDuplicatedElement = JSON.parse(JSON.stringify(elementToDuplicate));
    newDuplicatedElement.id = crypto.randomUUID();
    newDuplicatedElement.x = (elementToDuplicate.x + 20) % (meta.canvas.w - elementToDuplicate.w);
    newDuplicatedElement.y = (elementToDuplicate.y + 20) % (meta.canvas.h - elementToDuplicate.h);
    if (newDuplicatedElement.type === "compositionmessage") {
      newDuplicatedElement.props.contentElements = newDuplicatedElement.props.contentElements.map(function (contentEl) {
        var newContentEl = _objectSpread(_objectSpread({}, contentEl), {}, {
          id: crypto.randomUUID(),
          parentId: newDuplicatedElement.id
        });
        if (newContentEl.type === "cm_gallery" && newContentEl.props.images) {
          newContentEl.props.images = newContentEl.props.images.map(function (imgItem) {
            return _objectSpread(_objectSpread({}, imgItem), {}, {
              id: crypto.randomUUID()
            });
          });
        }
        return newContentEl;
      });
      newDuplicatedElement.props.closeButtonElement = _objectSpread(_objectSpread({}, newDuplicatedElement.props.closeButtonElement), {}, {
        id: crypto.randomUUID(),
        parentId: newDuplicatedElement.id
      });
    }
    setState(function (prevSafe) {
      var newScreens = prevSafe.screens.map(function (sc, i) {
        if (i !== prevSafe.current) return sc;
        return _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newDuplicatedElement])
        });
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens,
        selected: newDuplicatedElement.id,
        animKey: prevSafe.animKey + 1
      });
    });
  };
  var compositionMessages = scr.elements.filter(function (el) {
    return el.type === "compositionmessage";
  });
  var existingCMsForSelection = scr.elements.filter(function (el) {
    return el.type === "compositionmessage";
  });
  var currentUploadState = sel ? uploadStates[sel.id] : null;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Background\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), !safe.editingCompositionMessageContentForId ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
        className: "text-xs font-semibold mt-2",
        children: "Main Elements:"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        className: "flex flex-wrap gap-2",
        children: ["video", "ctaimage", "compositionmessage", "video-indicators"].map(function (t) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
            className: "btn",
            onClick: function onClick() {
              return add(t);
            },
            children: ["+ ", t === "video-indicators" ? "Vid.Indicators" : t]
          }, t);
        })
      }), existingCMsForSelection.length > 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "mt-4",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs font-semibold",
          children: "Existing Composition Messages:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("ul", {
          className: "list-disc pl-5 text-xs space-y-1",
          children: existingCMsForSelection.map(function (cm) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("li", {
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span", {
                className: "cursor-pointer hover:text-blue-500 ".concat(safe.selected === cm.id ? "font-bold text-blue-600" : ""),
                onClick: function onClick() {
                  return setState(function (prev) {
                    return _objectSpread(_objectSpread({}, prev), {}, {
                      selected: cm.id,
                      editingCompositionMessageContentForId: null
                    });
                  });
                },
                children: ["Composition Message (", cm.id.substring(0, 4), "...)"]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                className: "ml-2 text-blue-500 hover:underline text-xs",
                onClick: function onClick(e) {
                  e.stopPropagation();
                  setState(function (prev) {
                    return _objectSpread(_objectSpread({}, prev), {}, {
                      selected: cm.props.closeButtonElement.id,
                      // Select close button by default when entering edit mode
                      editingCompositionMessageContentForId: cm.id
                    });
                  });
                },
                children: "(Edit Content)"
              })]
            }, cm.id);
          })
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        className: "btn",
        onClick: function onClick() {
          var parentCmId = safe.editingCompositionMessageContentForId;
          setState(function (prevSafe) {
            return _objectSpread(_objectSpread({}, prevSafe), {}, {
              editingCompositionMessageContentForId: null,
              selected: parentCmId
            });
          });
        },
        children: "\u2190 Back to Main Elements"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
        className: "text-xs font-semibold mt-2",
        children: ["Editing Content for CM:", " ", (_safe$editingComposit = safe.editingCompositionMessageContentForId) === null || _safe$editingComposit === void 0 ? void 0 : _safe$editingComposit.substring(0, 6), "... (Select elements on canvas to edit)"]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        className: "flex flex-wrap gap-2",
        children: ["cm_image", "cm_text", "cm_optionsbutton", "cm_gallery"].map(function (t // ADDED cm_gallery
        ) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
            className: "btn",
            onClick: function onClick() {
              return addCMElement(t);
            },
            children: ["+", " ", t === "cm_optionsbutton" ? "Option Btn" : t === "cm_gallery" ? "Gallery" : t.substring(3)]
          }, t);
        })
      })]
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        className: "flex justify-between items-center",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span", {
          className: "font-medium capitalize",
          children: ["Editing:", " ", sel.type.startsWith("cm_") ? "".concat(sel.type.substring(3), " (in Composition)") : sel.type, sel.parentId && " (for CM: ".concat((_safe$editingComposit2 = safe.editingCompositionMessageContentForId) === null || _safe$editingComposit2 === void 0 ? void 0 : _safe$editingComposit2.substring(0, 4), "...)")]
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex gap-2 mt-1",
        children: [!(sel.type === "cm_closebutton" && sel.parentId === safe.editingCompositionMessageContentForId && sel.id === ((_scr$elements$find = scr.elements.find(function (e) {
          return e.id === safe.editingCompositionMessageContentForId;
        })) === null || _scr$elements$find === void 0 ? void 0 : _scr$elements$find.props.closeButtonElement.id)) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          className: "btn bg-red-500 hover:bg-red-600 text-white text-xs py-1 px-2 rounded flex-grow",
          onClick: deleteSelectedElement,
          title: "Delete this ".concat(sel.type.startsWith("cm_") ? sel.type.substring(3) : sel.type, " element"),
          children: ["Delete", " ", sel.type.startsWith("cm_") ? sel.type.substring(3) : sel.type]
        }), safe.editingCompositionMessageContentForId && sel.type !== "cm_closebutton" && ["cm_image", "cm_text", "cm_optionsbutton", "cm_gallery"].includes(sel.type) &&
        /*#__PURE__*/
        // ADDED cm_gallery
        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          className: "btn bg-green-500 hover:bg-green-600 text-white text-xs py-1 px-2 rounded flex-grow",
          onClick: duplicateCMContentElement,
          title: "Duplicate this ".concat(sel.type.substring(3), " element inside the CM"),
          children: ["Duplicate ", sel.type.substring(3)]
        }), !safe.editingCompositionMessageContentForId && ["video", "ctaimage", "compositionmessage", "video-indicators"].includes(sel.type) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          className: "btn bg-blue-500 hover:bg-blue-600 text-white text-xs py-1 px-2 rounded flex-grow",
          onClick: duplicateSelectedElement,
          title: "Duplicate this ".concat(sel.type, " element"),
          children: ["Duplicate ", sel.type]
        })]
      }), (currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
        className: "text-xs text-gray-500",
        children: "Uploading..."
      }), (currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.error) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
        className: "text-xs text-red-500",
        children: ["Error: ", currentUploadState.error]
      }), sel.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "video/*",
          onChange: (/*#__PURE__*/function () {
            var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(e) {
              var _e$target$files;
              var f;
              return _regenerator().w(function (_context2) {
                while (1) switch (_context2.n) {
                  case 0:
                    f = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];
                    _context2.n = 1;
                    return handleFileUpload(f, sel.id, "srcUrl");
                  case 1:
                    return _context2.a(2);
                }
              }, _callee2);
            }));
            return function (_x4) {
              return _ref3.apply(this, arguments);
            };
          }()),
          disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading
        }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
          src: sel.props.srcUrl,
          controls: true,
          className: "mt-2 h-20 w-full object-contain border"
        })]
      }), sel.type === "ctaimage" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Visibility Controls"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Show Image", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "checkbox",
              checked: sel.props.showImage,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      showImage: e.target.checked
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Show Text", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "checkbox",
              checked: sel.props.showText,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      showText: e.target.checked
                    })
                  });
                });
              }
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Container"
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-x-2 gap-y-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1 mt-1",
            children: ["Show at\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              step: "0.1",
              value: sel.props.showAt,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      showAt: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            }), "s"]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1 mt-1",
            children: ["Hide at\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              step: "0.1",
              value: (_sel$props$hideAt = sel.props.hideAt) !== null && _sel$props$hideAt !== void 0 ? _sel$props$hideAt : "",
              placeholder: "never",
              onChange: function onChange(e) {
                var val = e.target.value;
                patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      hideAt: val === "" ? null : +val
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            }), "s"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1",
          children: ["Animation:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            className: "border w-full",
            value: sel.props.animationEffect,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    animationEffect: e.target.value
                  })
                });
              });
            },
            children: CTA_ANIMATION_EFFECTS.map(function (effect) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: effect.value,
                children: effect.name
              }, effect.value);
            })
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1",
          children: ["Opens Composition Message:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
            className: "border w-full",
            value: sel.props.opensCompositionMessageId || "",
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    opensCompositionMessageId: e.target.value || null
                  })
                });
              });
            },
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: "",
              children: "None"
            }), compositionMessages.map(function (cm) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
                value: cm.id,
                children: ["Composition Message (", cm.id.substring(0, 4), "...)"]
              }, cm.id);
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Container"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["BG Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.containerBgColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      containerBgColor: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["Padding (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              value: sel.props.containerPadding,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      containerPadding: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
            className: "border p-1 rounded mt-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
              className: "text-xs font-medium px-1",
              children: "Border"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.containerBorderColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        containerBorderColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Width (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.containerBorderWidth,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        containerBorderWidth: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-16"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Style", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                value: sel.props.containerBorderStyle,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        containerBorderStyle: e.target.value
                      })
                    });
                  });
                },
                className: "border w-full",
                children: BORDER_STYLES.map(function (bs) {
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                    value: bs,
                    children: bs
                  }, bs);
                })
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Radius (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.containerBorderRadius,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        containerBorderRadius: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-16"
              })]
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Image"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "file",
            accept: "image/*",
            onChange: (/*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(e) {
                var _e$target$files2;
                var f;
                return _regenerator().w(function (_context3) {
                  while (1) switch (_context3.n) {
                    case 0:
                      f = (_e$target$files2 = e.target.files) === null || _e$target$files2 === void 0 ? void 0 : _e$target$files2[0];
                      _context3.n = 1;
                      return handleFileUpload(f, sel.id, "srcUrl");
                    case 1:
                      return _context3.a(2);
                  }
                }, _callee3);
              }));
              return function (_x5) {
                return _ref4.apply(this, arguments);
              };
            }()),
            disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading
          }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.srcUrl,
            alt: "CTA Image Preview",
            className: "mt-2 h-20 object-contain border"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block mt-1",
            children: ["Image Width (% of container)", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "90",
              value: sel.props.imageWidthPercent,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      imageWidthPercent: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Text"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
            className: "border w-full px-1 mt-1",
            value: sel.props.text,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    text: e.target.value
                  })
                });
              });
            }
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            className: "border w-full mt-1",
            value: sel.props.textFont,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textFont: e.target.value
                  })
                });
              });
            },
            children: FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block mt-1",
            children: ["Size (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "8",
              max: "72",
              value: sel.props.textSize,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textSize: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.textColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textColor: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Bold\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "checkbox",
              checked: sel.props.textBold,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textBold: e.target.checked
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["Align", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
              value: sel.props.textAlign,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textAlign: e.target.value
                    })
                  });
                });
              },
              className: "border w-full",
              children: TEXT_ALIGNS.map(function (ta) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: ta,
                  children: ta
                }, ta);
              })
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Button"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Show Button\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "checkbox",
              checked: sel.props.showButton,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      showButton: e.target.checked
                    })
                  });
                });
              }
            })]
          }), sel.props.showButton && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block mt-1",
              children: ["Text\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                className: "border w-full px-1",
                value: sel.props.buttonText,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonText: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Text Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.buttonTextColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonTextColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["BG Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.buttonBgColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonBgColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
              className: "border w-full mt-1",
              value: sel.props.buttonFont,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      buttonFont: e.target.value
                    })
                  });
                });
              },
              children: FONTS.map(function (f) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: f,
                  children: f.replace(/'/g, "")
                }, f);
              })
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block mt-1",
              children: ["Font Size (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "8",
                max: "48",
                value: sel.props.buttonFontSize,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonFontSize: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-16"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "flex items-center gap-1",
              children: ["Bold\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "checkbox",
                checked: sel.props.buttonFontBold,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonFontBold: e.target.checked
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block mt-1",
              children: ["Padding X (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.buttonPaddingX,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonPaddingX: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-16"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Padding Y (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.buttonPaddingY,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonPaddingY: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-16"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
              className: "border p-1 rounded mt-1",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
                className: "text-xs font-medium px-1",
                children: "Button Border"
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block",
                children: ["Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                  type: "color",
                  value: sel.props.buttonBorderColor,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderColor: e.target.value
                        })
                      });
                    });
                  }
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block",
                children: ["Width (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                  type: "number",
                  min: "0",
                  value: sel.props.buttonBorderWidth,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderWidth: +e.target.value
                        })
                      });
                    });
                  },
                  className: "border px-1 w-16"
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block",
                children: ["Style", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                  value: sel.props.buttonBorderStyle,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderStyle: e.target.value
                        })
                      });
                    });
                  },
                  className: "border w-full",
                  children: BORDER_STYLES.map(function (bs) {
                    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                      value: bs,
                      children: bs
                    }, bs);
                  })
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block",
                children: ["Radius (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                  type: "number",
                  min: "0",
                  value: sel.props.buttonBorderRadius,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderRadius: +e.target.value
                        })
                      });
                    });
                  },
                  className: "border px-1 w-16"
                })]
              })]
            })]
          })]
        })]
      }), sel.type === "compositionmessage" && !safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block",
          children: ["Background Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bgColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgColor: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Background Opacity\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "1",
            step: "0.05",
            value: sel.props.bgOpacity,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgOpacity: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
          className: "btn mt-2 w-full",
          onClick: function onClick() {
            return setState(_objectSpread(_objectSpread({}, safe), {}, {
              editingCompositionMessageContentForId: sel.id,
              selected: sel.props.closeButtonElement.id
            }));
          },
          children: "Edit Content & Elements"
        })]
      }), sel.type === "cm_optionsbutton" &&
      // EDITED for URL
      safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs font-semibold mt-2 border-t pt-2",
          children: "Option Button Properties:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Image"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "file",
            accept: "image/*",
            onChange: (/*#__PURE__*/function () {
              var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(e) {
                var _e$target$files3;
                var f;
                return _regenerator().w(function (_context4) {
                  while (1) switch (_context4.n) {
                    case 0:
                      f = (_e$target$files3 = e.target.files) === null || _e$target$files3 === void 0 ? void 0 : _e$target$files3[0];
                      _context4.n = 1;
                      return handleFileUpload(f, sel.id, "srcUrl");
                    case 1:
                      return _context4.a(2);
                  }
                }, _callee4);
              }));
              return function (_x6) {
                return _ref5.apply(this, arguments);
              };
            }()),
            disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading,
            className: "text-xs"
          }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.srcUrl,
            alt: "Option Img Preview",
            className: "mt-1 h-12 object-contain border"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block mt-1 text-xs",
            children: ["Image Width (% of button):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              max: "80",
              value: sel.props.imageWidthPercent,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      imageWidthPercent: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16 ml-1"
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Text"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
            className: "border w-full px-1 mt-1 text-xs",
            value: sel.props.text,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    text: e.target.value
                  })
                });
              });
            }
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            className: "border w-full text-xs mt-1",
            value: sel.props.textFont,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textFont: e.target.value
                  })
                });
              });
            },
            children: FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "grid grid-cols-2 gap-x-2 items-center mt-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Size:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "8",
                max: "72",
                value: sel.props.textSize,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        textSize: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              }), "px"]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.textColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        textColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs flex items-center gap-1",
              children: ["Bold:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "checkbox",
                checked: sel.props.textBold,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        textBold: e.target.checked
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Align:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                value: sel.props.textAlign,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        textAlign: e.target.value
                      })
                    });
                  });
                },
                className: "border w-full",
                children: TEXT_ALIGNS.map(function (ta) {
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                    value: ta,
                    children: ta
                  }, ta);
                })
              })]
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Button Container (Normal State)"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "grid grid-cols-2 gap-x-2 items-center",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.bgColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        bgColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Border Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.borderColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        borderColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Border Width:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.borderWidth,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        borderWidth: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              }), "px"]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Border Radius:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.borderRadius,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        borderRadius: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              }), "px"]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Padding:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.padding,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        padding: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              }), "px"]
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Button Container (Hover State)"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "grid grid-cols-2 gap-x-2 items-center",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Hover BG:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.hoverBgColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        hoverBgColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Hover Text:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.hoverTextColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        hoverTextColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Hover Border:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.hoverBorderColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        hoverBorderColor: e.target.value
                      })
                    });
                  });
                }
              })]
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1 text-xs",
          children: ["Button URL (optional):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "text",
            placeholder: "https://example.com",
            value: sel.props.url || "",
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    url: e.target.value || null
                  })
                });
              });
            },
            className: "border px-1 w-full mt-1"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-gray-500 mt-1",
          children: "If no URL, clicking this button will close the message and resume video. If URL is set, it will navigate to the URL."
        })]
      }), sel.type === "cm_image" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*",
          onChange: (/*#__PURE__*/function () {
            var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(e) {
              var _e$target$files4;
              var f;
              return _regenerator().w(function (_context5) {
                while (1) switch (_context5.n) {
                  case 0:
                    f = (_e$target$files4 = e.target.files) === null || _e$target$files4 === void 0 ? void 0 : _e$target$files4[0];
                    _context5.n = 1;
                    return handleFileUpload(f, sel.id, "srcUrl");
                  case 1:
                    return _context5.a(2);
                }
              }, _callee5);
            }));
            return function (_x7) {
              return _ref6.apply(this, arguments);
            };
          }()),
          disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading
        }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
          src: sel.props.srcUrl,
          alt: "CM Image Preview",
          className: "mt-2 h-20 object-contain border"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          className: "border w-full px-1 mt-1 text-xs",
          placeholder: "Click URL (optional)",
          value: sel.props.url || "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          }
        })]
      }), sel.type === "cm_gallery" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs font-semibold mt-2 border-t pt-2",
          children: "Gallery Properties:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Image Styles (Common)"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs",
            children: ["Image Height (px):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "20",
              value: sel.props.imageHeight,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      imageHeight: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16 ml-1"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block text-xs mt-1",
            children: ["Gap between images (px):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              value: sel.props.gap,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      gap: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16 ml-1"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
            className: "border p-1 rounded mt-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
              className: "text-xs font-medium px-1",
              children: "Image Border"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.imageBorderColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        imageBorderColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["Width (px):", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.imageBorderWidth,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        imageBorderWidth: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["Style:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                value: sel.props.imageBorderStyle,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        imageBorderStyle: e.target.value
                      })
                    });
                  });
                },
                className: "border w-full text-xs",
                children: BORDER_STYLES.map(function (bs) {
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                    value: bs,
                    children: bs
                  }, bs);
                })
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["Radius (px):", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.imageBorderRadius,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        imageBorderRadius: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              })]
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Button Styles (Common)"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1 text-xs",
            children: ["Show Buttons:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "checkbox",
              checked: sel.props.buttonShow,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      buttonShow: e.target.checked
                    })
                  });
                });
              }
            })]
          }), sel.props.buttonShow && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["Text Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.buttonTextColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonTextColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.buttonBgColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonBgColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["Font:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                value: sel.props.buttonFont,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonFont: e.target.value
                      })
                    });
                  });
                },
                className: "border w-full text-xs",
                children: FONTS.map(function (f) {
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                    value: f,
                    children: f.replace(/'/g, "")
                  }, f);
                })
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["Font Size (px):", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "8",
                value: sel.props.buttonFontSize,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonFontSize: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "flex items-center gap-1 text-xs",
              children: ["Bold:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "checkbox",
                checked: sel.props.buttonFontBold,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonFontBold: e.target.checked
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["Padding X (px):", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.buttonPaddingX,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonPaddingX: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block text-xs",
              children: ["Padding Y (px):", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.buttonPaddingY,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonPaddingY: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
              className: "border p-1 rounded mt-1",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
                className: "text-xs font-medium px-1",
                children: "Button Border"
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block text-xs",
                children: ["Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                  type: "color",
                  value: sel.props.buttonBorderColor,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderColor: e.target.value
                        })
                      });
                    });
                  }
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block text-xs",
                children: ["Width (px):", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                  type: "number",
                  min: "0",
                  value: sel.props.buttonBorderWidth,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderWidth: +e.target.value
                        })
                      });
                    });
                  },
                  className: "border px-1 w-12"
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block text-xs",
                children: ["Style:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                  value: sel.props.buttonBorderStyle,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderStyle: e.target.value
                        })
                      });
                    });
                  },
                  className: "border w-full text-xs",
                  children: BORDER_STYLES.map(function (bs) {
                    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                      value: bs,
                      children: bs
                    }, bs);
                  })
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block text-xs",
                children: ["Radius (px):", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                  type: "number",
                  min: "0",
                  value: sel.props.buttonBorderRadius,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderRadius: +e.target.value
                        })
                      });
                    });
                  },
                  className: "border px-1 w-12"
                })]
              })]
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Gallery Images"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "mb-2",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("label", {
              className: "block text-xs",
              children: "Add New Image to Gallery:"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "file",
              accept: "image/*",
              className: "text-xs",
              onChange: (/*#__PURE__*/function () {
                var _ref7 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(e) {
                  var _e$target$files5;
                  var f;
                  return _regenerator().w(function (_context6) {
                    while (1) switch (_context6.n) {
                      case 0:
                        f = (_e$target$files5 = e.target.files) === null || _e$target$files5 === void 0 ? void 0 : _e$target$files5[0];
                        if (!f) {
                          _context6.n = 1;
                          break;
                        }
                        _context6.n = 1;
                        return handleFileUpload(f, sel.id, "srcUrl", "NEW_IMAGE");
                      case 1:
                        e.target.value = null; // Reset file input
                      case 2:
                        return _context6.a(2);
                    }
                  }, _callee6);
                }));
                return function (_x8) {
                  return _ref7.apply(this, arguments);
                };
              }()),
              disabled: (_uploadStates = uploadStates["".concat(sel.id, "-NEW_IMAGE")]) === null || _uploadStates === void 0 ? void 0 : _uploadStates.loading
            }), ((_uploadStates2 = uploadStates["".concat(sel.id, "-NEW_IMAGE")]) === null || _uploadStates2 === void 0 ? void 0 : _uploadStates2.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
              className: "text-xs text-gray-500",
              children: "Uploading new image..."
            }), ((_uploadStates3 = uploadStates["".concat(sel.id, "-NEW_IMAGE")]) === null || _uploadStates3 === void 0 ? void 0 : _uploadStates3.error) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
              className: "text-xs text-red-500",
              children: ["Error: ", uploadStates["".concat(sel.id, "-NEW_IMAGE")].error]
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "space-y-2 max-h-60 overflow-y-auto",
            children: [(sel.props.images || []).map(function (imgItem, index) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                className: "border p-1 rounded bg-gray-50",
                children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                  className: "flex items-start gap-2",
                  children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                    src: imgItem.srcUrl,
                    alt: "Gallery item ".concat(index + 1),
                    className: "w-16 h-16 object-contain border"
                  }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                    className: "flex-grow space-y-1",
                    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "block text-xs",
                      children: ["Button Text:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "text",
                        value: imgItem.buttonText,
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                images: o.props.images.map(function (item) {
                                  return item.id === imgItem.id ? _objectSpread(_objectSpread({}, item), {}, {
                                    buttonText: e.target.value
                                  }) : item;
                                })
                              })
                            });
                          });
                        },
                        className: "border px-1 w-full text-xs"
                      })]
                    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                      className: "block text-xs",
                      children: ["Button URL (optional):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                        type: "text",
                        placeholder: "https://example.com",
                        value: imgItem.buttonUrl || "",
                        onChange: function onChange(e) {
                          return patchSel(function (o) {
                            return _objectSpread(_objectSpread({}, o), {}, {
                              props: _objectSpread(_objectSpread({}, o.props), {}, {
                                images: o.props.images.map(function (item) {
                                  return item.id === imgItem.id ? _objectSpread(_objectSpread({}, item), {}, {
                                    buttonUrl: e.target.value || null
                                  }) : item;
                                })
                              })
                            });
                          });
                        },
                        className: "border px-1 w-full text-xs"
                      })]
                    })]
                  }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                    className: "text-red-500 hover:text-red-700 text-xs p-1",
                    title: "Remove image from gallery",
                    onClick: function onClick() {
                      return patchSel(function (o) {
                        return _objectSpread(_objectSpread({}, o), {}, {
                          props: _objectSpread(_objectSpread({}, o.props), {}, {
                            images: o.props.images.filter(function (item) {
                              return item.id !== imgItem.id;
                            })
                          })
                        });
                      });
                    },
                    children: "\u2715"
                  })]
                })
              }, imgItem.id);
            }), (sel.props.images || []).length === 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
              className: "text-xs text-gray-400",
              children: "No images in gallery yet."
            })]
          })]
        })]
      }), sel.type === "video-indicators" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1",
          children: ["Indicator Bar Represents Duration (sec):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "1",
            value: sel.props.videoDuration,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    videoDuration: Math.max(1, +e.target.value)
                  })
                });
              });
            },
            className: "border px-1 w-20 ml-2"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-gray-500 mb-1",
          children: "The width of this element on canvas will visually scale to this duration for point placement."
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Indicator Points"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "flex items-center gap-2 mb-2",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              step: "0.1",
              placeholder: "Time (sec)",
              id: "newPointTime-".concat(sel.id),
              className: "border px-1 w-24"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
              className: "btn text-xs py-1",
              onClick: function onClick() {
                var timeInput = document.getElementById("newPointTime-".concat(sel.id));
                var time = parseFloat(timeInput.value);
                if (!isNaN(time) && time >= 0) {
                  patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        indicatorPoints: _toConsumableArray(new Set([].concat(_toConsumableArray(o.props.indicatorPoints || []), [time]))).sort(function (a, b) {
                          return a - b;
                        })
                      })
                    });
                  });
                  timeInput.value = "";
                } else {
                  alert("Please enter a valid non-negative time for the point.");
                }
              },
              children: "Add Point"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "max-h-32 overflow-y-auto space-y-1",
            children: [(sel.props.indicatorPoints || []).map(function (pointTime, index) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                className: "flex items-center justify-between bg-gray-100 p-1 rounded",
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span", {
                  children: ["Point at: ", pointTime.toFixed(1), "s"]
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                  className: "text-red-500 hover:text-red-700 text-xs",
                  onClick: function onClick() {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          indicatorPoints: o.props.indicatorPoints.filter(function (t) {
                            return t !== pointTime;
                          })
                        })
                      });
                    });
                  },
                  children: "Remove"
                })]
              }, index);
            }), (sel.props.indicatorPoints || []).length === 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
              className: "text-gray-400 text-xs",
              children: "No points added yet."
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Point Appearance"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["Point Color", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.pointColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      pointColor: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["Point Pulse Glow", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.pointPulseColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      pointPulseColor: e.target.value
                    })
                  });
                });
              }
            })]
          })]
        })]
      }), sel.type === "cm_text" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
          className: "border w-full px-1 mt-1",
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          className: "border w-full",
          value: sel.props.textFont,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  textFont: e.target.value
                })
              });
            });
          },
          children: FONTS.map(function (f) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: f,
              children: f.replace(/'/g, "")
            }, f);
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Size\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "8",
            max: "120",
            value: sel.props.textSize,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textSize: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Bold\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.textBold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textBold: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block",
          children: ["Text color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.textColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textColor: e.target.value
                  })
                });
              });
            }
          })]
        })]
      }), sel.type === "cm_closebutton" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block",
          children: ["Button Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-gray-500",
          children: "Size and location are edited on the canvas."
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500",
      children: safe.editingCompositionMessageContentForId ? "Select an element on the canvas to edit its properties, or add new elements using the buttons above." : "Click an element on the canvas to edit, or select an existing Composition Message from the list above to edit its properties or content."
    })]
  });
}
function CMOptionsButtonPreview(_ref8) {
  var elementProps = _ref8.elementProps,
    isEditingMode = _ref8.isEditingMode,
    onInteraction = _ref8.onInteraction;
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovered = _useState2[0],
    setIsHovered = _useState2[1];
  var currentBgColor = !isEditingMode && isHovered ? elementProps.hoverBgColor : elementProps.bgColor;
  var currentTextColor = !isEditingMode && isHovered ? elementProps.hoverTextColor : elementProps.textColor;
  var currentBorderColor = !isEditingMode && isHovered ? elementProps.hoverBorderColor : elementProps.borderColor;
  var handleMouseEnter = function handleMouseEnter() {
    if (!isEditingMode) setIsHovered(true);
  };
  var handleMouseLeave = function handleMouseLeave() {
    if (!isEditingMode) setIsHovered(false);
  };
  var buttonContent = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [elementProps.srcUrl && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "cm-options-button-image-area",
      style: {
        width: "".concat(elementProps.imageWidthPercent, "%")
      },
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
        src: elementProps.srcUrl,
        alt: elementProps.text || "Option"
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "cm-options-button-text-area",
      style: {
        fontFamily: elementProps.textFont,
        fontSize: "".concat(elementProps.textSize, "px"),
        color: currentTextColor,
        fontWeight: elementProps.textBold ? "bold" : "normal",
        textAlign: elementProps.textAlign,
        paddingLeft: elementProps.srcUrl ? "5px" : "0px"
      },
      children: elementProps.text
    })]
  });
  var commonStyle = {
    backgroundColor: currentBgColor,
    border: "".concat(elementProps.borderWidth, "px solid ").concat(currentBorderColor),
    borderRadius: "".concat(elementProps.borderRadius, "px"),
    padding: "".concat(elementProps.padding, "px"),
    cursor: isEditingMode ? "default" : elementProps.url ? "pointer" : onInteraction ? "pointer" : "default"
  };
  if (!isEditingMode && elementProps.url) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("a", {
      href: getSafeUrl(elementProps.url),
      target: "_blank",
      rel: "noopener noreferrer",
      className: "cm-options-button-wrapper" // Ensure this class applies flex etc.
      ,
      style: _objectSpread(_objectSpread({}, commonStyle), {}, {
        textDecoration: "none",
        display: "flex",
        width: "100%",
        height: "100%"
      }),
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      onClick: function onClick(e) {
        return e.stopPropagation();
      } // Prevent CM backdrop click
      ,
      children: buttonContent
    });
  } else {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "cm-options-button-wrapper",
      style: commonStyle,
      onClick: function onClick(e) {
        if (!isEditingMode && onInteraction && !elementProps.url) {
          // Only call onInteraction if no URL
          e.stopPropagation();
          onInteraction();
        }
        // In editing mode, RND handles selection.
      },
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      children: buttonContent
    });
  }
}

/* ═════════════════════ PREVIEW ═════════════════════ */
function Preview(_ref9) {
  var state = _ref9.state,
    setState = _ref9.setState,
    readOnly = _ref9.readOnly;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0),
    _useState4 = _slicedToArray(_useState3, 2),
    videoTime = _useState4[0],
    setVideoTime = _useState4[1];
  var videoRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  var videoPausedTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (safe.activeCompositionMessageId) {
      var cmExists = scr.elements.some(function (el) {
        return el.id === safe.activeCompositionMessageId && el.type === "compositionmessage";
      });
      if (!cmExists && setState) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            activeCompositionMessageId: null
          });
        });
      }
    }
  }, [safe.activeCompositionMessageId, scr.elements, setState]);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (safe.editingCompositionMessageContentForId) {
      var cmExists = scr.elements.some(function (el) {
        return el.id === safe.editingCompositionMessageContentForId && el.type === "compositionmessage";
      });
      if (!cmExists && setState) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            editingCompositionMessageContentForId: null,
            selected: null
          });
        });
      }
    }
  }, [safe.editingCompositionMessageContentForId, scr.elements, setState]);
  var commitUpdate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (elementId, patch) {
    if (!setState || readOnly) return;
    setState(function (prevSafe) {
      var newScreens = prevSafe.screens.map(function (sc, currentScreenIndex) {
        if (currentScreenIndex !== prevSafe.current) return sc;
        if (prevSafe.editingCompositionMessageContentForId) {
          var cmId = prevSafe.editingCompositionMessageContentForId;
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (mainEl) {
              if (mainEl.id === cmId && mainEl.type === "compositionmessage") {
                if (mainEl.props.closeButtonElement.id === elementId) {
                  return _objectSpread(_objectSpread({}, mainEl), {}, {
                    props: _objectSpread(_objectSpread({}, mainEl.props), {}, {
                      closeButtonElement: _objectSpread(_objectSpread({}, mainEl.props.closeButtonElement), patch)
                    })
                  });
                }
                var newContentElements = mainEl.props.contentElements.map(function (contentEl) {
                  return contentEl.id === elementId ? _objectSpread(_objectSpread({}, contentEl), patch) : contentEl;
                });
                return _objectSpread(_objectSpread({}, mainEl), {}, {
                  props: _objectSpread(_objectSpread({}, mainEl.props), {}, {
                    contentElements: newContentElements
                  })
                });
              }
              return mainEl;
            })
          });
        } else {
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (e) {
              return e.id === elementId ? _objectSpread(_objectSpread({}, e), patch) : e;
            })
          });
        }
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens
      });
    });
  }, [readOnly, setState]);
  var selectElement = function selectElement(id) {
    if (!readOnly && setState) {
      setState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          selected: id
        });
      });
    }
  };
  var handleCtaClick = function handleCtaClick(ctaElement) {
    if (ctaElement.props.opensCompositionMessageId) {
      if (videoRef.current) {
        videoPausedTimeRef.current = videoRef.current.currentTime;
        videoRef.current.pause();
      }
      if (setState) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            activeCompositionMessageId: ctaElement.props.opensCompositionMessageId
          });
        });
      } else {
        console.log("Open CM:", ctaElement.props.opensCompositionMessageId);
      }
    }
  };
  var closeCompositionMessage = function closeCompositionMessage() {
    if (videoRef.current) {
      if (videoRef.current.readyState >= 1) {
        videoRef.current.currentTime = videoPausedTimeRef.current || 0;
      }
      videoRef.current.play()["catch"](function (error) {
        return console.error("Error resuming video playback:", error);
      });
    }
    if (setState) {
      setState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          activeCompositionMessageId: null
        });
      });
    }
  };
  var videoElementFromState = scr.elements.find(function (el) {
    return el.type === "video";
  });
  var canvasElementsToRender = [];
  var activeCMOverlayData = null;
  var isEditingCMContentMode = safe.editingCompositionMessageContentForId && !safe.activeCompositionMessageId && !readOnly;
  var isActiveCMRuntimeMode = !!safe.activeCompositionMessageId;
  if (isEditingCMContentMode) {
    var cmBeingEdited = scr.elements.find(function (el) {
      return el.id === safe.editingCompositionMessageContentForId && el.type === "compositionmessage";
    });
    if (cmBeingEdited) {
      var _canvasElementsToRend;
      if (videoElementFromState) {
        canvasElementsToRender.push(_objectSpread(_objectSpread({}, videoElementFromState), {}, {
          _isBackdropForEditing: true
        }));
      }
      canvasElementsToRender.push({
        id: "".concat(cmBeingEdited.id, "_bg_editing"),
        type: "_cm_background_editing",
        x: 0,
        y: 0,
        w: meta.canvas.w,
        h: meta.canvas.h,
        props: {
          bgColor: cmBeingEdited.props.bgColor,
          bgOpacity: cmBeingEdited.props.bgOpacity
        },
        _isBackdropForEditing: true,
        zIndex: -1
      });
      (_canvasElementsToRend = canvasElementsToRender).push.apply(_canvasElementsToRend, _toConsumableArray(cmBeingEdited.props.contentElements));
      canvasElementsToRender.push(cmBeingEdited.props.closeButtonElement);
    } else {
      var _canvasElementsToRend2;
      if (videoElementFromState) canvasElementsToRender.push(videoElementFromState);
      (_canvasElementsToRend2 = canvasElementsToRender).push.apply(_canvasElementsToRend2, _toConsumableArray(scr.elements.filter(function (el) {
        return el.type !== "compositionmessage" && el.type !== "video";
      })));
    }
  } else if (isActiveCMRuntimeMode) {
    var currentActiveCM = scr.elements.find(function (el) {
      return el.id === safe.activeCompositionMessageId && el.type === "compositionmessage";
    });
    if (currentActiveCM) {
      if (videoElementFromState) canvasElementsToRender.push(videoElementFromState);
      activeCMOverlayData = currentActiveCM;
    } else {
      var _canvasElementsToRend3;
      if (videoElementFromState) canvasElementsToRender.push(videoElementFromState);
      (_canvasElementsToRend3 = canvasElementsToRender).push.apply(_canvasElementsToRend3, _toConsumableArray(scr.elements.filter(function (el) {
        return el.type !== "compositionmessage" && el.type !== "video";
      })));
    }
  } else {
    var _canvasElementsToRend4;
    if (videoElementFromState) canvasElementsToRender.push(videoElementFromState);
    (_canvasElementsToRend4 = canvasElementsToRender).push.apply(_canvasElementsToRend4, _toConsumableArray(scr.elements.filter(function (el) {
      return el.type !== "compositionmessage" && el.type !== "video";
    })));
  }
  var uniqueIds = new Set();
  canvasElementsToRender = canvasElementsToRender.filter(function (el) {
    if (uniqueIds.has(el.id)) return false;
    uniqueIds.add(el.id);
    return true;
  });
  var previewCanvasActualBg = safe.bg;
  if (isEditingCMContentMode) {
    previewCanvasActualBg = "#e0e0e0";
  } else if (safe.selected && !safe.activeCompositionMessageId) {
    var selectedElement = scr.elements.find(function (el) {
      return el.id === safe.selected;
    });
    if (selectedElement && selectedElement.type === "compositionmessage") {
      previewCanvasActualBg = hexToRgba(selectedElement.props.bgColor, selectedElement.props.bgOpacity);
    }
  }
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      children: "\n        /* ... existing animation styles ... */\n        @keyframes floatK {0%{transform:translateY(0)}50%{transform:translateY(-10px)}100%{transform:translateY(0)}}\n        .effect-float {animation:floatK 4s ease-in-out infinite;}\n\n        .cta-animated { animation-duration: 0.7s; animation-fill-mode: both; }\n        @keyframes ctaFadeIn { from { opacity: 0; } to { opacity: 1; } }\n        .cta-animation-fadeIn { animation-name: ctaFadeIn; }\n        @keyframes ctaSlideUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }\n        .cta-animation-slideUp { animation-name: ctaSlideUp; }\n        @keyframes ctaSlideDown { from { opacity: 0; transform: translateY(-30px); } to { opacity: 1; transform: translateY(0); } }\n        .cta-animation-slideDown { animation-name: ctaSlideDown; }\n        @keyframes ctaZoomIn { from { opacity: 0; transform: scale(0.7); } to { opacity: 1; transform: scale(1); } }\n        .cta-animation-zoomIn { animation-name: ctaZoomIn; }\n        @keyframes ctaBounceIn {\n          0%, 20%, 40%, 60%, 80%, 100% { animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000); }\n          0% { opacity: 0; transform: scale3d(.3, .3, .3); }\n          20% { transform: scale3d(1.1, 1.1, 1.1); }\n          40% { transform: scale3d(.9, .9, .9); }\n          60% { opacity: 1; transform: scale3d(1.03, 1.03, 1.03); }\n          80% { transform: scale3d(.97, .97, .97); }\n          100% { opacity: 1; transform: scale3d(1, 1, 1); }\n        }\n        .cta-animation-bounceIn { animation-name: ctaBounceIn; }\n\n        .video-indicator-element-wrapper { width: 100%; height: 100%; display: flex; align-items: center; position: relative; box-sizing: border-box; pointer-events: none; }\n        .video-indicator-track { width: 100%; height: 100%; position: relative; background-color: transparent; pointer-events: none; }\n        .video-indicator-point-marker { position: absolute; top: 50%; width: 10px; height: 10px; border-radius: 50%; transform: translate(-50%, -50%); animation: viPointPulseAnimation 1.5s infinite ease-in-out; z-index: 2; pointer-events: none; }\n        @keyframes viPointPulseAnimation { 0% { transform: translate(-50%, -50%) scale(0.85); opacity: 0.7; } 70% { transform: translate(-50%, -50%) scale(1); opacity: 1; } 100% { transform: translate(-50%, -50%) scale(0.85); opacity: 0.7; } }\n        \n        .cm-options-button-wrapper { width: 100%; height: 100%; display: flex; align-items: stretch; overflow: hidden; cursor: pointer; box-sizing: border-box; transition: background-color 0.2s ease, border-color 0.2s ease; }\n        .cm-options-button-image-area { flex-shrink: 0; display: flex; align-items: center; justify-content: center; height: 100%; overflow: hidden; }\n        .cm-options-button-image-area img { max-width: 100%; max-height: 100%; object-fit: contain; }\n        .cm-options-button-text-area { flex-grow: 1; display: flex; flex-direction: column; justify-content: center; height: 100%; overflow: hidden; padding: 0 5px; transition: color 0.2s ease; white-space: pre-wrap; word-break: break-word; }\n\n        /* NEW: Styles for CM Gallery */\n        .cm-gallery-container {\n          width: 100%;\n          height: 100%;\n          overflow-x: auto;\n          overflow-y: hidden; /* Prevent vertical scrollbar if content fits */\n          white-space: nowrap; /* Keep items in a single line */\n          padding: 5px; /* Optional padding around the scrollable area */\n          box-sizing: border-box;\n          display: flex; /* Use flex for easier alignment and gap */\n          align-items: flex-start; /* Align items to the top */\n        }\n        .cm-gallery-item {\n          display: inline-flex; /* Changed from inline-block to flex for internal centering */\n          flex-direction: column; /* Stack image and button vertically */\n          align-items: center; /* Center button below image */\n          vertical-align: top;\n          height: 100%; /* Make item take full height of gallery container */\n          box-sizing: border-box;\n        }\n        .cm-gallery-item img {\n          display: block;\n          object-fit: cover; /* Or contain, depending on desired look */\n          margin-bottom: 5px; /* Space between image and button */\n        }\n        .cm-gallery-item .gallery-item-button {\n          flex-shrink: 0; /* Prevent button from shrinking */\n          text-decoration: none; /* For <a> tags used as buttons */\n          display: inline-block;\n          text-align: center;\n        }\n        .custom-progress-markers-bar { /* For CTA pulse markers on video timeline */\n            position: absolute;\n            bottom: 5px; /* Adjust as needed, depends on video player controls height */\n            left: 0;\n            width: 100%;\n            height: 10px; /* Small height for the marker line */\n            pointer-events: none; /* Don't interfere with video controls */\n            z-index: 10; /* Above video, below CM */\n        }\n        .pulse-marker {\n            position: absolute;\n            bottom: 0;\n            width: 8px;\n            height: 8px;\n            background-color: rgba(255, 255, 255, 0.8);\n            border-radius: 50%;\n            transform: translateX(-50%); /* Center the marker */\n            animation: pulseAnimation 1.5s infinite ease-out;\n            box-shadow: 0 0 5px rgba(255, 255, 255, 0.7);\n        }\n        @keyframes pulseAnimation {\n            0% { transform: translateX(-50%) scale(0.7); opacity: 0.5; }\n            50% { transform: translateX(-50%) scale(1); opacity: 1; }\n            100% { transform: translateX(-50%) scale(0.7); opacity: 0.5; }\n        }\n\n      "
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: previewCanvasActualBg,
        position: "relative",
        overflow: "hidden"
      },
      children: [canvasElementsToRender.map(function (el) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly || !!activeCMOverlayData || el._isBackdropForEditing,
          enableResizing: !readOnly && !activeCMOverlayData && !el._isBackdropForEditing && (el.type !== "video" || el._isBackdropForEditing === undefined) && !(el.type === "video" && !el._isBackdropForEditing),
          onDragStop: function onDragStop(_, d) {
            return commitUpdate(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            var newSize = {
              w: ref.offsetWidth,
              h: ref.offsetHeight
            };
            if (el.type === "cm_closebutton" && isEditingCMContentMode) {
              var size = Math.max(newSize.w, newSize.h);
              commitUpdate(el.id, {
                w: size,
                h: size,
                x: pos.x,
                y: pos.y
              });
            } else {
              commitUpdate(el.id, {
                w: newSize.w,
                h: newSize.h,
                x: pos.x,
                y: pos.y
              });
            }
          },
          onClick: function onClick(e) {
            e.stopPropagation();
            if (!activeCMOverlayData && !el._isBackdropForEditing && !readOnly) {
              selectElement(el.id);
            }
          },
          style: {
            outline: !activeCMOverlayData && !el._isBackdropForEditing && safe.selected === el.id && !readOnly ? "2px solid #3b82f6" : "none",
            cursor: readOnly || !!activeCMOverlayData || el._isBackdropForEditing ? "default" : "move",
            borderRadius: el.type === "cm_closebutton" && isEditingCMContentMode ? "50%" : "0px",
            background: el.type === "cm_closebutton" && isEditingCMContentMode ? el.props.color : "transparent",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            visibility: activeCMOverlayData && el.type !== "video" && !el._isBackdropForEditing && el.type !== "ctaimage" ? "hidden" : "visible"
          },
          children: [el.type === "_cm_background_editing" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            style: {
              width: "100%",
              height: "100%",
              background: hexToRgba(el.props.bgColor, el.props.bgOpacity),
              position: "absolute",
              top: 0,
              left: 0,
              zIndex: el.zIndex || 0,
              pointerEvents: "none"
            }
          }), el.type === "cm_optionsbutton" && isEditingCMContentMode && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CMOptionsButtonPreview, {
            elementProps: el.props,
            isEditingMode: true
          }), el.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
            ref: videoRef,
            src: el.props.srcUrl || "",
            className: "w-full h-full object-cover",
            controls: true,
            autoPlay: readOnly,
            muted: true,
            loop: true,
            playsInline: true,
            onTimeUpdate: function onTimeUpdate(e) {
              return setVideoTime(e.currentTarget.currentTime);
            },
            style: {
              opacity: activeCMOverlayData ? 0.7 : 1
            }
          }), el.type === "ctaimage" && !isEditingCMContentMode && function (_props$showAt) {
            var props = el.props;
            var isVisibleDueToTime = readOnly ? videoTime >= ((_props$showAt = props.showAt) !== null && _props$showAt !== void 0 ? _props$showAt : 0) && (props.hideAt === null || videoTime < props.hideAt) : true;
            if (!isVisibleDueToTime && readOnly && !activeCMOverlayData) return null;
            var animationClass = isVisibleDueToTime && props.animationEffect !== "none" && !activeCMOverlayData ? "cta-animated cta-animation-".concat(props.animationEffect) : "";

            // NEW: Determine if only the button is visible
            var isButtonOnly = !props.showImage && !props.showText && props.showButton;
            var containerStyle = {
              width: "100%",
              height: "100%",
              display: isVisibleDueToTime && !activeCMOverlayData ? "flex" // Keep as flex for the inner container
              : "none",
              backgroundColor: isButtonOnly ? "transparent" : props.containerBgColor,
              border: isButtonOnly ? "none" : "".concat(props.containerBorderWidth, "px ").concat(props.containerBorderStyle, " ").concat(props.containerBorderColor),
              borderRadius: isButtonOnly ? "0px" : "".concat(props.containerBorderRadius, "px"),
              // Or keep radius if desired for button only
              padding: isButtonOnly ? "0px" : "".concat(props.containerPadding, "px"),
              boxSizing: "border-box",
              pointerEvents: activeCMOverlayData ? "none" : "auto"
            };
            var innerFlexStyle = {
              width: "100%",
              height: "100%",
              display: "flex",
              flexDirection: "row",
              alignItems: "center",
              gap: (props.showImage || props.showText) && props.showButton ? "".concat(props.containerPadding / 2 > 0 ? props.containerPadding / 2 : 8, "px") : "0px",
              overflow: "hidden"
            };
            if (isButtonOnly) {
              innerFlexStyle.justifyContent = "center"; // Center button horizontally if it's the only element
            }
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              className: animationClass,
              style: containerStyle,
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                style: innerFlexStyle,
                children: [props.showImage && props.srcUrl &&
                /*#__PURE__*/
                // Check props.showImage
                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  style: {
                    width: "".concat(props.imageWidthPercent, "%"),
                    height: "100%",
                    flexShrink: 0,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center"
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                    src: props.srcUrl,
                    alt: "CTA Visual",
                    style: {
                      maxWidth: "100%",
                      maxHeight: "100%",
                      objectFit: "contain"
                    }
                  })
                }), props.showText &&
                /*#__PURE__*/
                // Check props.showText
                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  style: {
                    flexGrow: props.showImage && props.srcUrl || props.showButton ? 1 : 1,
                    // Adjust flexGrow if needed
                    flexShrink: 1,
                    minWidth: 0,
                    height: "100%",
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "center",
                    overflow: "hidden",
                    fontFamily: props.textFont,
                    fontSize: "".concat(props.textSize, "px"),
                    color: props.textColor,
                    fontWeight: props.textBold ? "bold" : "normal",
                    textAlign: props.textAlign,
                    whiteSpace: "pre-wrap",
                    // Add padding to text if it's next to an image or button, and no main container padding
                    paddingLeft: isButtonOnly ? "0px" : props.showImage && props.srcUrl && !isButtonOnly ? "5px" : "0px",
                    paddingRight: isButtonOnly ? "0px" : props.showButton && !isButtonOnly ? "5px" : "0px"
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                    style: {
                      maxHeight: "100%",
                      overflowY: "auto",
                      width: "100%"
                    },
                    children: props.text
                  })
                }), props.showButton &&
                /*#__PURE__*/
                // showButton is already checked
                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  style: {
                    flexShrink: 0,
                    // Keep button from shrinking
                    // If button is only element, let parent center it. Otherwise, align as before.
                    height: "100%",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: isButtonOnly ? "center" : "flex-end"
                    // If button is only, it will be centered by parent. If not, it will be at the end.
                    // flexGrow: isButtonOnly ? 1 : 0, // Allow button wrapper to grow if it's the only item to help centering
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                    onClick: function onClick(e) {
                      e.stopPropagation();
                      if (!activeCMOverlayData) handleCtaClick(el);
                    },
                    style: {
                      fontFamily: props.buttonFont,
                      fontSize: "".concat(props.buttonFontSize, "px"),
                      color: props.buttonTextColor,
                      backgroundColor: props.buttonBgColor,
                      border: "".concat(props.buttonBorderWidth, "px ").concat(props.buttonBorderStyle, " ").concat(props.buttonBorderColor),
                      borderRadius: "".concat(props.buttonBorderRadius, "px"),
                      fontWeight: props.buttonFontBold ? "bold" : "normal",
                      padding: "".concat(props.buttonPaddingY, "px ").concat(props.buttonPaddingX, "px"),
                      cursor: props.opensCompositionMessageId ? "pointer" : "default",
                      whiteSpace: "nowrap"
                    },
                    disabled: !!activeCMOverlayData,
                    children: props.buttonText
                  })
                })]
              })
            });
          }(), el.type === "cm_image" && isEditingCMContentMode && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: el.props.srcUrl || "https://dummyimage.com/150x100/ccc/fff.png&text=Image",
            className: "w-full h-full object-contain",
            alt: "Composition content image",
            style: {
              pointerEvents: readOnly ? "none" : "auto"
            }
          }), el.type === "cm_text" && isEditingCMContentMode && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            className: "w-full h-full overflow-hidden p-1 box-border",
            style: {
              color: el.props.textColor,
              fontFamily: el.props.textFont,
              fontSize: el.props.textSize,
              fontWeight: el.props.textBold ? "bold" : "normal",
              whiteSpace: "pre-wrap",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              textAlign: "center",
              pointerEvents: readOnly ? "none" : "auto"
            },
            children: el.props.text
          }), el.type === "cm_gallery" && isEditingCMContentMode && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "cm-gallery-container",
            style: {
              gap: "".concat(el.props.gap, "px")
            },
            children: [(el.props.images || []).map(function (imgItem, index) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                className: "cm-gallery-item",
                style: {
                  /* marginRight handled by gap in flex */
                },
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                  src: imgItem.srcUrl || "https://dummyimage.com/150x100/ccc/fff.png&text=GalleryImg",
                  alt: "Gallery item ".concat(index + 1),
                  style: {
                    height: "".concat(el.props.imageHeight, "px"),
                    border: "".concat(el.props.imageBorderWidth, "px ").concat(el.props.imageBorderStyle, " ").concat(el.props.imageBorderColor),
                    borderRadius: "".concat(el.props.imageBorderRadius, "px"),
                    objectFit: "cover"
                  }
                }), el.props.buttonShow && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                  className: "gallery-item-button",
                  style: {
                    fontFamily: el.props.buttonFont,
                    fontSize: "".concat(el.props.buttonFontSize, "px"),
                    color: el.props.buttonTextColor,
                    backgroundColor: el.props.buttonBgColor,
                    border: "".concat(el.props.buttonBorderWidth, "px ").concat(el.props.buttonBorderStyle, " ").concat(el.props.buttonBorderColor),
                    borderRadius: "".concat(el.props.buttonBorderRadius, "px"),
                    fontWeight: el.props.buttonFontBold ? "bold" : "normal",
                    padding: "".concat(el.props.buttonPaddingY, "px ").concat(el.props.buttonPaddingX, "px"),
                    cursor: "default",
                    // Non-interactive in editor preview of gallery
                    marginTop: "5px"
                  },
                  children: imgItem.buttonText
                })]
              }, imgItem.id);
            }), (el.props.images || []).length === 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              className: "flex items-center justify-center w-full h-full text-gray-400",
              children: "Gallery: Add images in editor"
            })]
          }), el.type === "cm_closebutton" && isEditingCMContentMode && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            style: {
              fontSize: Math.min(el.w, el.h) * 0.6,
              color: "white",
              pointerEvents: "none"
            },
            children: "\u2715"
          }), el.type === "video-indicators" && !isEditingCMContentMode && !activeCMOverlayData && function () {
            var props = el.props;
            var indicatorRepresentsDuration = props.videoDuration > 0 ? props.videoDuration : 60;
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              className: "video-indicator-element-wrapper",
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                className: "video-indicator-track",
                style: {
                  backgroundColor: window.location.href.includes("customize") ? props.barColor // barColor is removed, this might need adjustment or removal
                  : "transparent"
                },
                children: (props.indicatorPoints || []).map(function (pointTime, index) {
                  if (indicatorRepresentsDuration <= 0) return null;
                  var leftPercent = pointTime / indicatorRepresentsDuration * 100;
                  leftPercent = Math.max(0, Math.min(100, leftPercent));
                  var pulseShadowCssValue = "0 0 8px 3px ".concat(hexToRgba(props.pointPulseColor || props.pointColor, 0.7));
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                    className: "video-indicator-point-marker",
                    style: {
                      left: "".concat(leftPercent, "%"),
                      backgroundColor: props.pointColor,
                      boxShadow: "0 0 6px 2px ".concat(hexToRgba(props.pointPulseColor || props.pointColor, 0.5))
                    },
                    title: "Marker at ".concat(pointTime.toFixed(1), "s")
                  }, "point-".concat(el.id, "-").concat(index));
                })
              })
            });
          }()]
        }, el.id);
      }), readOnly && videoRef.current && videoRef.current.duration > 0 && !activeCMOverlayData && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        className: "custom-progress-markers-bar",
        children: scr.elements.filter(function (el) {
          return el.type === "ctaimage" && typeof el.props.showAt === "number" && el.props.showAt >= 0;
        }).map(function (ctaElement) {
          var videoDuration = videoRef.current.duration;
          if (videoDuration <= 0) return null;
          var positionPercent = ctaElement.props.showAt / videoDuration * 100;
          positionPercent = Math.max(0, Math.min(100, positionPercent));
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            className: "pulse-marker",
            style: {
              left: "".concat(positionPercent, "%"),
              visibility: "hidden"
            },
            title: "CTA '".concat(ctaElement.props.text.substring(0, 20), "...' at ").concat(ctaElement.props.showAt.toFixed(1), "s")
          }, "marker-".concat(ctaElement.id));
        })
      }), activeCMOverlayData && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        style: {
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          background: hexToRgba(activeCMOverlayData.props.bgColor, activeCMOverlayData.props.bgOpacity),
          zIndex: 1000,
          display: "flex",
          // Keep for main centering if needed, but content is absolute
          alignItems: "center",
          justifyContent: "center"
        },
        onClick: closeCompositionMessage // Click on backdrop closes CM
        ,
        children: [activeCMOverlayData.props.contentElements.map(function (contentEl) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            style: {
              position: "absolute",
              left: contentEl.x,
              top: contentEl.y,
              width: contentEl.w,
              height: contentEl.h
            },
            onClick: function onClick(e) {
              return e.stopPropagation();
            } // Prevent click on content from closing CM
            ,
            children: [contentEl.type === "cm_image" && (contentEl.props.url ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("a", {
              href: getSafeUrl(contentEl.props.url),
              target: "_blank",
              rel: "noopener noreferrer",
              style: {
                display: "block",
                width: "100%",
                height: "100%"
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                src: contentEl.props.srcUrl || "https://dummyimage.com/150x100/ccc/fff.png&text=Image",
                alt: "CM content image",
                style: {
                  width: "100%",
                  height: "100%",
                  objectFit: "contain"
                }
              })
            }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
              src: contentEl.props.srcUrl || "https://dummyimage.com/150x100/ccc/fff.png&text=Image",
              alt: "CM content image",
              style: {
                width: "100%",
                height: "100%",
                objectFit: "contain"
              }
            })), contentEl.type === "cm_text" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                color: contentEl.props.textColor,
                fontFamily: contentEl.props.textFont,
                fontSize: contentEl.props.textSize,
                fontWeight: contentEl.props.textBold ? "bold" : "normal",
                width: "100%",
                height: "100%",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                textAlign: "center",
                whiteSpace: "pre-wrap",
                overflow: "hidden"
              },
              children: contentEl.props.text
            }), contentEl.type === "cm_optionsbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CMOptionsButtonPreview, {
              elementProps: contentEl.props,
              isEditingMode: false,
              onInteraction: closeCompositionMessage
            }), contentEl.type === "cm_gallery" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              className: "cm-gallery-container",
              style: {
                gap: "".concat(contentEl.props.gap, "px")
              },
              children: (contentEl.props.images || []).map(function (imgItem, index) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                  className: "cm-gallery-item",
                  children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                    src: imgItem.srcUrl || "https://dummyimage.com/100x80/eee/aaa.png&text=G",
                    alt: "Gallery item ".concat(index + 1),
                    style: {
                      height: "".concat(contentEl.props.imageHeight, "px"),
                      border: "".concat(contentEl.props.imageBorderWidth, "px ").concat(contentEl.props.imageBorderStyle, " ").concat(contentEl.props.imageBorderColor),
                      borderRadius: "".concat(contentEl.props.imageBorderRadius, "px")
                    }
                  }), contentEl.props.buttonShow && (imgItem.buttonUrl ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("a", {
                    href: getSafeUrl(imgItem.buttonUrl),
                    target: "_blank",
                    rel: "noopener noreferrer",
                    className: "gallery-item-button",
                    style: {
                      fontFamily: contentEl.props.buttonFont,
                      fontSize: "".concat(contentEl.props.buttonFontSize, "px"),
                      color: contentEl.props.buttonTextColor,
                      backgroundColor: contentEl.props.buttonBgColor,
                      border: "".concat(contentEl.props.buttonBorderWidth, "px ").concat(contentEl.props.buttonBorderStyle, " ").concat(contentEl.props.buttonBorderColor),
                      borderRadius: "".concat(contentEl.props.buttonBorderRadius, "px"),
                      fontWeight: contentEl.props.buttonFontBold ? "bold" : "normal",
                      padding: "".concat(contentEl.props.buttonPaddingY, "px ").concat(contentEl.props.buttonPaddingX, "px"),
                      cursor: "pointer",
                      marginTop: "5px"
                    },
                    onClick: function onClick(e) {
                      return e.stopPropagation();
                    } // Prevent CM close
                    ,
                    children: imgItem.buttonText
                  }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                    className: "gallery-item-button",
                    style: {
                      fontFamily: contentEl.props.buttonFont,
                      fontSize: "".concat(contentEl.props.buttonFontSize, "px"),
                      color: contentEl.props.buttonTextColor,
                      backgroundColor: contentEl.props.buttonBgColor,
                      border: "".concat(contentEl.props.buttonBorderWidth, "px ").concat(contentEl.props.buttonBorderStyle, " ").concat(contentEl.props.buttonBorderColor),
                      borderRadius: "".concat(contentEl.props.buttonBorderRadius, "px"),
                      fontWeight: contentEl.props.buttonFontBold ? "bold" : "normal",
                      padding: "".concat(contentEl.props.buttonPaddingY, "px ").concat(contentEl.props.buttonPaddingX, "px"),
                      cursor: "default",
                      // Or pointer if it should do something else
                      marginTop: "5px"
                    },
                    onClick: function onClick(e) {
                      return e.stopPropagation();
                    } // Prevent CM close
                    ,
                    children: imgItem.buttonText
                  }))]
                }, imgItem.id);
              })
            })]
          }, contentEl.id);
        }), function () {
          var btn = activeCMOverlayData.props.closeButtonElement;
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: function onClick(e) {
              e.stopPropagation();
              closeCompositionMessage();
            },
            style: {
              position: "absolute",
              left: btn.x,
              top: btn.y,
              width: btn.w,
              height: btn.h,
              background: btn.props.color,
              borderRadius: "50%",
              border: "none",
              color: "white",
              fontSize: Math.min(btn.w, btn.h) * 0.5,
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              zIndex: 1001
            },
            "aria-label": "Close message",
            children: "\u2715"
          });
        }()]
      })]
    })]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */
function serialize(_x9) {
  return _serialize.apply(this, arguments);
}
function _serialize() {
  _serialize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(s) {
    var screens, thumbnailHint, firstScreen, videoElement, ctaImageElement, cmWithMessage, cmImageElement, cmGalleryElement;
    return _regenerator().w(function (_context8) {
      while (1) switch (_context8.n) {
        case 0:
          screens = s.screens.map(function (sc) {
            return _objectSpread(_objectSpread({}, sc), {}, {
              elements: sc.elements.map(function (el) {
                var newProps = _objectSpread({}, el.props);
                if (newProps.hasOwnProperty("file")) delete newProps.file;
                if (newProps.hasOwnProperty("srcUrl")) {
                  newProps.src = newProps.srcUrl;
                  delete newProps.srcUrl;
                }
                if (el.type === "compositionmessage") {
                  var contentElements = el.props.contentElements.map(function (contentEl) {
                    var newContentProps = _objectSpread({}, contentEl.props);
                    if (newContentProps.hasOwnProperty("file")) delete newContentProps.file;
                    if (newContentProps.hasOwnProperty("srcUrl")) {
                      // For cm_image, cm_optionsbutton image
                      newContentProps.src = newContentProps.srcUrl;
                      delete newContentProps.srcUrl;
                    }
                    // For cm_gallery images
                    if (contentEl.type === "cm_gallery" && newContentProps.images) {
                      newContentProps.images = newContentProps.images.map(function (imgItem) {
                        var newImgItem = _objectSpread({}, imgItem);
                        if (newImgItem.hasOwnProperty("srcUrl")) {
                          newImgItem.src = newImgItem.srcUrl;
                          delete newImgItem.srcUrl;
                        }
                        return newImgItem;
                      });
                    }
                    return _objectSpread(_objectSpread({}, contentEl), {}, {
                      props: newContentProps
                    });
                  });
                  return _objectSpread(_objectSpread({}, el), {}, {
                    props: _objectSpread(_objectSpread({}, newProps), {}, {
                      contentElements: contentElements
                    })
                  });
                }
                return _objectSpread(_objectSpread({}, el), {}, {
                  props: newProps
                });
              })
            });
          });
          thumbnailHint = ""; // ... (thumbnailHint logic remains the same, but could be extended for gallery images if desired)
          if (s.screens && s.screens.length > 0) {
            firstScreen = s.screens[0];
            videoElement = firstScreen.elements.find(function (el) {
              return el.type === "video" && el.props.srcUrl;
            });
            if (videoElement) {
              thumbnailHint = videoElement.props.srcUrl;
            } else {
              ctaImageElement = firstScreen.elements.find(function (el) {
                return el.type === "ctaimage" && el.props.srcUrl;
              });
              if (ctaImageElement) {
                thumbnailHint = ctaImageElement.props.srcUrl;
              } else {
                cmWithMessage = firstScreen.elements.find(function (el) {
                  return el.type === "compositionmessage";
                });
                if (cmWithMessage && cmWithMessage.props.contentElements) {
                  cmImageElement = cmWithMessage.props.contentElements.find(function (cel) {
                    return cel.type === "cm_image" && cel.props.srcUrl;
                  });
                  if (cmImageElement) {
                    thumbnailHint = cmImageElement.props.srcUrl;
                  } else {
                    cmGalleryElement = cmWithMessage.props.contentElements.find(function (cel) {
                      return cel.type === "cm_gallery" && cel.props.images && cel.props.images.length > 0 && cel.props.images[0].srcUrl;
                    });
                    if (cmGalleryElement) {
                      thumbnailHint = cmGalleryElement.props.images[0].srcUrl;
                    }
                  }
                }
              }
            }
          }
          return _context8.a(2, _objectSpread(_objectSpread({}, s), {}, {
            selected: null,
            activeCompositionMessageId: null,
            editingCompositionMessageContentForId: null,
            uploadStates: {},
            screens: screens,
            _thumbnailHintUrl: thumbnailHint
          }));
      }
    }, _callee8);
  }));
  return _serialize.apply(this, arguments);
}
var deserialize = function deserialize() {
  var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var baseState = startState();
  if (d && d.screens) {
    var deserializedScreens = d.screens.map(function (sc) {
      return _objectSpread(_objectSpread({}, sc), {}, {
        elements: sc.elements.map(function (el) {
          var defaultElement = newElement(el.type, el.parentId);
          var newProps = _objectSpread(_objectSpread({}, defaultElement.props), el.props);
          if (newProps.hasOwnProperty("src") && typeof newProps.src === "string") {
            newProps.srcUrl = newProps.src;
          }
          if (el.type === "compositionmessage") {
            var _el$props$closeButton;
            var contentElements = (el.props.contentElements || []).map(function (contentEl) {
              var defaultSubElement = newElement(contentEl.type, el.id);
              var newContentProps = _objectSpread(_objectSpread({}, defaultSubElement.props), contentEl.props);
              if (newContentProps.hasOwnProperty("src") && typeof newContentProps.src === "string") {
                newContentProps.srcUrl = newContentProps.src;
              }
              // For cm_gallery images
              if (contentEl.type === "cm_gallery" && newContentProps.images) {
                newContentProps.images = newContentProps.images.map(function (imgItem) {
                  var newImgItem = _objectSpread({}, imgItem);
                  if (newImgItem.hasOwnProperty("src") && typeof newImgItem.src === "string") {
                    newImgItem.srcUrl = newImgItem.src;
                  }
                  // Ensure each gallery image item has an ID
                  if (!newImgItem.id) newImgItem.id = crypto.randomUUID();
                  return newImgItem;
                });
              }
              return _objectSpread(_objectSpread(_objectSpread({}, defaultSubElement), contentEl), {}, {
                props: newContentProps
              });
            });
            var defaultCMCloseButtonProps = defaultElement.props.closeButtonElement.props;
            var savedCMCloseButtonProps = ((_el$props$closeButton = el.props.closeButtonElement) === null || _el$props$closeButton === void 0 ? void 0 : _el$props$closeButton.props) || {};
            return _objectSpread(_objectSpread(_objectSpread({}, defaultElement), el), {}, {
              props: _objectSpread(_objectSpread({}, newProps), {}, {
                contentElements: contentElements,
                closeButtonElement: _objectSpread(_objectSpread(_objectSpread({}, defaultElement.props.closeButtonElement), el.props.closeButtonElement || {}), {}, {
                  parentId: el.id,
                  props: _objectSpread(_objectSpread({}, defaultCMCloseButtonProps), savedCMCloseButtonProps)
                })
              })
            });
          }
          return _objectSpread(_objectSpread(_objectSpread({}, defaultElement), el), {}, {
            props: newProps
          });
        })
      });
    });
    return _objectSpread(_objectSpread(_objectSpread({}, baseState), d), {}, {
      selected: null,
      activeCompositionMessageId: null,
      editingCompositionMessageContentForId: null,
      uploadStates: {},
      screens: deserializedScreens
    });
  }
  return baseState;
};

/***/ }),

/***/ "./templates/videoSurvey.js":
/*!**********************************!*\
  !*** ./templates/videoSurvey.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Editor: () => (/* binding */ Editor),
/* harmony export */   Preview: () => (/* binding */ Preview),
/* harmony export */   deserialize: () => (/* binding */ deserialize),
/* harmony export */   meta: () => (/* binding */ meta),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var react_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-rnd */ "./node_modules/react-rnd/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* Video Survey – template for a background video with interactive CTA elements
--------------------------------------------------------------------------------- */




// V. Global Considerations: API_BASE_URL

var API_BASE_URL = "https://localhost:3001" || 0;

/* ---------- meta ---------- */
var meta = {
  id: "video-survey",
  // CHANGED
  name: "Video Survey",
  // CHANGED
  description: "Upload a background video and overlay interactive CTA elements with images, text, and buttons that can trigger composition messages.",
  // CHANGED
  canvas: {
    w: 640,
    h: 360
  }
};

/* ---------- helpers ---------- */
var FONTS = ["Arial", "Helvetica", "'Times New Roman'", "Georgia", "Verdana", "Tahoma", "'Courier New'", "'Roboto'"];
var BORDER_STYLES = ["none", "solid", "dashed", "dotted", "double", "groove", "ridge", "inset", "outset"];
var TEXT_ALIGNS = ["left", "center", "right", "justify"];

// CTA_EFFECTS is no longer used by the new ctaimage, but kept for potential future use or if other elements use it.
/*
const CTA_EFFECTS = [
  "none", "float", "bounce", "waves", "pulse", "spin", "shake",
  "jump", "tilt", "flash", "slide-right", "slide-left", "grow", "swing",
];
*/

// NEW: Animation effects for CTAImage
var CTA_ANIMATION_EFFECTS = [{
  value: "none",
  name: "None"
}, {
  value: "fadeIn",
  name: "Fade In"
}, {
  value: "slideUp",
  name: "Slide Up (from bottom)"
}, {
  value: "slideDown",
  name: "Slide Down (from top)"
}, {
  value: "zoomIn",
  name: "Zoom In"
}, {
  value: "bounceIn",
  name: "Bounce In"
}];

// I. Editor Component Modifications: Implement S3 Upload Function (Shared)
function uploadFileToBackend(_x) {
  return _uploadFileToBackend.apply(this, arguments);
}
function _uploadFileToBackend() {
  _uploadFileToBackend = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(fileObject) {
    var formData, response, errorData, result, _t2;
    return _regenerator().w(function (_context6) {
      while (1) switch (_context6.n) {
        case 0:
          formData = new FormData();
          formData.append("assetFile", fileObject);
          _context6.p = 1;
          _context6.n = 2;
          return fetch("".concat(API_BASE_URL, "/api/files/upload"), {
            method: "POST",
            body: formData
          });
        case 2:
          response = _context6.v;
          if (response.ok) {
            _context6.n = 4;
            break;
          }
          _context6.n = 3;
          return response.json()["catch"](function () {
            return {
              message: "Upload failed with status " + response.status
            };
          });
        case 3:
          errorData = _context6.v;
          throw new Error(errorData.message || "HTTP error! status: ".concat(response.status));
        case 4:
          _context6.n = 5;
          return response.json();
        case 5:
          result = _context6.v;
          return _context6.a(2, result.url);
        case 6:
          _context6.p = 6;
          _t2 = _context6.v;
          console.error("File upload error:", _t2);
          throw _t2;
        case 7:
          return _context6.a(2);
      }
    }, _callee6, null, [[1, 6]]);
  }));
  return _uploadFileToBackend.apply(this, arguments);
}
var startState = function startState() {
  return {
    bg: "#000000",
    current: 0,
    selected: null,
    animKey: 0,
    activeCompositionMessageId: null,
    editingCompositionMessageContentForId: null,
    uploadStates: {},
    screens: [{
      id: crypto.randomUUID(),
      elements: []
    }]
  };
};
var newElement = function newElement(type) {
  var parentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var cmIdForCloseButton = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var base = {
    id: crypto.randomUUID(),
    type: type,
    x: 10,
    y: 10,
    w: 180,
    h: 90
  };
  switch (type) {
    case "video":
      return _objectSpread(_objectSpread({}, base), {}, {
        w: meta.canvas.w,
        h: meta.canvas.h,
        x: 0,
        y: 0,
        props: {
          srcUrl: ""
        }
      });
    case "ctaimage":
      // EDITED for new structure
      return _objectSpread(_objectSpread({}, base), {}, {
        w: 320,
        h: 120,
        props: {
          // Container Props
          containerBgColor: "#ffffff",
          containerBorderColor: "#cccccc",
          containerBorderWidth: 1,
          containerBorderStyle: "solid",
          containerBorderRadius: 0,
          containerPadding: 10,
          // Image Props
          srcUrl: "",
          // S3 URL for the image
          imageWidthPercent: 30,
          // Image width as a percentage of container width

          // Text Props
          text: "Your compelling message here.",
          textColor: "#333333",
          textFont: "Arial",
          textSize: 16,
          textBold: false,
          textAlign: "left",
          // Button Props
          showButton: true,
          buttonText: "Learn More",
          buttonTextColor: "#ffffff",
          buttonBgColor: "#007bff",
          buttonBorderColor: "#007bff",
          buttonBorderWidth: 0,
          buttonBorderStyle: "solid",
          buttonBorderRadius: 5,
          buttonFont: "Arial",
          buttonFontSize: 14,
          buttonFontBold: false,
          buttonPaddingX: 12,
          buttonPaddingY: 6,
          // Interaction
          opensCompositionMessageId: null,
          showAt: 0,
          hideAt: null,
          // NEW: Hide At setting
          animationEffect: "none" // NEW: Animation effect
        }
      });
    case "compositionmessage":
      var newCmId = base.id;
      return _objectSpread(_objectSpread({}, base), {}, {
        id: newCmId,
        x: -1000,
        // Default off-screen
        y: -1000,
        // Default off-screen
        w: 0,
        // Default hidden
        h: 0,
        // Default hidden
        props: {
          bgColor: "#ffffff",
          bgOpacity: 0.95,
          contentElements: [],
          closeButtonElement: {
            id: "".concat(newCmId, "_close"),
            parentId: newCmId,
            type: "cm_closebutton",
            x: meta.canvas.w - 50,
            y: 10,
            w: 30,
            h: 30,
            props: {
              color: "#333333"
            }
          }
        }
      });
    case "cm_optionsbutton":
      return _objectSpread(_objectSpread({}, base), {}, {
        parentId: parentId,
        w: 250,
        h: 60,
        props: {
          // Image
          srcUrl: "",
          // Placeholder: "https://dummyimage.com/50x50/ccc/aaa.png&text=Img"
          imageWidthPercent: 30,
          // % of button width for image

          // Text
          text: "Option Text",
          textFont: "Arial",
          textSize: 16,
          textColor: "#333333",
          textBold: false,
          textAlign: "left",
          // Alignment of text within its text area

          // Button Container
          bgColor: "#FFFFFF",
          borderColor: "#CCCCCC",
          borderWidth: 1,
          borderRadius: 5,
          padding: 8,
          // Inner padding for the button content

          // Hover State
          hoverBgColor: "#F0F0F0",
          hoverTextColor: "#111111",
          hoverBorderColor: "#AAAAAA"
          // Potentially add hoverImageEffect (e.g., brightness, overlay) later if needed
        }
      });
    case "cm_image":
      return _objectSpread(_objectSpread({}, base), {}, {
        parentId: parentId,
        w: 150,
        h: 100,
        props: {
          srcUrl: "",
          url: ""
        }
      });
    case "cm_text":
      return _objectSpread(_objectSpread({}, base), {}, {
        parentId: parentId,
        w: 200,
        h: 50,
        props: {
          text: "Sample Text",
          textFont: "Arial",
          textSize: 20,
          textColor: "#000000",
          textBold: false
        }
      });
    case "video-indicators":
      // NEW ELEMENT TYPE
      return _objectSpread(_objectSpread({}, base), {}, {
        w: meta.canvas.w * 0.8,
        h: 20,
        // Can be smaller now, just for points
        x: meta.canvas.w * 0.1,
        y: meta.canvas.h - 35,
        // Adjust Y position slightly if needed
        props: {
          videoDuration: 60,
          indicatorPoints: [],
          // barColor: "#555555", // No longer needed
          pointColor: "#FFFFFF",
          pointPulseColor: "rgba(255, 255, 255, 0.7)"
          // playheadColor: "#FF6347", // No longer needed
          // showPlayhead: true, // No longer needed
        }
      });
    default:
      return base;
  }
};
var hexToRgba = function hexToRgba(hex) {
  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var h = hex.replace("#", "");
  var bigint = parseInt(h, 16);
  var r = bigint >> 16 & 255;
  var g = bigint >> 8 & 255;
  var b = bigint & 255;
  return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(alpha, ")");
};

/* ═════════════════════ EDITOR ═════════════════════ */
function Editor(_ref) {
  var _safe$editingComposit, _safe$editingComposit2, _scr$elements$find, _sel$props$hideAt;
  var _ref$state = _ref.state,
    state = _ref$state === void 0 ? startState() : _ref$state,
    setState = _ref.setState;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var uploadStates = safe.uploadStates || {};
  var sel = scr.elements.find(function (e) {
    return e.id === safe.selected;
  });
  if (!sel && safe.editingCompositionMessageContentForId) {
    var editingCM = scr.elements.find(function (e) {
      return e.id === safe.editingCompositionMessageContentForId && e.type === "compositionmessage";
    });
    if (editingCM) {
      if (editingCM.props.closeButtonElement.id === safe.selected) {
        sel = editingCM.props.closeButtonElement;
      } else {
        sel = editingCM.props.contentElements.find(function (subEl) {
          return subEl.id === safe.selected;
        });
      }
    }
  }
  var patchSel = function patchSel(fn) {
    setState(function (prevSafe) {
      var newScreens = prevSafe.screens.map(function (sc, i) {
        if (i !== prevSafe.current) return sc;
        var currentSelectedId = prevSafe.selected;
        var parentCMToUpdate = null;
        if (prevSafe.editingCompositionMessageContentForId) {
          parentCMToUpdate = sc.elements.find(function (el) {
            return el.id === prevSafe.editingCompositionMessageContentForId && el.type === "compositionmessage";
          });
        }
        if (parentCMToUpdate) {
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (cm) {
              if (cm.id === parentCMToUpdate.id) {
                return _objectSpread(_objectSpread({}, cm), {}, {
                  props: _objectSpread(_objectSpread({}, cm.props), {}, {
                    contentElements: cm.props.contentElements.map(function (contentEl) {
                      return contentEl.id === currentSelectedId ? fn(contentEl) : contentEl;
                    }),
                    closeButtonElement: cm.props.closeButtonElement.id === currentSelectedId ? fn(cm.props.closeButtonElement) : cm.props.closeButtonElement
                  })
                });
              }
              return cm;
            })
          });
        } else {
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (e) {
              return e.id === currentSelectedId ? fn(e) : e;
            })
          });
        }
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens
      });
    });
  };
  var duplicateCMContentElement = function duplicateCMContentElement() {
    if (!safe.selected || !safe.editingCompositionMessageContentForId) return;
    var cmId = safe.editingCompositionMessageContentForId;
    var selectedContentId = safe.selected;
    setState(function (prevSafe) {
      var newScreens = prevSafe.screens.map(function (sc, i) {
        if (i !== prevSafe.current) return sc;
        return _objectSpread(_objectSpread({}, sc), {}, {
          elements: sc.elements.map(function (mainEl) {
            if (mainEl.id === cmId && mainEl.type === "compositionmessage") {
              var contentElementToDuplicate = mainEl.props.contentElements.find(function (contentEl) {
                return contentEl.id === selectedContentId;
              });
              if (!contentElementToDuplicate) return mainEl; // Should not happen

              // Prevent duplicating the CM's own close button via this mechanism
              if (mainEl.props.closeButtonElement.id === selectedContentId) {
                console.warn("Cannot duplicate the main CM close button this way.");
                return mainEl;
              }
              var newDuplicatedContentElement = JSON.parse(JSON.stringify(contentElementToDuplicate));
              newDuplicatedContentElement.id = crypto.randomUUID();
              newDuplicatedContentElement.x = (contentElementToDuplicate.x + 10) % (meta.canvas.w - contentElementToDuplicate.w);
              newDuplicatedContentElement.y = (contentElementToDuplicate.y + 10) % (meta.canvas.h - contentElementToDuplicate.h);
              // parentId remains the same (cmId)

              return _objectSpread(_objectSpread({}, mainEl), {}, {
                props: _objectSpread(_objectSpread({}, mainEl.props), {}, {
                  contentElements: [].concat(_toConsumableArray(mainEl.props.contentElements), [newDuplicatedContentElement])
                })
              });
            }
            return mainEl;
          })
        });
      });

      // Find the new duplicated element to select it
      var currentScreen = newScreens.find(function (sc, i) {
        return i === prevSafe.current;
      });
      var parentCM = currentScreen.elements.find(function (el) {
        return el.id === cmId;
      });
      var newSelectedDuplicate = parentCM.props.contentElements.find(function (el) {
        var _parentCM$props$conte;
        return el.id !== selectedContentId && el.type === ((_parentCM$props$conte = parentCM.props.contentElements.find(function (c) {
          return c.id === selectedContentId;
        })) === null || _parentCM$props$conte === void 0 ? void 0 : _parentCM$props$conte.type) && el.x === (parentCM.props.contentElements.find(function (c) {
          return c.id === selectedContentId;
        }).x + 10) % (meta.canvas.w - parentCM.props.contentElements.find(function (c) {
          return c.id === selectedContentId;
        }).w);
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens,
        selected: newSelectedDuplicate ? newSelectedDuplicate.id : prevSafe.selected,
        // Select the new duplicated content element
        animKey: prevSafe.animKey + 1
      });
    });
  };
  var handleFileUpload = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(file, elementId) {
      var assetKeyName,
        s3Url,
        _args = arguments,
        _t;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            assetKeyName = _args.length > 2 && _args[2] !== undefined ? _args[2] : "srcUrl";
            if (!(!file || !elementId)) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            setState(function (prev) {
              return _objectSpread(_objectSpread({}, prev), {}, {
                uploadStates: _objectSpread(_objectSpread({}, prev.uploadStates), {}, _defineProperty({}, elementId, {
                  loading: true,
                  error: null
                }))
              });
            });
            _context.p = 2;
            _context.n = 3;
            return uploadFileToBackend(file);
          case 3:
            s3Url = _context.v;
            patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, _defineProperty(_defineProperty({}, assetKeyName, s3Url), "file", undefined))
              });
            });
            setState(function (prev) {
              return _objectSpread(_objectSpread({}, prev), {}, {
                uploadStates: _objectSpread(_objectSpread({}, prev.uploadStates), {}, _defineProperty({}, elementId, {
                  loading: false,
                  error: null
                }))
              });
            });
            _context.n = 5;
            break;
          case 4:
            _context.p = 4;
            _t = _context.v;
            console.error("Error uploading file for element ".concat(elementId, ":"), _t);
            setState(function (prev) {
              return _objectSpread(_objectSpread({}, prev), {}, {
                uploadStates: _objectSpread(_objectSpread({}, prev.uploadStates), {}, _defineProperty({}, elementId, {
                  loading: false,
                  error: _t.message || "Upload failed"
                }))
              });
            });
          case 5:
            return _context.a(2);
        }
      }, _callee, null, [[2, 4]]);
    }));
    return function handleFileUpload(_x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  var add = function add(t) {
    var newEl = newElement(t);
    setState(_objectSpread(_objectSpread({}, safe), {}, {
      selected: newEl.id,
      editingCompositionMessageContentForId: null,
      screens: safe.screens.map(function (sc, i) {
        return i === safe.current ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newEl])
        }) : sc;
      })
    }));
  };
  var addCMElement = function addCMElement(type) {
    var cmId = safe.editingCompositionMessageContentForId;
    if (!cmId) return;
    var newCMEl = newElement(type, cmId);
    setState(function (prevSafe) {
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        selected: newCMEl.id,
        screens: prevSafe.screens.map(function (sc, i) {
          return i === prevSafe.current ? _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (el) {
              return el.id === cmId && el.type === "compositionmessage" ? _objectSpread(_objectSpread({}, el), {}, {
                props: _objectSpread(_objectSpread({}, el.props), {}, {
                  contentElements: [].concat(_toConsumableArray(el.props.contentElements), [newCMEl])
                })
              }) : el;
            })
          }) : sc;
        })
      });
    });
  };
  var deleteSelectedElement = function deleteSelectedElement() {
    if (!safe.selected) return;
    var selectedId = safe.selected;
    setState(function (prevSafe) {
      var currentScreenIndex = prevSafe.current;
      var screenToUpdate = prevSafe.screens[currentScreenIndex];
      var newElements = _toConsumableArray(screenToUpdate.elements);
      var newSelectedId = null;
      var newEditingCMId = prevSafe.editingCompositionMessageContentForId;
      var newUploadStates = _objectSpread({}, prevSafe.uploadStates);
      var elementToDelete = newElements.find(function (el) {
        return el.id === selectedId;
      });
      if (prevSafe.editingCompositionMessageContentForId) {
        // Deleting a CM content element
        var cmId = prevSafe.editingCompositionMessageContentForId;
        newElements = newElements.map(function (el) {
          if (el.id === cmId && el.type === "compositionmessage") {
            if (el.props.closeButtonElement.id === selectedId) {
              console.warn("Cannot delete CM close button this way."); // Should be prevented by UI
              newSelectedId = selectedId; // Keep selection
              return el;
            }
            var newContentElements = el.props.contentElements.filter(function (subEl) {
              if (subEl.id === selectedId) {
                delete newUploadStates[selectedId]; // Clean up upload state if it was an image
                return false;
              }
              return true;
            });
            return _objectSpread(_objectSpread({}, el), {}, {
              props: _objectSpread(_objectSpread({}, el.props), {}, {
                contentElements: newContentElements
              })
            });
          }
          return el;
        });
      } else {
        // Deleting a main element (video, ctaimage, compositionmessage)
        newElements = newElements.filter(function (el) {
          return el.id !== selectedId;
        });
        delete newUploadStates[selectedId]; // Clean up upload state

        if (elementToDelete && elementToDelete.type === "compositionmessage") {
          if (prevSafe.editingCompositionMessageContentForId === selectedId) {
            newEditingCMId = null; // Stop editing if the CM itself is deleted
          }
          // Unlink any ctaimages pointing to this deleted CM
          newElements = newElements.map(function (el) {
            return el.type === "ctaimage" && el.props.opensCompositionMessageId === selectedId ? _objectSpread(_objectSpread({}, el), {}, {
              props: _objectSpread(_objectSpread({}, el.props), {}, {
                opensCompositionMessageId: null
              })
            }) : el;
          });
        }
      }
      var newScreens = prevSafe.screens.map(function (sc, i) {
        return i === currentScreenIndex ? _objectSpread(_objectSpread({}, sc), {}, {
          elements: newElements
        }) : sc;
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens,
        selected: newSelectedId,
        // Clears selection after delete, unless prevented
        editingCompositionMessageContentForId: newEditingCMId,
        animKey: prevSafe.animKey + 1,
        uploadStates: newUploadStates
      });
    });
  };

  // NEW: Duplicate selected element
  var duplicateSelectedElement = function duplicateSelectedElement() {
    if (!sel || safe.editingCompositionMessageContentForId) return; // Only for main elements

    var elementToDuplicate = scr.elements.find(function (e) {
      return e.id === safe.selected;
    });
    if (!elementToDuplicate || !["video", "ctaimage", "compositionmessage"].includes(elementToDuplicate.type)) {
      return;
    }
    var newDuplicatedElement = JSON.parse(JSON.stringify(elementToDuplicate)); // Deep copy
    newDuplicatedElement.id = crypto.randomUUID();
    newDuplicatedElement.x = (elementToDuplicate.x + 20) % (meta.canvas.w - elementToDuplicate.w); // Offset & wrap
    newDuplicatedElement.y = (elementToDuplicate.y + 20) % (meta.canvas.h - elementToDuplicate.h); // Offset & wrap

    if (newDuplicatedElement.type === "compositionmessage") {
      newDuplicatedElement.props.contentElements = newDuplicatedElement.props.contentElements.map(function (contentEl) {
        return _objectSpread(_objectSpread({}, contentEl), {}, {
          id: crypto.randomUUID(),
          parentId: newDuplicatedElement.id // Link to new CM
        });
      });
      newDuplicatedElement.props.closeButtonElement = _objectSpread(_objectSpread({}, newDuplicatedElement.props.closeButtonElement), {}, {
        id: crypto.randomUUID(),
        parentId: newDuplicatedElement.id // Link to new CM
      });
    }
    // If duplicating a ctaimage that links to a CM, it will link to the same original CM.
    // If duplicating a video or ctaimage with srcUrl, the URL is copied.

    setState(function (prevSafe) {
      var newScreens = prevSafe.screens.map(function (sc, i) {
        if (i !== prevSafe.current) return sc;
        return _objectSpread(_objectSpread({}, sc), {}, {
          elements: [].concat(_toConsumableArray(sc.elements), [newDuplicatedElement])
        });
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens,
        selected: newDuplicatedElement.id,
        // Select the new duplicated element
        animKey: prevSafe.animKey + 1
      });
    });
  };
  var compositionMessages = scr.elements.filter(function (el) {
    return el.type === "compositionmessage";
  });
  var existingCMsForSelection = scr.elements.filter(function (el) {
    return el.type === "compositionmessage";
  });
  var currentUploadState = sel ? uploadStates[sel.id] : null;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
      className: "block text-sm font-medium",
      children: ["Background\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
        type: "color",
        value: safe.bg,
        onChange: function onChange(e) {
          return setState(_objectSpread(_objectSpread({}, safe), {}, {
            bg: e.target.value
          }));
        }
      })]
    }), !safe.editingCompositionMessageContentForId ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
        className: "text-xs font-semibold mt-2",
        children: "Main Elements:"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        className: "flex flex-wrap gap-2",
        children: ["video", "ctaimage", "compositionmessage", "video-indicators"].map(function (t) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
            className: "btn",
            onClick: function onClick() {
              return add(t);
            },
            children: ["+ ", t === "video-indicators" ? "Vid.Indicators" : t]
          }, t);
        })
      }), existingCMsForSelection.length > 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "mt-4",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs font-semibold",
          children: "Existing Composition Messages:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("ul", {
          className: "list-disc pl-5 text-xs space-y-1",
          children: existingCMsForSelection.map(function (cm) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("li", {
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span", {
                className: "cursor-pointer hover:text-blue-500 ".concat(safe.selected === cm.id ? "font-bold text-blue-600" : ""),
                onClick: function onClick() {
                  return setState(function (prev) {
                    return _objectSpread(_objectSpread({}, prev), {}, {
                      selected: cm.id,
                      editingCompositionMessageContentForId: null
                    });
                  });
                },
                children: ["Composition Message (", cm.id.substring(0, 4), "...)"]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                className: "ml-2 text-blue-500 hover:underline text-xs",
                onClick: function onClick(e) {
                  e.stopPropagation();
                  setState(function (prev) {
                    return _objectSpread(_objectSpread({}, prev), {}, {
                      selected: cm.props.closeButtonElement.id,
                      editingCompositionMessageContentForId: cm.id
                    });
                  });
                },
                children: "(Edit Content)"
              })]
            }, cm.id);
          })
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
        className: "btn",
        onClick: function onClick() {
          var parentCmId = safe.editingCompositionMessageContentForId; // Store the ID of the CM whose content was being edited
          setState(function (prevSafe) {
            return _objectSpread(_objectSpread({}, prevSafe), {}, {
              editingCompositionMessageContentForId: null,
              // Exit content editing mode
              selected: parentCmId // Reselect the parent CM itself
            });
          });
        },
        children: "\u2190 Back to Main Elements"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
        className: "text-xs font-semibold mt-2",
        children: ["Editing Content for CM:", " ", (_safe$editingComposit = safe.editingCompositionMessageContentForId) === null || _safe$editingComposit === void 0 ? void 0 : _safe$editingComposit.substring(0, 6), "... (Select elements on canvas to edit)"]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        className: "flex flex-wrap gap-2",
        children: ["cm_image", "cm_text", "cm_optionsbutton"].map(function (t) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
            className: "btn",
            onClick: function onClick() {
              return addCMElement(t);
            },
            children: ["+ ", t === "cm_optionsbutton" ? "Option Btn" : t.substring(3)]
          }, t);
        })
      })]
    }), sel ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "border p-2 rounded text-xs space-y-2",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        className: "flex justify-between items-center",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span", {
          className: "font-medium capitalize",
          children: ["Editing:", " ", sel.type.startsWith("cm_") ? "".concat(sel.type.substring(3), " (in Composition)") : sel.type, sel.parentId && " (for CM: ".concat((_safe$editingComposit2 = safe.editingCompositionMessageContentForId) === null || _safe$editingComposit2 === void 0 ? void 0 : _safe$editingComposit2.substring(0, 4), "...)")]
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        className: "flex gap-2 mt-1",
        children: [!(sel.type === "cm_closebutton" && sel.parentId === safe.editingCompositionMessageContentForId && sel.id === ((_scr$elements$find = scr.elements.find(function (e) {
          return e.id === safe.editingCompositionMessageContentForId;
        })) === null || _scr$elements$find === void 0 ? void 0 : _scr$elements$find.props.closeButtonElement.id)) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          className: "btn bg-red-500 hover:bg-red-600 text-white text-xs py-1 px-2 rounded flex-grow",
          onClick: deleteSelectedElement,
          title: "Delete this ".concat(sel.type.startsWith("cm_") ? sel.type.substring(3) : sel.type, " element"),
          children: ["Delete", " ", sel.type.startsWith("cm_") ? sel.type.substring(3) : sel.type]
        }), safe.editingCompositionMessageContentForId &&
        // If editing CM content
        sel.type !== "cm_closebutton" &&
        // And it's not the main close button
        ["cm_image", "cm_text", "cm_optionsbutton"].includes(sel.type) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          className: "btn bg-green-500 hover:bg-green-600 text-white text-xs py-1 px-2 rounded flex-grow",
          onClick: duplicateCMContentElement,
          title: "Duplicate this ".concat(sel.type.substring(3), " element inside the CM"),
          children: ["Duplicate ", sel.type.substring(3)]
        }), !safe.editingCompositionMessageContentForId &&
        // If editing a main element
        ["video", "ctaimage", "compositionmessage", "video-indicators"].includes(sel.type) &&
        /*#__PURE__*/
        // Added video-indicators here
        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
          className: "btn bg-blue-500 hover:bg-blue-600 text-white text-xs py-1 px-2 rounded flex-grow",
          onClick: duplicateSelectedElement // This is the existing duplicate for main elements
          ,
          title: "Duplicate this ".concat(sel.type, " element"),
          children: ["Duplicate ", sel.type]
        })]
      }), (currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
        className: "text-xs text-gray-500",
        children: "Uploading..."
      }), (currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.error) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("p", {
        className: "text-xs text-red-500",
        children: ["Error: ", currentUploadState.error]
      }), sel.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "video/*",
          onChange: (/*#__PURE__*/function () {
            var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(e) {
              var _e$target$files;
              var f;
              return _regenerator().w(function (_context2) {
                while (1) switch (_context2.n) {
                  case 0:
                    f = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];
                    _context2.n = 1;
                    return handleFileUpload(f, sel.id, "srcUrl");
                  case 1:
                    return _context2.a(2);
                }
              }, _callee2);
            }));
            return function (_x4) {
              return _ref3.apply(this, arguments);
            };
          }()),
          disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading
        }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
          src: sel.props.srcUrl,
          controls: true,
          className: "mt-2 h-20 w-full object-contain border"
        })]
      }), sel.type === "ctaimage" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
          className: "grid grid-cols-2 gap-x-2 gap-y-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1 mt-1",
            children: ["Show at\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              step: "0.1",
              value: sel.props.showAt,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      showAt: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            }), "s"]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1 mt-1",
            children: ["Hide at\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              step: "0.1",
              value: (_sel$props$hideAt = sel.props.hideAt) !== null && _sel$props$hideAt !== void 0 ? _sel$props$hideAt : "" // Use empty string for null for easier clearing
              ,
              placeholder: "never",
              onChange: function onChange(e) {
                var val = e.target.value;
                patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      hideAt: val === "" ? null : +val
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            }), "s"]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1",
          children: ["Animation:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            className: "border w-full",
            value: sel.props.animationEffect,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    animationEffect: e.target.value
                  })
                });
              });
            },
            children: CTA_ANIMATION_EFFECTS.map(function (effect) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: effect.value,
                children: effect.name
              }, effect.value);
            })
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1",
          children: ["Opens Composition Message:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("select", {
            className: "border w-full",
            value: sel.props.opensCompositionMessageId || "",
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    opensCompositionMessageId: e.target.value || null
                  })
                });
              });
            },
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: "",
              children: "None"
            }), compositionMessages.map(function (cm) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("option", {
                value: cm.id,
                children: ["Composition Message (", cm.id.substring(0, 4), "...)"]
              }, cm.id);
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Container"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["BG Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.containerBgColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      containerBgColor: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["Padding (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              value: sel.props.containerPadding,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      containerPadding: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
            className: "border p-1 rounded mt-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
              className: "text-xs font-medium px-1",
              children: "Border"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.containerBorderColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        containerBorderColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Width (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.containerBorderWidth,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        containerBorderWidth: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-16"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Style", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                value: sel.props.containerBorderStyle,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        containerBorderStyle: e.target.value
                      })
                    });
                  });
                },
                className: "border w-full",
                children: BORDER_STYLES.map(function (bs) {
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                    value: bs,
                    children: bs
                  }, bs);
                })
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Radius (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.containerBorderRadius,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        containerBorderRadius: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-16"
              })]
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Image"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "file",
            accept: "image/*",
            onChange: (/*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(e) {
                var _e$target$files2;
                var f;
                return _regenerator().w(function (_context3) {
                  while (1) switch (_context3.n) {
                    case 0:
                      f = (_e$target$files2 = e.target.files) === null || _e$target$files2 === void 0 ? void 0 : _e$target$files2[0];
                      _context3.n = 1;
                      return handleFileUpload(f, sel.id, "srcUrl");
                    case 1:
                      return _context3.a(2);
                  }
                }, _callee3);
              }));
              return function (_x5) {
                return _ref4.apply(this, arguments);
              };
            }()),
            disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading
          }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.srcUrl,
            alt: "CTA Image Preview",
            className: "mt-2 h-20 object-contain border"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block mt-1",
            children: ["Image Width (% of container)", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "10",
              max: "90",
              value: sel.props.imageWidthPercent,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      imageWidthPercent: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Text"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
            className: "border w-full px-1 mt-1",
            value: sel.props.text,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    text: e.target.value
                  })
                });
              });
            }
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            className: "border w-full mt-1",
            value: sel.props.textFont,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textFont: e.target.value
                  })
                });
              });
            },
            children: FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block mt-1",
            children: ["Size (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "8",
              max: "72",
              value: sel.props.textSize,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textSize: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.textColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textColor: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Bold\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "checkbox",
              checked: sel.props.textBold,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textBold: e.target.checked
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["Align", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
              value: sel.props.textAlign,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      textAlign: e.target.value
                    })
                  });
                });
              },
              className: "border w-full",
              children: TEXT_ALIGNS.map(function (ta) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: ta,
                  children: ta
                }, ta);
              })
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Button"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "flex items-center gap-1",
            children: ["Show Button\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "checkbox",
              checked: sel.props.showButton,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      showButton: e.target.checked
                    })
                  });
                });
              }
            })]
          }), sel.props.showButton && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block mt-1",
              children: ["Text\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                className: "border w-full px-1",
                value: sel.props.buttonText,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonText: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Text Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.buttonTextColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonTextColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["BG Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.buttonBgColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonBgColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
              className: "border w-full mt-1",
              value: sel.props.buttonFont,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      buttonFont: e.target.value
                    })
                  });
                });
              },
              children: FONTS.map(function (f) {
                return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                  value: f,
                  children: f.replace(/'/g, "")
                }, f);
              })
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block mt-1",
              children: ["Font Size (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "8",
                max: "48",
                value: sel.props.buttonFontSize,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonFontSize: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-16"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "flex items-center gap-1",
              children: ["Bold\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "checkbox",
                checked: sel.props.buttonFontBold,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonFontBold: e.target.checked
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block mt-1",
              children: ["Padding X (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.buttonPaddingX,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonPaddingX: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-16"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "block",
              children: ["Padding Y (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.buttonPaddingY,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        buttonPaddingY: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-16"
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
              className: "border p-1 rounded mt-1",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
                className: "text-xs font-medium px-1",
                children: "Button Border"
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block",
                children: ["Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                  type: "color",
                  value: sel.props.buttonBorderColor,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderColor: e.target.value
                        })
                      });
                    });
                  }
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block",
                children: ["Width (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                  type: "number",
                  min: "0",
                  value: sel.props.buttonBorderWidth,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderWidth: +e.target.value
                        })
                      });
                    });
                  },
                  className: "border px-1 w-16"
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block",
                children: ["Style", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                  value: sel.props.buttonBorderStyle,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderStyle: e.target.value
                        })
                      });
                    });
                  },
                  className: "border w-full",
                  children: BORDER_STYLES.map(function (bs) {
                    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                      value: bs,
                      children: bs
                    }, bs);
                  })
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
                className: "block",
                children: ["Radius (px)\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                  type: "number",
                  min: "0",
                  value: sel.props.buttonBorderRadius,
                  onChange: function onChange(e) {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          buttonBorderRadius: +e.target.value
                        })
                      });
                    });
                  },
                  className: "border px-1 w-16"
                })]
              })]
            })]
          })]
        })]
      }), sel.type === "compositionmessage" && !safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block",
          children: ["Background Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.bgColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgColor: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Background Opacity\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "0",
            max: "1",
            step: "0.05",
            value: sel.props.bgOpacity,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    bgOpacity: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
          className: "btn mt-2 w-full",
          onClick: function onClick() {
            return setState(_objectSpread(_objectSpread({}, safe), {}, {
              editingCompositionMessageContentForId: sel.id,
              selected: sel.props.closeButtonElement.id
            }));
          },
          children: "Edit Content & Elements"
        })]
      }), sel.type === "cm_optionsbutton" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs font-semibold mt-2 border-t pt-2",
          children: "Option Button Properties:"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Image"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "file",
            accept: "image/*",
            onChange: (/*#__PURE__*/function () {
              var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(e) {
                var _e$target$files3;
                var f;
                return _regenerator().w(function (_context4) {
                  while (1) switch (_context4.n) {
                    case 0:
                      f = (_e$target$files3 = e.target.files) === null || _e$target$files3 === void 0 ? void 0 : _e$target$files3[0];
                      _context4.n = 1;
                      return handleFileUpload(f, sel.id, "srcUrl");
                    case 1:
                      return _context4.a(2);
                  }
                }, _callee4);
              }));
              return function (_x6) {
                return _ref5.apply(this, arguments);
              };
            }()),
            disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading,
            className: "text-xs"
          }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: sel.props.srcUrl,
            alt: "Option Img Preview",
            className: "mt-1 h-12 object-contain border"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block mt-1 text-xs",
            children: ["Image Width (% of button):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              max: "80",
              value: sel.props.imageWidthPercent,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      imageWidthPercent: +e.target.value
                    })
                  });
                });
              },
              className: "border px-1 w-16 ml-1"
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Text"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
            className: "border w-full px-1 mt-1 text-xs",
            value: sel.props.text,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    text: e.target.value
                  })
                });
              });
            }
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
            className: "border w-full text-xs mt-1",
            value: sel.props.textFont,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textFont: e.target.value
                  })
                });
              });
            },
            children: FONTS.map(function (f) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                value: f,
                children: f.replace(/'/g, "")
              }, f);
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "grid grid-cols-2 gap-x-2 items-center mt-1",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Size:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "8",
                max: "72",
                value: sel.props.textSize,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        textSize: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              }), "px"]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.textColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        textColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs flex items-center gap-1",
              children: ["Bold:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "checkbox",
                checked: sel.props.textBold,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        textBold: e.target.checked
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Align:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
                value: sel.props.textAlign,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        textAlign: e.target.value
                      })
                    });
                  });
                },
                className: "border w-full",
                children: TEXT_ALIGNS.map(function (ta) {
                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
                    value: ta,
                    children: ta
                  }, ta);
                })
              })]
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Button Container (Normal State)"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "grid grid-cols-2 gap-x-2 items-center",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["BG Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.bgColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        bgColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Border Color:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.borderColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        borderColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Border Width:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.borderWidth,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        borderWidth: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              }), "px"]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Border Radius:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.borderRadius,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        borderRadius: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              }), "px"]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Padding:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "number",
                min: "0",
                value: sel.props.padding,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        padding: +e.target.value
                      })
                    });
                  });
                },
                className: "border px-1 w-12"
              }), "px"]
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-1",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Button Container (Hover State)"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "grid grid-cols-2 gap-x-2 items-center",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Hover BG:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.hoverBgColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        hoverBgColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Hover Text:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.hoverTextColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        hoverTextColor: e.target.value
                      })
                    });
                  });
                }
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
              className: "text-xs",
              children: ["Hover Border:", " ", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
                type: "color",
                value: sel.props.hoverBorderColor,
                onChange: function onChange(e) {
                  return patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        hoverBorderColor: e.target.value
                      })
                    });
                  });
                }
              })]
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-gray-500 mt-1",
          children: "In active mode, clicking this button will close the message and resume video."
        })]
      }), sel.type === "cm_image" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          type: "file",
          accept: "image/*",
          onChange: (/*#__PURE__*/function () {
            var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(e) {
              var _e$target$files4;
              var f;
              return _regenerator().w(function (_context5) {
                while (1) switch (_context5.n) {
                  case 0:
                    f = (_e$target$files4 = e.target.files) === null || _e$target$files4 === void 0 ? void 0 : _e$target$files4[0];
                    _context5.n = 1;
                    return handleFileUpload(f, sel.id, "srcUrl");
                  case 1:
                    return _context5.a(2);
                }
              }, _callee5);
            }));
            return function (_x7) {
              return _ref6.apply(this, arguments);
            };
          }()),
          disabled: currentUploadState === null || currentUploadState === void 0 ? void 0 : currentUploadState.loading
        }), sel.props.srcUrl && !(currentUploadState !== null && currentUploadState !== void 0 && currentUploadState.loading) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
          src: sel.props.srcUrl,
          alt: "CM Image Preview",
          className: "mt-2 h-20 object-contain border"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
          className: "border w-full px-1 mt-1 text-xs",
          placeholder: "Click URL (optional)",
          value: sel.props.url || "",
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  url: e.target.value
                })
              });
            });
          }
        })]
      }), sel.type === "video-indicators" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block mt-1",
          children: ["Indicator Bar Represents Duration (sec):", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "1",
            value: sel.props.videoDuration,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    videoDuration: Math.max(1, +e.target.value)
                  })
                });
              });
            },
            className: "border px-1 w-20 ml-2"
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-gray-500 mb-1",
          children: "The width of this element on canvas will visually scale to this duration for point placement."
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Indicator Points"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "flex items-center gap-2 mb-2",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "number",
              min: "0",
              step: "0.1",
              placeholder: "Time (sec)",
              id: "newPointTime-".concat(sel.id),
              className: "border px-1 w-24"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
              className: "btn text-xs py-1",
              onClick: function onClick() {
                var timeInput = document.getElementById("newPointTime-".concat(sel.id));
                var time = parseFloat(timeInput.value);
                if (!isNaN(time) && time >= 0) {
                  patchSel(function (o) {
                    return _objectSpread(_objectSpread({}, o), {}, {
                      props: _objectSpread(_objectSpread({}, o.props), {}, {
                        indicatorPoints: _toConsumableArray(new Set([].concat(_toConsumableArray(o.props.indicatorPoints || []), [time]))).sort(function (a, b) {
                          return a - b;
                        })
                      })
                    });
                  });
                  timeInput.value = "";
                } else {
                  alert("Please enter a valid non-negative time for the point.");
                }
              },
              children: "Add Point"
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            className: "max-h-32 overflow-y-auto space-y-1",
            children: [(sel.props.indicatorPoints || []).map(function (pointTime, index) {
              return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                className: "flex items-center justify-between bg-gray-100 p-1 rounded",
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span", {
                  children: ["Point at: ", pointTime.toFixed(1), "s"]
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                  className: "text-red-500 hover:text-red-700 text-xs",
                  onClick: function onClick() {
                    return patchSel(function (o) {
                      return _objectSpread(_objectSpread({}, o), {}, {
                        props: _objectSpread(_objectSpread({}, o.props), {}, {
                          indicatorPoints: o.props.indicatorPoints.filter(function (t) {
                            return t !== pointTime;
                          })
                        })
                      });
                    });
                  },
                  children: "Remove"
                })]
              }, index);
            }), (sel.props.indicatorPoints || []).length === 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
              className: "text-gray-400 text-xs",
              children: "No points added yet."
            })]
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("fieldset", {
          className: "border p-2 rounded mt-2",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("legend", {
            className: "text-xs font-medium px-1",
            children: "Point Appearance"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["Point Color", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.pointColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      pointColor: e.target.value
                    })
                  });
                });
              }
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
            className: "block",
            children: ["Point Pulse Glow", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
              type: "color",
              value: sel.props.pointPulseColor,
              onChange: function onChange(e) {
                return patchSel(function (o) {
                  return _objectSpread(_objectSpread({}, o), {}, {
                    props: _objectSpread(_objectSpread({}, o.props), {}, {
                      pointPulseColor: e.target.value
                    })
                  });
                });
              }
            })]
          })]
        })]
      }), sel.type === "cm_text" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("textarea", {
          className: "border w-full px-1 mt-1",
          value: sel.props.text,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  text: e.target.value
                })
              });
            });
          }
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("select", {
          className: "border w-full",
          value: sel.props.textFont,
          onChange: function onChange(e) {
            return patchSel(function (o) {
              return _objectSpread(_objectSpread({}, o), {}, {
                props: _objectSpread(_objectSpread({}, o.props), {}, {
                  textFont: e.target.value
                })
              });
            });
          },
          children: FONTS.map(function (f) {
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("option", {
              value: f,
              children: f.replace(/'/g, "")
            }, f);
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Size\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "number",
            min: "8",
            max: "120",
            value: sel.props.textSize,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textSize: +e.target.value
                  })
                });
              });
            },
            className: "border px-1 w-16"
          }), "px"]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "flex items-center gap-1",
          children: ["Bold\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "checkbox",
            checked: sel.props.textBold,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textBold: e.target.checked
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block",
          children: ["Text color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.textColor,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    textColor: e.target.value
                  })
                });
              });
            }
          })]
        })]
      }), sel.type === "cm_closebutton" && safe.editingCompositionMessageContentForId && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("label", {
          className: "block",
          children: ["Button Color\xA0", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("input", {
            type: "color",
            value: sel.props.color,
            onChange: function onChange(e) {
              return patchSel(function (o) {
                return _objectSpread(_objectSpread({}, o), {}, {
                  props: _objectSpread(_objectSpread({}, o.props), {}, {
                    color: e.target.value
                  })
                });
              });
            }
          })]
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
          className: "text-xs text-gray-500",
          children: "Size and location are edited on the canvas."
        })]
      })]
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", {
      className: "text-xs text-gray-500",
      children: safe.editingCompositionMessageContentForId ? "Select an element on the canvas to edit its properties, or add new elements using the buttons above." : "Click an element on the canvas to edit, or select an existing Composition Message from the list above to edit its properties or content."
    })]
  });
}

// NEW COMPONENT for rendering CM Options Button in Preview
function CMOptionsButtonPreview(_ref7) {
  var elementProps = _ref7.elementProps,
    isEditingMode = _ref7.isEditingMode,
    onInteraction = _ref7.onInteraction;
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovered = _useState2[0],
    setIsHovered = _useState2[1];

  // Determine styles based on hover state (only for runtime/active mode)
  // In editing mode, we generally show the base style.
  var currentBgColor = !isEditingMode && isHovered ? elementProps.hoverBgColor : elementProps.bgColor;
  var currentTextColor = !isEditingMode && isHovered ? elementProps.hoverTextColor : elementProps.textColor;
  var currentBorderColor = !isEditingMode && isHovered ? elementProps.hoverBorderColor : elementProps.borderColor;
  var handleClick = function handleClick(e) {
    if (!isEditingMode && onInteraction) {
      e.stopPropagation(); // Prevent CM backdrop click if this is a CM content element
      onInteraction(); // This will be closeCompositionMessage
    }
    // In editing mode, clicks are handled by RND for selection
  };
  var handleMouseEnter = function handleMouseEnter() {
    if (!isEditingMode) {
      // Only apply JS hover effect in runtime mode
      setIsHovered(true);
    }
  };
  var handleMouseLeave = function handleMouseLeave() {
    if (!isEditingMode) {
      // Only apply JS hover effect in runtime mode
      setIsHovered(false);
    }
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    className: "cm-options-button-wrapper",
    style: {
      backgroundColor: currentBgColor,
      border: "".concat(elementProps.borderWidth, "px solid ").concat(currentBorderColor),
      borderRadius: "".concat(elementProps.borderRadius, "px"),
      padding: "".concat(elementProps.padding, "px"),
      cursor: isEditingMode ? "default" : "pointer" // Cursor changes in runtime
    },
    onClick: handleClick,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    children: [elementProps.srcUrl && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "cm-options-button-image-area",
      style: {
        width: "".concat(elementProps.imageWidthPercent, "%")
      },
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
        src: elementProps.srcUrl,
        alt: elementProps.text || "Option"
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
      className: "cm-options-button-text-area",
      style: {
        fontFamily: elementProps.textFont,
        fontSize: "".concat(elementProps.textSize, "px"),
        color: currentTextColor,
        fontWeight: elementProps.textBold ? "bold" : "normal",
        textAlign: elementProps.textAlign,
        paddingLeft: elementProps.srcUrl ? "5px" : "0px"
      },
      children: elementProps.text
    })]
  });
}

/* ═════════════════════ PREVIEW ═════════════════════ */
function Preview(_ref8) {
  var state = _ref8.state,
    setState = _ref8.setState,
    readOnly = _ref8.readOnly;
  var safe = state.screens ? state : startState();
  var scr = safe.screens[safe.current];
  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0),
    _useState4 = _slicedToArray(_useState3, 2),
    videoTime = _useState4[0],
    setVideoTime = _useState4[1];
  var videoRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  var videoPausedTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);
  var getSafeUrl = function getSafeUrl(url) {
    if (!url) return "#";
    var trimmedUrl = url.trim();
    if (trimmedUrl.startsWith("https://") || trimmedUrl.startsWith("https://") || trimmedUrl.startsWith("//")) {
      return trimmedUrl;
    }
    return "https://".concat(trimmedUrl);
  };
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (safe.activeCompositionMessageId) {
      var cmExists = scr.elements.some(function (el) {
        return el.id === safe.activeCompositionMessageId && el.type === "compositionmessage";
      });
      if (!cmExists && setState) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            activeCompositionMessageId: null
          });
        });
      }
    }
  }, [safe.activeCompositionMessageId, scr.elements, setState]);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {
    if (safe.editingCompositionMessageContentForId) {
      var cmExists = scr.elements.some(function (el) {
        return el.id === safe.editingCompositionMessageContentForId && el.type === "compositionmessage";
      });
      if (!cmExists && setState) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            editingCompositionMessageContentForId: null,
            selected: null
          });
        });
      }
    }
  }, [safe.editingCompositionMessageContentForId, scr.elements, setState]);
  var commitUpdate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (elementId, patch) {
    if (!setState || readOnly) return;
    setState(function (prevSafe) {
      var newScreens = prevSafe.screens.map(function (sc, currentScreenIndex) {
        if (currentScreenIndex !== prevSafe.current) return sc;
        if (prevSafe.editingCompositionMessageContentForId) {
          var cmId = prevSafe.editingCompositionMessageContentForId;
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (mainEl) {
              if (mainEl.id === cmId && mainEl.type === "compositionmessage") {
                if (mainEl.props.closeButtonElement.id === elementId) {
                  return _objectSpread(_objectSpread({}, mainEl), {}, {
                    props: _objectSpread(_objectSpread({}, mainEl.props), {}, {
                      closeButtonElement: _objectSpread(_objectSpread({}, mainEl.props.closeButtonElement), patch)
                    })
                  });
                }
                var newContentElements = mainEl.props.contentElements.map(function (contentEl) {
                  return contentEl.id === elementId ? _objectSpread(_objectSpread({}, contentEl), patch) : contentEl;
                });
                return _objectSpread(_objectSpread({}, mainEl), {}, {
                  props: _objectSpread(_objectSpread({}, mainEl.props), {}, {
                    contentElements: newContentElements
                  })
                });
              }
              return mainEl;
            })
          });
        } else {
          return _objectSpread(_objectSpread({}, sc), {}, {
            elements: sc.elements.map(function (e) {
              return e.id === elementId ? _objectSpread(_objectSpread({}, e), patch) : e;
            })
          });
        }
      });
      return _objectSpread(_objectSpread({}, prevSafe), {}, {
        screens: newScreens
      });
    });
  }, [readOnly, setState]);
  var selectElement = function selectElement(id) {
    if (!readOnly && setState) {
      setState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          selected: id
        });
      });
    }
  };
  var handleCtaClick = function handleCtaClick(ctaElement) {
    if (ctaElement.props.opensCompositionMessageId) {
      if (videoRef.current) {
        videoPausedTimeRef.current = videoRef.current.currentTime;
        videoRef.current.pause();
      }
      if (setState) {
        setState(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            activeCompositionMessageId: ctaElement.props.opensCompositionMessageId
          });
        });
      } else {
        console.log("Open CM:", ctaElement.props.opensCompositionMessageId);
      }
    }
  };
  var closeCompositionMessage = function closeCompositionMessage() {
    if (videoRef.current) {
      if (videoRef.current.readyState >= 1) {
        // Check if video metadata is loaded
        // Ensure currentTime is not set to NaN or undefined
        videoRef.current.currentTime = videoPausedTimeRef.current || 0;
      }
      videoRef.current.play()["catch"](function (error) {
        return console.error("Error resuming video playback:", error);
      });
    }
    if (setState) {
      setState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          activeCompositionMessageId: null
        });
      });
    }
  };
  var videoElementFromState = scr.elements.find(function (el) {
    return el.type === "video";
  });
  var canvasElementsToRender = [];
  var activeCMOverlayData = null;
  var isEditingCMContentMode = safe.editingCompositionMessageContentForId && !safe.activeCompositionMessageId && !readOnly;
  var isActiveCMRuntimeMode = !!safe.activeCompositionMessageId;
  if (isEditingCMContentMode) {
    var cmBeingEdited = scr.elements.find(function (el) {
      return el.id === safe.editingCompositionMessageContentForId && el.type === "compositionmessage";
    });
    if (cmBeingEdited) {
      var _canvasElementsToRend;
      // 1. Render the video (dimmed)
      if (videoElementFromState) {
        canvasElementsToRender.push(_objectSpread(_objectSpread({}, videoElementFromState), {}, {
          _isBackdropForEditing: true // This will make it non-interactive and potentially styled differently
        }));
      }
      // 2. Render the CM's background as a non-interactive layer
      // We'll create a pseudo-element for this.
      // It needs to be positioned at 0,0 with full canvas width/height
      // and use the CM's background color and opacity.
      // This element will be drawn first among CM elements.
      canvasElementsToRender.push({
        id: "".concat(cmBeingEdited.id, "_bg_editing"),
        type: "_cm_background_editing",
        // Special type for rendering
        x: 0,
        // Full canvas
        y: 0,
        w: meta.canvas.w,
        h: meta.canvas.h,
        props: {
          bgColor: cmBeingEdited.props.bgColor,
          bgOpacity: cmBeingEdited.props.bgOpacity
        },
        _isBackdropForEditing: true,
        // Make it non-interactive
        zIndex: -1 // Ensure it's behind other CM content elements
      });

      // 3. Render CM content elements and close button on top
      (_canvasElementsToRend = canvasElementsToRender).push.apply(_canvasElementsToRend, _toConsumableArray(cmBeingEdited.props.contentElements));
      canvasElementsToRender.push(cmBeingEdited.props.closeButtonElement);
    } else {
      var _canvasElementsToRend2;
      // Fallback if cmBeingEdited is not found (shouldn't happen)
      if (videoElementFromState) canvasElementsToRender.push(videoElementFromState);
      (_canvasElementsToRend2 = canvasElementsToRender).push.apply(_canvasElementsToRend2, _toConsumableArray(scr.elements.filter(function (el) {
        return el.type !== "compositionmessage" && el.type !== "video";
      })));
    }
  } else if (isActiveCMRuntimeMode) {
    var currentActiveCM = scr.elements.find(function (el) {
      return el.id === safe.activeCompositionMessageId && el.type === "compositionmessage";
    });
    if (currentActiveCM) {
      if (videoElementFromState) canvasElementsToRender.push(videoElementFromState);
      activeCMOverlayData = currentActiveCM;
    } else {
      var _canvasElementsToRend3;
      if (videoElementFromState) canvasElementsToRender.push(videoElementFromState);
      (_canvasElementsToRend3 = canvasElementsToRender).push.apply(_canvasElementsToRend3, _toConsumableArray(scr.elements.filter(function (el) {
        return el.type !== "compositionmessage" && el.type !== "video";
      })));
    }
  } else {
    var _canvasElementsToRend4;
    if (videoElementFromState) canvasElementsToRender.push(videoElementFromState);
    (_canvasElementsToRend4 = canvasElementsToRender).push.apply(_canvasElementsToRend4, _toConsumableArray(scr.elements.filter(function (el) {
      return el.type !== "compositionmessage" && el.type !== "video";
    })));
  }
  var uniqueIds = new Set();
  canvasElementsToRender = canvasElementsToRender.filter(function (el) {
    if (uniqueIds.has(el.id)) return false;
    uniqueIds.add(el.id);
    return true;
  });
  var previewCanvasActualBg = safe.bg;
  if (isEditingCMContentMode) {
    previewCanvasActualBg = "#e0e0e0"; // Dim canvas when editing CM *content*
  } else if (safe.selected && !safe.activeCompositionMessageId) {
    var selectedElement = scr.elements.find(function (el) {
      return el.id === safe.selected;
    });
    if (selectedElement && selectedElement.type === "compositionmessage") {
      // If a CM is selected for its own property editing,
      // and it's intended as a full overlay, use its background.
      // For now, we'll assume if a CM is selected, its background should be previewed.
      // Note: This makes the CM's background the *entire canvas background* during its property edit.
      // This might hide other elements if the CM is not fully opaque.
      // A more complex solution would render the CM as a visible layer on top.
      // For simplicity, let's try setting the canvas background.
      previewCanvasActualBg = hexToRgba(selectedElement.props.bgColor, selectedElement.props.bgOpacity);
    }
  }
  var ctaShowAtTimes = readOnly ? scr.elements.filter(function (el) {
    return el.type === "ctaimage" && typeof el.props.showAt === "number";
  }).map(function (el) {
    return {
      id: el.id,
      showAt: el.props.showAt
    };
  }) : [];
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("style", {
      children: "\n        /* Old effects (floatK, etc.) can be kept or removed if definitely not used */\n        @keyframes floatK {0%{transform:translateY(0)}50%{transform:translateY(-10px)}100%{transform:translateY(0)}}\n        .effect-float {animation:floatK 4s ease-in-out infinite;}\n        /* ... other old effect classes ... */\n\n        /* NEW CTAImage Animation Keyframes & Classes */\n        .cta-animated {\n          animation-duration: 0.7s;\n          animation-fill-mode: both; /* Keeps the state of the last keyframe */\n        }\n        @keyframes ctaFadeIn { from { opacity: 0; } to { opacity: 1; } }\n        .cta-animation-fadeIn { animation-name: ctaFadeIn; }\n\n        @keyframes ctaSlideUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }\n        .cta-animation-slideUp { animation-name: ctaSlideUp; }\n\n        @keyframes ctaSlideDown { from { opacity: 0; transform: translateY(-30px); } to { opacity: 1; transform: translateY(0); } }\n        .cta-animation-slideDown { animation-name: ctaSlideDown; }\n\n        @keyframes ctaZoomIn { from { opacity: 0; transform: scale(0.7); } to { opacity: 1; transform: scale(1); } }\n        .cta-animation-zoomIn { animation-name: ctaZoomIn; }\n\n        @keyframes ctaBounceIn {\n          0%, 20%, 40%, 60%, 80%, 100% { animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000); }\n          0% { opacity: 0; transform: scale3d(.3, .3, .3); }\n          20% { transform: scale3d(1.1, 1.1, 1.1); }\n          40% { transform: scale3d(.9, .9, .9); }\n          60% { opacity: 1; transform: scale3d(1.03, 1.03, 1.03); }\n          80% { transform: scale3d(.97, .97, .97); }\n          100% { opacity: 1; transform: scale3d(1, 1, 1); }\n        }\n        .cta-animation-bounceIn { animation-name: ctaBounceIn; }\n\n        /* Styles for Video-Indicators Element */\n        .video-indicator-element-wrapper { \n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center; \n          position: relative;\n          box-sizing: border-box;\n          /* padding: 0 5px; REMOVED - not needed for invisible bar */\n          pointer-events: none; /* ALLOW CLICKS TO PASS THROUGH THE WRAPPER */\n        }\n        .video-indicator-track {\n          width: 100%;\n          height: 100%; /* Make track fill the RND height for point positioning */\n          /* border-radius: 4px; REMOVED - invisible */\n          position: relative; \n          background-color: transparent; \n          pointer-events: none; /* ALLOW CLICKS TO PASS THROUGH THE TRACK */\n        }\n        .video-indicator-point-marker {\n          position: absolute;\n          top: 50%; \n          width: 10px; \n          height: 10px;\n          border-radius: 50%;\n          transform: translate(-50%, -50%); \n          animation: viPointPulseAnimation 1.5s infinite ease-in-out;\n          z-index: 2; \n          pointer-events: none; /* ALSO MAKE POINTS NON-INTERACTIVE */\n        }\n        /* .video-indicator-playhead-marker { ... } REMOVE THIS ENTIRE RULE */\n\n        @keyframes viPointPulseAnimation { \n          0% {\n            transform: translate(-50%, -50%) scale(0.85);\n            opacity: 0.7;\n          }\n          70% {\n            transform: translate(-50%, -50%) scale(1);\n            opacity: 1;\n          }\n          100% {\n            transform: translate(-50%, -50%) scale(0.85);\n            opacity: 0.7;\n          }\n        }\n/* Styles for CM Options Button */\n          .cm-options-button-wrapper { /* Direct child of Rnd for cm_optionsbutton */\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: stretch; /* Stretch image and text areas to fill height */\n          overflow: hidden;\n          cursor: pointer;\n          box-sizing: border-box;\n          transition: background-color 0.2s ease, border-color 0.2s ease; /* Smooth transitions */\n        }\n        .cm-options-button-image-area {\n          flex-shrink: 0;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          height: 100%;\n          overflow: hidden;\n        }\n        .cm-options-button-image-area img {\n          max-width: 100%;\n          max-height: 100%;\n          object-fit: contain;\n        }\n        .cm-options-button-text-area {\n          flex-grow: 1;\n          display: flex;\n          flex-direction: column; /* For text alignment */\n          justify-content: center; /* Default vertical align */\n          height: 100%;\n          overflow: hidden; /* Hide overflowing text */\n          padding: 0 5px; /* Small internal padding for text area */\n          transition: color 0.2s ease; /* Smooth text color transition */\n          white-space: pre-wrap; /* Allow text to wrap */\n          word-break: break-word; /* Break long words */\n        }\n\n      "
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      style: {
        width: meta.canvas.w,
        height: meta.canvas.h,
        background: previewCanvasActualBg,
        position: "relative",
        overflow: "hidden"
      },
      children: [canvasElementsToRender.map(function (el) {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_rnd__WEBPACK_IMPORTED_MODULE_0__.Rnd, {
          size: {
            width: el.w,
            height: el.h
          },
          position: {
            x: el.x,
            y: el.y
          },
          bounds: "parent",
          disableDragging: readOnly || !!activeCMOverlayData || el._isBackdropForEditing,
          enableResizing: !readOnly && !activeCMOverlayData && !el._isBackdropForEditing && (el.type !== "video" || el._isBackdropForEditing === undefined) && !(el.type === "video" && !el._isBackdropForEditing),
          onDragStop: function onDragStop(_, d) {
            return commitUpdate(el.id, {
              x: d.x,
              y: d.y
            });
          },
          onResizeStop: function onResizeStop(_, __, ref, ___, pos) {
            var newSize = {
              w: ref.offsetWidth,
              h: ref.offsetHeight
            };
            if (el.type === "cm_closebutton" && isEditingCMContentMode) {
              var size = Math.max(newSize.w, newSize.h);
              commitUpdate(el.id, {
                w: size,
                h: size,
                x: pos.x,
                y: pos.y
              });
            } else {
              commitUpdate(el.id, {
                w: newSize.w,
                h: newSize.h,
                x: pos.x,
                y: pos.y
              });
            }
          },
          onClick: function onClick(e) {
            e.stopPropagation();
            if (!activeCMOverlayData && !el._isBackdropForEditing && !readOnly) {
              selectElement(el.id);
            }
          },
          style: {
            outline: !activeCMOverlayData && !el._isBackdropForEditing && safe.selected === el.id && !readOnly ? "2px solid #3b82f6" : "none",
            cursor: readOnly || !!activeCMOverlayData || el._isBackdropForEditing ? "default" : "move",
            borderRadius: el.type === "cm_closebutton" && isEditingCMContentMode ? "50%" : "0px",
            background: el.type === "cm_closebutton" && isEditingCMContentMode ? el.props.color : "transparent",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            visibility: activeCMOverlayData && el.type !== "video" && !el._isBackdropForEditing && el.type !== "ctaimage" // Keep ctaimage potentially visible for its own logic
            ? "hidden" : "visible"
          },
          children: [el.type === "_cm_background_editing" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            style: {
              width: "100%",
              height: "100%",
              background: hexToRgba(el.props.bgColor, el.props.bgOpacity),
              position: "absolute",
              top: 0,
              left: 0,
              zIndex: el.zIndex || 0,
              // Use zIndex if provided
              pointerEvents: "none" // Ensure it's not clickable
            }
          }), el.type === "cm_optionsbutton" && isEditingCMContentMode && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CMOptionsButtonPreview, {
            elementProps: el.props,
            isEditingMode: true
            // onInteraction is not needed in editing mode for the button itself
          }), el.type === "video" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("video", {
            ref: videoRef,
            src: el.props.srcUrl || "",
            className: "w-full h-full object-cover",
            controls: true,
            autoPlay: readOnly,
            muted: true,
            loop: true,
            playsInline: true,
            onTimeUpdate: function onTimeUpdate(e) {
              return setVideoTime(e.currentTarget.currentTime);
            },
            style: {
              opacity: activeCMOverlayData ? 0.7 : 1
            }
          }), el.type === "ctaimage" && !isEditingCMContentMode && function (_props$showAt) {
            var props = el.props;
            var isVisibleDueToTime = readOnly ? videoTime >= ((_props$showAt = props.showAt) !== null && _props$showAt !== void 0 ? _props$showAt : 0) && (props.hideAt === null || videoTime < props.hideAt) : true; // Always visible in editor for positioning

            if (!isVisibleDueToTime && readOnly && !activeCMOverlayData) return null;
            var animationClass = isVisibleDueToTime && props.animationEffect !== "none" && !activeCMOverlayData ? "cta-animated cta-animation-".concat(props.animationEffect) : "";
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              className: animationClass // Apply animation class here
              ,
              style: {
                width: "100%",
                height: "100%",
                display: isVisibleDueToTime && !activeCMOverlayData ? "flex" : "none",
                backgroundColor: props.containerBgColor,
                border: "".concat(props.containerBorderWidth, "px ").concat(props.containerBorderStyle, " ").concat(props.containerBorderColor),
                borderRadius: "".concat(props.containerBorderRadius, "px"),
                padding: "".concat(props.containerPadding, "px"),
                boxSizing: "border-box",
                pointerEvents: activeCMOverlayData ? "none" : "auto"
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
                style: {
                  width: "100%",
                  height: "100%",
                  display: "flex",
                  flexDirection: "row",
                  alignItems: "center",
                  gap: "".concat(props.containerPadding / 2 > 0 ? props.containerPadding / 2 : 8, "px"),
                  overflow: "hidden"
                },
                children: [props.srcUrl && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  style: {
                    width: "".concat(props.imageWidthPercent, "%"),
                    height: "100%",
                    flexShrink: 0,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center"
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                    src: props.srcUrl,
                    alt: "CTA Visual",
                    style: {
                      maxWidth: "100%",
                      maxHeight: "100%",
                      objectFit: "contain"
                    }
                  })
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  style: {
                    flexGrow: 1,
                    flexShrink: 1,
                    minWidth: 0,
                    height: "100%",
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "center",
                    overflow: "hidden",
                    fontFamily: props.textFont,
                    fontSize: "".concat(props.textSize, "px"),
                    color: props.textColor,
                    fontWeight: props.textBold ? "bold" : "normal",
                    textAlign: props.textAlign,
                    whiteSpace: "pre-wrap"
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                    style: {
                      maxHeight: "100%",
                      overflowY: "auto",
                      width: "100%"
                    },
                    children: props.text
                  })
                }), props.showButton && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                  style: {
                    flexShrink: 0,
                    height: "100%",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "flex-end"
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
                    onClick: function onClick(e) {
                      e.stopPropagation();
                      if (!activeCMOverlayData) handleCtaClick(el);
                    },
                    style: {
                      fontFamily: props.buttonFont,
                      fontSize: "".concat(props.buttonFontSize, "px"),
                      color: props.buttonTextColor,
                      backgroundColor: props.buttonBgColor,
                      border: "".concat(props.buttonBorderWidth, "px ").concat(props.buttonBorderStyle, " ").concat(props.buttonBorderColor),
                      borderRadius: "".concat(props.buttonBorderRadius, "px"),
                      fontWeight: props.buttonFontBold ? "bold" : "normal",
                      padding: "".concat(props.buttonPaddingY, "px ").concat(props.buttonPaddingX, "px"),
                      cursor: props.opensCompositionMessageId ? "pointer" : "default",
                      whiteSpace: "nowrap"
                    },
                    disabled: !!activeCMOverlayData,
                    children: props.buttonText
                  })
                })]
              })
            });
          }(), el.type === "cm_image" && isEditingCMContentMode && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: el.props.srcUrl || "https://dummyimage.com/150x100/ccc/fff.png&text=Image",
            className: "w-full h-full object-contain",
            alt: "Composition content image",
            style: {
              pointerEvents: readOnly ? "none" : "auto"
            }
          }), el.type === "cm_text" && isEditingCMContentMode && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            className: "w-full h-full overflow-hidden p-1 box-border",
            style: {
              color: el.props.textColor,
              fontFamily: el.props.textFont,
              fontSize: el.props.textSize,
              fontWeight: el.props.textBold ? "bold" : "normal",
              whiteSpace: "pre-wrap",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              textAlign: "center",
              pointerEvents: readOnly ? "none" : "auto"
            },
            children: el.props.text
          }), el.type === "cm_closebutton" && isEditingCMContentMode && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
            style: {
              fontSize: Math.min(el.w, el.h) * 0.6,
              color: "white",
              pointerEvents: "none"
            },
            children: "\u2715"
          }), " ", el.type === "video-indicators" && !isEditingCMContentMode && !activeCMOverlayData && function () {
            var props = el.props;
            var indicatorRepresentsDuration = props.videoDuration > 0 ? props.videoDuration : 60;

            // No need for actualVideoPlayerDuration or playheadReferenceDuration if playhead is gone
            var isCustomize = window.location.href.includes("customize");
            return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              className: "video-indicator-element-wrapper",
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                className: "video-indicator-track",
                style: {
                  backgroundColor: window.location.href.includes("customize") ? props.barColor : "transparent"
                },
                children: (props.indicatorPoints || []).map(function (pointTime, index) {
                  if (indicatorRepresentsDuration <= 0) return null;
                  var leftPercent = pointTime / indicatorRepresentsDuration * 100;
                  leftPercent = Math.max(0, Math.min(100, leftPercent));

                  // Create a more specific shadow for the pulse effect using the prop color
                  var pulseShadowCssValue = "0 0 8px 3px ".concat(hexToRgba(props.pointPulseColor || props.pointColor, 0.7));
                  // For the animation, we'll try to set a CSS variable if the browser supports it well enough in this context
                  // or rely on the animation just doing scale/opacity and the base shadow being the glow.
                  // A simple approach is to have the animation and a static glow from pointPulseColor.

                  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
                    className: "video-indicator-point-marker",
                    style: {
                      left: "".concat(leftPercent, "%"),
                      backgroundColor: props.pointColor,
                      // Apply a static box-shadow for the glow, animation will handle scale/opacity
                      boxShadow: "0 0 6px 2px ".concat(hexToRgba(props.pointPulseColor || props.pointColor, 0.5))
                    },
                    title: "Marker at ".concat(pointTime.toFixed(1), "s")
                  }, "point-".concat(el.id, "-").concat(index));
                })
              })
            });
          }()]
        }, el.id);
      }), readOnly && videoRef.current && videoRef.current.duration > 0 && !activeCMOverlayData && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
        className: "custom-progress-markers-bar",
        children: scr.elements.filter(function (el) {
          return el.type === "ctaimage" && typeof el.props.showAt === "number" && el.props.showAt >= 0;
        }).map(function (ctaElement) {
          var videoDuration = videoRef.current.duration;
          if (videoDuration <= 0) return null; // Should be caught by outer check but good practice

          var positionPercent = ctaElement.props.showAt / videoDuration * 100;

          // Clamp position to be within the visible bar area (0-100%)
          positionPercent = Math.max(0, Math.min(100, positionPercent));
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
            className: "pulse-marker",
            style: {
              left: "".concat(positionPercent, "%")
            },
            title: "CTA '".concat(ctaElement.props.text.substring(0, 20), "...' at ").concat(ctaElement.props.showAt.toFixed(1), "s")
          }, "marker-".concat(ctaElement.id));
        })
      }), activeCMOverlayData && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
        style: {
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          background: hexToRgba(activeCMOverlayData.props.bgColor, activeCMOverlayData.props.bgOpacity),
          zIndex: 1000,
          display: "flex",
          alignItems: "center",
          justifyContent: "center"
        },
        onClick: closeCompositionMessage,
        children: [activeCMOverlayData.props.contentElements.map(function (contentEl) {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
            style: {
              position: "absolute",
              left: contentEl.x,
              top: contentEl.y,
              width: contentEl.w,
              height: contentEl.h
            },
            onClick: function onClick(e) {
              return e.stopPropagation();
            },
            children: [contentEl.type === "cm_image" && (contentEl.props.url ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("a", {
              href: getSafeUrl(contentEl.props.url),
              target: "_blank",
              rel: "noopener noreferrer",
              style: {
                display: "block",
                width: "100%",
                height: "100%"
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
                src: contentEl.props.srcUrl || "https://dummyimage.com/150x100/ccc/fff.png&text=Image",
                alt: "CM content image",
                style: {
                  width: "100%",
                  height: "100%",
                  objectFit: "contain"
                }
              })
            }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
              src: contentEl.props.srcUrl || "https://dummyimage.com/150x100/ccc/fff.png&text=Image",
              alt: "CM content image",
              style: {
                width: "100%",
                height: "100%",
                objectFit: "contain"
              }
            })), contentEl.type === "cm_text" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
              style: {
                color: contentEl.props.textColor,
                fontFamily: contentEl.props.textFont,
                fontSize: contentEl.props.textSize,
                fontWeight: contentEl.props.textBold ? "bold" : "normal",
                width: "100%",
                height: "100%",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                textAlign: "center",
                whiteSpace: "pre-wrap",
                overflow: "hidden"
              },
              children: contentEl.props.text
            }), contentEl.type === "cm_optionsbutton" && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CMOptionsButtonPreview, {
              elementProps: contentEl.props,
              isEditingMode: false,
              onInteraction: closeCompositionMessage
            })]
          }, contentEl.id);
        }), function () {
          var btn = activeCMOverlayData.props.closeButtonElement;
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("button", {
            onClick: function onClick(e) {
              e.stopPropagation();
              closeCompositionMessage();
            },
            style: {
              position: "absolute",
              left: btn.x,
              top: btn.y,
              width: btn.w,
              height: btn.h,
              background: btn.props.color,
              borderRadius: "50%",
              border: "none",
              color: "white",
              fontSize: Math.min(btn.w, btn.h) * 0.5,
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              zIndex: 1001
            },
            "aria-label": "Close message",
            children: "\u2715"
          });
        }()]
      })]
    })]
  });
}

/* ══════════════════ PERSISTENCE ══════════════════ */
function serialize(_x8) {
  return _serialize.apply(this, arguments);
}
function _serialize() {
  _serialize = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(s) {
    var screens, thumbnailHint, firstScreen, videoElement, ctaImageElement, cmWithMessage, cmImageElement;
    return _regenerator().w(function (_context7) {
      while (1) switch (_context7.n) {
        case 0:
          screens = s.screens.map(function (sc) {
            return _objectSpread(_objectSpread({}, sc), {}, {
              elements: sc.elements.map(function (el) {
                var newProps = _objectSpread({}, el.props);
                if (newProps.hasOwnProperty("file")) {
                  delete newProps.file;
                }
                if (newProps.hasOwnProperty("srcUrl")) {
                  newProps.src = newProps.srcUrl;
                  delete newProps.srcUrl;
                }
                if (el.type === "compositionmessage") {
                  var contentElements = el.props.contentElements.map(function (contentEl) {
                    var newContentProps = _objectSpread({}, contentEl.props);
                    if (newContentProps.hasOwnProperty("file")) {
                      delete newContentProps.file;
                    }
                    if (newContentProps.hasOwnProperty("srcUrl")) {
                      newContentProps.src = newContentProps.srcUrl;
                      delete newContentProps.srcUrl;
                    }
                    return _objectSpread(_objectSpread({}, contentEl), {}, {
                      props: newContentProps
                    });
                  });
                  return _objectSpread(_objectSpread({}, el), {}, {
                    props: _objectSpread(_objectSpread({}, newProps), {}, {
                      contentElements: contentElements
                    })
                  });
                }
                return _objectSpread(_objectSpread({}, el), {}, {
                  props: newProps
                });
              })
            });
          });
          thumbnailHint = "";
          if (s.screens && s.screens.length > 0) {
            firstScreen = s.screens[0];
            videoElement = firstScreen.elements.find(function (el) {
              return el.type === "video" && el.props.srcUrl;
            });
            if (videoElement) {
              thumbnailHint = videoElement.props.srcUrl;
            } else {
              ctaImageElement = firstScreen.elements.find(function (el) {
                return el.type === "ctaimage" && el.props.srcUrl;
              });
              if (ctaImageElement) {
                thumbnailHint = ctaImageElement.props.srcUrl;
              } else {
                cmWithMessage = firstScreen.elements.find(function (el) {
                  return el.type === "compositionmessage";
                });
                if (cmWithMessage && cmWithMessage.props.contentElements) {
                  cmImageElement = cmWithMessage.props.contentElements.find(function (cel) {
                    return cel.type === "cm_image" && cel.props.srcUrl;
                  });
                  if (cmImageElement) {
                    thumbnailHint = cmImageElement.props.srcUrl;
                  }
                }
              }
            }
          }
          return _context7.a(2, _objectSpread(_objectSpread({}, s), {}, {
            selected: null,
            activeCompositionMessageId: null,
            editingCompositionMessageContentForId: null,
            uploadStates: {},
            screens: screens,
            _thumbnailHintUrl: thumbnailHint
          }));
      }
    }, _callee7);
  }));
  return _serialize.apply(this, arguments);
}
var deserialize = function deserialize() {
  var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var baseState = startState();
  if (d && d.screens) {
    var deserializedScreens = d.screens.map(function (sc) {
      return _objectSpread(_objectSpread({}, sc), {}, {
        elements: sc.elements.map(function (el) {
          var defaultElement = newElement(el.type, el.parentId); // Get defaults for this type
          var newProps = _objectSpread(_objectSpread({}, defaultElement.props), el.props); // Merge defaults with saved props

          if (newProps.hasOwnProperty("src") && typeof newProps.src === "string") {
            newProps.srcUrl = newProps.src;
            // delete newProps.src; // Optional: remove original 'src' if 'srcUrl' is canonical
          }
          if (el.type === "compositionmessage") {
            var _el$props$closeButton;
            var contentElements = (el.props.contentElements || []).map(function (contentEl) {
              var defaultSubElement = newElement(contentEl.type, el.id);
              var newContentProps = _objectSpread(_objectSpread({}, defaultSubElement.props), contentEl.props);
              if (newContentProps.hasOwnProperty("src") && typeof newContentProps.src === "string") {
                newContentProps.srcUrl = newContentProps.src;
                // delete newContentProps.src;
              }
              return _objectSpread(_objectSpread(_objectSpread({}, defaultSubElement), contentEl), {}, {
                props: newContentProps
              });
            });
            var defaultCMCloseButtonProps = defaultElement.props.closeButtonElement.props;
            var savedCMCloseButtonProps = ((_el$props$closeButton = el.props.closeButtonElement) === null || _el$props$closeButton === void 0 ? void 0 : _el$props$closeButton.props) || {};
            return _objectSpread(_objectSpread(_objectSpread({}, defaultElement), el), {}, {
              props: _objectSpread(_objectSpread({}, newProps), {}, {
                // Already merged default CM props with saved CM props
                contentElements: contentElements,
                closeButtonElement: _objectSpread(_objectSpread(_objectSpread({}, defaultElement.props.closeButtonElement), el.props.closeButtonElement || {}), {}, {
                  parentId: el.id,
                  props: _objectSpread(_objectSpread({}, defaultCMCloseButtonProps), savedCMCloseButtonProps)
                })
              })
            });
          }
          // For ctaimage, video, and other elements, newProps already contains merged defaults
          return _objectSpread(_objectSpread(_objectSpread({}, defaultElement), el), {}, {
            // Overwrites with saved id, x, y, w, h etc.d
            props: newProps // Merged props (new defaults from newElement + saved values)
          });
        })
      });
    });
    return _objectSpread(_objectSpread(_objectSpread({}, baseState), d), {}, {
      selected: null,
      activeCompositionMessageId: null,
      editingCompositionMessageContentForId: null,
      uploadStates: {},
      screens: deserializedScreens
    });
  }
  return baseState;
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!***************************************!*\
  !*** ./simid/vpaid-renderer-entry.js ***!
  \***************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom/client */ "./node_modules/react-dom/client.js");
/* harmony import */ var _templates_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../templates/index */ "./templates/index.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// // // vpaid-renderer-entry.js


 // Adjust path if needed

var vpaidLog = function vpaidLog(message) {
  var _console;
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  (_console = console).log.apply(_console, ["[VPAID_CREATIVE]", message].concat(args));
};
var VpaidCreative = /*#__PURE__*/function () {
  function VpaidCreative() {
    _classCallCheck(this, VpaidCreative);
    vpaidLog("VpaidCreative constructor called");
    this.slotContainer_ = null;
    this.videoSlot_ = null;
    this.creativeData_ = null;
    this.environmentVars_ = null;
    this.eventCallbacks_ = {};
    this.adParamsData_ = null;
    this.currentTemplateId_ = null;
    this.currentTemplateState_ = null;
    this.reactRoot_ = null; // For ReactDOM.createRoot

    this.width_ = 0;
    this.height_ = 0;
    this.viewMode_ = "normal";
    this.desiredBitrate_ = 256;
    this.attributes_ = {
      linear: true,
      width: 0,
      height: 0,
      expanded: false,
      skippableState: false,
      remainingTime: -1,
      duration: -1,
      volume: 1.0,
      icons: false,
      companions: "",
      apiVersion: "2.0"
    };
    this.videoPlaybackState_ = {
      started: false,
      durationChangeFired: false,
      firstQuartileFired: false,
      midpointFired: false,
      thirdQuartileFired: false
    };
    this.videoEventHandlers_ = null; // Initialize here
  }
  return _createClass(VpaidCreative, [{
    key: "handshakeVersion",
    value: function handshakeVersion(version) {
      vpaidLog("handshakeVersion called with player version: ".concat(version));
      return "2.0";
    }
  }, {
    key: "initAd",
    value: function initAd(width, height, viewMode, desiredBitrate, creativeData, environmentVars) {
      var _this = this;
      vpaidLog("initAd: Checking Templates object:", _templates_index__WEBPACK_IMPORTED_MODULE_2__.byId);
      vpaidLog("initAd: Checking ReactDOMClient object:", react_dom_client__WEBPACK_IMPORTED_MODULE_1__);
      vpaidLog("initAd called", {
        width: width,
        height: height,
        viewMode: viewMode,
        desiredBitrate: desiredBitrate,
        // creativeData, // Can be large, log AdParameters separately
        environmentVars: environmentVars
      });
      vpaidLog("Raw AdParameters from creativeData:", creativeData ? creativeData.AdParameters : "undefined");
      this.width_ = width;
      this.height_ = height;
      this.viewMode_ = viewMode;
      this.desiredBitrate_ = desiredBitrate;
      this.creativeData_ = creativeData;
      this.environmentVars_ = environmentVars;
      this.slotContainer_ = environmentVars.slot;
      var providedVideoSlot = environmentVars.videoSlot;
      if (providedVideoSlot instanceof HTMLVideoElement) {
        this.videoSlot_ = providedVideoSlot;
        vpaidLog("Player provided a real <video> element:", this.videoSlot_);
      } else {
        this.videoSlot_ = null; // Explicitly nullify if not a video element
        vpaidLog("Player’s videoSlot was not an HTMLVideoElement or was null/undefined; will create our own if slotContainer_ exists.");
      }
      this.attributes_.width = width;
      this.attributes_.height = height;

      // Reset video playback state for potential re-initialization
      this.videoPlaybackState_ = {
        started: false,
        durationChangeFired: false,
        firstQuartileFired: false,
        midpointFired: false,
        thirdQuartileFired: false
      };
      if (!creativeData || !creativeData.AdParameters) {
        vpaidLog("Error: creativeData or AdParameters missing.");
        this.dispatchVpaidEvent_("AdError", {
          message: "CreativeData or AdParameters not provided."
        });
        return;
      }
      try {
        this.adParamsData_ = JSON.parse(creativeData.AdParameters);
        this.currentTemplateId_ = this.adParamsData_.templateId;
        if (!this.currentTemplateId_ || !_templates_index__WEBPACK_IMPORTED_MODULE_2__.byId[this.currentTemplateId_]) {
          var errorMsg = "Template ID missing or invalid. Received: ".concat(this.currentTemplateId_);
          vpaidLog("Error:", errorMsg);
          this.dispatchVpaidEvent_("AdError", {
            message: errorMsg
          });
          return;
        }
        var Template = _templates_index__WEBPACK_IMPORTED_MODULE_2__.byId[this.currentTemplateId_];
        if (typeof Template.deserialize !== "function") {
          var _errorMsg = "Template ".concat(this.currentTemplateId_, " does not have a deserialize method.");
          vpaidLog("Error:", _errorMsg);
          this.dispatchVpaidEvent_("AdError", {
            message: _errorMsg
          });
          return;
        }
        this.currentTemplateState_ = Template.deserialize(this.adParamsData_.data || {});
        vpaidLog("Deserialized state for template ".concat(this.currentTemplateId_, ":"), this.currentTemplateState_);
      } catch (e) {
        vpaidLog("JSON.parse error on AdParameters:", e.message, "Raw AdParameters:", creativeData.AdParameters);
        this.dispatchVpaidEvent_("AdError", {
          message: "Error parsing AdParameters: ".concat(e.message)
        });
        return;
      }
      var videoUrl = null;
      try {
        var _this$adParamsData_;
        var screens = ((_this$adParamsData_ = this.adParamsData_) === null || _this$adParamsData_ === void 0 || (_this$adParamsData_ = _this$adParamsData_.data) === null || _this$adParamsData_ === void 0 ? void 0 : _this$adParamsData_.screens) || [];
        var _iterator = _createForOfIteratorHelper(screens),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var screen = _step.value;
            if (!Array.isArray(screen.elements)) continue;
            var videoElementData = screen.elements.find(function (el) {
              return el.type === "video" && el.props && el.props.src;
            });
            if (videoElementData) {
              videoUrl = videoElementData.props.src;
              break;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } catch (e) {
        vpaidLog("Error extracting video URL from adParamsData_:", e);
        videoUrl = null;
      }
      if (!videoUrl) {
        vpaidLog("Error: Could not find a video URL inside AdParameters JSON.");
        this.dispatchVpaidEvent_("AdError", {
          message: "Video URL not found in AdParameters."
        });
        return;
      }
      vpaidLog("Resolved videoUrl from JSON:", videoUrl);
      if (this.videoSlot_) {
        vpaidLog("Using player-provided <video> element. Setting src:", videoUrl);
        this.videoSlot_.style.top = "0";
        this.videoSlot_.style.left = "0";
        this.videoSlot_.style.width = this.width_ + "px"; // Be explicit
        this.videoSlot_.style.height = this.height_ + "px"; // Be explicit
        this.videoSlot_.style.zIndex = "1"; // Base z-index for video
        // Ensure it's visible
        this.videoSlot_.style.display = "block"; // or "inline-block"
        this.videoSlot_.style.opacity = "1";
        this.videoSlot_.style.pointerEvents = "none";
        vpaidLog("Set pointer-events: none on player-provided video slot.");
      } else if (this.slotContainer_) {
        // Creative-created
        var vid = document.createElement("video");
        vid.width = this.width_;
        vid.height = this.height_;
        vid.src = videoUrl;
        vid.autoplay = false;
        vid.setAttribute("playsinline", "");
        vid.style.position = "absolute"; // KEY
        vid.style.top = "0"; // KEY
        vid.style.left = "0"; // KEY
        vid.style.pointerEvents = "none";
        vpaidLog("Set pointer-events: none on creative-created video slot.");
        // Clear previous video if any, before appending new one
        var existingVideos = this.slotContainer_.querySelectorAll("video");
        existingVideos.forEach(function (existingVid) {
          if (existingVid !== _this.videoSlot_) {
            // Don't remove if it's already our assigned player slot
            vpaidLog("Removing a pre-existing video element from slotContainer_");
            existingVid.remove();
          }
        });
        this.slotContainer_.appendChild(vid);
        this.videoSlot_ = vid;
      } else {
        vpaidLog("Error: Cannot use or create <video> (no videoSlot_ provided and no slotContainer_).");
        this.dispatchVpaidEvent_("AdError", {
          message: "Cannot find or create an HTMLVideoElement: No video slot provided and no container slot available."
        });
        return;
      }

      // Ensure videoSlot_ is not null before attaching events
      if (!this.videoSlot_) {
        vpaidLog("Error: videoSlot_ is unexpectedly null after creation/assignment attempt.");
        this.dispatchVpaidEvent_("AdError", {
          message: "Failed to initialize video element."
        });
        return;
      }
      this.attachVideoEvents_();

      // Pre-check for duration if metadata loaded quickly (e.g., cached video)
      // The 'loadedmetadata' event will also handle this.
      if (this.videoSlot_.readyState >= HTMLMediaElement.HAVE_METADATA &&
      // More robust check
      this.videoSlot_.duration > 0 && !isNaN(this.videoSlot_.duration) && !this.videoPlaybackState_.durationChangeFired) {
        vpaidLog("Pre-dispatching AdDurationChange (duration: ".concat(this.videoSlot_.duration, ") from initAd"));
        this.attributes_.duration = this.videoSlot_.duration;
        this.dispatchVpaidEvent_("AdDurationChange");
        this.videoPlaybackState_.durationChangeFired = true;
      }
      this.dispatchVpaidEvent_("AdLoaded");
      vpaidLog("initAd successful, AdLoaded dispatched.");
    }
  }, {
    key: "subscribe",
    value: function subscribe(arg1, arg2, arg3) {
      var eventName, callback, context;
      if (typeof arg1 === "string" && typeof arg2 === "function") {
        eventName = arg1;
        callback = arg2;
        context = arg3 || null;
      } else if (typeof arg1 === "function" && typeof arg2 === "string") {
        eventName = arg2;
        callback = arg1;
        context = arg3 || null;
        vpaidLog("Swapped arguments for subscribe. Event: ".concat(eventName));
      } else {
        vpaidLog("subscribe called with unexpected args:", arg1, arg2, arg3);
        return;
      }
      vpaidLog("Subscribing to event: ".concat(eventName));
      if (!this.eventCallbacks_[eventName]) {
        this.eventCallbacks_[eventName] = [];
      }
      this.eventCallbacks_[eventName].push({
        callback: callback,
        context: context
      });
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(eventName, callback) {
      vpaidLog("Unsubscribing from event: ".concat(eventName));
      if (this.eventCallbacks_[eventName]) {
        this.eventCallbacks_[eventName] = this.eventCallbacks_[eventName].filter(function (subscriber) {
          return subscriber.callback !== callback;
        });
      }
    }

    /**
     * Dispatches a VPAID event to all registered listeners.
     * @param {string} eventName The name of the VPAID event to dispatch.
     * @param {Object|string} [eventData] Optional data associated with the event.
     * For 'AdError', this should be an object like { message: "Error description" },
     * and this method will extract the message string to pass to the callback.
     * For other events, this is passed as is.
     */
  }, {
    key: "dispatchVpaidEvent_",
    value: function dispatchVpaidEvent_(eventName, eventData) {
      var dataForCallback;
      if (eventName === "AdError") {
        // For AdError, the VPAID spec expects a single string message.
        // Our internal convention is to pass an object { message: "..." }
        // So, we extract the message string here.
        var errorMessage = eventData && typeof eventData.message === "string" ? eventData.message : "An unspecified error occurred."; // Fallback message
        dataForCallback = errorMessage;
        vpaidLog("Dispatching VPAID event: ".concat(eventName, " with message: \"").concat(errorMessage, "\""), eventData);
      } else {
        dataForCallback = eventData;
        if (eventData === undefined) {
          vpaidLog("Dispatching VPAID event: ".concat(eventName));
        } else if (eventName === "AdClickThru") {
          // VPAID 2.0 spec for AdClickThru
          // The data for AdClickThru is an object: {url:String, id:String, playerHandles:Boolean}
          // Your current eventData for AdClickThru is already in this format.
          dataForCallback = eventData; // Pass the object as is
          vpaidLog("Dispatching VPAID event: ".concat(eventName), eventData);
        } else {
          vpaidLog("Dispatching VPAID event: ".concat(eventName), eventData);
        }
      }
      if (this.eventCallbacks_[eventName]) {
        this.eventCallbacks_[eventName].forEach(function (subscriber) {
          try {
            if (subscriber.context) {
              subscriber.callback.call(subscriber.context, dataForCallback);
            } else {
              subscriber.callback(dataForCallback);
            }
          } catch (e) {
            vpaidLog("Error in VPAID event subscriber for ".concat(eventName, ":"), e.message, e.stack);
          }
        });
      }
    }
  }, {
    key: "startAd",
    value: function startAd() {
      var _this2 = this;
      vpaidLog("startAd called");
      if (!this.videoSlot_) {
        vpaidLog("Error in startAd: videoSlot_ is not initialized.");
        this.dispatchVpaidEvent_("AdError", {
          message: "Cannot start ad: video element not available."
        });
        return;
      }
      this.renderInteractiveLayer_(); // Render React UI

      // It's generally safer to dispatch AdStarted and AdImpression *before* play,
      // as play() can be asynchronous or even fail.
      this.dispatchVpaidEvent_("AdStarted");
      this.dispatchVpaidEvent_("AdImpression"); // Impression is usually when the ad starts rendering content

      vpaidLog("Attempting to play video...");
      var playPromise = this.videoSlot_.play();
      if (playPromise !== undefined) {
        playPromise.then(function () {
          vpaidLog("Video play() promise resolved.");
          // AdVideoStart and AdPlaying are typically handled by video events 'play'/'playing'
        })["catch"](function (error) {
          vpaidLog("Video play() promise rejected:", error.name, error.message);
          // Common reasons: autoplay restrictions, no user gesture.
          // The player might handle this, or we might need to inform it.
          _this2.dispatchVpaidEvent_("AdError", {
            message: "Video playback failed to start automatically: ".concat(error.message)
          });
        });
      } else {
        vpaidLog("videoSlot.play() did not return a promise. Assuming synchronous play or player handles it.");
        // On older browsers or if player handles play, AdVideoStart/AdPlaying will come from events.
      }
    }
  }, {
    key: "stopAd",
    value: function stopAd() {
      vpaidLog("stopAd called");
      if (this.videoSlot_ && typeof this.videoSlot_.pause === "function") {
        this.videoSlot_.pause();
        // Consider also setting src to "" or removing the video element
        // to free up resources, depending on requirements.
        // this.videoSlot_.src = "";
      }
      if (this.reactRoot_) {
        try {
          this.reactRoot_.unmount();
          vpaidLog("React root unmounted.");
        } catch (e) {
          vpaidLog("Error unmounting React root:", e);
        }
        this.reactRoot_ = null;
      }
      this.removeVideoEvents_(); // Detach listeners
      this.dispatchVpaidEvent_("AdStopped");
      vpaidLog("AdStopped dispatched.");
    }
  }, {
    key: "getAdLinear",
    value: function getAdLinear() {
      return this.attributes_.linear;
    }
  }, {
    key: "getAdWidth",
    value: function getAdWidth() {
      return this.attributes_.width;
    }
  }, {
    key: "getAdHeight",
    value: function getAdHeight() {
      return this.attributes_.height;
    }
  }, {
    key: "getAdExpanded",
    value: function getAdExpanded() {
      return this.attributes_.expanded;
    }
  }, {
    key: "getAdSkippableState",
    value: function getAdSkippableState() {
      return this.attributes_.skippableState;
    }
  }, {
    key: "getAdRemainingTime",
    value: function getAdRemainingTime() {
      if (this.videoSlot_ && typeof this.videoSlot_.currentTime === "number" && this.videoSlot_.duration > 0 &&
      // Use live video duration
      !isNaN(this.videoSlot_.duration)) {
        var duration = this.videoSlot_.duration;
        var currentTime = this.videoSlot_.currentTime;
        var remaining = duration - currentTime;
        return remaining > 0 ? remaining : 0;
      }
      return -1; // Default if duration unknown or video not ready
    }
  }, {
    key: "getAdDuration",
    value: function getAdDuration() {
      if (this.videoSlot_ && this.videoSlot_.duration > 0 && !isNaN(this.videoSlot_.duration)) {
        return this.videoSlot_.duration;
      }
      // Fallback to attribute if set, otherwise -1
      return this.attributes_.duration > 0 ? this.attributes_.duration : -1;
    }
  }, {
    key: "getAdVolume",
    value: function getAdVolume() {
      if (this.videoSlot_) {
        // Reflect actual video volume if available
        this.attributes_.volume = this.videoSlot_.volume;
      }
      return this.attributes_.volume;
    }
  }, {
    key: "setAdVolume",
    value: function setAdVolume(volume) {
      vpaidLog("setAdVolume called with: ".concat(volume));
      var newVolume = Math.max(0, Math.min(1, parseFloat(volume)));
      if (isNaN(newVolume)) {
        vpaidLog("Invalid volume value provided to setAdVolume:", volume);
        // Optionally dispatch AdError or just ignore
        return;
      }
      this.attributes_.volume = newVolume;
      if (this.videoSlot_) {
        this.videoSlot_.volume = newVolume;
        // The 'volumechange' event on the video element will dispatch AdVolumeChanged
      } else {
        // If no video slot, still dispatch event as per VPAID spec
        this.dispatchVpaidEvent_("AdVolumeChanged");
      }
      return this.attributes_.volume; // VPAID spec doesn't mandate return but some players might expect it
    }
  }, {
    key: "getAdIcons",
    value: function getAdIcons() {
      return this.attributes_.icons;
    }
  }, {
    key: "getAdCompanionAds",
    value: function getAdCompanionAds() {
      return this.attributes_.companions;
    } // Typo: AdCompanionAds
  }, {
    key: "getAdAPIVersion",
    value: function getAdAPIVersion() {
      return this.attributes_.apiVersion;
    }
  }, {
    key: "resizeAd",
    value: function resizeAd(width, height, viewMode) {
      vpaidLog("resizeAd called", {
        width: width,
        height: height,
        viewMode: viewMode
      });
      this.width_ = width;
      this.height_ = height;
      this.viewMode_ = viewMode;
      this.attributes_.width = width;
      this.attributes_.height = height;
      if (this.videoSlot_) {
        this.videoSlot_.width = width;
        this.videoSlot_.height = height;
      }
      // Re-render interactive layer with new dimensions if it depends on them
      this.renderInteractiveLayer_();
      this.dispatchVpaidEvent_("AdSizeChanged");
    }
  }, {
    key: "pauseAd",
    value: function pauseAd() {
      vpaidLog("pauseAd called");
      if (this.videoSlot_ && typeof this.videoSlot_.pause === "function") {
        this.videoSlot_.pause();
        // AdPaused event is typically dispatched by the 'pause' video event handler
      } else {
        // If no video, or player manages pause, still dispatch event
        this.dispatchVpaidEvent_("AdPaused");
      }
    }
  }, {
    key: "resumeAd",
    value: function resumeAd() {
      var _this3 = this;
      vpaidLog("resumeAd called");
      if (this.videoSlot_ && typeof this.videoSlot_.play === "function") {
        this.videoSlot_.play()["catch"](function (e) {
          vpaidLog("Error on resumeAd play():", e.message);
          // Player might have restrictions
          _this3.dispatchVpaidEvent_("AdError", {
            message: "Failed to resume video: ".concat(e.message)
          });
        });
        // AdPlaying event is typically dispatched by the 'play'/'playing' video event handler
      } else {
        // If no video, or player manages resume, still dispatch event
        this.dispatchVpaidEvent_("AdPlaying");
      }
    }
  }, {
    key: "expandAd",
    value: function expandAd() {
      vpaidLog("expandAd called - Not fully implemented");
      // this.attributes_.expanded = true;
      // this.dispatchVpaidEvent_("AdExpandedChanged"); // VPAID 2.0: AdExpandedChange
      // this.dispatchVpaidEvent_("AdInteraction"); // Optional
    }
  }, {
    key: "collapseAd",
    value: function collapseAd() {
      vpaidLog("collapseAd called - Not fully implemented");
      // this.attributes_.expanded = false;
      // this.dispatchVpaidEvent_("AdExpandedChanged"); // VPAID 2.0: AdExpandedChange
      // this.dispatchVpaidEvent_("AdInteraction"); // Optional
    }
  }, {
    key: "skipAd",
    value: function skipAd() {
      vpaidLog("skipAd called");
      // Check skippableState if you implement it fully
      // if (this.attributes_.skippableState) {
      this.dispatchVpaidEvent_("AdSkipped");
      this.stopAd(); // Per spec, AdSkipped should be followed by AdStopped if it terminates the ad
      // } else {
      //   vpaidLog("Ad is not skippable or skip not allowed yet.");
      //   // Optionally dispatch AdError or just log
      // }
    }
  }, {
    key: "renderInteractiveLayer_",
    value: function renderInteractiveLayer_() {
      var _this4 = this;
      if (!this.currentTemplateId_ || !this.currentTemplateState_ || !this.slotContainer_ // The React root will be a child of slotContainer_
      ) {
        vpaidLog("Cannot render interactive layer: missing template data, state, or slot container.");
        return;
      }
      var TemplateComponent = _templates_index__WEBPACK_IMPORTED_MODULE_2__.byId[this.currentTemplateId_];
      if (!TemplateComponent || typeof TemplateComponent.Preview !== "function") {
        vpaidLog("Error: Template or Template.Preview not found for ID: ".concat(this.currentTemplateId_));
        this.dispatchVpaidEvent_("AdError", {
          message: "Rendering component not found for template ".concat(this.currentTemplateId_)
        });
        return;
      }
      try {
        // Create a dedicated div for React inside the slotContainer_ if not already present
        // This helps isolate React rendering from the video element if they share slotContainer_
        var reactContainer = this.slotContainer_.querySelector(".vpaid-react-interactive-layer");
        if (!reactContainer) {
          reactContainer = document.createElement("div");
          reactContainer.className = "vpaid-react-interactive-layer";
          reactContainer.style.position = "absolute"; // KEY
          reactContainer.style.top = "0"; // KEY
          reactContainer.style.left = "0"; // KEY
          reactContainer.style.width = "100%";
          reactContainer.style.height = "100%";
          reactContainer.style.pointerEvents = "auto"; // Changed from 'none' to 'auto' previously, good.
          // The debug styles:

          this.slotContainer_.appendChild(reactContainer);
        }
        if (!reactContainer.style.border) {
          // Add only once or if not present

          vpaidLog("DEBUG: Applied debug border and z-index to reactContainer.");
        }
        if (!this.reactRoot_) {
          this.reactRoot_ = react_dom_client__WEBPACK_IMPORTED_MODULE_1__.createRoot(reactContainer);
          vpaidLog("Created React root.");
        }
        this.reactRoot_.render(
        /*#__PURE__*/
        // <React.StrictMode> // StrictMode can cause double renders in dev, be mindful for VPAID
        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(TemplateComponent.Preview, {
          state: this.currentTemplateState_,
          setState: function setState(updater) {
            vpaidLog("Template Preview setState called. Updater:", _typeof(updater));
            var oldState = _this4.currentTemplateState_;
            var newState;
            if (typeof updater === "function") {
              newState = updater(oldState);
            } else {
              newState = _objectSpread(_objectSpread({}, oldState), updater);
            }
            _this4.currentTemplateState_ = newState;
            // Re-render if state changes. Avoid infinite loops.
            // This direct call to renderInteractiveLayer_ from setState might be risky.
            // Better if Preview component manages its own re-renders based on prop changes.
            // For now, let's assume it's needed for external VPAID actions.
            // this.renderInteractiveLayer_(); // Be cautious with this.
            vpaidLog("Template state updated:", _this4.currentTemplateState_);
          },
          readOnly: true // Typically true in VPAID context, player controls ad.
          ,
          onVpaidAction: this.handleVpaidAction.bind(this),
          videoElementFromSimid: this.videoSlot_ // Pass the video element
          // Pass dimensions for responsive templates
          // width={this.width_}
          // height={this.height_}
        })
        // </React.StrictMode>
        );
        vpaidLog("Template ".concat(this.currentTemplateId_, " Preview rendered/updated."));
      } catch (e) {
        vpaidLog("Error rendering React Preview for VPAID:", e.message, e.stack);
        this.dispatchVpaidEvent_("AdError", {
          message: "Error rendering ad's interactive layer: ".concat(e.message)
        });
      }
    }
  }, {
    key: "handleVpaidAction",
    value: function handleVpaidAction(action) {
      vpaidLog("handleVpaidAction received:", action);
      if (!action || !action.type) {
        vpaidLog("Invalid action received in handleVpaidAction");
        return;
      }
      switch (action.type) {
        case "OPEN_COMPOSITION_MESSAGE":
          vpaidLog("Action: OPEN_COMPOSITION_MESSAGE", action.payload);
          this.dispatchVpaidEvent_("AdInteraction", {
            id: "compositionOpened"
          }); // VPAID 2.0: AdInteraction takes no params
          // but some players might use an ID.
          // For strictness: this.dispatchVpaidEvent_("AdInteraction");
          if (this.videoSlot_ && typeof this.videoSlot_.pause === "function") {
            this.videoSlot_.pause(); // AdPaused will be fired by video event
          }
          this.currentTemplateState_ = _objectSpread(_objectSpread({}, this.currentTemplateState_), {}, {
            activeCompositionMessageId: action.payload.messageId
          });
          this.renderInteractiveLayer_(); // Re-render to show composition
          // AdPaused is fired by video 'pause' event, no need to dispatch here.
          break;
        case "CLOSE_COMPOSITION_MESSAGE":
          vpaidLog("Action: CLOSE_COMPOSITION_MESSAGE", action.payload);
          this.dispatchVpaidEvent_("AdInteraction", {
            id: "compositionClosed"
          });
          if (this.videoSlot_ && typeof this.videoSlot_.play === "function") {
            this.videoSlot_.play()["catch"](function (e) {
              return vpaidLog("Error playing video on composition close:", e.message);
            });
            // AdPlaying will be fired by video event
          }
          this.currentTemplateState_ = _objectSpread(_objectSpread({}, this.currentTemplateState_), {}, {
            activeCompositionMessageId: null
          });
          this.renderInteractiveLayer_(); // Re-render to hide composition
          // AdPlaying is fired by video 'play'/'playing' event.
          break;
        case "CLICKTHROUGH":
          // This needs to match the type sent from Preview
          vpaidLog("Action: CLICKTHROUGH", action.payload);
          this.dispatchVpaidEvent_("AdClickThru", {
            // VPAID Standard Event Name
            url: action.payload.url || "",
            id: action.payload.id || "ctaClick",
            playerHandles: action.payload.playerHandles !== undefined ? action.payload.playerHandles : true
          });
          break;
        case "SET_PROGRESS":
          // Example custom action from template
          if (action.payload && typeof action.payload.time === "number" && this.videoSlot_) {
            vpaidLog("Action: SET_PROGRESS to ".concat(action.payload.time));
            this.videoSlot_.currentTime = action.payload.time;
          }
          break;
        default:
          vpaidLog("Unknown action type in handleVpaidAction:", action.type);
      }
    }
  }, {
    key: "attachVideoEvents_",
    value: function attachVideoEvents_() {
      var _this5 = this;
      if (!this.videoSlot_) {
        vpaidLog("attachVideoEvents_: videoSlot_ is null. Cannot attach events.");
        return;
      }
      // Ensure previous listeners are removed if any (e.g., on re-init)
      this.removeVideoEvents_();
      vpaidLog("Attaching video events to:", this.videoSlot_);
      this.videoEventHandlers_ = {
        loadedmetadata: function loadedmetadata() {
          var _this5$videoSlot_, _this5$videoSlot_2;
          vpaidLog("Video event: loadedmetadata. Duration:", (_this5$videoSlot_ = _this5.videoSlot_) === null || _this5$videoSlot_ === void 0 ? void 0 : _this5$videoSlot_.duration, "ReadyState:", (_this5$videoSlot_2 = _this5.videoSlot_) === null || _this5$videoSlot_2 === void 0 ? void 0 : _this5$videoSlot_2.readyState);
          if (_this5.videoSlot_ &&
          // Check again, might have been destroyed
          _this5.videoSlot_.duration > 0 && !isNaN(_this5.videoSlot_.duration) && !_this5.videoPlaybackState_.durationChangeFired) {
            _this5.attributes_.duration = _this5.videoSlot_.duration;
            _this5.dispatchVpaidEvent_("AdDurationChange");
            _this5.videoPlaybackState_.durationChangeFired = true;
            vpaidLog("Dispatched AdDurationChange (duration: ".concat(_this5.attributes_.duration, ") from loadedmetadata"));
          }
        },
        // 'play' event: Fired when playback is requested (e.g., .play() called or autoplay starts)
        play: function play() {
          var _this5$videoSlot_3;
          vpaidLog("Video event: play. Paused:", (_this5$videoSlot_3 = _this5.videoSlot_) === null || _this5$videoSlot_3 === void 0 ? void 0 : _this5$videoSlot_3.paused);
          // AdVideoStart should fire only once when video actually begins for the first time.
          if (!_this5.videoPlaybackState_.started) {
            _this5.dispatchVpaidEvent_("AdVideoStart");
            _this5.videoPlaybackState_.started = true;
            vpaidLog("Dispatched AdVideoStart from 'play'.");
          }
          // AdPlaying indicates playback is active or resuming.
          _this5.dispatchVpaidEvent_("AdPlaying");
          vpaidLog("Dispatched AdPlaying from 'play'.");
        },
        // 'playing' event: Fired when playback has actually started after a delay for buffering.
        // This can be a more reliable source for AdVideoStart if 'play' is too early.
        playing: function playing() {
          var _this5$videoSlot_4;
          vpaidLog("Video event: playing. Paused:", (_this5$videoSlot_4 = _this5.videoSlot_) === null || _this5$videoSlot_4 === void 0 ? void 0 : _this5$videoSlot_4.paused);
          if (!_this5.videoPlaybackState_.started) {
            _this5.dispatchVpaidEvent_("AdVideoStart");
            _this5.videoPlaybackState_.started = true;
            vpaidLog("Dispatched AdVideoStart from 'playing' (if not already from 'play').");
          }
          // Ensure AdPlaying is fired if 'play' was missed or if resuming after buffering.
          if (_this5.videoSlot_ && !_this5.videoSlot_.paused) {
            _this5.dispatchVpaidEvent_("AdPlaying");
            vpaidLog("Dispatched AdPlaying from 'playing'.");
          }
        },
        pause: function pause() {
          vpaidLog("Video event: pause");
          _this5.dispatchVpaidEvent_("AdPaused");
        },
        ended: function ended() {
          vpaidLog("Video event: ended");
          // Ensure quartiles are fired if video ends prematurely or is very short
          var duration = _this5.attributes_.duration;
          if (duration > 0) {
            // Only fire if duration is known
            if (!_this5.videoPlaybackState_.firstQuartileFired) {
              _this5.dispatchVpaidEvent_("AdVideoFirstQuartile");
              _this5.videoPlaybackState_.firstQuartileFired = true;
              vpaidLog("Dispatched AdVideoFirstQuartile on ended (catch-up).");
            }
            if (!_this5.videoPlaybackState_.midpointFired) {
              _this5.dispatchVpaidEvent_("AdVideoMidpoint");
              _this5.videoPlaybackState_.midpointFired = true;
              vpaidLog("Dispatched AdVideoMidpoint on ended (catch-up).");
            }
            if (!_this5.videoPlaybackState_.thirdQuartileFired) {
              _this5.dispatchVpaidEvent_("AdVideoThirdQuartile");
              _this5.videoPlaybackState_.thirdQuartileFired = true;
              vpaidLog("Dispatched AdVideoThirdQuartile on ended (catch-up).");
            }
          }
          _this5.dispatchVpaidEvent_("AdVideoComplete");
          vpaidLog("Dispatched AdVideoComplete.");
        },
        timeupdate: function timeupdate() {
          if (!_this5.videoSlot_ || !_this5.videoPlaybackState_.started) return;
          var currentTime = _this5.videoSlot_.currentTime;
          // Use live duration from video element for quartiles, fallback to attribute for AdRemainingTimeChange
          var liveDuration = _this5.videoSlot_.duration > 0 && !isNaN(_this5.videoSlot_.duration) ? _this5.videoSlot_.duration : _this5.attributes_.duration;
          if (liveDuration <= 0) return; // Can't calculate progress without duration

          // AdRemainingTimeChange
          // VPAID spec implies this should be available once duration is known.
          // We calculate it here, but the getter getAdRemainingTime() is what the player calls.
          // Firing AdRemainingTimeChange is optional but good practice if player relies on it.
          var newRemainingTime = liveDuration - currentTime;
          var currentRemainingTimeAttr = _this5.attributes_.remainingTime;
          _this5.attributes_.remainingTime = newRemainingTime > 0 ? newRemainingTime : 0;

          // Only dispatch if it has meaningfully changed (e.g., by at least a second, or first time)
          // This avoids too many events. For now, dispatching if different.
          if (Math.abs(_this5.attributes_.remainingTime - currentRemainingTimeAttr) > 0.001 || currentRemainingTimeAttr === -1) {
            _this5.dispatchVpaidEvent_("AdRemainingTimeChange");
          }

          // Quartiles
          if (!_this5.videoPlaybackState_.firstQuartileFired && currentTime >= liveDuration * 0.25) {
            _this5.dispatchVpaidEvent_("AdVideoFirstQuartile");
            _this5.videoPlaybackState_.firstQuartileFired = true;
            vpaidLog("Dispatched AdVideoFirstQuartile.");
          }
          if (!_this5.videoPlaybackState_.midpointFired && currentTime >= liveDuration * 0.5) {
            _this5.dispatchVpaidEvent_("AdVideoMidpoint");
            _this5.videoPlaybackState_.midpointFired = true;
            vpaidLog("Dispatched AdVideoMidpoint.");
          }
          if (!_this5.videoPlaybackState_.thirdQuartileFired && currentTime >= liveDuration * 0.75) {
            _this5.dispatchVpaidEvent_("AdVideoThirdQuartile");
            _this5.videoPlaybackState_.thirdQuartileFired = true;
            vpaidLog("Dispatched AdVideoThirdQuartile.");
          }
        },
        volumechange: function volumechange() {
          if (_this5.videoSlot_) {
            // Check if videoSlot still exists
            var currentVideoVolume = _this5.videoSlot_.volume;
            if (_this5.attributes_.volume !== currentVideoVolume) {
              _this5.attributes_.volume = currentVideoVolume;
              _this5.dispatchVpaidEvent_("AdVolumeChanged");
              vpaidLog("Dispatched AdVolumeChanged (volume: ".concat(_this5.attributes_.volume, ") from volumechange event"));
            }
          }
        },
        error: function error(event) {
          var videoError = _this5.videoSlot_ ? _this5.videoSlot_.error : null;
          var errorCode = videoError ? videoError.code : "Unknown";
          var errorMessage = videoError ? videoError.message : "An unknown video error occurred.";
          vpaidLog("Video event: error. Code: ".concat(errorCode, ", Message: \"").concat(errorMessage, "\""), event, videoError);
          _this5.dispatchVpaidEvent_("AdError", {
            message: "Video playback error (Code: ".concat(errorCode, "): ").concat(errorMessage)
          });
        }
        // Optional: useful for debugging
        // loadeddata: () => vpaidLog("Video event: loadeddata. ReadyState:", this.videoSlot_?.readyState),
        // progress: () => vpaidLog("Video event: progress (downloading). Buffered:", this.videoSlot_?.buffered.length ? this.videoSlot_.buffered.end(0) : 0),
        // waiting: () => vpaidLog("Video event: waiting (buffering)"),
        // seeking: () => vpaidLog("Video event: seeking"),
        // seeked: () => vpaidLog("Video event: seeked"),
      };
      for (var eventName in this.videoEventHandlers_) {
        if (this.videoEventHandlers_.hasOwnProperty(eventName)) {
          this.videoSlot_.addEventListener(eventName, this.videoEventHandlers_[eventName]);
        }
      }
      vpaidLog("Video event listeners attached.");
    }
  }, {
    key: "removeVideoEvents_",
    value: function removeVideoEvents_() {
      if (!this.videoSlot_ || !this.videoEventHandlers_) {
        // vpaidLog("removeVideoEvents_: No videoSlot or no handlers to remove.");
        return;
      }
      vpaidLog("Removing video event listeners from:", this.videoSlot_);
      for (var eventName in this.videoEventHandlers_) {
        if (this.videoEventHandlers_.hasOwnProperty(eventName) && typeof this.videoEventHandlers_[eventName] === "function") {
          this.videoSlot_.removeEventListener(eventName, this.videoEventHandlers_[eventName]);
        }
      }
      this.videoEventHandlers_ = null; // Clear handlers after removing
      vpaidLog("Video event listeners removed.");
    }
  }]);
}(); // Ensure getVPAIDAd is globally accessible
window.getVPAIDAd = function () {
  console.log("[VPAID_CREATIVE] Global getVPAIDAd called by player.");
  return new VpaidCreative();
};

// For local testing, you might want to expose the class or an instance
// window.VpaidCreative = VpaidCreative;
// window.myVpaidAd = new VpaidCreative(); // Be careful with global instances
})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});